var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2138";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__8951__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__8951 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__8951__delegate.call(this, args);
    };
    G__8951.cljs$lang$maxFixedArity = 0;
    G__8951.cljs$lang$applyTo = function(arglist__8952) {
      var args = cljs.core.seq(arglist__8952);
      return G__8951__delegate(args);
    };
    G__8951.cljs$core$IFn$_invoke$arity$variadic = G__8951__delegate;
    return G__8951;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3388__auto__ = ty;
    if (cljs.core.truth_(and__3388__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3388__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4242__auto___8953 = len;
  var i_8954 = 0;
  while (true) {
    if (i_8954 < n__4242__auto___8953) {
      new_arr[i_8954] = arr[i_8954];
      var G__8955 = i_8954 + 1;
      i_8954 = G__8955;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__8956__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__8956 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8956__delegate.call(this, array, i, idxs);
    };
    G__8956.cljs$lang$maxFixedArity = 2;
    G__8956.cljs$lang$applyTo = function(arglist__8957) {
      var array = cljs.core.first(arglist__8957);
      arglist__8957 = cljs.core.next(arglist__8957);
      var i = cljs.core.first(arglist__8957);
      var idxs = cljs.core.rest(arglist__8957);
      return G__8956__delegate(array, i, idxs);
    };
    G__8956.cljs$core$IFn$_invoke$arity$variadic = G__8956__delegate;
    return G__8956;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__8958__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__8958 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__8958__delegate.call(this, array, idx, idx2, idxv);
    };
    G__8958.cljs$lang$maxFixedArity = 3;
    G__8958.cljs$lang$applyTo = function(arglist__8959) {
      var array = cljs.core.first(arglist__8959);
      arglist__8959 = cljs.core.next(arglist__8959);
      var idx = cljs.core.first(arglist__8959);
      arglist__8959 = cljs.core.next(arglist__8959);
      var idx2 = cljs.core.first(arglist__8959);
      var idxv = cljs.core.rest(arglist__8959);
      return G__8958__delegate(array, idx, idx2, idxv);
    };
    G__8958.cljs$core$IFn$_invoke$arity$variadic = G__8958__delegate;
    return G__8958;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj8961 = {};
  return obj8961;
}();
cljs.core.IFn = function() {
  var obj8963 = {};
  return obj8963;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj8965 = {};
  return obj8965;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3388__auto__ = value;
    if (and__3388__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4021__auto__ = value == null ? null : value;
    return function() {
      var or__3400__auto__ = cljs.core._clone[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._clone["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj8967 = {};
  return obj8967;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._count[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._count["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj8969 = {};
  return obj8969;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._empty[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._empty["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj8971 = {};
  return obj8971;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._conj[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._conj["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj8973 = {};
  return obj8973;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._nth[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._nth["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._nth[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._nth["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj8975 = {};
  return obj8975;
}();
cljs.core.ISeq = function() {
  var obj8977 = {};
  return obj8977;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._rest[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._rest["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj8979 = {};
  return obj8979;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._next[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._next["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj8981 = {};
  return obj8981;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3388__auto__ = o;
      if (and__3388__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4021__auto__ = o == null ? null : o;
      return function() {
        var or__3400__auto__ = cljs.core._lookup[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._lookup["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3388__auto__ = o;
      if (and__3388__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4021__auto__ = o == null ? null : o;
      return function() {
        var or__3400__auto__ = cljs.core._lookup[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._lookup["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj8983 = {};
  return obj8983;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj8985 = {};
  return obj8985;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._dissoc[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dissoc["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj8987 = {};
  return obj8987;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._key[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._key["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._val[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._val["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj8989 = {};
  return obj8989;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._disjoin[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._disjoin["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj8991 = {};
  return obj8991;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._peek[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._peek["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._pop[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pop["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj8993 = {};
  return obj8993;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_n[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj8995 = {};
  return obj8995;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._deref[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._deref["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj8997 = {};
  return obj8997;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj8999 = {};
  return obj8999;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._meta[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._meta["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj9001 = {};
  return obj9001;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._with_meta[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._with_meta["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj9003 = {};
  return obj9003;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._reduce[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._reduce["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._reduce[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._reduce["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj9005 = {};
  return obj9005;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj9007 = {};
  return obj9007;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._equiv[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._equiv["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj9009 = {};
  return obj9009;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._hash[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._hash["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj9011 = {};
  return obj9011;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._seq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._seq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj9013 = {};
  return obj9013;
}();
cljs.core.IList = function() {
  var obj9015 = {};
  return obj9015;
}();
cljs.core.IRecord = function() {
  var obj9017 = {};
  return obj9017;
}();
cljs.core.IReversible = function() {
  var obj9019 = {};
  return obj9019;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._rseq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._rseq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj9021 = {};
  return obj9021;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._entry_key[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._entry_key["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._comparator[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._comparator["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj9023 = {};
  return obj9023;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3388__auto__ = writer;
    if (and__3388__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4021__auto__ = writer == null ? null : writer;
    return function() {
      var or__3400__auto__ = cljs.core._write[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._write["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3388__auto__ = writer;
    if (and__3388__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4021__auto__ = writer == null ? null : writer;
    return function() {
      var or__3400__auto__ = cljs.core._flush[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._flush["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj9025 = {};
  return obj9025;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._pr_writer[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj9027 = {};
  return obj9027;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3388__auto__ = d;
    if (and__3388__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4021__auto__ = d == null ? null : d;
    return function() {
      var or__3400__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj9029 = {};
  return obj9029;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._notify_watches[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._add_watch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._add_watch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._remove_watch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj9031 = {};
  return obj9031;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._as_transient[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._as_transient["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj9033 = {};
  return obj9033;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj9035 = {};
  return obj9035;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj9037 = {};
  return obj9037;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj9039 = {};
  return obj9039;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj9041 = {};
  return obj9041;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj9043 = {};
  return obj9043;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._compare[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._compare["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj9045 = {};
  return obj9045;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._drop_first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._drop_first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj9047 = {};
  return obj9047;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj9049 = {};
  return obj9049;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_next[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj9051 = {};
  return obj9051;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._name[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._name["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._namespace[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._namespace["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3388__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3388__auto__) {
        return b.ns;
      } else {
        return and__3388__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3811__auto__ = self__._hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__9053 = null;
  var G__9053__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__9053__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__9053 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9053__2.call(this, self__, coll);
      case 3:
        return G__9053__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9053;
}();
cljs.core.Symbol.prototype.apply = function(self__, args9052) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9052)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.cljs$core$ICloneable$ = true;
cljs.core.Symbol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, self__._meta);
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__9055 = coll;
      if (G__9055) {
        var bit__4037__auto__ = G__9055.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4037__auto__ || G__9055.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__9057 = coll;
      if (G__9057) {
        var bit__4037__auto__ = G__9057.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__9057.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__9059 = coll;
      if (G__9059) {
        var bit__4037__auto__ = G__9059.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__9059.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__9061 = coll;
      if (G__9061) {
        var bit__4037__auto__ = G__9061.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4037__auto__ || G__9061.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__9062__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__9063 = y;
            var G__9064 = cljs.core.first.call(null, more);
            var G__9065 = cljs.core.next.call(null, more);
            x = G__9063;
            y = G__9064;
            more = G__9065;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9062 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9062__delegate.call(this, x, y, more);
    };
    G__9062.cljs$lang$maxFixedArity = 2;
    G__9062.cljs$lang$applyTo = function(arglist__9066) {
      var x = cljs.core.first(arglist__9066);
      arglist__9066 = cljs.core.next(arglist__9066);
      var y = cljs.core.first(arglist__9066);
      var more = cljs.core.rest(arglist__9066);
      return G__9062__delegate(x, y, more);
    };
    G__9062.cljs$core$IFn$_invoke$arity$variadic = G__9062__delegate;
    return G__9062;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__9067 = nval;
            var G__9068 = n + 1;
            val = G__9067;
            n = G__9068;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9069 = nval;
          var G__9070 = n + 1;
          val__$1 = G__9069;
          n = G__9070;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9071 = nval;
          var G__9072 = n + 1;
          val__$1 = G__9071;
          n = G__9072;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__9073 = nval;
            var G__9074 = n + 1;
            val = G__9073;
            n = G__9074;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9075 = nval;
          var G__9076 = n + 1;
          val__$1 = G__9075;
          n = G__9076;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9077 = nval;
          var G__9078 = n + 1;
          val__$1 = G__9077;
          n = G__9078;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__9080 = x;
  if (G__9080) {
    var bit__4044__auto__ = G__9080.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4044__auto__ || G__9080.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__9080.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__9080);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__9080);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__9082 = x;
  if (G__9082) {
    var bit__4044__auto__ = G__9082.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4044__auto__ || G__9082.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__9082.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__9082);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__9082);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__9083 = sn;
      s = G__9083;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__9084__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__9085 = conj.call(null, coll, x);
          var G__9086 = cljs.core.first.call(null, xs);
          var G__9087 = cljs.core.next.call(null, xs);
          coll = G__9085;
          x = G__9086;
          xs = G__9087;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__9084 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9084__delegate.call(this, coll, x, xs);
    };
    G__9084.cljs$lang$maxFixedArity = 2;
    G__9084.cljs$lang$applyTo = function(arglist__9088) {
      var coll = cljs.core.first(arglist__9088);
      arglist__9088 = cljs.core.next(arglist__9088);
      var x = cljs.core.first(arglist__9088);
      var xs = cljs.core.rest(arglist__9088);
      return G__9084__delegate(coll, x, xs);
    };
    G__9084.cljs$core$IFn$_invoke$arity$variadic = G__9084__delegate;
    return G__9084;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__9089 = cljs.core.next.call(null, s);
      var G__9090 = acc + 1;
      s = G__9089;
      acc = G__9090;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__9092 = coll;
      if (G__9092) {
        var bit__4037__auto__ = G__9092.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4037__auto__ || G__9092.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__9093 = cljs.core.next.call(null, coll);
              var G__9094 = n - 1;
              coll = G__9093;
              n = G__9094;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__9095 = cljs.core.next.call(null, coll);
              var G__9096 = n - 1;
              var G__9097 = not_found;
              coll = G__9095;
              n = G__9096;
              not_found = G__9097;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__9102 = coll;
        if (G__9102) {
          var bit__4037__auto__ = G__9102.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4037__auto__ || G__9102.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__9103 = coll;
                  if (G__9103) {
                    var bit__4044__auto__ = G__9103.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4044__auto__ || G__9103.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__9103.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9103);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9103);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__9104 = coll;
        if (G__9104) {
          var bit__4037__auto__ = G__9104.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4037__auto__ || G__9104.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__9105 = coll;
                  if (G__9105) {
                    var bit__4044__auto__ = G__9105.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4044__auto__ || G__9105.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__9105.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9105);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9105);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__9108 = o;
        if (G__9108) {
          var bit__4037__auto__ = G__9108.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4037__auto__ || G__9108.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__9109 = o;
        if (G__9109) {
          var bit__4037__auto__ = G__9109.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4037__auto__ || G__9109.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__9110__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__9111 = ret;
          var G__9112 = cljs.core.first.call(null, kvs);
          var G__9113 = cljs.core.second.call(null, kvs);
          var G__9114 = cljs.core.nnext.call(null, kvs);
          coll = G__9111;
          k = G__9112;
          v = G__9113;
          kvs = G__9114;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__9110 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9110__delegate.call(this, coll, k, v, kvs);
    };
    G__9110.cljs$lang$maxFixedArity = 3;
    G__9110.cljs$lang$applyTo = function(arglist__9115) {
      var coll = cljs.core.first(arglist__9115);
      arglist__9115 = cljs.core.next(arglist__9115);
      var k = cljs.core.first(arglist__9115);
      arglist__9115 = cljs.core.next(arglist__9115);
      var v = cljs.core.first(arglist__9115);
      var kvs = cljs.core.rest(arglist__9115);
      return G__9110__delegate(coll, k, v, kvs);
    };
    G__9110.cljs$core$IFn$_invoke$arity$variadic = G__9110__delegate;
    return G__9110;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__9116__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__9117 = ret;
            var G__9118 = cljs.core.first.call(null, ks);
            var G__9119 = cljs.core.next.call(null, ks);
            coll = G__9117;
            k = G__9118;
            ks = G__9119;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__9116 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9116__delegate.call(this, coll, k, ks);
    };
    G__9116.cljs$lang$maxFixedArity = 2;
    G__9116.cljs$lang$applyTo = function(arglist__9120) {
      var coll = cljs.core.first(arglist__9120);
      arglist__9120 = cljs.core.next(arglist__9120);
      var k = cljs.core.first(arglist__9120);
      var ks = cljs.core.rest(arglist__9120);
      return G__9116__delegate(coll, k, ks);
    };
    G__9116.cljs$core$IFn$_invoke$arity$variadic = G__9116__delegate;
    return G__9116;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3400__auto__ = goog.isFunction(f);
  if (or__3400__auto__) {
    return or__3400__auto__;
  } else {
    var G__9124 = f;
    if (G__9124) {
      var bit__4044__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3400__auto____$1 = bit__4044__auto__;
        if (cljs.core.truth_(or__3400__auto____$1)) {
          return or__3400__auto____$1;
        } else {
          return G__9124.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__9124.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__9124);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__9124);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__9132 = o;
    if (G__9132) {
      var bit__4044__auto__ = G__9132.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4044__auto__ || G__9132.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__9132.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__9132);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__9132);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t9133 !== "undefined") {
      } else {
        cljs.core.t9133 = function(meta, o, with_meta, meta9134) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta9134 = meta9134;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t9133.cljs$lang$type = true;
        cljs.core.t9133.cljs$lang$ctorStr = "cljs.core/t9133";
        cljs.core.t9133.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/t9133");
        };
        cljs.core.t9133.prototype.call = function() {
          var G__9137__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__9137 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__9137__delegate.call(this, self__, args);
          };
          G__9137.cljs$lang$maxFixedArity = 1;
          G__9137.cljs$lang$applyTo = function(arglist__9138) {
            var self__ = cljs.core.first(arglist__9138);
            var args = cljs.core.rest(arglist__9138);
            return G__9137__delegate(self__, args);
          };
          G__9137.cljs$core$IFn$_invoke$arity$variadic = G__9137__delegate;
          return G__9137;
        }();
        cljs.core.t9133.prototype.apply = function(self__, args9136) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9136)));
        };
        cljs.core.t9133.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__9139__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__9139 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__9139__delegate.call(this, args);
          };
          G__9139.cljs$lang$maxFixedArity = 0;
          G__9139.cljs$lang$applyTo = function(arglist__9140) {
            var args = cljs.core.seq(arglist__9140);
            return G__9139__delegate(args);
          };
          G__9139.cljs$core$IFn$_invoke$arity$variadic = G__9139__delegate;
          return G__9139;
        }();
        cljs.core.t9133.prototype.cljs$core$Fn$ = true;
        cljs.core.t9133.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9135) {
          var self__ = this;
          var _9135__$1 = this;
          return self__.meta9134;
        };
        cljs.core.t9133.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9135, meta9134__$1) {
          var self__ = this;
          var _9135__$1 = this;
          return new cljs.core.t9133(self__.meta, self__.o, self__.with_meta, meta9134__$1);
        };
        cljs.core.__GT_t9133 = function __GT_t9133(meta__$1, o__$1, with_meta__$1, meta9134) {
          return new cljs.core.t9133(meta__$1, o__$1, with_meta__$1, meta9134);
        };
      }
      return new cljs.core.t9133(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3388__auto__ = !(o == null);
    if (and__3388__auto__) {
      var G__9144 = o;
      if (G__9144) {
        var bit__4044__auto__ = G__9144.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4044__auto__ || G__9144.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__9144.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9144);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9144);
      }
    } else {
      return and__3388__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__9145__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__9146 = ret;
            var G__9147 = cljs.core.first.call(null, ks);
            var G__9148 = cljs.core.next.call(null, ks);
            coll = G__9146;
            k = G__9147;
            ks = G__9148;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__9145 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9145__delegate.call(this, coll, k, ks);
    };
    G__9145.cljs$lang$maxFixedArity = 2;
    G__9145.cljs$lang$applyTo = function(arglist__9149) {
      var coll = cljs.core.first(arglist__9149);
      arglist__9149 = cljs.core.next(arglist__9149);
      var k = cljs.core.first(arglist__9149);
      var ks = cljs.core.rest(arglist__9149);
      return G__9145__delegate(coll, k, ks);
    };
    G__9145.cljs$core$IFn$_invoke$arity$variadic = G__9145__delegate;
    return G__9145;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj9151 = {};
  return obj9151;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj9155 = {};
      return obj9155;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__9157 = o;
    if (G__9157) {
      var bit__4037__auto__ = G__9157.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4037__auto__ || G__9157.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__9159 = x;
    if (G__9159) {
      var bit__4044__auto__ = G__9159.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4044__auto__ || G__9159.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__9159.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__9159);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__9159);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__9161 = x;
    if (G__9161) {
      var bit__4044__auto__ = G__9161.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4044__auto__ || G__9161.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__9161.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__9161);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__9161);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__9163 = x;
  if (G__9163) {
    var bit__4044__auto__ = G__9163.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4044__auto__ || G__9163.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__9163.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__9163);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__9163);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__9165 = x;
  if (G__9165) {
    var bit__4044__auto__ = G__9165.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4044__auto__ || G__9165.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__9165.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__9165);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__9165);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__9167 = x;
  if (G__9167) {
    var bit__4044__auto__ = G__9167.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4044__auto__ || G__9167.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__9167.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__9167);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__9167);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__9169 = x;
  if (G__9169) {
    var bit__4044__auto__ = G__9169.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4044__auto__ || G__9169.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__9169.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__9169);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__9169);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__9171 = x;
    if (G__9171) {
      var bit__4044__auto__ = G__9171.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4044__auto__ || G__9171.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__9171.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__9171);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__9171);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__9173 = x;
  if (G__9173) {
    var bit__4044__auto__ = G__9173.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4044__auto__ || G__9173.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__9173.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__9173);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__9173);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__9175 = x;
  if (G__9175) {
    var bit__4037__auto__ = G__9175.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4037__auto__ || G__9175.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj9179 = {};
    return obj9179;
  };
  var js_obj__1 = function() {
    var G__9180__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__9180 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9180__delegate.call(this, keyvals);
    };
    G__9180.cljs$lang$maxFixedArity = 0;
    G__9180.cljs$lang$applyTo = function(arglist__9181) {
      var keyvals = cljs.core.seq(arglist__9181);
      return G__9180__delegate(keyvals);
    };
    G__9180.cljs$core$IFn$_invoke$arity$variadic = G__9180__delegate;
    return G__9180;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__9182 = i__$1 + 1;
      var G__9183 = j__$1 + 1;
      var G__9184 = len__$1 - 1;
      i__$1 = G__9182;
      j__$1 = G__9183;
      len__$1 = G__9184;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__9185 = i__$1 - 1;
      var G__9186 = j__$1 - 1;
      var G__9187 = len__$1 - 1;
      i__$1 = G__9185;
      j__$1 = G__9186;
      len__$1 = G__9187;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj9189 = {};
  return obj9189;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__9191 = s;
    if (G__9191) {
      var bit__4044__auto__ = G__9191.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4044__auto__ || G__9191.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__9191.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9191);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9191);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__9193 = s;
  if (G__9193) {
    var bit__4044__auto__ = G__9193.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4044__auto__ || G__9193.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__9193.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__9193);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__9193);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3400__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3400__auto__) {
    return or__3400__auto__;
  } else {
    var G__9197 = f;
    if (G__9197) {
      var bit__4044__auto__ = G__9197.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4044__auto__ || G__9197.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__9197.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__9197);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__9197);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__9198__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__9199 = cljs.core.conj.call(null, s, x__$1);
              var G__9200 = etc;
              s = G__9199;
              xs = G__9200;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__9198 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9198__delegate.call(this, x, y, more);
    };
    G__9198.cljs$lang$maxFixedArity = 2;
    G__9198.cljs$lang$applyTo = function(arglist__9201) {
      var x = cljs.core.first(arglist__9201);
      arglist__9201 = cljs.core.next(arglist__9201);
      var y = cljs.core.first(arglist__9201);
      var more = cljs.core.rest(arglist__9201);
      return G__9198__delegate(x, y, more);
    };
    G__9198.cljs$core$IFn$_invoke$arity$variadic = G__9198__delegate;
    return G__9198;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3400__auto__ = cljs.core.seq.call(null, coll);
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__9203 = x;
            if (G__9203) {
              var bit__4037__auto__ = G__9203.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4037__auto__ || G__9203.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__9204 = xs;
        var G__9205 = ys;
        var G__9206 = len;
        var G__9207 = n + 1;
        xs = G__9204;
        ys = G__9205;
        len = G__9206;
        n = G__9207;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9208 = nval;
          var G__9209 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__9208;
          coll__$1 = G__9209;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__9212 = coll;
      if (G__9212) {
        var bit__4037__auto__ = G__9212.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4037__auto__ || G__9212.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__9213 = coll;
      if (G__9213) {
        var bit__4037__auto__ = G__9213.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4037__auto__ || G__9213.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__9214__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__9214 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9214__delegate.call(this, x, y, more);
    };
    G__9214.cljs$lang$maxFixedArity = 2;
    G__9214.cljs$lang$applyTo = function(arglist__9215) {
      var x = cljs.core.first(arglist__9215);
      arglist__9215 = cljs.core.next(arglist__9215);
      var y = cljs.core.first(arglist__9215);
      var more = cljs.core.rest(arglist__9215);
      return G__9214__delegate(x, y, more);
    };
    G__9214.cljs$core$IFn$_invoke$arity$variadic = G__9214__delegate;
    return G__9214;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__9216__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__9216 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9216__delegate.call(this, x, y, more);
    };
    G__9216.cljs$lang$maxFixedArity = 2;
    G__9216.cljs$lang$applyTo = function(arglist__9217) {
      var x = cljs.core.first(arglist__9217);
      arglist__9217 = cljs.core.next(arglist__9217);
      var y = cljs.core.first(arglist__9217);
      var more = cljs.core.rest(arglist__9217);
      return G__9216__delegate(x, y, more);
    };
    G__9216.cljs$core$IFn$_invoke$arity$variadic = G__9216__delegate;
    return G__9216;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__9218__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__9218 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9218__delegate.call(this, x, y, more);
    };
    G__9218.cljs$lang$maxFixedArity = 2;
    G__9218.cljs$lang$applyTo = function(arglist__9219) {
      var x = cljs.core.first(arglist__9219);
      arglist__9219 = cljs.core.next(arglist__9219);
      var y = cljs.core.first(arglist__9219);
      var more = cljs.core.rest(arglist__9219);
      return G__9218__delegate(x, y, more);
    };
    G__9218.cljs$core$IFn$_invoke$arity$variadic = G__9218__delegate;
    return G__9218;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__9220__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__9220 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9220__delegate.call(this, x, y, more);
    };
    G__9220.cljs$lang$maxFixedArity = 2;
    G__9220.cljs$lang$applyTo = function(arglist__9221) {
      var x = cljs.core.first(arglist__9221);
      arglist__9221 = cljs.core.next(arglist__9221);
      var y = cljs.core.first(arglist__9221);
      var more = cljs.core.rest(arglist__9221);
      return G__9220__delegate(x, y, more);
    };
    G__9220.cljs$core$IFn$_invoke$arity$variadic = G__9220__delegate;
    return G__9220;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__9222__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__9223 = y;
            var G__9224 = cljs.core.first.call(null, more);
            var G__9225 = cljs.core.next.call(null, more);
            x = G__9223;
            y = G__9224;
            more = G__9225;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9222 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9222__delegate.call(this, x, y, more);
    };
    G__9222.cljs$lang$maxFixedArity = 2;
    G__9222.cljs$lang$applyTo = function(arglist__9226) {
      var x = cljs.core.first(arglist__9226);
      arglist__9226 = cljs.core.next(arglist__9226);
      var y = cljs.core.first(arglist__9226);
      var more = cljs.core.rest(arglist__9226);
      return G__9222__delegate(x, y, more);
    };
    G__9222.cljs$core$IFn$_invoke$arity$variadic = G__9222__delegate;
    return G__9222;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__9227__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__9228 = y;
            var G__9229 = cljs.core.first.call(null, more);
            var G__9230 = cljs.core.next.call(null, more);
            x = G__9228;
            y = G__9229;
            more = G__9230;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9227 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9227__delegate.call(this, x, y, more);
    };
    G__9227.cljs$lang$maxFixedArity = 2;
    G__9227.cljs$lang$applyTo = function(arglist__9231) {
      var x = cljs.core.first(arglist__9231);
      arglist__9231 = cljs.core.next(arglist__9231);
      var y = cljs.core.first(arglist__9231);
      var more = cljs.core.rest(arglist__9231);
      return G__9227__delegate(x, y, more);
    };
    G__9227.cljs$core$IFn$_invoke$arity$variadic = G__9227__delegate;
    return G__9227;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__9232__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__9233 = y;
            var G__9234 = cljs.core.first.call(null, more);
            var G__9235 = cljs.core.next.call(null, more);
            x = G__9233;
            y = G__9234;
            more = G__9235;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9232 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9232__delegate.call(this, x, y, more);
    };
    G__9232.cljs$lang$maxFixedArity = 2;
    G__9232.cljs$lang$applyTo = function(arglist__9236) {
      var x = cljs.core.first(arglist__9236);
      arglist__9236 = cljs.core.next(arglist__9236);
      var y = cljs.core.first(arglist__9236);
      var more = cljs.core.rest(arglist__9236);
      return G__9232__delegate(x, y, more);
    };
    G__9232.cljs$core$IFn$_invoke$arity$variadic = G__9232__delegate;
    return G__9232;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__9237__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__9238 = y;
            var G__9239 = cljs.core.first.call(null, more);
            var G__9240 = cljs.core.next.call(null, more);
            x = G__9238;
            y = G__9239;
            more = G__9240;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9237 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9237__delegate.call(this, x, y, more);
    };
    G__9237.cljs$lang$maxFixedArity = 2;
    G__9237.cljs$lang$applyTo = function(arglist__9241) {
      var x = cljs.core.first(arglist__9241);
      arglist__9241 = cljs.core.next(arglist__9241);
      var y = cljs.core.first(arglist__9241);
      var more = cljs.core.rest(arglist__9241);
      return G__9237__delegate(x, y, more);
    };
    G__9237.cljs$core$IFn$_invoke$arity$variadic = G__9237__delegate;
    return G__9237;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3707__auto__ = x;
    var y__3708__auto__ = y;
    return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
  };
  var max__3 = function() {
    var G__9242__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3707__auto__ = x;
        var y__3708__auto__ = y;
        return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
      }(), more);
    };
    var G__9242 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9242__delegate.call(this, x, y, more);
    };
    G__9242.cljs$lang$maxFixedArity = 2;
    G__9242.cljs$lang$applyTo = function(arglist__9243) {
      var x = cljs.core.first(arglist__9243);
      arglist__9243 = cljs.core.next(arglist__9243);
      var y = cljs.core.first(arglist__9243);
      var more = cljs.core.rest(arglist__9243);
      return G__9242__delegate(x, y, more);
    };
    G__9242.cljs$core$IFn$_invoke$arity$variadic = G__9242__delegate;
    return G__9242;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3714__auto__ = x;
    var y__3715__auto__ = y;
    return x__3714__auto__ < y__3715__auto__ ? x__3714__auto__ : y__3715__auto__;
  };
  var min__3 = function() {
    var G__9244__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3714__auto__ = x;
        var y__3715__auto__ = y;
        return x__3714__auto__ < y__3715__auto__ ? x__3714__auto__ : y__3715__auto__;
      }(), more);
    };
    var G__9244 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9244__delegate.call(this, x, y, more);
    };
    G__9244.cljs$lang$maxFixedArity = 2;
    G__9244.cljs$lang$applyTo = function(arglist__9245) {
      var x = cljs.core.first(arglist__9245);
      arglist__9245 = cljs.core.next(arglist__9245);
      var y = cljs.core.first(arglist__9245);
      var more = cljs.core.rest(arglist__9245);
      return G__9244__delegate(x, y, more);
    };
    G__9244.cljs$core$IFn$_invoke$arity$variadic = G__9244__delegate;
    return G__9244;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__9246__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__9246 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9246__delegate.call(this, x, y, more);
    };
    G__9246.cljs$lang$maxFixedArity = 2;
    G__9246.cljs$lang$applyTo = function(arglist__9247) {
      var x = cljs.core.first(arglist__9247);
      arglist__9247 = cljs.core.next(arglist__9247);
      var y = cljs.core.first(arglist__9247);
      var more = cljs.core.rest(arglist__9247);
      return G__9246__delegate(x, y, more);
    };
    G__9246.cljs$core$IFn$_invoke$arity$variadic = G__9246__delegate;
    return G__9246;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__9248__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__9248 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9248__delegate.call(this, x, y, more);
    };
    G__9248.cljs$lang$maxFixedArity = 2;
    G__9248.cljs$lang$applyTo = function(arglist__9249) {
      var x = cljs.core.first(arglist__9249);
      arglist__9249 = cljs.core.next(arglist__9249);
      var y = cljs.core.first(arglist__9249);
      var more = cljs.core.rest(arglist__9249);
      return G__9248__delegate(x, y, more);
    };
    G__9248.cljs$core$IFn$_invoke$arity$variadic = G__9248__delegate;
    return G__9248;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__9250__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__9250 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9250__delegate.call(this, x, y, more);
    };
    G__9250.cljs$lang$maxFixedArity = 2;
    G__9250.cljs$lang$applyTo = function(arglist__9251) {
      var x = cljs.core.first(arglist__9251);
      arglist__9251 = cljs.core.next(arglist__9251);
      var y = cljs.core.first(arglist__9251);
      var more = cljs.core.rest(arglist__9251);
      return G__9250__delegate(x, y, more);
    };
    G__9250.cljs$core$IFn$_invoke$arity$variadic = G__9250__delegate;
    return G__9250;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__9252__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__9252 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9252__delegate.call(this, x, y, more);
    };
    G__9252.cljs$lang$maxFixedArity = 2;
    G__9252.cljs$lang$applyTo = function(arglist__9253) {
      var x = cljs.core.first(arglist__9253);
      arglist__9253 = cljs.core.next(arglist__9253);
      var y = cljs.core.first(arglist__9253);
      var more = cljs.core.rest(arglist__9253);
      return G__9252__delegate(x, y, more);
    };
    G__9252.cljs$core$IFn$_invoke$arity$variadic = G__9252__delegate;
    return G__9252;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__9254__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__9254 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9254__delegate.call(this, x, y, more);
    };
    G__9254.cljs$lang$maxFixedArity = 2;
    G__9254.cljs$lang$applyTo = function(arglist__9255) {
      var x = cljs.core.first(arglist__9255);
      arglist__9255 = cljs.core.next(arglist__9255);
      var y = cljs.core.first(arglist__9255);
      var more = cljs.core.rest(arglist__9255);
      return G__9254__delegate(x, y, more);
    };
    G__9254.cljs$core$IFn$_invoke$arity$variadic = G__9254__delegate;
    return G__9254;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__9256__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__9256 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9256__delegate.call(this, x, y, more);
    };
    G__9256.cljs$lang$maxFixedArity = 2;
    G__9256.cljs$lang$applyTo = function(arglist__9257) {
      var x = cljs.core.first(arglist__9257);
      arglist__9257 = cljs.core.next(arglist__9257);
      var y = cljs.core.first(arglist__9257);
      var more = cljs.core.rest(arglist__9257);
      return G__9256__delegate(x, y, more);
    };
    G__9256.cljs$core$IFn$_invoke$arity$variadic = G__9256__delegate;
    return G__9256;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__9258__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__9258 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9258__delegate.call(this, x, y, more);
    };
    G__9258.cljs$lang$maxFixedArity = 2;
    G__9258.cljs$lang$applyTo = function(arglist__9259) {
      var x = cljs.core.first(arglist__9259);
      arglist__9259 = cljs.core.next(arglist__9259);
      var y = cljs.core.first(arglist__9259);
      var more = cljs.core.rest(arglist__9259);
      return G__9258__delegate(x, y, more);
    };
    G__9258.cljs$core$IFn$_invoke$arity$variadic = G__9258__delegate;
    return G__9258;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__9260__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__9261 = y;
            var G__9262 = cljs.core.first.call(null, more);
            var G__9263 = cljs.core.next.call(null, more);
            x = G__9261;
            y = G__9262;
            more = G__9263;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9260 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9260__delegate.call(this, x, y, more);
    };
    G__9260.cljs$lang$maxFixedArity = 2;
    G__9260.cljs$lang$applyTo = function(arglist__9264) {
      var x = cljs.core.first(arglist__9264);
      arglist__9264 = cljs.core.next(arglist__9264);
      var y = cljs.core.first(arglist__9264);
      var more = cljs.core.rest(arglist__9264);
      return G__9260__delegate(x, y, more);
    };
    G__9260.cljs$core$IFn$_invoke$arity$variadic = G__9260__delegate;
    return G__9260;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__9265 = n__$1 - 1;
      var G__9266 = cljs.core.next.call(null, xs);
      n__$1 = G__9265;
      xs = G__9266;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__9267__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__9268 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__9269 = cljs.core.next.call(null, more);
          sb = G__9268;
          more = G__9269;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__9267 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9267__delegate.call(this, x, ys);
    };
    G__9267.cljs$lang$maxFixedArity = 1;
    G__9267.cljs$lang$applyTo = function(arglist__9270) {
      var x = cljs.core.first(arglist__9270);
      var ys = cljs.core.rest(arglist__9270);
      return G__9267__delegate(x, ys);
    };
    G__9267.cljs$core$IFn$_invoke$arity$variadic = G__9267__delegate;
    return G__9267;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__9271 = cljs.core.next.call(null, xs);
            var G__9272 = cljs.core.next.call(null, ys);
            xs = G__9271;
            ys = G__9272;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__9273 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__9274 = cljs.core.next.call(null, s);
        res = G__9273;
        s = G__9274;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__9275 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__9276 = cljs.core.next.call(null, s);
      h = G__9275;
      s = G__9276;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__9277 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__9278 = cljs.core.next.call(null, s__$1);
      h = G__9277;
      s__$1 = G__9278;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__9285_9291 = cljs.core.seq.call(null, fn_map);
  var chunk__9286_9292 = null;
  var count__9287_9293 = 0;
  var i__9288_9294 = 0;
  while (true) {
    if (i__9288_9294 < count__9287_9293) {
      var vec__9289_9295 = cljs.core._nth.call(null, chunk__9286_9292, i__9288_9294);
      var key_name_9296 = cljs.core.nth.call(null, vec__9289_9295, 0, null);
      var f_9297 = cljs.core.nth.call(null, vec__9289_9295, 1, null);
      var str_name_9298 = cljs.core.name.call(null, key_name_9296);
      obj[str_name_9298] = f_9297;
      var G__9299 = seq__9285_9291;
      var G__9300 = chunk__9286_9292;
      var G__9301 = count__9287_9293;
      var G__9302 = i__9288_9294 + 1;
      seq__9285_9291 = G__9299;
      chunk__9286_9292 = G__9300;
      count__9287_9293 = G__9301;
      i__9288_9294 = G__9302;
      continue;
    } else {
      var temp__4092__auto___9303 = cljs.core.seq.call(null, seq__9285_9291);
      if (temp__4092__auto___9303) {
        var seq__9285_9304__$1 = temp__4092__auto___9303;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9285_9304__$1)) {
          var c__4142__auto___9305 = cljs.core.chunk_first.call(null, seq__9285_9304__$1);
          var G__9306 = cljs.core.chunk_rest.call(null, seq__9285_9304__$1);
          var G__9307 = c__4142__auto___9305;
          var G__9308 = cljs.core.count.call(null, c__4142__auto___9305);
          var G__9309 = 0;
          seq__9285_9291 = G__9306;
          chunk__9286_9292 = G__9307;
          count__9287_9293 = G__9308;
          i__9288_9294 = G__9309;
          continue;
        } else {
          var vec__9290_9310 = cljs.core.first.call(null, seq__9285_9304__$1);
          var key_name_9311 = cljs.core.nth.call(null, vec__9290_9310, 0, null);
          var f_9312 = cljs.core.nth.call(null, vec__9290_9310, 1, null);
          var str_name_9313 = cljs.core.name.call(null, key_name_9311);
          obj[str_name_9313] = f_9312;
          var G__9314 = cljs.core.next.call(null, seq__9285_9304__$1);
          var G__9315 = null;
          var G__9316 = 0;
          var G__9317 = 0;
          seq__9285_9291 = G__9314;
          chunk__9286_9292 = G__9315;
          count__9287_9293 = G__9316;
          i__9288_9294 = G__9317;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$ = true;
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__9319 = coll;
  if (G__9319) {
    var bit__4044__auto__ = G__9319.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4044__auto__ || G__9319.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__9319.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__9319);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__9319);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__9320 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__9320;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__9321 = i - 1;
        var G__9322 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__9321;
        r = G__9322;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__9323) {
    var xs = cljs.core.seq(arglist__9323);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$ = true;
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3400__auto__ = coll == null;
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      var G__9327 = coll;
      if (G__9327) {
        var bit__4037__auto__ = G__9327.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__9327.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__9329 = x;
  if (G__9329) {
    var bit__4044__auto__ = G__9329.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4044__auto__ || G__9329.cljs$core$IList$) {
      return true;
    } else {
      if (!G__9329.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__9329);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__9329);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__9331 = null;
  var G__9331__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__9331__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__9331 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9331__2.call(this, self__, coll);
      case 3:
        return G__9331__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9331;
}();
cljs.core.Keyword.prototype.apply = function(self__, args9330) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9330)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.cljs$core$ICloneable$ = true;
cljs.core.Keyword.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Keyword(self__.ns, self__.name, self__.fqn, self__._hash);
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__9333 = x;
    if (G__9333) {
      var bit__4037__auto__ = G__9333.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4037__auto__ || G__9333.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__9334 = ls.sval();
        ls = G__9334;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__9336 = s;
    if (G__9336) {
      var bit__4037__auto__ = G__9336.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4037__auto__ || G__9336.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__9337 = cljs.core.next.call(null, s__$1);
      s__$1 = G__9337;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_9338 = 0;
  var xs_9339 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_9339) {
      ret[i_9338] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_9339));
      var G__9340 = i_9338 + 1;
      var G__9341 = cljs.core.next.call(null, xs_9339);
      i_9338 = G__9340;
      xs_9339 = G__9341;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9342 = i + 1;
          var G__9343 = cljs.core.next.call(null, s__$1);
          i = G__9342;
          s__$1 = G__9343;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___9344 = size;
      var i_9345 = 0;
      while (true) {
        if (i_9345 < n__4242__auto___9344) {
          a[i_9345] = init_val_or_seq;
          var G__9346 = i_9345 + 1;
          i_9345 = G__9346;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9347 = i + 1;
          var G__9348 = cljs.core.next.call(null, s__$1);
          i = G__9347;
          s__$1 = G__9348;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___9349 = size;
      var i_9350 = 0;
      while (true) {
        if (i_9350 < n__4242__auto___9349) {
          a[i_9350] = init_val_or_seq;
          var G__9351 = i_9350 + 1;
          i_9350 = G__9351;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9352 = i + 1;
          var G__9353 = cljs.core.next.call(null, s__$1);
          i = G__9352;
          s__$1 = G__9353;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___9354 = size;
      var i_9355 = 0;
      while (true) {
        if (i_9355 < n__4242__auto___9354) {
          a[i_9355] = init_val_or_seq;
          var G__9356 = i_9355 + 1;
          i_9355 = G__9356;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9357 = i + 1;
          var G__9358 = cljs.core.next.call(null, s__$1);
          i = G__9357;
          s__$1 = G__9358;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___9359 = size;
      var i_9360 = 0;
      while (true) {
        if (i_9360 < n__4242__auto___9359) {
          a[i_9360] = init_val_or_seq;
          var G__9361 = i_9360 + 1;
          i_9360 = G__9361;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__9362 = cljs.core.next.call(null, s__$1);
        var G__9363 = i - 1;
        var G__9364 = sum + 1;
        s__$1 = G__9362;
        i = G__9363;
        sum = G__9364;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__9365__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__9365 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9365__delegate.call(this, x, y, zs);
    };
    G__9365.cljs$lang$maxFixedArity = 2;
    G__9365.cljs$lang$applyTo = function(arglist__9366) {
      var x = cljs.core.first(arglist__9366);
      arglist__9366 = cljs.core.next(arglist__9366);
      var y = cljs.core.first(arglist__9366);
      var zs = cljs.core.rest(arglist__9366);
      return G__9365__delegate(x, y, zs);
    };
    G__9365.cljs$core$IFn$_invoke$arity$variadic = G__9365__delegate;
    return G__9365;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__9367__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__9367 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9367__delegate.call(this, a, b, c, d, more);
    };
    G__9367.cljs$lang$maxFixedArity = 4;
    G__9367.cljs$lang$applyTo = function(arglist__9368) {
      var a = cljs.core.first(arglist__9368);
      arglist__9368 = cljs.core.next(arglist__9368);
      var b = cljs.core.first(arglist__9368);
      arglist__9368 = cljs.core.next(arglist__9368);
      var c = cljs.core.first(arglist__9368);
      arglist__9368 = cljs.core.next(arglist__9368);
      var d = cljs.core.first(arglist__9368);
      var more = cljs.core.rest(arglist__9368);
      return G__9367__delegate(a, b, c, d, more);
    };
    G__9367.cljs$core$IFn$_invoke$arity$variadic = G__9367__delegate;
    return G__9367;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val);
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key);
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val);
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__9369__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__9369 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__9369__delegate.call(this, f, a, b, c, d, args);
    };
    G__9369.cljs$lang$maxFixedArity = 5;
    G__9369.cljs$lang$applyTo = function(arglist__9370) {
      var f = cljs.core.first(arglist__9370);
      arglist__9370 = cljs.core.next(arglist__9370);
      var a = cljs.core.first(arglist__9370);
      arglist__9370 = cljs.core.next(arglist__9370);
      var b = cljs.core.first(arglist__9370);
      arglist__9370 = cljs.core.next(arglist__9370);
      var c = cljs.core.first(arglist__9370);
      arglist__9370 = cljs.core.next(arglist__9370);
      var d = cljs.core.first(arglist__9370);
      var args = cljs.core.rest(arglist__9370);
      return G__9369__delegate(f, a, b, c, d, args);
    };
    G__9369.cljs$core$IFn$_invoke$arity$variadic = G__9369__delegate;
    return G__9369;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__9371__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__9371 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__9371__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__9371.cljs$lang$maxFixedArity = 6;
    G__9371.cljs$lang$applyTo = function(arglist__9372) {
      var obj = cljs.core.first(arglist__9372);
      arglist__9372 = cljs.core.next(arglist__9372);
      var f = cljs.core.first(arglist__9372);
      arglist__9372 = cljs.core.next(arglist__9372);
      var a = cljs.core.first(arglist__9372);
      arglist__9372 = cljs.core.next(arglist__9372);
      var b = cljs.core.first(arglist__9372);
      arglist__9372 = cljs.core.next(arglist__9372);
      var c = cljs.core.first(arglist__9372);
      arglist__9372 = cljs.core.next(arglist__9372);
      var d = cljs.core.first(arglist__9372);
      var args = cljs.core.rest(arglist__9372);
      return G__9371__delegate(obj, f, a, b, c, d, args);
    };
    G__9371.cljs$core$IFn$_invoke$arity$variadic = G__9371__delegate;
    return G__9371;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__9373__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__9373 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9373__delegate.call(this, x, y, more);
    };
    G__9373.cljs$lang$maxFixedArity = 2;
    G__9373.cljs$lang$applyTo = function(arglist__9374) {
      var x = cljs.core.first(arglist__9374);
      arglist__9374 = cljs.core.next(arglist__9374);
      var y = cljs.core.first(arglist__9374);
      var more = cljs.core.rest(arglist__9374);
      return G__9373__delegate(x, y, more);
    };
    G__9373.cljs$core$IFn$_invoke$arity$variadic = G__9373__delegate;
    return G__9373;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__9375 = pred;
        var G__9376 = cljs.core.next.call(null, coll);
        pred = G__9375;
        coll = G__9376;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3400__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        var G__9377 = pred;
        var G__9378 = cljs.core.next.call(null, coll);
        pred = G__9377;
        coll = G__9378;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__9379 = null;
    var G__9379__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__9379__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__9379__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__9379__3 = function() {
      var G__9380__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__9380 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__9380__delegate.call(this, x, y, zs);
      };
      G__9380.cljs$lang$maxFixedArity = 2;
      G__9380.cljs$lang$applyTo = function(arglist__9381) {
        var x = cljs.core.first(arglist__9381);
        arglist__9381 = cljs.core.next(arglist__9381);
        var y = cljs.core.first(arglist__9381);
        var zs = cljs.core.rest(arglist__9381);
        return G__9380__delegate(x, y, zs);
      };
      G__9380.cljs$core$IFn$_invoke$arity$variadic = G__9380__delegate;
      return G__9380;
    }();
    G__9379 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__9379__0.call(this);
        case 1:
          return G__9379__1.call(this, x);
        case 2:
          return G__9379__2.call(this, x, y);
        default:
          return G__9379__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9379.cljs$lang$maxFixedArity = 2;
    G__9379.cljs$lang$applyTo = G__9379__3.cljs$lang$applyTo;
    return G__9379;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__9382__delegate = function(args) {
      return x;
    };
    var G__9382 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9382__delegate.call(this, args);
    };
    G__9382.cljs$lang$maxFixedArity = 0;
    G__9382.cljs$lang$applyTo = function(arglist__9383) {
      var args = cljs.core.seq(arglist__9383);
      return G__9382__delegate(args);
    };
    G__9382.cljs$core$IFn$_invoke$arity$variadic = G__9382__delegate;
    return G__9382;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__9384 = null;
      var G__9384__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__9384__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__9384__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__9384__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__9384__4 = function() {
        var G__9385__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__9385 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9385__delegate.call(this, x, y, z, args);
        };
        G__9385.cljs$lang$maxFixedArity = 3;
        G__9385.cljs$lang$applyTo = function(arglist__9386) {
          var x = cljs.core.first(arglist__9386);
          arglist__9386 = cljs.core.next(arglist__9386);
          var y = cljs.core.first(arglist__9386);
          arglist__9386 = cljs.core.next(arglist__9386);
          var z = cljs.core.first(arglist__9386);
          var args = cljs.core.rest(arglist__9386);
          return G__9385__delegate(x, y, z, args);
        };
        G__9385.cljs$core$IFn$_invoke$arity$variadic = G__9385__delegate;
        return G__9385;
      }();
      G__9384 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9384__0.call(this);
          case 1:
            return G__9384__1.call(this, x);
          case 2:
            return G__9384__2.call(this, x, y);
          case 3:
            return G__9384__3.call(this, x, y, z);
          default:
            return G__9384__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9384.cljs$lang$maxFixedArity = 3;
      G__9384.cljs$lang$applyTo = G__9384__4.cljs$lang$applyTo;
      return G__9384;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__9387 = null;
      var G__9387__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__9387__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__9387__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__9387__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__9387__4 = function() {
        var G__9388__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__9388 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9388__delegate.call(this, x, y, z, args);
        };
        G__9388.cljs$lang$maxFixedArity = 3;
        G__9388.cljs$lang$applyTo = function(arglist__9389) {
          var x = cljs.core.first(arglist__9389);
          arglist__9389 = cljs.core.next(arglist__9389);
          var y = cljs.core.first(arglist__9389);
          arglist__9389 = cljs.core.next(arglist__9389);
          var z = cljs.core.first(arglist__9389);
          var args = cljs.core.rest(arglist__9389);
          return G__9388__delegate(x, y, z, args);
        };
        G__9388.cljs$core$IFn$_invoke$arity$variadic = G__9388__delegate;
        return G__9388;
      }();
      G__9387 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9387__0.call(this);
          case 1:
            return G__9387__1.call(this, x);
          case 2:
            return G__9387__2.call(this, x, y);
          case 3:
            return G__9387__3.call(this, x, y, z);
          default:
            return G__9387__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9387.cljs$lang$maxFixedArity = 3;
      G__9387.cljs$lang$applyTo = G__9387__4.cljs$lang$applyTo;
      return G__9387;
    }();
  };
  var comp__4 = function() {
    var G__9390__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__9391__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__9392 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__9393 = cljs.core.next.call(null, fs__$2);
              ret = G__9392;
              fs__$2 = G__9393;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__9391 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__9391__delegate.call(this, args);
        };
        G__9391.cljs$lang$maxFixedArity = 0;
        G__9391.cljs$lang$applyTo = function(arglist__9394) {
          var args = cljs.core.seq(arglist__9394);
          return G__9391__delegate(args);
        };
        G__9391.cljs$core$IFn$_invoke$arity$variadic = G__9391__delegate;
        return G__9391;
      }();
    };
    var G__9390 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9390__delegate.call(this, f1, f2, f3, fs);
    };
    G__9390.cljs$lang$maxFixedArity = 3;
    G__9390.cljs$lang$applyTo = function(arglist__9395) {
      var f1 = cljs.core.first(arglist__9395);
      arglist__9395 = cljs.core.next(arglist__9395);
      var f2 = cljs.core.first(arglist__9395);
      arglist__9395 = cljs.core.next(arglist__9395);
      var f3 = cljs.core.first(arglist__9395);
      var fs = cljs.core.rest(arglist__9395);
      return G__9390__delegate(f1, f2, f3, fs);
    };
    G__9390.cljs$core$IFn$_invoke$arity$variadic = G__9390__delegate;
    return G__9390;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__9396__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__9396 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9396__delegate.call(this, args);
      };
      G__9396.cljs$lang$maxFixedArity = 0;
      G__9396.cljs$lang$applyTo = function(arglist__9397) {
        var args = cljs.core.seq(arglist__9397);
        return G__9396__delegate(args);
      };
      G__9396.cljs$core$IFn$_invoke$arity$variadic = G__9396__delegate;
      return G__9396;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__9398__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__9398 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9398__delegate.call(this, args);
      };
      G__9398.cljs$lang$maxFixedArity = 0;
      G__9398.cljs$lang$applyTo = function(arglist__9399) {
        var args = cljs.core.seq(arglist__9399);
        return G__9398__delegate(args);
      };
      G__9398.cljs$core$IFn$_invoke$arity$variadic = G__9398__delegate;
      return G__9398;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__9400__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__9400 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9400__delegate.call(this, args);
      };
      G__9400.cljs$lang$maxFixedArity = 0;
      G__9400.cljs$lang$applyTo = function(arglist__9401) {
        var args = cljs.core.seq(arglist__9401);
        return G__9400__delegate(args);
      };
      G__9400.cljs$core$IFn$_invoke$arity$variadic = G__9400__delegate;
      return G__9400;
    }();
  };
  var partial__5 = function() {
    var G__9402__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__9403__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__9403 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__9403__delegate.call(this, args);
        };
        G__9403.cljs$lang$maxFixedArity = 0;
        G__9403.cljs$lang$applyTo = function(arglist__9404) {
          var args = cljs.core.seq(arglist__9404);
          return G__9403__delegate(args);
        };
        G__9403.cljs$core$IFn$_invoke$arity$variadic = G__9403__delegate;
        return G__9403;
      }();
    };
    var G__9402 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9402__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__9402.cljs$lang$maxFixedArity = 4;
    G__9402.cljs$lang$applyTo = function(arglist__9405) {
      var f = cljs.core.first(arglist__9405);
      arglist__9405 = cljs.core.next(arglist__9405);
      var arg1 = cljs.core.first(arglist__9405);
      arglist__9405 = cljs.core.next(arglist__9405);
      var arg2 = cljs.core.first(arglist__9405);
      arglist__9405 = cljs.core.next(arglist__9405);
      var arg3 = cljs.core.first(arglist__9405);
      var more = cljs.core.rest(arglist__9405);
      return G__9402__delegate(f, arg1, arg2, arg3, more);
    };
    G__9402.cljs$core$IFn$_invoke$arity$variadic = G__9402__delegate;
    return G__9402;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__9406 = null;
      var G__9406__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__9406__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__9406__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__9406__4 = function() {
        var G__9407__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__9407 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9407__delegate.call(this, a, b, c, ds);
        };
        G__9407.cljs$lang$maxFixedArity = 3;
        G__9407.cljs$lang$applyTo = function(arglist__9408) {
          var a = cljs.core.first(arglist__9408);
          arglist__9408 = cljs.core.next(arglist__9408);
          var b = cljs.core.first(arglist__9408);
          arglist__9408 = cljs.core.next(arglist__9408);
          var c = cljs.core.first(arglist__9408);
          var ds = cljs.core.rest(arglist__9408);
          return G__9407__delegate(a, b, c, ds);
        };
        G__9407.cljs$core$IFn$_invoke$arity$variadic = G__9407__delegate;
        return G__9407;
      }();
      G__9406 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__9406__1.call(this, a);
          case 2:
            return G__9406__2.call(this, a, b);
          case 3:
            return G__9406__3.call(this, a, b, c);
          default:
            return G__9406__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9406.cljs$lang$maxFixedArity = 3;
      G__9406.cljs$lang$applyTo = G__9406__4.cljs$lang$applyTo;
      return G__9406;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__9409 = null;
      var G__9409__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__9409__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__9409__4 = function() {
        var G__9410__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__9410 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9410__delegate.call(this, a, b, c, ds);
        };
        G__9410.cljs$lang$maxFixedArity = 3;
        G__9410.cljs$lang$applyTo = function(arglist__9411) {
          var a = cljs.core.first(arglist__9411);
          arglist__9411 = cljs.core.next(arglist__9411);
          var b = cljs.core.first(arglist__9411);
          arglist__9411 = cljs.core.next(arglist__9411);
          var c = cljs.core.first(arglist__9411);
          var ds = cljs.core.rest(arglist__9411);
          return G__9410__delegate(a, b, c, ds);
        };
        G__9410.cljs$core$IFn$_invoke$arity$variadic = G__9410__delegate;
        return G__9410;
      }();
      G__9409 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__9409__2.call(this, a, b);
          case 3:
            return G__9409__3.call(this, a, b, c);
          default:
            return G__9409__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9409.cljs$lang$maxFixedArity = 3;
      G__9409.cljs$lang$applyTo = G__9409__4.cljs$lang$applyTo;
      return G__9409;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__9412 = null;
      var G__9412__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__9412__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__9412__4 = function() {
        var G__9413__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__9413 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9413__delegate.call(this, a, b, c, ds);
        };
        G__9413.cljs$lang$maxFixedArity = 3;
        G__9413.cljs$lang$applyTo = function(arglist__9414) {
          var a = cljs.core.first(arglist__9414);
          arglist__9414 = cljs.core.next(arglist__9414);
          var b = cljs.core.first(arglist__9414);
          arglist__9414 = cljs.core.next(arglist__9414);
          var c = cljs.core.first(arglist__9414);
          var ds = cljs.core.rest(arglist__9414);
          return G__9413__delegate(a, b, c, ds);
        };
        G__9413.cljs$core$IFn$_invoke$arity$variadic = G__9413__delegate;
        return G__9413;
      }();
      G__9412 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__9412__2.call(this, a, b);
          case 3:
            return G__9412__3.call(this, a, b, c);
          default:
            return G__9412__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9412.cljs$lang$maxFixedArity = 3;
      G__9412.cljs$lang$applyTo = G__9412__4.cljs$lang$applyTo;
      return G__9412;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___9415 = size;
          var i_9416 = 0;
          while (true) {
            if (i_9416 < n__4242__auto___9415) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_9416, cljs.core._nth.call(null, c, i_9416)));
              var G__9417 = i_9416 + 1;
              i_9416 = G__9417;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4242__auto___9418 = size;
        var i_9419 = 0;
        while (true) {
          if (i_9419 < n__4242__auto___9418) {
            var x_9420 = f.call(null, cljs.core._nth.call(null, c, i_9419));
            if (x_9420 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_9420);
            }
            var G__9421 = i_9419 + 1;
            i_9419 = G__9421;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___9422 = size;
          var i_9423 = 0;
          while (true) {
            if (i_9423 < n__4242__auto___9422) {
              var x_9424 = f.call(null, idx + i_9423, cljs.core._nth.call(null, c, i_9423));
              if (x_9424 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_9424);
              }
              var G__9425 = i_9423 + 1;
              i_9423 = G__9425;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            return p.call(null, y);
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__9432__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__9432 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9432__delegate.call(this, x, y, z, args);
        };
        G__9432.cljs$lang$maxFixedArity = 3;
        G__9432.cljs$lang$applyTo = function(arglist__9433) {
          var x = cljs.core.first(arglist__9433);
          arglist__9433 = cljs.core.next(arglist__9433);
          var y = cljs.core.first(arglist__9433);
          arglist__9433 = cljs.core.next(arglist__9433);
          var z = cljs.core.first(arglist__9433);
          var args = cljs.core.rest(arglist__9433);
          return G__9432__delegate(x, y, z, args);
        };
        G__9432.cljs$core$IFn$_invoke$arity$variadic = G__9432__delegate;
        return G__9432;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__9434__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__9426_SHARP_) {
            var and__3388__auto__ = p1.call(null, p1__9426_SHARP_);
            if (cljs.core.truth_(and__3388__auto__)) {
              return p2.call(null, p1__9426_SHARP_);
            } else {
              return and__3388__auto__;
            }
          }, args));
        };
        var G__9434 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9434__delegate.call(this, x, y, z, args);
        };
        G__9434.cljs$lang$maxFixedArity = 3;
        G__9434.cljs$lang$applyTo = function(arglist__9435) {
          var x = cljs.core.first(arglist__9435);
          arglist__9435 = cljs.core.next(arglist__9435);
          var y = cljs.core.first(arglist__9435);
          arglist__9435 = cljs.core.next(arglist__9435);
          var z = cljs.core.first(arglist__9435);
          var args = cljs.core.rest(arglist__9435);
          return G__9434__delegate(x, y, z, args);
        };
        G__9434.cljs$core$IFn$_invoke$arity$variadic = G__9434__delegate;
        return G__9434;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    var and__3388__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3388__auto____$5)) {
                      var and__3388__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3388__auto____$6)) {
                        var and__3388__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3388__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3388__auto____$7;
                        }
                      } else {
                        return and__3388__auto____$6;
                      }
                    } else {
                      return and__3388__auto____$5;
                    }
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__9436__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__9427_SHARP_) {
            var and__3388__auto__ = p1.call(null, p1__9427_SHARP_);
            if (cljs.core.truth_(and__3388__auto__)) {
              var and__3388__auto____$1 = p2.call(null, p1__9427_SHARP_);
              if (cljs.core.truth_(and__3388__auto____$1)) {
                return p3.call(null, p1__9427_SHARP_);
              } else {
                return and__3388__auto____$1;
              }
            } else {
              return and__3388__auto__;
            }
          }, args));
        };
        var G__9436 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9436__delegate.call(this, x, y, z, args);
        };
        G__9436.cljs$lang$maxFixedArity = 3;
        G__9436.cljs$lang$applyTo = function(arglist__9437) {
          var x = cljs.core.first(arglist__9437);
          arglist__9437 = cljs.core.next(arglist__9437);
          var y = cljs.core.first(arglist__9437);
          arglist__9437 = cljs.core.next(arglist__9437);
          var z = cljs.core.first(arglist__9437);
          var args = cljs.core.rest(arglist__9437);
          return G__9436__delegate(x, y, z, args);
        };
        G__9436.cljs$core$IFn$_invoke$arity$variadic = G__9436__delegate;
        return G__9436;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__9438__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__9428_SHARP_) {
            return p1__9428_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__9429_SHARP_) {
            var and__3388__auto__ = p1__9429_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3388__auto__)) {
              return p1__9429_SHARP_.call(null, y);
            } else {
              return and__3388__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__9430_SHARP_) {
            var and__3388__auto__ = p1__9430_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3388__auto__)) {
              var and__3388__auto____$1 = p1__9430_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3388__auto____$1)) {
                return p1__9430_SHARP_.call(null, z);
              } else {
                return and__3388__auto____$1;
              }
            } else {
              return and__3388__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__9439__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__9431_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__9431_SHARP_, args);
            }, ps__$1));
          };
          var G__9439 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__9439__delegate.call(this, x, y, z, args);
          };
          G__9439.cljs$lang$maxFixedArity = 3;
          G__9439.cljs$lang$applyTo = function(arglist__9440) {
            var x = cljs.core.first(arglist__9440);
            arglist__9440 = cljs.core.next(arglist__9440);
            var y = cljs.core.first(arglist__9440);
            arglist__9440 = cljs.core.next(arglist__9440);
            var z = cljs.core.first(arglist__9440);
            var args = cljs.core.rest(arglist__9440);
            return G__9439__delegate(x, y, z, args);
          };
          G__9439.cljs$core$IFn$_invoke$arity$variadic = G__9439__delegate;
          return G__9439;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__9438 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9438__delegate.call(this, p1, p2, p3, ps);
    };
    G__9438.cljs$lang$maxFixedArity = 3;
    G__9438.cljs$lang$applyTo = function(arglist__9441) {
      var p1 = cljs.core.first(arglist__9441);
      arglist__9441 = cljs.core.next(arglist__9441);
      var p2 = cljs.core.first(arglist__9441);
      arglist__9441 = cljs.core.next(arglist__9441);
      var p3 = cljs.core.first(arglist__9441);
      var ps = cljs.core.rest(arglist__9441);
      return G__9438__delegate(p1, p2, p3, ps);
    };
    G__9438.cljs$core$IFn$_invoke$arity$variadic = G__9438__delegate;
    return G__9438;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3400__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3400__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__9448__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__9448 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9448__delegate.call(this, x, y, z, args);
        };
        G__9448.cljs$lang$maxFixedArity = 3;
        G__9448.cljs$lang$applyTo = function(arglist__9449) {
          var x = cljs.core.first(arglist__9449);
          arglist__9449 = cljs.core.next(arglist__9449);
          var y = cljs.core.first(arglist__9449);
          arglist__9449 = cljs.core.next(arglist__9449);
          var z = cljs.core.first(arglist__9449);
          var args = cljs.core.rest(arglist__9449);
          return G__9448__delegate(x, y, z, args);
        };
        G__9448.cljs$core$IFn$_invoke$arity$variadic = G__9448__delegate;
        return G__9448;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__9450__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__9442_SHARP_) {
              var or__3400__auto____$1 = p1.call(null, p1__9442_SHARP_);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                return p2.call(null, p1__9442_SHARP_);
              }
            }, args);
          }
        };
        var G__9450 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9450__delegate.call(this, x, y, z, args);
        };
        G__9450.cljs$lang$maxFixedArity = 3;
        G__9450.cljs$lang$applyTo = function(arglist__9451) {
          var x = cljs.core.first(arglist__9451);
          arglist__9451 = cljs.core.next(arglist__9451);
          var y = cljs.core.first(arglist__9451);
          arglist__9451 = cljs.core.next(arglist__9451);
          var z = cljs.core.first(arglist__9451);
          var args = cljs.core.rest(arglist__9451);
          return G__9450__delegate(x, y, z, args);
        };
        G__9450.cljs$core$IFn$_invoke$arity$variadic = G__9450__delegate;
        return G__9450;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  var or__3400__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3400__auto____$5)) {
                    return or__3400__auto____$5;
                  } else {
                    var or__3400__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3400__auto____$6)) {
                      return or__3400__auto____$6;
                    } else {
                      var or__3400__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3400__auto____$7)) {
                        return or__3400__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__9452__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__9443_SHARP_) {
              var or__3400__auto____$1 = p1.call(null, p1__9443_SHARP_);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                var or__3400__auto____$2 = p2.call(null, p1__9443_SHARP_);
                if (cljs.core.truth_(or__3400__auto____$2)) {
                  return or__3400__auto____$2;
                } else {
                  return p3.call(null, p1__9443_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__9452 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9452__delegate.call(this, x, y, z, args);
        };
        G__9452.cljs$lang$maxFixedArity = 3;
        G__9452.cljs$lang$applyTo = function(arglist__9453) {
          var x = cljs.core.first(arglist__9453);
          arglist__9453 = cljs.core.next(arglist__9453);
          var y = cljs.core.first(arglist__9453);
          arglist__9453 = cljs.core.next(arglist__9453);
          var z = cljs.core.first(arglist__9453);
          var args = cljs.core.rest(arglist__9453);
          return G__9452__delegate(x, y, z, args);
        };
        G__9452.cljs$core$IFn$_invoke$arity$variadic = G__9452__delegate;
        return G__9452;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__9454__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__9444_SHARP_) {
            return p1__9444_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__9445_SHARP_) {
            var or__3400__auto__ = p1__9445_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return p1__9445_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__9446_SHARP_) {
            var or__3400__auto__ = p1__9446_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              var or__3400__auto____$1 = p1__9446_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                return p1__9446_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__9455__delegate = function(x, y, z, args) {
            var or__3400__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__9447_SHARP_) {
                return cljs.core.some.call(null, p1__9447_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__9455 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__9455__delegate.call(this, x, y, z, args);
          };
          G__9455.cljs$lang$maxFixedArity = 3;
          G__9455.cljs$lang$applyTo = function(arglist__9456) {
            var x = cljs.core.first(arglist__9456);
            arglist__9456 = cljs.core.next(arglist__9456);
            var y = cljs.core.first(arglist__9456);
            arglist__9456 = cljs.core.next(arglist__9456);
            var z = cljs.core.first(arglist__9456);
            var args = cljs.core.rest(arglist__9456);
            return G__9455__delegate(x, y, z, args);
          };
          G__9455.cljs$core$IFn$_invoke$arity$variadic = G__9455__delegate;
          return G__9455;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__9454 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9454__delegate.call(this, p1, p2, p3, ps);
    };
    G__9454.cljs$lang$maxFixedArity = 3;
    G__9454.cljs$lang$applyTo = function(arglist__9457) {
      var p1 = cljs.core.first(arglist__9457);
      arglist__9457 = cljs.core.next(arglist__9457);
      var p2 = cljs.core.first(arglist__9457);
      arglist__9457 = cljs.core.next(arglist__9457);
      var p3 = cljs.core.first(arglist__9457);
      var ps = cljs.core.rest(arglist__9457);
      return G__9454__delegate(p1, p2, p3, ps);
    };
    G__9454.cljs$core$IFn$_invoke$arity$variadic = G__9454__delegate;
    return G__9454;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___9459 = size;
          var i_9460 = 0;
          while (true) {
            if (i_9460 < n__4242__auto___9459) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_9460)));
              var G__9461 = i_9460 + 1;
              i_9460 = G__9461;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__9462__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__9458_SHARP_) {
        return cljs.core.apply.call(null, f, p1__9458_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__9462 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9462__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9462.cljs$lang$maxFixedArity = 4;
    G__9462.cljs$lang$applyTo = function(arglist__9463) {
      var f = cljs.core.first(arglist__9463);
      arglist__9463 = cljs.core.next(arglist__9463);
      var c1 = cljs.core.first(arglist__9463);
      arglist__9463 = cljs.core.next(arglist__9463);
      var c2 = cljs.core.first(arglist__9463);
      arglist__9463 = cljs.core.next(arglist__9463);
      var c3 = cljs.core.first(arglist__9463);
      var colls = cljs.core.rest(arglist__9463);
      return G__9462__delegate(f, c1, c2, c3, colls);
    };
    G__9462.cljs$core$IFn$_invoke$arity$variadic = G__9462__delegate;
    return G__9462;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__9464 = n__$1 - 1;
        var G__9465 = cljs.core.rest.call(null, s);
        n__$1 = G__9464;
        coll__$1 = G__9465;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__9466 = cljs.core.next.call(null, s);
      var G__9467 = cljs.core.next.call(null, lead);
      s = G__9466;
      lead = G__9467;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3388__auto__ = s;
        if (and__3388__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3388__auto__;
        }
      }())) {
        var G__9468 = pred__$1;
        var G__9469 = cljs.core.rest.call(null, s);
        pred__$1 = G__9468;
        coll__$1 = G__9469;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__9470__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__9470 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9470__delegate.call(this, c1, c2, colls);
    };
    G__9470.cljs$lang$maxFixedArity = 2;
    G__9470.cljs$lang$applyTo = function(arglist__9471) {
      var c1 = cljs.core.first(arglist__9471);
      arglist__9471 = cljs.core.next(arglist__9471);
      var c2 = cljs.core.first(arglist__9471);
      var colls = cljs.core.rest(arglist__9471);
      return G__9470__delegate(c1, c2, colls);
    };
    G__9470.cljs$core$IFn$_invoke$arity$variadic = G__9470__delegate;
    return G__9470;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__9472__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__9472 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9472__delegate.call(this, f, coll, colls);
    };
    G__9472.cljs$lang$maxFixedArity = 2;
    G__9472.cljs$lang$applyTo = function(arglist__9473) {
      var f = cljs.core.first(arglist__9473);
      arglist__9473 = cljs.core.next(arglist__9473);
      var coll = cljs.core.first(arglist__9473);
      var colls = cljs.core.rest(arglist__9473);
      return G__9472__delegate(f, coll, colls);
    };
    G__9472.cljs$core$IFn$_invoke$arity$variadic = G__9472__delegate;
    return G__9472;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4242__auto___9474 = size;
        var i_9475 = 0;
        while (true) {
          if (i_9475 < n__4242__auto___9474) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_9475)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_9475));
            } else {
            }
            var G__9476 = i_9475 + 1;
            i_9475 = G__9476;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__9477_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__9477_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__9479 = to;
      if (G__9479) {
        var bit__4037__auto__ = G__9479.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4037__auto__ || G__9479.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__9480__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__9480 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9480__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9480.cljs$lang$maxFixedArity = 4;
    G__9480.cljs$lang$applyTo = function(arglist__9481) {
      var f = cljs.core.first(arglist__9481);
      arglist__9481 = cljs.core.next(arglist__9481);
      var c1 = cljs.core.first(arglist__9481);
      arglist__9481 = cljs.core.next(arglist__9481);
      var c2 = cljs.core.first(arglist__9481);
      arglist__9481 = cljs.core.next(arglist__9481);
      var c3 = cljs.core.first(arglist__9481);
      var colls = cljs.core.rest(arglist__9481);
      return G__9480__delegate(f, c1, c2, c3, colls);
    };
    G__9480.cljs$core$IFn$_invoke$arity$variadic = G__9480__delegate;
    return G__9480;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__9483 = m__$1;
          if (G__9483) {
            var bit__4044__auto__ = G__9483.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4044__auto__ || G__9483.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__9483.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__9483);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__9483);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__9484 = sentinel;
            var G__9485 = m__$2;
            var G__9486 = cljs.core.next.call(null, ks__$1);
            sentinel = G__9484;
            m__$1 = G__9485;
            ks__$1 = G__9486;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__9487, v) {
  var vec__9489 = p__9487;
  var k = cljs.core.nth.call(null, vec__9489, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__9489, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__9490, f) {
    var vec__9500 = p__9490;
    var k = cljs.core.nth.call(null, vec__9500, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9500, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__9491, f, a) {
    var vec__9501 = p__9491;
    var k = cljs.core.nth.call(null, vec__9501, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9501, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__9492, f, a, b) {
    var vec__9502 = p__9492;
    var k = cljs.core.nth.call(null, vec__9502, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9502, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__9493, f, a, b, c) {
    var vec__9503 = p__9493;
    var k = cljs.core.nth.call(null, vec__9503, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9503, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__9505__delegate = function(m, p__9494, f, a, b, c, args) {
      var vec__9504 = p__9494;
      var k = cljs.core.nth.call(null, vec__9504, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__9504, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__9505 = function(m, p__9494, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__9505__delegate.call(this, m, p__9494, f, a, b, c, args);
    };
    G__9505.cljs$lang$maxFixedArity = 6;
    G__9505.cljs$lang$applyTo = function(arglist__9506) {
      var m = cljs.core.first(arglist__9506);
      arglist__9506 = cljs.core.next(arglist__9506);
      var p__9494 = cljs.core.first(arglist__9506);
      arglist__9506 = cljs.core.next(arglist__9506);
      var f = cljs.core.first(arglist__9506);
      arglist__9506 = cljs.core.next(arglist__9506);
      var a = cljs.core.first(arglist__9506);
      arglist__9506 = cljs.core.next(arglist__9506);
      var b = cljs.core.first(arglist__9506);
      arglist__9506 = cljs.core.next(arglist__9506);
      var c = cljs.core.first(arglist__9506);
      var args = cljs.core.rest(arglist__9506);
      return G__9505__delegate(m, p__9494, f, a, b, c, args);
    };
    G__9505.cljs$core$IFn$_invoke$arity$variadic = G__9505__delegate;
    return G__9505;
  }();
  update_in = function(m, p__9494, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__9494, f);
      case 4:
        return update_in__4.call(this, m, p__9494, f, a);
      case 5:
        return update_in__5.call(this, m, p__9494, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__9494, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__9494, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__9507 = ll - 5;
      var G__9508 = r;
      ll = G__9507;
      ret = G__9508;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__9509 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__9510 = level - 5;
          node = G__9509;
          level = G__9510;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__9512 = null;
  var G__9512__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9512__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9512 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9512__2.call(this, self__, k);
      case 3:
        return G__9512__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9512;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9511) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9511)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__9513 = j + 1;
              var G__9514 = init__$2;
              j = G__9513;
              init__$1 = G__9514;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__9515 = i + step_init[0];
        i = G__9515;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4242__auto___9516 = len;
    var i_9517 = 0;
    while (true) {
      if (i_9517 < n__4242__auto___9516) {
        new_tail[i_9517] = self__.tail[i_9517];
        var G__9518 = i_9517 + 1;
        i_9517 = G__9518;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__9519 = i + 1;
        var G__9520 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__9519;
        out = G__9520;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__9521) {
    var args = cljs.core.seq(arglist__9521);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3707__auto__ = self__.end;
    var y__3708__auto__ = v_pos + 1;
    return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__9523 = null;
  var G__9523__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9523__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9523 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9523__2.call(this, self__, k);
      case 3:
        return G__9523__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9523;
}();
cljs.core.Subvec.prototype.apply = function(self__, args9522) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9522)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$ = true;
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__9524 = meta;
      var G__9525 = v.v;
      var G__9526 = v.start + start;
      var G__9527 = v.start + end;
      var G__9528 = __hash;
      meta = G__9524;
      v = G__9525;
      start = G__9526;
      end = G__9527;
      __hash = G__9528;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj9532 = {};
    return obj9532;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__9533 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__9534 = level - 5;
          node = G__9533;
          level = G__9534;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__9536 = null;
  var G__9536__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9536__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9536 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9536__2.call(this, self__, k);
      case 3:
        return G__9536__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9536;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args9535) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9535)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3400__auto__ = self__.rear;
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3400__auto__ = self__.front;
    if (cljs.core.truth_(or__3400__auto__)) {
      return or__3400__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__9537 = i + incr;
        i = G__9537;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__9538 = i + 1;
      var G__9539 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__9538;
      out = G__9539;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj9543 = {};
    return obj9543;
  }();
  var l = ks.length;
  var i_9544 = 0;
  while (true) {
    if (i_9544 < l) {
      var k_9545 = ks[i_9544];
      new_obj[k_9545] = obj[k_9545];
      var G__9546 = i_9544 + 1;
      i_9544 = G__9546;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__9549 = null;
  var G__9549__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9549__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9549 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9549__2.call(this, self__, k);
      case 3:
        return G__9549__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9549;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args9548) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9548)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9550 = cljs.core.rest.call(null, keys__$1);
        var G__9551 = init__$2;
        keys__$1 = G__9550;
        init__$1 = G__9551;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__9547_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9547_SHARP_, self__.strobj[p1__9547_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj9553 = {};
  return obj9553;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9554 = i + 2;
          i = G__9554;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9555 = i + 2;
          i = G__9555;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9556 = i + 2;
          i = G__9556;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9557 = i + 2;
          i = G__9557;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9558 = i + 2;
          i = G__9558;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_9559 = 0;
  while (true) {
    if (i_9559 < l) {
      narr[i_9559] = arr[i_9559];
      var G__9560 = i_9559 + 1;
      i_9559 = G__9560;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj9563 = {};
    return obj9563;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__9564 = cljs.core.aclone.call(null, self__.arr);
          G__9564[idx + 1] = v;
          return G__9564;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__9565 = null;
  var G__9565__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9565__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9565 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9565__2.call(this, self__, k);
      case 3:
        return G__9565__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9565;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args9561) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9561)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9566 = i + 2;
        var G__9567 = init__$2;
        i = G__9566;
        init__$1 = G__9567;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__9568 = s + 2;
            var G__9569 = d;
            s = G__9568;
            d = G__9569;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__9570 = s + 2;
              var G__9571 = d + 2;
              s = G__9570;
              d = G__9571;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9572 = i + 2;
        var G__9573 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__9572;
        ret = G__9573;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__9574_9576 = self__.arr;
      G__9574_9576.pop();
      G__9574_9576.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__9575 = o;
      if (G__9575) {
        var bit__4044__auto__ = G__9575.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4044__auto__ || G__9575.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9575.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9575);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9575);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__9577 = cljs.core.next.call(null, es);
          var G__9578 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__9577;
          tcoll__$2 = G__9578;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__9579 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__9580 = i + 2;
      out = G__9579;
      i = G__9580;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__9583 = cljs.core.aclone.call(null, arr);
    G__9583[i] = a;
    return G__9583;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__9584 = cljs.core.aclone.call(null, arr);
    G__9584[i] = a;
    G__9584[j] = b;
    return G__9584;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9585 = i + 2;
        var G__9586 = init__$2;
        i = G__9585;
        init__$1 = G__9586;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_9587 = 0;
        var j_9588 = 0;
        while (true) {
          if (i_9587 < 32) {
            if ((self__.bitmap >>> i_9587 & 1) === 0) {
              var G__9589 = i_9587 + 1;
              var G__9590 = j_9588;
              i_9587 = G__9589;
              j_9588 = G__9590;
              continue;
            } else {
              nodes[i_9587] = !(self__.arr[j_9588] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_9588]), self__.arr[j_9588], self__.arr[j_9588 + 1], added_leaf_QMARK_) : self__.arr[j_9588 + 1];
              var G__9591 = i_9587 + 1;
              var G__9592 = j_9588 + 2;
              i_9587 = G__9591;
              j_9588 = G__9592;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_9593 = 0;
      var j_9594 = 0;
      while (true) {
        if (i_9593 < 32) {
          if ((self__.bitmap >>> i_9593 & 1) === 0) {
            var G__9595 = i_9593 + 1;
            var G__9596 = j_9594;
            i_9593 = G__9595;
            j_9594 = G__9596;
            continue;
          } else {
            nodes[i_9593] = !(self__.arr[j_9594] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_9594]), self__.arr[j_9594], self__.arr[j_9594 + 1], added_leaf_QMARK_) : self__.arr[j_9594 + 1];
            var G__9597 = i_9593 + 1;
            var G__9598 = j_9594 + 2;
            i_9593 = G__9597;
            j_9594 = G__9598;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__9599 = i + 1;
        var G__9600 = j + 2;
        var G__9601 = bitmap | 1 << i;
        i = G__9599;
        j = G__9600;
        bitmap = G__9601;
        continue;
      } else {
        var G__9602 = i + 1;
        var G__9603 = j;
        var G__9604 = bitmap;
        i = G__9602;
        j = G__9603;
        bitmap = G__9604;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__9605 = i + 1;
          var G__9606 = init__$2;
          i = G__9605;
          init__$1 = G__9606;
          continue;
        }
      } else {
        var G__9607 = i + 1;
        var G__9608 = init__$1;
        i = G__9607;
        init__$1 = G__9608;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__9609 = i + 2;
        i = G__9609;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__9610 = j + 2;
                j = G__9610;
                continue;
              }
            } else {
              var G__9611 = j + 2;
              j = G__9611;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__9612 = j + 1;
              j = G__9612;
              continue;
            }
          } else {
            var G__9613 = j + 1;
            j = G__9613;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj9616 = {};
    return obj9616;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__9617 = null;
  var G__9617__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9617__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9617 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9617__2.call(this, self__, k);
      case 3:
        return G__9617__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9617;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args9614) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9614)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9618 = i + 1;
      var G__9619 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__9618;
      out = G__9619;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__9620 = o;
      if (G__9620) {
        var bit__4044__auto__ = G__9620.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4044__auto__ || G__9620.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9620.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9620);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9620);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__9621 = cljs.core.next.call(null, es);
          var G__9622 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__9621;
          tcoll__$1 = G__9622;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__9623 = ascending_QMARK_ ? t.left : t.right;
      var G__9624 = cljs.core.conj.call(null, stack__$1, t);
      t = G__9623;
      stack__$1 = G__9624;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__9626 = null;
  var G__9626__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9626__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9626 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9626__2.call(this, self__, k);
      case 3:
        return G__9626__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9626;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args9625) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9625)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__9628 = null;
  var G__9628__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9628__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9628 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9628__2.call(this, self__, k);
      case 3:
        return G__9628__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9628;
}();
cljs.core.RedNode.prototype.apply = function(self__, args9627) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9627)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__9630 = null;
  var G__9630__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9630__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9630 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9630__2.call(this, self__, k);
      case 3:
        return G__9630__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9630;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args9629) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9629)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__9631 = t.left;
          t = G__9631;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__9632 = t.right;
            t = G__9632;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__9633 = cljs.core.conj.call(null, stack, t);
              var G__9634 = t.left;
              stack = G__9633;
              t = G__9634;
              continue;
            } else {
              var G__9635 = stack;
              var G__9636 = t.right;
              stack = G__9635;
              t = G__9636;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__9637 = cljs.core.conj.call(null, stack, t);
                var G__9638 = t.right;
                stack = G__9637;
                t = G__9638;
                continue;
              } else {
                var G__9639 = stack;
                var G__9640 = t.left;
                stack = G__9639;
                t = G__9640;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__9641 = cljs.core.nnext.call(null, in$);
        var G__9642 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9641;
        out = G__9642;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__9643) {
    var keyvals = cljs.core.seq(arglist__9643);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__9644) {
    var keyvals = cljs.core.seq(arglist__9644);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj9648 = {};
      return obj9648;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__9649 = cljs.core.nnext.call(null, kvs);
        kvs = G__9649;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__9650) {
    var keyvals = cljs.core.seq(arglist__9650);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__9651 = cljs.core.nnext.call(null, in$);
        var G__9652 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9651;
        out = G__9652;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__9653) {
    var keyvals = cljs.core.seq(arglist__9653);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__9654 = cljs.core.nnext.call(null, in$);
        var G__9655 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9654;
        out = G__9655;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__9656) {
    var comparator = cljs.core.first(arglist__9656);
    var keyvals = cljs.core.rest(arglist__9656);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9657 = self__.mseq;
    if (G__9657) {
      var bit__4044__auto__ = G__9657.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__9657.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9657.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9657);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9657);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9658 = self__.mseq;
    if (G__9658) {
      var bit__4044__auto__ = G__9658.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__9658.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9658.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9658);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9658);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9659 = self__.mseq;
    if (G__9659) {
      var bit__4044__auto__ = G__9659.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__9659.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9659.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9659);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9659);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9660 = self__.mseq;
    if (G__9660) {
      var bit__4044__auto__ = G__9660.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__9660.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9660.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9660);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9660);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__9661_SHARP_, p2__9662_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3400__auto__ = p1__9661_SHARP_;
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__9662_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__9663) {
    var maps = cljs.core.seq(arglist__9663);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3400__auto__ = m1;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__9664) {
    var f = cljs.core.first(arglist__9664);
    var maps = cljs.core.rest(arglist__9664);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__9665 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__9666 = cljs.core.next.call(null, keys);
      ret = G__9665;
      keys = G__9666;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__9669 = null;
  var G__9669__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9669__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9669 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9669__2.call(this, self__, k);
      case 3:
        return G__9669__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9669;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args9668) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9668)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__9667_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__9667_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9670 = i + 1;
        var G__9671 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__9670;
        out = G__9671;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__9672 = i + 1;
        var G__9673 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__9672;
        out = G__9673;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__9675 = null;
  var G__9675__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__9675__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__9675 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9675__2.call(this, self__, k);
      case 3:
        return G__9675__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9675;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args9674) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9674)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__9678 = null;
  var G__9678__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9678__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9678 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9678__2.call(this, self__, k);
      case 3:
        return G__9678__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9678;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args9677) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9677)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__9676_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__9676_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4236__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4236__auto__.length) {
        var G__9679 = i + 1;
        var G__9680 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__9679;
        res = G__9680;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__9681 = cljs.core._next.call(null, in$__$1);
            var G__9682 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__9681;
            out = G__9682;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__9683__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__9683 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9683__delegate.call(this, keys);
    };
    G__9683.cljs$lang$maxFixedArity = 0;
    G__9683.cljs$lang$applyTo = function(arglist__9684) {
      var keys = cljs.core.seq(arglist__9684);
      return G__9683__delegate(keys);
    };
    G__9683.cljs$core$IFn$_invoke$arity$variadic = G__9683__delegate;
    return G__9683;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__9685) {
    var keys = cljs.core.seq(arglist__9685);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__9686) {
    var comparator = cljs.core.first(arglist__9686);
    var keys = cljs.core.rest(arglist__9686);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__9687_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__9687_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__9687_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__9694, seen__$1) {
        while (true) {
          var vec__9695 = p__9694;
          var f = cljs.core.nth.call(null, vec__9695, 0, null);
          var xs__$1 = vec__9695;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__9696 = cljs.core.rest.call(null, s);
              var G__9697 = seen__$1;
              p__9694 = G__9696;
              seen__$1 = G__9697;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__9698 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__9699 = cljs.core.next.call(null, s__$1);
      ret = G__9698;
      s__$1 = G__9699;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__9701 = x;
    if (G__9701) {
      var bit__4037__auto__ = G__9701.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4037__auto__ || G__9701.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__9702 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__9703 = cljs.core.next.call(null, ks);
      var G__9704 = cljs.core.next.call(null, vs);
      map = G__9702;
      ks = G__9703;
      vs = G__9704;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__9707__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__9705_SHARP_, p2__9706_SHARP_) {
        return max_key.call(null, k, p1__9705_SHARP_, p2__9706_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__9707 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9707__delegate.call(this, k, x, y, more);
    };
    G__9707.cljs$lang$maxFixedArity = 3;
    G__9707.cljs$lang$applyTo = function(arglist__9708) {
      var k = cljs.core.first(arglist__9708);
      arglist__9708 = cljs.core.next(arglist__9708);
      var x = cljs.core.first(arglist__9708);
      arglist__9708 = cljs.core.next(arglist__9708);
      var y = cljs.core.first(arglist__9708);
      var more = cljs.core.rest(arglist__9708);
      return G__9707__delegate(k, x, y, more);
    };
    G__9707.cljs$core$IFn$_invoke$arity$variadic = G__9707__delegate;
    return G__9707;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__9711__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__9709_SHARP_, p2__9710_SHARP_) {
        return min_key.call(null, k, p1__9709_SHARP_, p2__9710_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__9711 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9711__delegate.call(this, k, x, y, more);
    };
    G__9711.cljs$lang$maxFixedArity = 3;
    G__9711.cljs$lang$applyTo = function(arglist__9712) {
      var k = cljs.core.first(arglist__9712);
      arglist__9712 = cljs.core.next(arglist__9712);
      var x = cljs.core.first(arglist__9712);
      arglist__9712 = cljs.core.next(arglist__9712);
      var y = cljs.core.first(arglist__9712);
      var more = cljs.core.rest(arglist__9712);
      return G__9711__delegate(k, x, y, more);
    };
    G__9711.cljs$core$IFn$_invoke$arity$variadic = G__9711__delegate;
    return G__9711;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__9715 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__9715, 0, null);
        var s = vec__9715;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__9716 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__9716, 0, null);
      var s = vec__9716;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__9719 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__9719, 0, null);
        var s = vec__9719;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__9720 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__9720, 0, null);
      var s = vec__9720;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$ = true;
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__9721_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__9721_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__9732 = null;
      var G__9732__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__9732__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__9732__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__9732__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__9732__4 = function() {
        var G__9733__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__9733 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9733__delegate.call(this, x, y, z, args);
        };
        G__9733.cljs$lang$maxFixedArity = 3;
        G__9733.cljs$lang$applyTo = function(arglist__9734) {
          var x = cljs.core.first(arglist__9734);
          arglist__9734 = cljs.core.next(arglist__9734);
          var y = cljs.core.first(arglist__9734);
          arglist__9734 = cljs.core.next(arglist__9734);
          var z = cljs.core.first(arglist__9734);
          var args = cljs.core.rest(arglist__9734);
          return G__9733__delegate(x, y, z, args);
        };
        G__9733.cljs$core$IFn$_invoke$arity$variadic = G__9733__delegate;
        return G__9733;
      }();
      G__9732 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9732__0.call(this);
          case 1:
            return G__9732__1.call(this, x);
          case 2:
            return G__9732__2.call(this, x, y);
          case 3:
            return G__9732__3.call(this, x, y, z);
          default:
            return G__9732__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9732.cljs$lang$maxFixedArity = 3;
      G__9732.cljs$lang$applyTo = G__9732__4.cljs$lang$applyTo;
      return G__9732;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__9735 = null;
      var G__9735__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__9735__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__9735__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__9735__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__9735__4 = function() {
        var G__9736__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__9736 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9736__delegate.call(this, x, y, z, args);
        };
        G__9736.cljs$lang$maxFixedArity = 3;
        G__9736.cljs$lang$applyTo = function(arglist__9737) {
          var x = cljs.core.first(arglist__9737);
          arglist__9737 = cljs.core.next(arglist__9737);
          var y = cljs.core.first(arglist__9737);
          arglist__9737 = cljs.core.next(arglist__9737);
          var z = cljs.core.first(arglist__9737);
          var args = cljs.core.rest(arglist__9737);
          return G__9736__delegate(x, y, z, args);
        };
        G__9736.cljs$core$IFn$_invoke$arity$variadic = G__9736__delegate;
        return G__9736;
      }();
      G__9735 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9735__0.call(this);
          case 1:
            return G__9735__1.call(this, x);
          case 2:
            return G__9735__2.call(this, x, y);
          case 3:
            return G__9735__3.call(this, x, y, z);
          default:
            return G__9735__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9735.cljs$lang$maxFixedArity = 3;
      G__9735.cljs$lang$applyTo = G__9735__4.cljs$lang$applyTo;
      return G__9735;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__9738 = null;
      var G__9738__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__9738__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__9738__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__9738__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__9738__4 = function() {
        var G__9739__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__9739 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9739__delegate.call(this, x, y, z, args);
        };
        G__9739.cljs$lang$maxFixedArity = 3;
        G__9739.cljs$lang$applyTo = function(arglist__9740) {
          var x = cljs.core.first(arglist__9740);
          arglist__9740 = cljs.core.next(arglist__9740);
          var y = cljs.core.first(arglist__9740);
          arglist__9740 = cljs.core.next(arglist__9740);
          var z = cljs.core.first(arglist__9740);
          var args = cljs.core.rest(arglist__9740);
          return G__9739__delegate(x, y, z, args);
        };
        G__9739.cljs$core$IFn$_invoke$arity$variadic = G__9739__delegate;
        return G__9739;
      }();
      G__9738 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9738__0.call(this);
          case 1:
            return G__9738__1.call(this, x);
          case 2:
            return G__9738__2.call(this, x, y);
          case 3:
            return G__9738__3.call(this, x, y, z);
          default:
            return G__9738__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9738.cljs$lang$maxFixedArity = 3;
      G__9738.cljs$lang$applyTo = G__9738__4.cljs$lang$applyTo;
      return G__9738;
    }();
  };
  var juxt__4 = function() {
    var G__9741__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__9742 = null;
        var G__9742__0 = function() {
          return cljs.core.reduce.call(null, function(p1__9722_SHARP_, p2__9723_SHARP_) {
            return cljs.core.conj.call(null, p1__9722_SHARP_, p2__9723_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__9742__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__9724_SHARP_, p2__9725_SHARP_) {
            return cljs.core.conj.call(null, p1__9724_SHARP_, p2__9725_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__9742__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__9726_SHARP_, p2__9727_SHARP_) {
            return cljs.core.conj.call(null, p1__9726_SHARP_, p2__9727_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__9742__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__9728_SHARP_, p2__9729_SHARP_) {
            return cljs.core.conj.call(null, p1__9728_SHARP_, p2__9729_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__9742__4 = function() {
          var G__9743__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__9730_SHARP_, p2__9731_SHARP_) {
              return cljs.core.conj.call(null, p1__9730_SHARP_, cljs.core.apply.call(null, p2__9731_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9743 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__9743__delegate.call(this, x, y, z, args);
          };
          G__9743.cljs$lang$maxFixedArity = 3;
          G__9743.cljs$lang$applyTo = function(arglist__9744) {
            var x = cljs.core.first(arglist__9744);
            arglist__9744 = cljs.core.next(arglist__9744);
            var y = cljs.core.first(arglist__9744);
            arglist__9744 = cljs.core.next(arglist__9744);
            var z = cljs.core.first(arglist__9744);
            var args = cljs.core.rest(arglist__9744);
            return G__9743__delegate(x, y, z, args);
          };
          G__9743.cljs$core$IFn$_invoke$arity$variadic = G__9743__delegate;
          return G__9743;
        }();
        G__9742 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__9742__0.call(this);
            case 1:
              return G__9742__1.call(this, x);
            case 2:
              return G__9742__2.call(this, x, y);
            case 3:
              return G__9742__3.call(this, x, y, z);
            default:
              return G__9742__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9742.cljs$lang$maxFixedArity = 3;
        G__9742.cljs$lang$applyTo = G__9742__4.cljs$lang$applyTo;
        return G__9742;
      }();
    };
    var G__9741 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9741__delegate.call(this, f, g, h, fs);
    };
    G__9741.cljs$lang$maxFixedArity = 3;
    G__9741.cljs$lang$applyTo = function(arglist__9745) {
      var f = cljs.core.first(arglist__9745);
      arglist__9745 = cljs.core.next(arglist__9745);
      var g = cljs.core.first(arglist__9745);
      arglist__9745 = cljs.core.next(arglist__9745);
      var h = cljs.core.first(arglist__9745);
      var fs = cljs.core.rest(arglist__9745);
      return G__9741__delegate(f, g, h, fs);
    };
    G__9741.cljs$core$IFn$_invoke$arity$variadic = G__9741__delegate;
    return G__9741;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__9746 = cljs.core.next.call(null, coll);
        coll = G__9746;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__9747 = n - 1;
        var G__9748 = cljs.core.next.call(null, coll);
        n = G__9747;
        coll = G__9748;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__9750 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__9750, 0, null);
  var flags = cljs.core.nth.call(null, vec__9750, 1, null);
  var pattern = cljs.core.nth.call(null, vec__9750, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_9752 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_9753__$1 = cljs.core.next.call(null, coll);
      var n_9754 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_9753__$1 && (n_9754 == null || !(n_9754 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_9753__$1), writer, opts);
          var G__9755 = cljs.core.next.call(null, coll_9753__$1);
          var G__9756 = n_9754 - 1;
          coll_9753__$1 = G__9755;
          n_9754 = G__9756;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_9752;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__9761 = cljs.core.seq.call(null, ss);
    var chunk__9762 = null;
    var count__9763 = 0;
    var i__9764 = 0;
    while (true) {
      if (i__9764 < count__9763) {
        var s = cljs.core._nth.call(null, chunk__9762, i__9764);
        cljs.core._write.call(null, writer, s);
        var G__9765 = seq__9761;
        var G__9766 = chunk__9762;
        var G__9767 = count__9763;
        var G__9768 = i__9764 + 1;
        seq__9761 = G__9765;
        chunk__9762 = G__9766;
        count__9763 = G__9767;
        i__9764 = G__9768;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__9761);
        if (temp__4092__auto__) {
          var seq__9761__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9761__$1)) {
            var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__9761__$1);
            var G__9769 = cljs.core.chunk_rest.call(null, seq__9761__$1);
            var G__9770 = c__4142__auto__;
            var G__9771 = cljs.core.count.call(null, c__4142__auto__);
            var G__9772 = 0;
            seq__9761 = G__9769;
            chunk__9762 = G__9770;
            count__9763 = G__9771;
            i__9764 = G__9772;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__9761__$1);
            cljs.core._write.call(null, writer, s);
            var G__9773 = cljs.core.next.call(null, seq__9761__$1);
            var G__9774 = null;
            var G__9775 = 0;
            var G__9776 = 0;
            seq__9761 = G__9773;
            chunk__9762 = G__9774;
            count__9763 = G__9775;
            i__9764 = G__9776;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__9777) {
    var writer = cljs.core.first(arglist__9777);
    var ss = cljs.core.rest(arglist__9777);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj9779 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj9779;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3388__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = function() {
              var G__9785 = obj;
              if (G__9785) {
                var bit__4044__auto__ = G__9785.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4044__auto__ || G__9785.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__9785.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9785);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9785);
              }
            }();
            if (and__3388__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__9786 = obj;
              if (G__9786) {
                var bit__4037__auto__ = G__9786.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4037__auto__ || G__9786.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__9788 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__9788;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__9787 = obj;
                              if (G__9787) {
                                var bit__4044__auto__ = G__9787.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4044__auto__ || G__9787.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__9787.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__9787);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__9787);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__9793 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__9794 = null;
  var count__9795 = 0;
  var i__9796 = 0;
  while (true) {
    if (i__9796 < count__9795) {
      var obj = cljs.core._nth.call(null, chunk__9794, i__9796);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__9797 = seq__9793;
      var G__9798 = chunk__9794;
      var G__9799 = count__9795;
      var G__9800 = i__9796 + 1;
      seq__9793 = G__9797;
      chunk__9794 = G__9798;
      count__9795 = G__9799;
      i__9796 = G__9800;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__9793);
      if (temp__4092__auto__) {
        var seq__9793__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9793__$1)) {
          var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__9793__$1);
          var G__9801 = cljs.core.chunk_rest.call(null, seq__9793__$1);
          var G__9802 = c__4142__auto__;
          var G__9803 = cljs.core.count.call(null, c__4142__auto__);
          var G__9804 = 0;
          seq__9793 = G__9801;
          chunk__9794 = G__9802;
          count__9795 = G__9803;
          i__9796 = G__9804;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__9793__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__9805 = cljs.core.next.call(null, seq__9793__$1);
          var G__9806 = null;
          var G__9807 = 0;
          var G__9808 = 0;
          seq__9793 = G__9805;
          chunk__9794 = G__9806;
          count__9795 = G__9807;
          i__9796 = G__9808;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__9809) {
    var objs = cljs.core.seq(arglist__9809);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__9810) {
    var objs = cljs.core.seq(arglist__9810);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__9811) {
    var objs = cljs.core.seq(arglist__9811);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__9812) {
    var objs = cljs.core.seq(arglist__9812);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__9813) {
    var objs = cljs.core.seq(arglist__9813);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__9814) {
    var objs = cljs.core.seq(arglist__9814);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__9815) {
    var objs = cljs.core.seq(arglist__9815);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__9816) {
    var objs = cljs.core.seq(arglist__9816);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__9817 = cljs.core.seq.call(null, self__.watches);
  var chunk__9818 = null;
  var count__9819 = 0;
  var i__9820 = 0;
  while (true) {
    if (i__9820 < count__9819) {
      var vec__9821 = cljs.core._nth.call(null, chunk__9818, i__9820);
      var key = cljs.core.nth.call(null, vec__9821, 0, null);
      var f = cljs.core.nth.call(null, vec__9821, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__9823 = seq__9817;
      var G__9824 = chunk__9818;
      var G__9825 = count__9819;
      var G__9826 = i__9820 + 1;
      seq__9817 = G__9823;
      chunk__9818 = G__9824;
      count__9819 = G__9825;
      i__9820 = G__9826;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__9817);
      if (temp__4092__auto__) {
        var seq__9817__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9817__$1)) {
          var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__9817__$1);
          var G__9827 = cljs.core.chunk_rest.call(null, seq__9817__$1);
          var G__9828 = c__4142__auto__;
          var G__9829 = cljs.core.count.call(null, c__4142__auto__);
          var G__9830 = 0;
          seq__9817 = G__9827;
          chunk__9818 = G__9828;
          count__9819 = G__9829;
          i__9820 = G__9830;
          continue;
        } else {
          var vec__9822 = cljs.core.first.call(null, seq__9817__$1);
          var key = cljs.core.nth.call(null, vec__9822, 0, null);
          var f = cljs.core.nth.call(null, vec__9822, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__9831 = cljs.core.next.call(null, seq__9817__$1);
          var G__9832 = null;
          var G__9833 = 0;
          var G__9834 = 0;
          seq__9817 = G__9831;
          chunk__9818 = G__9832;
          count__9819 = G__9833;
          i__9820 = G__9834;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__9838__delegate = function(x, p__9835) {
      var map__9837 = p__9835;
      var map__9837__$1 = cljs.core.seq_QMARK_.call(null, map__9837) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9837) : map__9837;
      var validator = cljs.core.get.call(null, map__9837__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__9837__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__9838 = function(x, var_args) {
      var p__9835 = null;
      if (arguments.length > 1) {
        p__9835 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9838__delegate.call(this, x, p__9835);
    };
    G__9838.cljs$lang$maxFixedArity = 1;
    G__9838.cljs$lang$applyTo = function(arglist__9839) {
      var x = cljs.core.first(arglist__9839);
      var p__9835 = cljs.core.rest(arglist__9839);
      return G__9838__delegate(x, p__9835);
    };
    G__9838.cljs$core$IFn$_invoke$arity$variadic = G__9838__delegate;
    return G__9838;
  }();
  atom = function(x, var_args) {
    var p__9835 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_9840 = a.validator;
  if (validate_9840 == null) {
  } else {
    if (cljs.core.truth_(validate_9840.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_9841 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_9841, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__9842__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__9842 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__9842__delegate.call(this, a, f, x, y, z, more);
    };
    G__9842.cljs$lang$maxFixedArity = 5;
    G__9842.cljs$lang$applyTo = function(arglist__9843) {
      var a = cljs.core.first(arglist__9843);
      arglist__9843 = cljs.core.next(arglist__9843);
      var f = cljs.core.first(arglist__9843);
      arglist__9843 = cljs.core.next(arglist__9843);
      var x = cljs.core.first(arglist__9843);
      arglist__9843 = cljs.core.next(arglist__9843);
      var y = cljs.core.first(arglist__9843);
      arglist__9843 = cljs.core.next(arglist__9843);
      var z = cljs.core.first(arglist__9843);
      var more = cljs.core.rest(arglist__9843);
      return G__9842__delegate(a, f, x, y, z, more);
    };
    G__9842.cljs$core$IFn$_invoke$arity$variadic = G__9842__delegate;
    return G__9842;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__9844) {
    var iref = cljs.core.first(arglist__9844);
    arglist__9844 = cljs.core.next(arglist__9844);
    var f = cljs.core.first(arglist__9844);
    var args = cljs.core.rest(arglist__9844);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__9845) {
    var map__9846 = p__9845;
    var map__9846__$1 = cljs.core.seq_QMARK_.call(null, map__9846) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9846) : map__9846;
    var curr_state = map__9846__$1;
    var done = cljs.core.get.call(null, map__9846__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj9848 = {};
  return obj9848;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__9850 = k;
    if (G__9850) {
      var bit__4044__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3400__auto__ = bit__4044__auto__;
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return G__9850.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__9850.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__9850);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__9850);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__9864 = x;
      if (G__9864) {
        var bit__4044__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3400__auto__ = bit__4044__auto__;
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return G__9864.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__9864.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__9864);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__9864);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj9866 = {};
              return obj9866;
            }();
            var seq__9867_9877 = cljs.core.seq.call(null, x);
            var chunk__9868_9878 = null;
            var count__9869_9879 = 0;
            var i__9870_9880 = 0;
            while (true) {
              if (i__9870_9880 < count__9869_9879) {
                var vec__9871_9881 = cljs.core._nth.call(null, chunk__9868_9878, i__9870_9880);
                var k_9882 = cljs.core.nth.call(null, vec__9871_9881, 0, null);
                var v_9883 = cljs.core.nth.call(null, vec__9871_9881, 1, null);
                m[cljs.core.key__GT_js.call(null, k_9882)] = clj__GT_js.call(null, v_9883);
                var G__9884 = seq__9867_9877;
                var G__9885 = chunk__9868_9878;
                var G__9886 = count__9869_9879;
                var G__9887 = i__9870_9880 + 1;
                seq__9867_9877 = G__9884;
                chunk__9868_9878 = G__9885;
                count__9869_9879 = G__9886;
                i__9870_9880 = G__9887;
                continue;
              } else {
                var temp__4092__auto___9888 = cljs.core.seq.call(null, seq__9867_9877);
                if (temp__4092__auto___9888) {
                  var seq__9867_9889__$1 = temp__4092__auto___9888;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__9867_9889__$1)) {
                    var c__4142__auto___9890 = cljs.core.chunk_first.call(null, seq__9867_9889__$1);
                    var G__9891 = cljs.core.chunk_rest.call(null, seq__9867_9889__$1);
                    var G__9892 = c__4142__auto___9890;
                    var G__9893 = cljs.core.count.call(null, c__4142__auto___9890);
                    var G__9894 = 0;
                    seq__9867_9877 = G__9891;
                    chunk__9868_9878 = G__9892;
                    count__9869_9879 = G__9893;
                    i__9870_9880 = G__9894;
                    continue;
                  } else {
                    var vec__9872_9895 = cljs.core.first.call(null, seq__9867_9889__$1);
                    var k_9896 = cljs.core.nth.call(null, vec__9872_9895, 0, null);
                    var v_9897 = cljs.core.nth.call(null, vec__9872_9895, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_9896)] = clj__GT_js.call(null, v_9897);
                    var G__9898 = cljs.core.next.call(null, seq__9867_9889__$1);
                    var G__9899 = null;
                    var G__9900 = 0;
                    var G__9901 = 0;
                    seq__9867_9877 = G__9898;
                    chunk__9868_9878 = G__9899;
                    count__9869_9879 = G__9900;
                    i__9870_9880 = G__9901;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__9873_9902 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__9874_9903 = null;
              var count__9875_9904 = 0;
              var i__9876_9905 = 0;
              while (true) {
                if (i__9876_9905 < count__9875_9904) {
                  var x_9906__$1 = cljs.core._nth.call(null, chunk__9874_9903, i__9876_9905);
                  arr.push(x_9906__$1);
                  var G__9907 = seq__9873_9902;
                  var G__9908 = chunk__9874_9903;
                  var G__9909 = count__9875_9904;
                  var G__9910 = i__9876_9905 + 1;
                  seq__9873_9902 = G__9907;
                  chunk__9874_9903 = G__9908;
                  count__9875_9904 = G__9909;
                  i__9876_9905 = G__9910;
                  continue;
                } else {
                  var temp__4092__auto___9911 = cljs.core.seq.call(null, seq__9873_9902);
                  if (temp__4092__auto___9911) {
                    var seq__9873_9912__$1 = temp__4092__auto___9911;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__9873_9912__$1)) {
                      var c__4142__auto___9913 = cljs.core.chunk_first.call(null, seq__9873_9912__$1);
                      var G__9914 = cljs.core.chunk_rest.call(null, seq__9873_9912__$1);
                      var G__9915 = c__4142__auto___9913;
                      var G__9916 = cljs.core.count.call(null, c__4142__auto___9913);
                      var G__9917 = 0;
                      seq__9873_9902 = G__9914;
                      chunk__9874_9903 = G__9915;
                      count__9875_9904 = G__9916;
                      i__9876_9905 = G__9917;
                      continue;
                    } else {
                      var x_9918__$1 = cljs.core.first.call(null, seq__9873_9912__$1);
                      arr.push(x_9918__$1);
                      var G__9919 = cljs.core.next.call(null, seq__9873_9912__$1);
                      var G__9920 = null;
                      var G__9921 = 0;
                      var G__9922 = 0;
                      seq__9873_9902 = G__9919;
                      chunk__9874_9903 = G__9920;
                      count__9875_9904 = G__9921;
                      i__9876_9905 = G__9922;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj9924 = {};
  return obj9924;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__9945__delegate = function(x, opts) {
      if (function() {
        var G__9935 = x;
        if (G__9935) {
          var bit__4044__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3400__auto__ = bit__4044__auto__;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return G__9935.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__9935.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__9935);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__9935);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__9936 = opts;
          var map__9936__$1 = cljs.core.seq_QMARK_.call(null, map__9936) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9936) : map__9936;
          var keywordize_keys = cljs.core.get.call(null, map__9936__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__9936, map__9936__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4111__auto__ = function(map__9936, map__9936__$1, keywordize_keys, keyfn) {
                          return function iter__9941(s__9942) {
                            return new cljs.core.LazySeq(null, function(map__9936, map__9936__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__9942__$1 = s__9942;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__9942__$1);
                                  if (temp__4092__auto__) {
                                    var s__9942__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__9942__$2)) {
                                      var c__4109__auto__ = cljs.core.chunk_first.call(null, s__9942__$2);
                                      var size__4110__auto__ = cljs.core.count.call(null, c__4109__auto__);
                                      var b__9944 = cljs.core.chunk_buffer.call(null, size__4110__auto__);
                                      if (function() {
                                        var i__9943 = 0;
                                        while (true) {
                                          if (i__9943 < size__4110__auto__) {
                                            var k = cljs.core._nth.call(null, c__4109__auto__, i__9943);
                                            cljs.core.chunk_append.call(null, b__9944, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__9946 = i__9943 + 1;
                                            i__9943 = G__9946;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9944), iter__9941.call(null, cljs.core.chunk_rest.call(null, s__9942__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9944), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__9942__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__9941.call(null, cljs.core.rest.call(null, s__9942__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__9936, map__9936__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__9936, map__9936__$1, keywordize_keys, keyfn);
                        return iter__4111__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__9936, map__9936__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__9945 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9945__delegate.call(this, x, opts);
    };
    G__9945.cljs$lang$maxFixedArity = 1;
    G__9945.cljs$lang$applyTo = function(arglist__9947) {
      var x = cljs.core.first(arglist__9947);
      var opts = cljs.core.rest(arglist__9947);
      return G__9945__delegate(x, opts);
    };
    G__9945.cljs$core$IFn$_invoke$arity$variadic = G__9945__delegate;
    return G__9945;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__9948__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__9948 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9948__delegate.call(this, args);
    };
    G__9948.cljs$lang$maxFixedArity = 0;
    G__9948.cljs$lang$applyTo = function(arglist__9949) {
      var args = cljs.core.seq(arglist__9949);
      return G__9948__delegate(args);
    };
    G__9948.cljs$core$IFn$_invoke$arity$variadic = G__9948__delegate;
    return G__9948;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__9950 = ret;
        f = G__9950;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__9951__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__9951 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9951__delegate.call(this, f, args);
    };
    G__9951.cljs$lang$maxFixedArity = 1;
    G__9951.cljs$lang$applyTo = function(arglist__9952) {
      var f = cljs.core.first(arglist__9952);
      var args = cljs.core.rest(arglist__9952);
      return G__9951__delegate(f, args);
    };
    G__9951.cljs$core$IFn$_invoke$arity$variadic = G__9951__delegate;
    return G__9951;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__9953) {
    var f = cljs.core.first(arglist__9953);
    var args = cljs.core.rest(arglist__9953);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3400__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      var or__3400__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3400__auto____$1) {
        return or__3400__auto____$1;
      } else {
        var and__3388__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3388__auto__) {
          var and__3388__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3388__auto____$1) {
            var and__3388__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3388__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__9954 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__9955 = i + 1;
                  ret = G__9954;
                  i = G__9955;
                  continue;
                }
                break;
              }
            } else {
              return and__3388__auto____$2;
            }
          } else {
            return and__3388__auto____$1;
          }
        } else {
          return and__3388__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3400__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3400__auto__)) {
      return or__3400__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__9956_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__9956_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__9956_SHARP_), cljs.core.second.call(null, p1__9956_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__9957_SHARP_, p2__9958_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__9957_SHARP_, p2__9958_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3400__auto__ = cljs.core.truth_(function() {
    var and__3388__auto__ = xprefs;
    if (cljs.core.truth_(and__3388__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3388__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    var or__3400__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__9959 = cljs.core.rest.call(null, ps);
          ps = G__9959;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3400__auto____$1)) {
      return or__3400__auto____$1;
    } else {
      var or__3400__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__9960 = cljs.core.rest.call(null, ps);
            ps = G__9960;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3400__auto____$2)) {
        return or__3400__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3400__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__9963) {
    var vec__9964 = p__9963;
    var k = cljs.core.nth.call(null, vec__9964, 0, null);
    var _ = cljs.core.nth.call(null, vec__9964, 1, null);
    var e = vec__9964;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3400__auto__ = be == null;
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj9966 = {};
  return obj9966;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._reset[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._reset["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._add_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._add_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._remove_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._remove_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._prefer_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._get_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._get_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._methods[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._methods["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._prefers[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._prefers["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._dispatch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dispatch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__9967__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__9967 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__9967__delegate.call(this, _, args);
  };
  G__9967.cljs$lang$maxFixedArity = 1;
  G__9967.cljs$lang$applyTo = function(arglist__9968) {
    var _ = cljs.core.first(arglist__9968);
    var args = cljs.core.rest(arglist__9968);
    return G__9967__delegate(_, args);
  };
  G__9967.cljs$core$IFn$_invoke$arity$variadic = G__9967__delegate;
  return G__9967;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$ICloneable$ = true;
cljs.core.UUID.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.UUID(self__.uuid);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("cljs_uuid.core");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid.core.make_random = function make_random() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16);
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16);
  };
  return new cljs.core.UUID((new goog.string.StringBuffer(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null))).toString());
};
cljs_uuid.core.make_v4 = cljs_uuid.core.make_random;
cljs_uuid.core.make_random_string = function make_random_string() {
  return cljs_uuid.core.make_random.call(null).uuid;
};
goog.provide("chaperone.crossover.user");
goog.require("cljs.core");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.user.User = function(id, firstname, lastname, password, email, photo, last_logged_in, __meta, __extmap) {
  this.id = id;
  this.firstname = firstname;
  this.lastname = lastname;
  this.password = password;
  this.email = email;
  this.photo = photo;
  this.last_logged_in = last_logged_in;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 7) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k12477, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k12477, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k12477, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229))) {
      return self__.firstname;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k12477, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043))) {
        return self__.lastname;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k12477, new cljs.core.Keyword(null, "password", "password", 2230889997))) {
          return self__.password;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k12477, new cljs.core.Keyword(null, "email", "email", 1110523662))) {
            return self__.email;
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, k12477, new cljs.core.Keyword(null, "photo", "photo", 1120547236))) {
              return self__.photo;
            } else {
              if (cljs.core.keyword_identical_QMARK_.call(null, k12477, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907))) {
                return self__.last_logged_in;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return cljs.core.get.call(null, self__.__extmap, k12477, else__3983__auto__);
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__12476) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__12479 = cljs.core.keyword_identical_QMARK_;
  var expr__12480 = k__3988__auto__;
  if (cljs.core.truth_(pred__12479.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__12480))) {
    return new chaperone.crossover.user.User(G__12476, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__12479.call(null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), expr__12480))) {
      return new chaperone.crossover.user.User(self__.id, G__12476, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__12479.call(null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), expr__12480))) {
        return new chaperone.crossover.user.User(self__.id, self__.firstname, G__12476, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__12479.call(null, new cljs.core.Keyword(null, "password", "password", 2230889997), expr__12480))) {
          return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, G__12476, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__12479.call(null, new cljs.core.Keyword(null, "email", "email", 1110523662), expr__12480))) {
            return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, G__12476, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__12479.call(null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), expr__12480))) {
              return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, G__12476, self__.last_logged_in, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__12479.call(null, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), expr__12480))) {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, G__12476, self__.__meta, self__.__extmap, null);
              } else {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__12476), null);
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.user.User{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.user.User.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__12476) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, G__12476, self__.__extmap, self__.__hash);
};
chaperone.crossover.user.User.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.user.User.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), null, new cljs.core.Keyword(null, "email", "email", 1110523662), null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), null, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), null, new cljs.core.Keyword(null, "password", "password", 2230889997), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.user.User.cljs$lang$type = true;
chaperone.crossover.user.User.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.user/User");
};
chaperone.crossover.user.User.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.user/User");
};
chaperone.crossover.user.__GT_User = function __GT_User(id, firstname, lastname, password, email, photo, last_logged_in) {
  return new chaperone.crossover.user.User(id, firstname, lastname, password, email, photo, last_logged_in);
};
chaperone.crossover.user.map__GT_User = function map__GT_User(G__12478) {
  return new chaperone.crossover.user.User((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__12478), (new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(G__12478), (new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(G__12478), (new cljs.core.Keyword(null, "password", "password", 2230889997)).cljs$core$IFn$_invoke$arity$1(G__12478), (new cljs.core.Keyword(null, "email", "email", 
  1110523662)).cljs$core$IFn$_invoke$arity$1(G__12478), (new cljs.core.Keyword(null, "photo", "photo", 1120547236)).cljs$core$IFn$_invoke$arity$1(G__12478), (new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)).cljs$core$IFn$_invoke$arity$1(G__12478), null, cljs.core.dissoc.call(null, G__12478, new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), 
  new cljs.core.Keyword(null, "password", "password", 2230889997), new cljs.core.Keyword(null, "email", "email", 1110523662), new cljs.core.Keyword(null, "photo", "photo", 1120547236), new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)));
};
chaperone.crossover.user.new_user = function() {
  var new_user__delegate = function(firstname, lastname, email, password, p__12482) {
    var map__12484 = p__12482;
    var map__12484__$1 = cljs.core.seq_QMARK_.call(null, map__12484) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12484) : map__12484;
    var last_logged_in = cljs.core.get.call(null, map__12484__$1, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907));
    var photo = cljs.core.get.call(null, map__12484__$1, new cljs.core.Keyword(null, "photo", "photo", 1120547236));
    return chaperone.crossover.user.__GT_User.call(null, cljs_uuid.core.make_random_string.call(null), firstname, lastname, password, email, photo, last_logged_in);
  };
  var new_user = function(firstname, lastname, email, password, var_args) {
    var p__12482 = null;
    if (arguments.length > 4) {
      p__12482 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
    }
    return new_user__delegate.call(this, firstname, lastname, email, password, p__12482);
  };
  new_user.cljs$lang$maxFixedArity = 4;
  new_user.cljs$lang$applyTo = function(arglist__12485) {
    var firstname = cljs.core.first(arglist__12485);
    arglist__12485 = cljs.core.next(arglist__12485);
    var lastname = cljs.core.first(arglist__12485);
    arglist__12485 = cljs.core.next(arglist__12485);
    var email = cljs.core.first(arglist__12485);
    arglist__12485 = cljs.core.next(arglist__12485);
    var password = cljs.core.first(arglist__12485);
    var p__12482 = cljs.core.rest(arglist__12485);
    return new_user__delegate(firstname, lastname, email, password, p__12482);
  };
  new_user.cljs$core$IFn$_invoke$arity$variadic = new_user__delegate;
  return new_user;
}();
chaperone.crossover.user.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "chaperone.crossover.user.User", "chaperone.crossover.user.User", -826432028, null), chaperone.crossover.user.map__GT_User], null);
};
goog.provide("chaperone.crossover.rpc");
goog.require("cljs.core");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.rpc.Request = function(id, category, action, data, __meta, __extmap) {
  this.id = id;
  this.category = category;
  this.action = action;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k9970, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k9970, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k9970, new cljs.core.Keyword(null, "category", "category", 1064415344))) {
      return self__.category;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k9970, new cljs.core.Keyword(null, "action", "action", 3885920680))) {
        return self__.action;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k9970, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
          return self__.data;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.get.call(null, self__.__extmap, k9970, else__3983__auto__);
          } else {
            return null;
          }
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__9969) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__9972 = cljs.core.keyword_identical_QMARK_;
  var expr__9973 = k__3988__auto__;
  if (cljs.core.truth_(pred__9972.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__9973))) {
    return new chaperone.crossover.rpc.Request(G__9969, self__.category, self__.action, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__9972.call(null, new cljs.core.Keyword(null, "category", "category", 1064415344), expr__9973))) {
      return new chaperone.crossover.rpc.Request(self__.id, G__9969, self__.action, self__.data, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__9972.call(null, new cljs.core.Keyword(null, "action", "action", 3885920680), expr__9973))) {
        return new chaperone.crossover.rpc.Request(self__.id, self__.category, G__9969, self__.data, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__9972.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__9973))) {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, G__9969, self__.__meta, self__.__extmap, null);
        } else {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__9969), null);
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.rpc.Request{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__9969) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, G__9969, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "action", "action", 3885920680), null, new cljs.core.Keyword(null, "id", "id", 1013907597), null, new cljs.core.Keyword(null, "category", "category", 1064415344), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.rpc.Request.cljs$lang$type = true;
chaperone.crossover.rpc.Request.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.Request.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.__GT_Request = function __GT_Request(id, category, action, data) {
  return new chaperone.crossover.rpc.Request(id, category, action, data);
};
chaperone.crossover.rpc.map__GT_Request = function map__GT_Request(G__9971) {
  return new chaperone.crossover.rpc.Request((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__9971), (new cljs.core.Keyword(null, "category", "category", 1064415344)).cljs$core$IFn$_invoke$arity$1(G__9971), (new cljs.core.Keyword(null, "action", "action", 3885920680)).cljs$core$IFn$_invoke$arity$1(G__9971), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__9971), null, cljs.core.dissoc.call(null, G__9971, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), new cljs.core.Keyword(null, "category", "category", 1064415344), new cljs.core.Keyword(null, "action", "action", 3885920680), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.Response = function(request, data, __meta, __extmap) {
  this.request = request;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k9976, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k9976, new cljs.core.Keyword(null, "request", "request", 2109597185))) {
    return self__.request;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k9976, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
      return self__.data;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k9976, else__3983__auto__);
      } else {
        return null;
      }
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__9975) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__9978 = cljs.core.keyword_identical_QMARK_;
  var expr__9979 = k__3988__auto__;
  if (cljs.core.truth_(pred__9978.call(null, new cljs.core.Keyword(null, "request", "request", 2109597185), expr__9979))) {
    return new chaperone.crossover.rpc.Response(G__9975, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__9978.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__9979))) {
      return new chaperone.crossover.rpc.Response(self__.request, G__9975, self__.__meta, self__.__extmap, null);
    } else {
      return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__9975), null);
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.rpc.Response{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__9975) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.rpc.Response(self__.request, self__.data, G__9975, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "request", "request", 2109597185), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.rpc.Response.cljs$lang$type = true;
chaperone.crossover.rpc.Response.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.Response.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.__GT_Response = function __GT_Response(request, data) {
  return new chaperone.crossover.rpc.Response(request, data);
};
chaperone.crossover.rpc.map__GT_Response = function map__GT_Response(G__9977) {
  return new chaperone.crossover.rpc.Response((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(G__9977), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__9977), null, cljs.core.dissoc.call(null, G__9977, new cljs.core.Keyword(null, "request", "request", 2109597185), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.new_request = function new_request(category, action, data) {
  return chaperone.crossover.rpc.__GT_Request.call(null, cljs_uuid.core.make_random.call(null), category, action, data);
};
chaperone.crossover.rpc.new_response = function new_response(request, data) {
  return chaperone.crossover.rpc.__GT_Response.call(null, request, data);
};
chaperone.crossover.rpc.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "chaperone.crossover.rpc.Request", "chaperone.crossover.rpc.Request", -174529060, null), chaperone.crossover.rpc.map__GT_Request, new cljs.core.Symbol(null, "chaperone.crossover.rpc.Response", "chaperone.crossover.rpc.Response", 908805862, null), chaperone.crossover.rpc.map__GT_Response], null);
};
chaperone.crossover.rpc.all_edn_readers = function all_edn_readers() {
  return cljs.core.merge.call(null, chaperone.crossover.rpc.edn_readers.call(null), chaperone.crossover.user.edn_readers.call(null));
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj9982 = {};
  return obj9982;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3388__auto__ = reader;
    if (and__3388__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4021__auto__ = reader == null ? null : reader;
    return function() {
      var or__3400__auto__ = cljs.reader.read_char[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.read_char["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3388__auto__ = reader;
    if (and__3388__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4021__auto__ = reader == null ? null : reader;
    return function() {
      var or__3400__auto__ = cljs.reader.unread[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.unread["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3400__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__9983) {
    var rdr = cljs.core.first(arglist__9983);
    var msg = cljs.core.rest(arglist__9983);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3388__auto__ = !(ch === "#");
  if (and__3388__auto__) {
    var and__3388__auto____$1 = !(ch === "'");
    if (and__3388__auto____$1) {
      var and__3388__auto____$2 = !(ch === ":");
      if (and__3388__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3388__auto____$2;
      }
    } else {
      return and__3388__auto____$1;
    }
  } else {
    return and__3388__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__9984 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__9985 = cljs.reader.read_char.call(null, rdr);
      sb = G__9984;
      ch = G__9985;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__9986 = cljs.reader.read_char.call(null, rdr);
      ch = G__9986;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__9987 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__9987;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__9988 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__9988;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3400__auto__ = ch == null;
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3400__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__9989 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__9990 = cljs.reader.read_char.call(null, reader);
      buffer = G__9989;
      ch = G__9990;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__9991 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__9992 = cljs.reader.read_char.call(null, reader);
        buffer = G__9991;
        ch = G__9992;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__9993 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__9994 = cljs.reader.read_char.call(null, reader);
            buffer = G__9993;
            ch = G__9994;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__9996 = o;
    if (G__9996) {
      var bit__4044__auto__ = G__9996.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4044__auto__ || G__9996.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__9996.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__9996);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__9996);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__9997 = reader;
        var G__9998 = eof_is_error;
        var G__9999 = sentinel;
        var G__10000 = is_recursive;
        reader = G__9997;
        eof_is_error = G__9998;
        sentinel = G__9999;
        is_recursive = G__10000;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__10001 = cljs.reader.read_comment.call(null, reader, ch);
          var G__10002 = eof_is_error;
          var G__10003 = sentinel;
          var G__10004 = is_recursive;
          reader = G__10001;
          eof_is_error = G__10002;
          sentinel = G__10003;
          is_recursive = G__10004;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__10005 = reader;
              var G__10006 = eof_is_error;
              var G__10007 = sentinel;
              var G__10008 = is_recursive;
              reader = G__10005;
              eof_is_error = G__10006;
              sentinel = G__10007;
              is_recursive = G__10008;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__10009 = b.append("0");
            b = G__10009;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__10011 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__10011, 0, null);
  var years = cljs.core.nth.call(null, vec__10011, 1, null);
  var months = cljs.core.nth.call(null, vec__10011, 2, null);
  var days = cljs.core.nth.call(null, vec__10011, 3, null);
  var hours = cljs.core.nth.call(null, vec__10011, 4, null);
  var minutes = cljs.core.nth.call(null, vec__10011, 5, null);
  var seconds = cljs.core.nth.call(null, vec__10011, 6, null);
  var fraction = cljs.core.nth.call(null, vec__10011, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__10011, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__10011, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__10011, 10, null);
  var v = vec__10011;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__10013 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__10013, 0, null);
    var months = cljs.core.nth.call(null, vec__10013, 1, null);
    var days = cljs.core.nth.call(null, vec__10013, 2, null);
    var hours = cljs.core.nth.call(null, vec__10013, 3, null);
    var minutes = cljs.core.nth.call(null, vec__10013, 4, null);
    var seconds = cljs.core.nth.call(null, vec__10013, 5, null);
    var ms = cljs.core.nth.call(null, vec__10013, 6, null);
    var offset = cljs.core.nth.call(null, vec__10013, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__10026_10038 = cljs.core.seq.call(null, form);
    var chunk__10027_10039 = null;
    var count__10028_10040 = 0;
    var i__10029_10041 = 0;
    while (true) {
      if (i__10029_10041 < count__10028_10040) {
        var x_10042 = cljs.core._nth.call(null, chunk__10027_10039, i__10029_10041);
        arr.push(x_10042);
        var G__10043 = seq__10026_10038;
        var G__10044 = chunk__10027_10039;
        var G__10045 = count__10028_10040;
        var G__10046 = i__10029_10041 + 1;
        seq__10026_10038 = G__10043;
        chunk__10027_10039 = G__10044;
        count__10028_10040 = G__10045;
        i__10029_10041 = G__10046;
        continue;
      } else {
        var temp__4092__auto___10047 = cljs.core.seq.call(null, seq__10026_10038);
        if (temp__4092__auto___10047) {
          var seq__10026_10048__$1 = temp__4092__auto___10047;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10026_10048__$1)) {
            var c__4142__auto___10049 = cljs.core.chunk_first.call(null, seq__10026_10048__$1);
            var G__10050 = cljs.core.chunk_rest.call(null, seq__10026_10048__$1);
            var G__10051 = c__4142__auto___10049;
            var G__10052 = cljs.core.count.call(null, c__4142__auto___10049);
            var G__10053 = 0;
            seq__10026_10038 = G__10050;
            chunk__10027_10039 = G__10051;
            count__10028_10040 = G__10052;
            i__10029_10041 = G__10053;
            continue;
          } else {
            var x_10054 = cljs.core.first.call(null, seq__10026_10048__$1);
            arr.push(x_10054);
            var G__10055 = cljs.core.next.call(null, seq__10026_10048__$1);
            var G__10056 = null;
            var G__10057 = 0;
            var G__10058 = 0;
            seq__10026_10038 = G__10055;
            chunk__10027_10039 = G__10056;
            count__10028_10040 = G__10057;
            i__10029_10041 = G__10058;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj10031 = {};
        return obj10031;
      }();
      var seq__10032_10059 = cljs.core.seq.call(null, form);
      var chunk__10033_10060 = null;
      var count__10034_10061 = 0;
      var i__10035_10062 = 0;
      while (true) {
        if (i__10035_10062 < count__10034_10061) {
          var vec__10036_10063 = cljs.core._nth.call(null, chunk__10033_10060, i__10035_10062);
          var k_10064 = cljs.core.nth.call(null, vec__10036_10063, 0, null);
          var v_10065 = cljs.core.nth.call(null, vec__10036_10063, 1, null);
          obj[cljs.core.name.call(null, k_10064)] = v_10065;
          var G__10066 = seq__10032_10059;
          var G__10067 = chunk__10033_10060;
          var G__10068 = count__10034_10061;
          var G__10069 = i__10035_10062 + 1;
          seq__10032_10059 = G__10066;
          chunk__10033_10060 = G__10067;
          count__10034_10061 = G__10068;
          i__10035_10062 = G__10069;
          continue;
        } else {
          var temp__4092__auto___10070 = cljs.core.seq.call(null, seq__10032_10059);
          if (temp__4092__auto___10070) {
            var seq__10032_10071__$1 = temp__4092__auto___10070;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10032_10071__$1)) {
              var c__4142__auto___10072 = cljs.core.chunk_first.call(null, seq__10032_10071__$1);
              var G__10073 = cljs.core.chunk_rest.call(null, seq__10032_10071__$1);
              var G__10074 = c__4142__auto___10072;
              var G__10075 = cljs.core.count.call(null, c__4142__auto___10072);
              var G__10076 = 0;
              seq__10032_10059 = G__10073;
              chunk__10033_10060 = G__10074;
              count__10034_10061 = G__10075;
              i__10035_10062 = G__10076;
              continue;
            } else {
              var vec__10037_10077 = cljs.core.first.call(null, seq__10032_10071__$1);
              var k_10078 = cljs.core.nth.call(null, vec__10037_10077, 0, null);
              var v_10079 = cljs.core.nth.call(null, vec__10037_10077, 1, null);
              obj[cljs.core.name.call(null, k_10078)] = v_10079;
              var G__10080 = cljs.core.next.call(null, seq__10032_10071__$1);
              var G__10081 = null;
              var G__10082 = 0;
              var G__10083 = 0;
              seq__10032_10059 = G__10080;
              chunk__10033_10060 = G__10081;
              count__10034_10061 = G__10082;
              i__10035_10062 = G__10083;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj12022 = {};
  return obj12022;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3388__auto__ = port;
    if (and__3388__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4021__auto__ = port == null ? null : port;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj12024 = {};
  return obj12024;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3388__auto__ = port;
    if (and__3388__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4021__auto__ = port == null ? null : port;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj12026 = {};
  return obj12026;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3388__auto__ = chan;
    if (and__3388__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4021__auto__ = chan == null ? null : chan;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj12028 = {};
  return obj12028;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3388__auto__ = h;
    if (and__3388__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4021__auto__ = h == null ? null : h;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3388__auto__ = h;
    if (and__3388__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4021__auto__ = h == null ? null : h;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj12030 = {};
  return obj12030;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t12048 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t12048 = function(f, fn_handler, meta12049) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta12049 = meta12049;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t12048.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t12048.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t12048";
    cljs.core.async.impl.ioc_helpers.t12048.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.ioc-helpers/t12048");
    };
    cljs.core.async.impl.ioc_helpers.t12048.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t12048.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t12048.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t12048.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12050) {
      var self__ = this;
      var _12050__$1 = this;
      return self__.meta12049;
    };
    cljs.core.async.impl.ioc_helpers.t12048.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12050, meta12049__$1) {
      var self__ = this;
      var _12050__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t12048(self__.f, self__.fn_handler, meta12049__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t12048 = function __GT_t12048(f__$1, fn_handler__$1, meta12049) {
      return new cljs.core.async.impl.ioc_helpers.t12048(f__$1, fn_handler__$1, meta12049);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t12048(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e12052) {
    if (e12052 instanceof Object) {
      var ex = e12052;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e12052;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_12055_12057 = state;
    statearr_12055_12057[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_12055_12057[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_12056_12058 = state;
    statearr_12056_12058[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_12056_12058[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_12061_12063 = state;
    statearr_12061_12063[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_12061_12063[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_12062_12064 = state;
    statearr_12062_12064[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_12062_12064[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__12065) {
    var map__12070 = p__12065;
    var map__12070__$1 = cljs.core.seq_QMARK_.call(null, map__12070) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12070) : map__12070;
    var opts = map__12070__$1;
    var statearr_12071_12074 = state;
    statearr_12071_12074[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_12072_12075 = state;
      statearr_12072_12075[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_12073_12076 = state;
      statearr_12073_12076[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__12065 = null;
    if (arguments.length > 3) {
      p__12065 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__12065);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__12077) {
    var state = cljs.core.first(arglist__12077);
    arglist__12077 = cljs.core.next(arglist__12077);
    var cont_block = cljs.core.first(arglist__12077);
    arglist__12077 = cljs.core.next(arglist__12077);
    var ports = cljs.core.first(arglist__12077);
    var p__12065 = cljs.core.rest(arglist__12077);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__12065);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__12042 = cnt + 1;
      cnt = G__12042;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4242__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4242__auto__) {
      var v_12043 = this$.pop();
      if (keep_QMARK_.call(null, v_12043)) {
        this$.unshift(v_12043);
      } else {
      }
      var G__12044 = x + 1;
      x = G__12044;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_12031 = 0;
  while (true) {
    var m_12032 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_12032 == null) {
    } else {
      m_12032.call(null);
      if (count_12031 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__12033 = count_12031 + 1;
        count_12031 = G__12033;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3388__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3388__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t12037 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t12037 = function(val, box, meta12038) {
      this.val = val;
      this.box = box;
      this.meta12038 = meta12038;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t12037.cljs$lang$type = true;
    cljs.core.async.impl.channels.t12037.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t12037";
    cljs.core.async.impl.channels.t12037.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.channels/t12037");
    };
    cljs.core.async.impl.channels.t12037.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t12037.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12039) {
      var self__ = this;
      var _12039__$1 = this;
      return self__.meta12038;
    };
    cljs.core.async.impl.channels.t12037.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12039, meta12038__$1) {
      var self__ = this;
      var _12039__$1 = this;
      return new cljs.core.async.impl.channels.t12037(self__.val, self__.box, meta12038__$1);
    };
    cljs.core.async.impl.channels.__GT_t12037 = function __GT_t12037(val__$1, box__$1, meta12038) {
      return new cljs.core.async.impl.channels.t12037(val__$1, box__$1, meta12038);
    };
  }
  return new cljs.core.async.impl.channels.t12037(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_12040 = self__.takes.pop();
      if (taker_12040 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_12040)) {
          var take_cb_12041 = cljs.core.async.impl.protocols.commit.call(null, taker_12040);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_12041, taker_12040) {
            return function() {
              return take_cb_12041.call(null, null);
            };
          }(take_cb_12041, taker_12040));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__11997 = level + 1;
        level = G__11997;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_11998 = 0;
    while (true) {
      if (i_11998 < arr.length) {
        arr[i_11998] = null;
        var G__11999 = i_11998 + 1;
        i_11998 = G__11999;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__12000 = x_SINGLEQUOTE_;
                x__$1 = G__12000;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__12001 = x__$1;
        var G__12002 = k;
        var G__12003 = level - 1;
        var G__12004 = update;
        x = G__12001;
        k = G__12002;
        level = G__12003;
        update = G__12004;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_12005 = self__.level + 1;
      while (true) {
        if (i_12005 <= new_level + 1) {
          update[i_12005] = self__.header;
          var G__12006 = i_12005 + 1;
          i_12005 = G__12006;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_12007 = 0;
    while (true) {
      if (i_12007 <= self__.level) {
        var links_12008 = update[i_12007].forward;
        if (links_12008[i_12007] === x__$1) {
          links_12008[i_12007] = x__$1.forward[i_12007];
          var G__12009 = i_12007 + 1;
          i_12007 = G__12009;
          continue;
        } else {
          var G__12010 = i_12007 + 1;
          i_12007 = G__12010;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__12011 = x_SINGLEQUOTE_;
              x__$1 = G__12011;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__12012 = nx;
        var G__12013 = level__$1 - 1;
        x = G__12012;
        level__$1 = G__12013;
        continue;
      } else {
        var G__12014 = x;
        var G__12015 = level__$1 - 1;
        x = G__12014;
        level__$1 = G__12015;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__12016 = x_SINGLEQUOTE_;
              x__$1 = G__12016;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__12017 = nx;
        var G__12018 = level__$1 - 1;
        x = G__12017;
        level__$1 = G__12018;
        continue;
      } else {
        var G__12019 = x;
        var G__12020 = level__$1 - 1;
        x = G__12019;
        level__$1 = G__12020;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3400__auto__ = cljs.core.truth_(function() {
    var and__3388__auto__ = me;
    if (cljs.core.truth_(and__3388__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3388__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t10087 !== "undefined") {
  } else {
    cljs.core.async.t10087 = function(f, fn_handler, meta10088) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta10088 = meta10088;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10087.cljs$lang$type = true;
    cljs.core.async.t10087.cljs$lang$ctorStr = "cljs.core.async/t10087";
    cljs.core.async.t10087.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t10087");
    };
    cljs.core.async.t10087.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t10087.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t10087.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t10087.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10089) {
      var self__ = this;
      var _10089__$1 = this;
      return self__.meta10088;
    };
    cljs.core.async.t10087.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10089, meta10088__$1) {
      var self__ = this;
      var _10089__$1 = this;
      return new cljs.core.async.t10087(self__.f, self__.fn_handler, meta10088__$1);
    };
    cljs.core.async.__GT_t10087 = function __GT_t10087(f__$1, fn_handler__$1, meta10088) {
      return new cljs.core.async.t10087(f__$1, fn_handler__$1, meta10088);
    };
  }
  return new cljs.core.async.t10087(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_10090 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_10090);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_10090);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3388__auto__ = ret;
      if (cljs.core.truth_(and__3388__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3388__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4242__auto___10091 = n;
  var x_10092 = 0;
  while (true) {
    if (x_10092 < n__4242__auto___10091) {
      a[x_10092] = 0;
      var G__10093 = x_10092 + 1;
      x_10092 = G__10093;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__10094 = i + 1;
      i = G__10094;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t10098 !== "undefined") {
  } else {
    cljs.core.async.t10098 = function(flag, alt_flag, meta10099) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta10099 = meta10099;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10098.cljs$lang$type = true;
    cljs.core.async.t10098.cljs$lang$ctorStr = "cljs.core.async/t10098";
    cljs.core.async.t10098.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t10098");
    };
    cljs.core.async.t10098.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t10098.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t10098.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t10098.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10100) {
      var self__ = this;
      var _10100__$1 = this;
      return self__.meta10099;
    };
    cljs.core.async.t10098.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10100, meta10099__$1) {
      var self__ = this;
      var _10100__$1 = this;
      return new cljs.core.async.t10098(self__.flag, self__.alt_flag, meta10099__$1);
    };
    cljs.core.async.__GT_t10098 = function __GT_t10098(flag__$1, alt_flag__$1, meta10099) {
      return new cljs.core.async.t10098(flag__$1, alt_flag__$1, meta10099);
    };
  }
  return new cljs.core.async.t10098(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t10104 !== "undefined") {
  } else {
    cljs.core.async.t10104 = function(cb, flag, alt_handler, meta10105) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta10105 = meta10105;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10104.cljs$lang$type = true;
    cljs.core.async.t10104.cljs$lang$ctorStr = "cljs.core.async/t10104";
    cljs.core.async.t10104.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t10104");
    };
    cljs.core.async.t10104.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t10104.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t10104.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t10104.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10106) {
      var self__ = this;
      var _10106__$1 = this;
      return self__.meta10105;
    };
    cljs.core.async.t10104.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10106, meta10105__$1) {
      var self__ = this;
      var _10106__$1 = this;
      return new cljs.core.async.t10104(self__.cb, self__.flag, self__.alt_handler, meta10105__$1);
    };
    cljs.core.async.__GT_t10104 = function __GT_t10104(cb__$1, flag__$1, alt_handler__$1, meta10105) {
      return new cljs.core.async.t10104(cb__$1, flag__$1, alt_handler__$1, meta10105);
    };
  }
  return new cljs.core.async.t10104(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__10107_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10107_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3400__auto__ = wport;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__10108 = i + 1;
          i = G__10108;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3400__auto__ = ret;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3388__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3388__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3388__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__10109) {
    var map__10111 = p__10109;
    var map__10111__$1 = cljs.core.seq_QMARK_.call(null, map__10111) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10111) : map__10111;
    var opts = map__10111__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__10109 = null;
    if (arguments.length > 1) {
      p__10109 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__10109);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__10112) {
    var ports = cljs.core.first(arglist__10112);
    var p__10109 = cljs.core.rest(arglist__10112);
    return alts_BANG___delegate(ports, p__10109);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t10120 !== "undefined") {
  } else {
    cljs.core.async.t10120 = function(ch, f, map_LT_, meta10121) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta10121 = meta10121;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10120.cljs$lang$type = true;
    cljs.core.async.t10120.cljs$lang$ctorStr = "cljs.core.async/t10120";
    cljs.core.async.t10120.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t10120");
    };
    cljs.core.async.t10120.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t10120.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t10120.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t10120.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t10123 !== "undefined") {
        } else {
          cljs.core.async.t10123 = function(fn1, _, meta10121, ch, f, map_LT_, meta10124) {
            this.fn1 = fn1;
            this._ = _;
            this.meta10121 = meta10121;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta10124 = meta10124;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t10123.cljs$lang$type = true;
          cljs.core.async.t10123.cljs$lang$ctorStr = "cljs.core.async/t10123";
          cljs.core.async.t10123.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
            return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t10123");
          };
          cljs.core.async.t10123.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t10123.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t10123.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t10123.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__10113_SHARP_) {
                return f1.call(null, p1__10113_SHARP_ == null ? null : self__.f.call(null, p1__10113_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t10123.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10125) {
            var self__ = this;
            var _10125__$1 = this;
            return self__.meta10124;
          };
          cljs.core.async.t10123.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10125, meta10124__$1) {
            var self__ = this;
            var _10125__$1 = this;
            return new cljs.core.async.t10123(self__.fn1, self__._, self__.meta10121, self__.ch, self__.f, self__.map_LT_, meta10124__$1);
          };
          cljs.core.async.__GT_t10123 = function __GT_t10123(fn1__$1, ___$2, meta10121__$1, ch__$2, f__$2, map_LT___$2, meta10124) {
            return new cljs.core.async.t10123(fn1__$1, ___$2, meta10121__$1, ch__$2, f__$2, map_LT___$2, meta10124);
          };
        }
        return new cljs.core.async.t10123(fn1, ___$1, self__.meta10121, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3388__auto__ = ret;
        if (cljs.core.truth_(and__3388__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3388__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t10120.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t10120.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t10120.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10122) {
      var self__ = this;
      var _10122__$1 = this;
      return self__.meta10121;
    };
    cljs.core.async.t10120.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10122, meta10121__$1) {
      var self__ = this;
      var _10122__$1 = this;
      return new cljs.core.async.t10120(self__.ch, self__.f, self__.map_LT_, meta10121__$1);
    };
    cljs.core.async.__GT_t10120 = function __GT_t10120(ch__$1, f__$1, map_LT___$1, meta10121) {
      return new cljs.core.async.t10120(ch__$1, f__$1, map_LT___$1, meta10121);
    };
  }
  return new cljs.core.async.t10120(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t10129 !== "undefined") {
  } else {
    cljs.core.async.t10129 = function(ch, f, map_GT_, meta10130) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta10130 = meta10130;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10129.cljs$lang$type = true;
    cljs.core.async.t10129.cljs$lang$ctorStr = "cljs.core.async/t10129";
    cljs.core.async.t10129.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t10129");
    };
    cljs.core.async.t10129.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t10129.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t10129.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t10129.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t10129.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t10129.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t10129.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10131) {
      var self__ = this;
      var _10131__$1 = this;
      return self__.meta10130;
    };
    cljs.core.async.t10129.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10131, meta10130__$1) {
      var self__ = this;
      var _10131__$1 = this;
      return new cljs.core.async.t10129(self__.ch, self__.f, self__.map_GT_, meta10130__$1);
    };
    cljs.core.async.__GT_t10129 = function __GT_t10129(ch__$1, f__$1, map_GT___$1, meta10130) {
      return new cljs.core.async.t10129(ch__$1, f__$1, map_GT___$1, meta10130);
    };
  }
  return new cljs.core.async.t10129(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t10135 !== "undefined") {
  } else {
    cljs.core.async.t10135 = function(ch, p, filter_GT_, meta10136) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta10136 = meta10136;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t10135.cljs$lang$type = true;
    cljs.core.async.t10135.cljs$lang$ctorStr = "cljs.core.async/t10135";
    cljs.core.async.t10135.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t10135");
    };
    cljs.core.async.t10135.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t10135.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t10135.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t10135.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t10135.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t10135.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t10135.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10137) {
      var self__ = this;
      var _10137__$1 = this;
      return self__.meta10136;
    };
    cljs.core.async.t10135.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10137, meta10136__$1) {
      var self__ = this;
      var _10137__$1 = this;
      return new cljs.core.async.t10135(self__.ch, self__.p, self__.filter_GT_, meta10136__$1);
    };
    cljs.core.async.__GT_t10135 = function __GT_t10135(ch__$1, p__$1, filter_GT___$1, meta10136) {
      return new cljs.core.async.t10135(ch__$1, p__$1, filter_GT___$1, meta10136);
    };
  }
  return new cljs.core.async.t10135(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5931__auto___10212 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_10195) {
          var state_val_10196 = state_10195[1];
          if (state_val_10196 === 1) {
            var state_10195__$1 = state_10195;
            var statearr_10197_10213 = state_10195__$1;
            statearr_10197_10213[2] = null;
            statearr_10197_10213[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_10196 === 2) {
              var state_10195__$1 = state_10195;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10195__$1, 4, ch);
            } else {
              if (state_val_10196 === 3) {
                var inst_10193 = state_10195[2];
                var state_10195__$1 = state_10195;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10195__$1, inst_10193);
              } else {
                if (state_val_10196 === 4) {
                  var inst_10177 = state_10195[5];
                  var inst_10177__$1 = state_10195[2];
                  var inst_10178 = inst_10177__$1 == null;
                  var state_10195__$1 = function() {
                    var statearr_10198 = state_10195;
                    statearr_10198[5] = inst_10177__$1;
                    return statearr_10198;
                  }();
                  if (cljs.core.truth_(inst_10178)) {
                    var statearr_10199_10214 = state_10195__$1;
                    statearr_10199_10214[1] = 5;
                  } else {
                    var statearr_10200_10215 = state_10195__$1;
                    statearr_10200_10215[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_10196 === 5) {
                    var inst_10180 = cljs.core.async.close_BANG_.call(null, out);
                    var state_10195__$1 = state_10195;
                    var statearr_10201_10216 = state_10195__$1;
                    statearr_10201_10216[2] = inst_10180;
                    statearr_10201_10216[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_10196 === 6) {
                      var inst_10177 = state_10195[5];
                      var inst_10182 = p.call(null, inst_10177);
                      var state_10195__$1 = state_10195;
                      if (cljs.core.truth_(inst_10182)) {
                        var statearr_10202_10217 = state_10195__$1;
                        statearr_10202_10217[1] = 8;
                      } else {
                        var statearr_10203_10218 = state_10195__$1;
                        statearr_10203_10218[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_10196 === 7) {
                        var inst_10191 = state_10195[2];
                        var state_10195__$1 = state_10195;
                        var statearr_10204_10219 = state_10195__$1;
                        statearr_10204_10219[2] = inst_10191;
                        statearr_10204_10219[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_10196 === 8) {
                          var inst_10177 = state_10195[5];
                          var state_10195__$1 = state_10195;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10195__$1, 11, out, inst_10177);
                        } else {
                          if (state_val_10196 === 9) {
                            var state_10195__$1 = state_10195;
                            var statearr_10205_10220 = state_10195__$1;
                            statearr_10205_10220[2] = null;
                            statearr_10205_10220[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_10196 === 10) {
                              var inst_10188 = state_10195[2];
                              var state_10195__$1 = function() {
                                var statearr_10206 = state_10195;
                                statearr_10206[6] = inst_10188;
                                return statearr_10206;
                              }();
                              var statearr_10207_10221 = state_10195__$1;
                              statearr_10207_10221[2] = null;
                              statearr_10207_10221[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_10196 === 11) {
                                var inst_10185 = state_10195[2];
                                var state_10195__$1 = state_10195;
                                var statearr_10208_10222 = state_10195__$1;
                                statearr_10208_10222[2] = inst_10185;
                                statearr_10208_10222[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_10210 = [null, null, null, null, null, null, null];
              statearr_10210[0] = state_machine__5882__auto__;
              statearr_10210[1] = 1;
              return statearr_10210;
            };
            var state_machine__5882__auto____1 = function(state_10195) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_10195);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_10195) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_10195);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_10211 = f__5932__auto__.call(null);
        statearr_10211[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___10212;
        return statearr_10211;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5932__auto__ = function() {
      var switch__5881__auto__ = function(state_10370) {
        var state_val_10371 = state_10370[1];
        if (state_val_10371 === 1) {
          var state_10370__$1 = state_10370;
          var statearr_10372_10405 = state_10370__$1;
          statearr_10372_10405[2] = null;
          statearr_10372_10405[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_10371 === 2) {
            var state_10370__$1 = state_10370;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10370__$1, 4, in$);
          } else {
            if (state_val_10371 === 3) {
              var inst_10368 = state_10370[2];
              var state_10370__$1 = state_10370;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10370__$1, inst_10368);
            } else {
              if (state_val_10371 === 4) {
                var inst_10316 = state_10370[5];
                var inst_10316__$1 = state_10370[2];
                var inst_10317 = inst_10316__$1 == null;
                var state_10370__$1 = function() {
                  var statearr_10373 = state_10370;
                  statearr_10373[5] = inst_10316__$1;
                  return statearr_10373;
                }();
                if (cljs.core.truth_(inst_10317)) {
                  var statearr_10374_10406 = state_10370__$1;
                  statearr_10374_10406[1] = 5;
                } else {
                  var statearr_10375_10407 = state_10370__$1;
                  statearr_10375_10407[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_10371 === 5) {
                  var inst_10319 = cljs.core.async.close_BANG_.call(null, out);
                  var state_10370__$1 = state_10370;
                  var statearr_10376_10408 = state_10370__$1;
                  statearr_10376_10408[2] = inst_10319;
                  statearr_10376_10408[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_10371 === 6) {
                    var inst_10316 = state_10370[5];
                    var inst_10321 = f.call(null, inst_10316);
                    var inst_10326 = cljs.core.seq.call(null, inst_10321);
                    var inst_10327 = inst_10326;
                    var inst_10328 = null;
                    var inst_10329 = 0;
                    var inst_10330 = 0;
                    var state_10370__$1 = function() {
                      var statearr_10377 = state_10370;
                      statearr_10377[6] = inst_10330;
                      statearr_10377[7] = inst_10328;
                      statearr_10377[8] = inst_10327;
                      statearr_10377[9] = inst_10329;
                      return statearr_10377;
                    }();
                    var statearr_10378_10409 = state_10370__$1;
                    statearr_10378_10409[2] = null;
                    statearr_10378_10409[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_10371 === 7) {
                      var inst_10366 = state_10370[2];
                      var state_10370__$1 = state_10370;
                      var statearr_10379_10410 = state_10370__$1;
                      statearr_10379_10410[2] = inst_10366;
                      statearr_10379_10410[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_10371 === 8) {
                        var inst_10330 = state_10370[6];
                        var inst_10329 = state_10370[9];
                        var inst_10332 = inst_10330 < inst_10329;
                        var inst_10333 = inst_10332;
                        var state_10370__$1 = state_10370;
                        if (cljs.core.truth_(inst_10333)) {
                          var statearr_10380_10411 = state_10370__$1;
                          statearr_10380_10411[1] = 10;
                        } else {
                          var statearr_10381_10412 = state_10370__$1;
                          statearr_10381_10412[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_10371 === 9) {
                          var inst_10363 = state_10370[2];
                          var state_10370__$1 = function() {
                            var statearr_10382 = state_10370;
                            statearr_10382[10] = inst_10363;
                            return statearr_10382;
                          }();
                          var statearr_10383_10413 = state_10370__$1;
                          statearr_10383_10413[2] = null;
                          statearr_10383_10413[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_10371 === 10) {
                            var inst_10330 = state_10370[6];
                            var inst_10328 = state_10370[7];
                            var inst_10335 = cljs.core._nth.call(null, inst_10328, inst_10330);
                            var state_10370__$1 = state_10370;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10370__$1, 13, out, inst_10335);
                          } else {
                            if (state_val_10371 === 11) {
                              var inst_10327 = state_10370[8];
                              var inst_10341 = state_10370[11];
                              var inst_10341__$1 = cljs.core.seq.call(null, inst_10327);
                              var state_10370__$1 = function() {
                                var statearr_10387 = state_10370;
                                statearr_10387[11] = inst_10341__$1;
                                return statearr_10387;
                              }();
                              if (inst_10341__$1) {
                                var statearr_10388_10414 = state_10370__$1;
                                statearr_10388_10414[1] = 14;
                              } else {
                                var statearr_10389_10415 = state_10370__$1;
                                statearr_10389_10415[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_10371 === 12) {
                                var inst_10361 = state_10370[2];
                                var state_10370__$1 = state_10370;
                                var statearr_10390_10416 = state_10370__$1;
                                statearr_10390_10416[2] = inst_10361;
                                statearr_10390_10416[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_10371 === 13) {
                                  var inst_10330 = state_10370[6];
                                  var inst_10328 = state_10370[7];
                                  var inst_10327 = state_10370[8];
                                  var inst_10329 = state_10370[9];
                                  var inst_10337 = state_10370[2];
                                  var inst_10338 = inst_10330 + 1;
                                  var tmp10384 = inst_10328;
                                  var tmp10385 = inst_10327;
                                  var tmp10386 = inst_10329;
                                  var inst_10327__$1 = tmp10385;
                                  var inst_10328__$1 = tmp10384;
                                  var inst_10329__$1 = tmp10386;
                                  var inst_10330__$1 = inst_10338;
                                  var state_10370__$1 = function() {
                                    var statearr_10391 = state_10370;
                                    statearr_10391[6] = inst_10330__$1;
                                    statearr_10391[7] = inst_10328__$1;
                                    statearr_10391[8] = inst_10327__$1;
                                    statearr_10391[9] = inst_10329__$1;
                                    statearr_10391[12] = inst_10337;
                                    return statearr_10391;
                                  }();
                                  var statearr_10392_10417 = state_10370__$1;
                                  statearr_10392_10417[2] = null;
                                  statearr_10392_10417[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_10371 === 14) {
                                    var inst_10341 = state_10370[11];
                                    var inst_10343 = cljs.core.chunked_seq_QMARK_.call(null, inst_10341);
                                    var state_10370__$1 = state_10370;
                                    if (inst_10343) {
                                      var statearr_10393_10418 = state_10370__$1;
                                      statearr_10393_10418[1] = 17;
                                    } else {
                                      var statearr_10394_10419 = state_10370__$1;
                                      statearr_10394_10419[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_10371 === 15) {
                                      var state_10370__$1 = state_10370;
                                      var statearr_10395_10420 = state_10370__$1;
                                      statearr_10395_10420[2] = null;
                                      statearr_10395_10420[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_10371 === 16) {
                                        var inst_10359 = state_10370[2];
                                        var state_10370__$1 = state_10370;
                                        var statearr_10396_10421 = state_10370__$1;
                                        statearr_10396_10421[2] = inst_10359;
                                        statearr_10396_10421[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_10371 === 17) {
                                          var inst_10341 = state_10370[11];
                                          var inst_10345 = cljs.core.chunk_first.call(null, inst_10341);
                                          var inst_10346 = cljs.core.chunk_rest.call(null, inst_10341);
                                          var inst_10347 = cljs.core.count.call(null, inst_10345);
                                          var inst_10327 = inst_10346;
                                          var inst_10328 = inst_10345;
                                          var inst_10329 = inst_10347;
                                          var inst_10330 = 0;
                                          var state_10370__$1 = function() {
                                            var statearr_10397 = state_10370;
                                            statearr_10397[6] = inst_10330;
                                            statearr_10397[7] = inst_10328;
                                            statearr_10397[8] = inst_10327;
                                            statearr_10397[9] = inst_10329;
                                            return statearr_10397;
                                          }();
                                          var statearr_10398_10422 = state_10370__$1;
                                          statearr_10398_10422[2] = null;
                                          statearr_10398_10422[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_10371 === 18) {
                                            var inst_10341 = state_10370[11];
                                            var inst_10350 = cljs.core.first.call(null, inst_10341);
                                            var state_10370__$1 = state_10370;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10370__$1, 20, out, inst_10350);
                                          } else {
                                            if (state_val_10371 === 19) {
                                              var inst_10356 = state_10370[2];
                                              var state_10370__$1 = state_10370;
                                              var statearr_10399_10423 = state_10370__$1;
                                              statearr_10399_10423[2] = inst_10356;
                                              statearr_10399_10423[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_10371 === 20) {
                                                var inst_10341 = state_10370[11];
                                                var inst_10352 = state_10370[2];
                                                var inst_10353 = cljs.core.next.call(null, inst_10341);
                                                var inst_10327 = inst_10353;
                                                var inst_10328 = null;
                                                var inst_10329 = 0;
                                                var inst_10330 = 0;
                                                var state_10370__$1 = function() {
                                                  var statearr_10400 = state_10370;
                                                  statearr_10400[6] = inst_10330;
                                                  statearr_10400[13] = inst_10352;
                                                  statearr_10400[7] = inst_10328;
                                                  statearr_10400[8] = inst_10327;
                                                  statearr_10400[9] = inst_10329;
                                                  return statearr_10400;
                                                }();
                                                var statearr_10401_10424 = state_10370__$1;
                                                statearr_10401_10424[2] = null;
                                                statearr_10401_10424[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5881__auto__) {
        return function() {
          var state_machine__5882__auto__ = null;
          var state_machine__5882__auto____0 = function() {
            var statearr_10403 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_10403[0] = state_machine__5882__auto__;
            statearr_10403[1] = 1;
            return statearr_10403;
          };
          var state_machine__5882__auto____1 = function(state_10370) {
            while (true) {
              var result__5883__auto__ = switch__5881__auto__.call(null, state_10370);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5883__auto__;
              }
              break;
            }
          };
          state_machine__5882__auto__ = function(state_10370) {
            switch(arguments.length) {
              case 0:
                return state_machine__5882__auto____0.call(this);
              case 1:
                return state_machine__5882__auto____1.call(this, state_10370);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
          return state_machine__5882__auto__;
        }();
      }(switch__5881__auto__);
    }();
    var state__5933__auto__ = function() {
      var statearr_10404 = f__5932__auto__.call(null);
      statearr_10404[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
      return statearr_10404;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
  });
  return c__5931__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5931__auto___10497 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_10480) {
          var state_val_10481 = state_10480[1];
          if (state_val_10481 === 1) {
            var state_10480__$1 = state_10480;
            var statearr_10482_10498 = state_10480__$1;
            statearr_10482_10498[2] = null;
            statearr_10482_10498[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_10481 === 2) {
              var state_10480__$1 = state_10480;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10480__$1, 4, from);
            } else {
              if (state_val_10481 === 3) {
                var inst_10478 = state_10480[2];
                var state_10480__$1 = state_10480;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10480__$1, inst_10478);
              } else {
                if (state_val_10481 === 4) {
                  var inst_10463 = state_10480[5];
                  var inst_10463__$1 = state_10480[2];
                  var inst_10464 = inst_10463__$1 == null;
                  var state_10480__$1 = function() {
                    var statearr_10483 = state_10480;
                    statearr_10483[5] = inst_10463__$1;
                    return statearr_10483;
                  }();
                  if (cljs.core.truth_(inst_10464)) {
                    var statearr_10484_10499 = state_10480__$1;
                    statearr_10484_10499[1] = 5;
                  } else {
                    var statearr_10485_10500 = state_10480__$1;
                    statearr_10485_10500[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_10481 === 5) {
                    var state_10480__$1 = state_10480;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_10486_10501 = state_10480__$1;
                      statearr_10486_10501[1] = 8;
                    } else {
                      var statearr_10487_10502 = state_10480__$1;
                      statearr_10487_10502[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_10481 === 6) {
                      var inst_10463 = state_10480[5];
                      var state_10480__$1 = state_10480;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10480__$1, 11, to, inst_10463);
                    } else {
                      if (state_val_10481 === 7) {
                        var inst_10476 = state_10480[2];
                        var state_10480__$1 = state_10480;
                        var statearr_10488_10503 = state_10480__$1;
                        statearr_10488_10503[2] = inst_10476;
                        statearr_10488_10503[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_10481 === 8) {
                          var inst_10467 = cljs.core.async.close_BANG_.call(null, to);
                          var state_10480__$1 = state_10480;
                          var statearr_10489_10504 = state_10480__$1;
                          statearr_10489_10504[2] = inst_10467;
                          statearr_10489_10504[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_10481 === 9) {
                            var state_10480__$1 = state_10480;
                            var statearr_10490_10505 = state_10480__$1;
                            statearr_10490_10505[2] = null;
                            statearr_10490_10505[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_10481 === 10) {
                              var inst_10470 = state_10480[2];
                              var state_10480__$1 = state_10480;
                              var statearr_10491_10506 = state_10480__$1;
                              statearr_10491_10506[2] = inst_10470;
                              statearr_10491_10506[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_10481 === 11) {
                                var inst_10473 = state_10480[2];
                                var state_10480__$1 = function() {
                                  var statearr_10492 = state_10480;
                                  statearr_10492[6] = inst_10473;
                                  return statearr_10492;
                                }();
                                var statearr_10493_10507 = state_10480__$1;
                                statearr_10493_10507[2] = null;
                                statearr_10493_10507[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_10495 = [null, null, null, null, null, null, null];
              statearr_10495[0] = state_machine__5882__auto__;
              statearr_10495[1] = 1;
              return statearr_10495;
            };
            var state_machine__5882__auto____1 = function(state_10480) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_10480);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_10480) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_10480);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_10496 = f__5932__auto__.call(null);
        statearr_10496[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___10497;
        return statearr_10496;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5931__auto___10586 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_10568) {
          var state_val_10569 = state_10568[1];
          if (state_val_10569 === 1) {
            var state_10568__$1 = state_10568;
            var statearr_10570_10587 = state_10568__$1;
            statearr_10570_10587[2] = null;
            statearr_10570_10587[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_10569 === 2) {
              var state_10568__$1 = state_10568;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10568__$1, 4, ch);
            } else {
              if (state_val_10569 === 3) {
                var inst_10566 = state_10568[2];
                var state_10568__$1 = state_10568;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10568__$1, inst_10566);
              } else {
                if (state_val_10569 === 4) {
                  var inst_10549 = state_10568[5];
                  var inst_10549__$1 = state_10568[2];
                  var inst_10550 = inst_10549__$1 == null;
                  var state_10568__$1 = function() {
                    var statearr_10571 = state_10568;
                    statearr_10571[5] = inst_10549__$1;
                    return statearr_10571;
                  }();
                  if (cljs.core.truth_(inst_10550)) {
                    var statearr_10572_10588 = state_10568__$1;
                    statearr_10572_10588[1] = 5;
                  } else {
                    var statearr_10573_10589 = state_10568__$1;
                    statearr_10573_10589[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_10569 === 5) {
                    var inst_10552 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_10553 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_10568__$1 = function() {
                      var statearr_10574 = state_10568;
                      statearr_10574[6] = inst_10552;
                      return statearr_10574;
                    }();
                    var statearr_10575_10590 = state_10568__$1;
                    statearr_10575_10590[2] = inst_10553;
                    statearr_10575_10590[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_10569 === 6) {
                      var inst_10549 = state_10568[5];
                      var inst_10555 = p.call(null, inst_10549);
                      var state_10568__$1 = state_10568;
                      if (cljs.core.truth_(inst_10555)) {
                        var statearr_10576_10591 = state_10568__$1;
                        statearr_10576_10591[1] = 9;
                      } else {
                        var statearr_10577_10592 = state_10568__$1;
                        statearr_10577_10592[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_10569 === 7) {
                        var inst_10564 = state_10568[2];
                        var state_10568__$1 = state_10568;
                        var statearr_10578_10593 = state_10568__$1;
                        statearr_10578_10593[2] = inst_10564;
                        statearr_10578_10593[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_10569 === 8) {
                          var inst_10561 = state_10568[2];
                          var state_10568__$1 = function() {
                            var statearr_10579 = state_10568;
                            statearr_10579[7] = inst_10561;
                            return statearr_10579;
                          }();
                          var statearr_10580_10594 = state_10568__$1;
                          statearr_10580_10594[2] = null;
                          statearr_10580_10594[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_10569 === 9) {
                            var state_10568__$1 = state_10568;
                            var statearr_10581_10595 = state_10568__$1;
                            statearr_10581_10595[2] = tc;
                            statearr_10581_10595[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_10569 === 10) {
                              var state_10568__$1 = state_10568;
                              var statearr_10582_10596 = state_10568__$1;
                              statearr_10582_10596[2] = fc;
                              statearr_10582_10596[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_10569 === 11) {
                                var inst_10549 = state_10568[5];
                                var inst_10559 = state_10568[2];
                                var state_10568__$1 = state_10568;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10568__$1, 8, inst_10559, inst_10549);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_10584 = [null, null, null, null, null, null, null, null];
              statearr_10584[0] = state_machine__5882__auto__;
              statearr_10584[1] = 1;
              return statearr_10584;
            };
            var state_machine__5882__auto____1 = function(state_10568) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_10568);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_10568) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_10568);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_10585 = f__5932__auto__.call(null);
        statearr_10585[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___10586;
        return statearr_10585;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5932__auto__ = function() {
      var switch__5881__auto__ = function(state_10639) {
        var state_val_10640 = state_10639[1];
        if (state_val_10640 === 7) {
          var inst_10635 = state_10639[2];
          var state_10639__$1 = state_10639;
          var statearr_10641_10653 = state_10639__$1;
          statearr_10641_10653[2] = inst_10635;
          statearr_10641_10653[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_10640 === 6) {
            var inst_10625 = state_10639[5];
            var inst_10628 = state_10639[6];
            var inst_10632 = f.call(null, inst_10625, inst_10628);
            var inst_10625__$1 = inst_10632;
            var state_10639__$1 = function() {
              var statearr_10642 = state_10639;
              statearr_10642[5] = inst_10625__$1;
              return statearr_10642;
            }();
            var statearr_10643_10654 = state_10639__$1;
            statearr_10643_10654[2] = null;
            statearr_10643_10654[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_10640 === 5) {
              var inst_10625 = state_10639[5];
              var state_10639__$1 = state_10639;
              var statearr_10644_10655 = state_10639__$1;
              statearr_10644_10655[2] = inst_10625;
              statearr_10644_10655[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_10640 === 4) {
                var inst_10628 = state_10639[6];
                var inst_10628__$1 = state_10639[2];
                var inst_10629 = inst_10628__$1 == null;
                var state_10639__$1 = function() {
                  var statearr_10645 = state_10639;
                  statearr_10645[6] = inst_10628__$1;
                  return statearr_10645;
                }();
                if (cljs.core.truth_(inst_10629)) {
                  var statearr_10646_10656 = state_10639__$1;
                  statearr_10646_10656[1] = 5;
                } else {
                  var statearr_10647_10657 = state_10639__$1;
                  statearr_10647_10657[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_10640 === 3) {
                  var inst_10637 = state_10639[2];
                  var state_10639__$1 = state_10639;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10639__$1, inst_10637);
                } else {
                  if (state_val_10640 === 2) {
                    var state_10639__$1 = state_10639;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10639__$1, 4, ch);
                  } else {
                    if (state_val_10640 === 1) {
                      var inst_10625 = init;
                      var state_10639__$1 = function() {
                        var statearr_10648 = state_10639;
                        statearr_10648[5] = inst_10625;
                        return statearr_10648;
                      }();
                      var statearr_10649_10658 = state_10639__$1;
                      statearr_10649_10658[2] = null;
                      statearr_10649_10658[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5881__auto__) {
        return function() {
          var state_machine__5882__auto__ = null;
          var state_machine__5882__auto____0 = function() {
            var statearr_10651 = [null, null, null, null, null, null, null];
            statearr_10651[0] = state_machine__5882__auto__;
            statearr_10651[1] = 1;
            return statearr_10651;
          };
          var state_machine__5882__auto____1 = function(state_10639) {
            while (true) {
              var result__5883__auto__ = switch__5881__auto__.call(null, state_10639);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5883__auto__;
              }
              break;
            }
          };
          state_machine__5882__auto__ = function(state_10639) {
            switch(arguments.length) {
              case 0:
                return state_machine__5882__auto____0.call(this);
              case 1:
                return state_machine__5882__auto____1.call(this, state_10639);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
          return state_machine__5882__auto__;
        }();
      }(switch__5881__auto__);
    }();
    var state__5933__auto__ = function() {
      var statearr_10652 = f__5932__auto__.call(null);
      statearr_10652[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
      return statearr_10652;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
  });
  return c__5931__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_10716) {
          var state_val_10717 = state_10716[1];
          if (state_val_10717 === 1) {
            var inst_10696 = cljs.core.seq.call(null, coll);
            var inst_10697 = inst_10696;
            var state_10716__$1 = function() {
              var statearr_10718 = state_10716;
              statearr_10718[5] = inst_10697;
              return statearr_10718;
            }();
            var statearr_10719_10733 = state_10716__$1;
            statearr_10719_10733[2] = null;
            statearr_10719_10733[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_10717 === 2) {
              var inst_10697 = state_10716[5];
              var state_10716__$1 = state_10716;
              if (cljs.core.truth_(inst_10697)) {
                var statearr_10720_10734 = state_10716__$1;
                statearr_10720_10734[1] = 4;
              } else {
                var statearr_10721_10735 = state_10716__$1;
                statearr_10721_10735[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_10717 === 3) {
                var inst_10714 = state_10716[2];
                var state_10716__$1 = state_10716;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10716__$1, inst_10714);
              } else {
                if (state_val_10717 === 4) {
                  var inst_10697 = state_10716[5];
                  var inst_10700 = cljs.core.first.call(null, inst_10697);
                  var state_10716__$1 = state_10716;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10716__$1, 7, ch, inst_10700);
                } else {
                  if (state_val_10717 === 5) {
                    var state_10716__$1 = state_10716;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_10722_10736 = state_10716__$1;
                      statearr_10722_10736[1] = 8;
                    } else {
                      var statearr_10723_10737 = state_10716__$1;
                      statearr_10723_10737[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_10717 === 6) {
                      var inst_10712 = state_10716[2];
                      var state_10716__$1 = state_10716;
                      var statearr_10724_10738 = state_10716__$1;
                      statearr_10724_10738[2] = inst_10712;
                      statearr_10724_10738[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_10717 === 7) {
                        var inst_10697 = state_10716[5];
                        var inst_10702 = state_10716[2];
                        var inst_10703 = cljs.core.next.call(null, inst_10697);
                        var inst_10697__$1 = inst_10703;
                        var state_10716__$1 = function() {
                          var statearr_10725 = state_10716;
                          statearr_10725[6] = inst_10702;
                          statearr_10725[5] = inst_10697__$1;
                          return statearr_10725;
                        }();
                        var statearr_10726_10739 = state_10716__$1;
                        statearr_10726_10739[2] = null;
                        statearr_10726_10739[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_10717 === 8) {
                          var inst_10707 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_10716__$1 = state_10716;
                          var statearr_10727_10740 = state_10716__$1;
                          statearr_10727_10740[2] = inst_10707;
                          statearr_10727_10740[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_10717 === 9) {
                            var state_10716__$1 = state_10716;
                            var statearr_10728_10741 = state_10716__$1;
                            statearr_10728_10741[2] = null;
                            statearr_10728_10741[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_10717 === 10) {
                              var inst_10710 = state_10716[2];
                              var state_10716__$1 = state_10716;
                              var statearr_10729_10742 = state_10716__$1;
                              statearr_10729_10742[2] = inst_10710;
                              statearr_10729_10742[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_10731 = [null, null, null, null, null, null, null];
              statearr_10731[0] = state_machine__5882__auto__;
              statearr_10731[1] = 1;
              return statearr_10731;
            };
            var state_machine__5882__auto____1 = function(state_10716) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_10716);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_10716) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_10716);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_10732 = f__5932__auto__.call(null);
        statearr_10732[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
        return statearr_10732;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return c__5931__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj10744 = {};
  return obj10744;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3388__auto__ = _;
    if (and__3388__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4021__auto__ = _ == null ? null : _;
    return function() {
      var or__3400__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj10746 = {};
  return obj10746;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t10959 !== "undefined") {
    } else {
      cljs.core.async.t10959 = function(cs, ch, mult, meta10960) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta10960 = meta10960;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t10959.cljs$lang$type = true;
      cljs.core.async.t10959.cljs$lang$ctorStr = "cljs.core.async/t10959";
      cljs.core.async.t10959.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t10959");
        };
      }(cs);
      cljs.core.async.t10959.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t10959.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t10959.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t10959.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t10959.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t10959.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t10959.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_10961) {
          var self__ = this;
          var _10961__$1 = this;
          return self__.meta10960;
        };
      }(cs);
      cljs.core.async.t10959.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_10961, meta10960__$1) {
          var self__ = this;
          var _10961__$1 = this;
          return new cljs.core.async.t10959(self__.cs, self__.ch, self__.mult, meta10960__$1);
        };
      }(cs);
      cljs.core.async.__GT_t10959 = function(cs) {
        return function __GT_t10959(cs__$1, ch__$1, mult__$1, meta10960) {
          return new cljs.core.async.t10959(cs__$1, ch__$1, mult__$1, meta10960);
        };
      }(cs);
    }
    return new cljs.core.async.t10959(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5931__auto___11171 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5932__auto__ = function() {
      var switch__5881__auto__ = function(state_11089) {
        var state_val_11090 = state_11089[1];
        if (state_val_11090 === 32) {
          try {
            var inst_10964 = state_11089[5];
            var inst_11040 = state_11089[6];
            var inst_11046 = cljs.core.async.put_BANG_.call(null, inst_11040, inst_10964, done);
            var state_11089__$1 = state_11089;
            var statearr_11093_11172 = state_11089__$1;
            statearr_11093_11172[2] = inst_11046;
            statearr_11093_11172[1] = 30;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } catch (e11091) {
            if (e11091 instanceof Object) {
              var ex__5875__auto__ = e11091;
              var statearr_11092_11173 = state_11089;
              statearr_11092_11173[1] = 31;
              statearr_11092_11173[2] = ex__5875__auto__;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e11091;
              } else {
                return null;
              }
            }
          }
        } else {
          if (state_val_11090 === 1) {
            var state_11089__$1 = state_11089;
            var statearr_11094_11174 = state_11089__$1;
            statearr_11094_11174[2] = null;
            statearr_11094_11174[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_11090 === 33) {
              var inst_11052 = state_11089[7];
              var inst_11054 = cljs.core.chunked_seq_QMARK_.call(null, inst_11052);
              var state_11089__$1 = state_11089;
              if (inst_11054) {
                var statearr_11095_11175 = state_11089__$1;
                statearr_11095_11175[1] = 36;
              } else {
                var statearr_11096_11176 = state_11089__$1;
                statearr_11096_11176[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_11090 === 2) {
                var state_11089__$1 = state_11089;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11089__$1, 4, ch);
              } else {
                if (state_val_11090 === 34) {
                  var state_11089__$1 = state_11089;
                  var statearr_11097_11177 = state_11089__$1;
                  statearr_11097_11177[2] = null;
                  statearr_11097_11177[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_11090 === 3) {
                    var inst_11087 = state_11089[2];
                    var state_11089__$1 = state_11089;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11089__$1, inst_11087);
                  } else {
                    if (state_val_11090 === 35) {
                      var inst_11076 = state_11089[2];
                      var state_11089__$1 = state_11089;
                      var statearr_11098_11178 = state_11089__$1;
                      statearr_11098_11178[2] = inst_11076;
                      statearr_11098_11178[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_11090 === 4) {
                        var inst_10964 = state_11089[5];
                        var inst_10964__$1 = state_11089[2];
                        var inst_10965 = inst_10964__$1 == null;
                        var state_11089__$1 = function() {
                          var statearr_11099 = state_11089;
                          statearr_11099[5] = inst_10964__$1;
                          return statearr_11099;
                        }();
                        if (cljs.core.truth_(inst_10965)) {
                          var statearr_11100_11179 = state_11089__$1;
                          statearr_11100_11179[1] = 5;
                        } else {
                          var statearr_11101_11180 = state_11089__$1;
                          statearr_11101_11180[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_11090 === 36) {
                          var inst_11052 = state_11089[7];
                          var inst_11056 = cljs.core.chunk_first.call(null, inst_11052);
                          var inst_11057 = cljs.core.chunk_rest.call(null, inst_11052);
                          var inst_11058 = cljs.core.count.call(null, inst_11056);
                          var inst_11032 = inst_11057;
                          var inst_11033 = inst_11056;
                          var inst_11034 = inst_11058;
                          var inst_11035 = 0;
                          var state_11089__$1 = function() {
                            var statearr_11102 = state_11089;
                            statearr_11102[8] = inst_11032;
                            statearr_11102[9] = inst_11033;
                            statearr_11102[10] = inst_11035;
                            statearr_11102[11] = inst_11034;
                            return statearr_11102;
                          }();
                          var statearr_11103_11181 = state_11089__$1;
                          statearr_11103_11181[2] = null;
                          statearr_11103_11181[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_11090 === 5) {
                            var inst_10971 = cljs.core.deref.call(null, cs);
                            var inst_10972 = cljs.core.seq.call(null, inst_10971);
                            var inst_10973 = inst_10972;
                            var inst_10974 = null;
                            var inst_10975 = 0;
                            var inst_10976 = 0;
                            var state_11089__$1 = function() {
                              var statearr_11104 = state_11089;
                              statearr_11104[12] = inst_10976;
                              statearr_11104[13] = inst_10973;
                              statearr_11104[14] = inst_10974;
                              statearr_11104[15] = inst_10975;
                              return statearr_11104;
                            }();
                            var statearr_11105_11182 = state_11089__$1;
                            statearr_11105_11182[2] = null;
                            statearr_11105_11182[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_11090 === 37) {
                              var inst_11052 = state_11089[7];
                              var inst_11061 = cljs.core.first.call(null, inst_11052);
                              var state_11089__$1 = function() {
                                var statearr_11106 = state_11089;
                                statearr_11106[16] = inst_11061;
                                return statearr_11106;
                              }();
                              var statearr_11107_11183 = state_11089__$1;
                              statearr_11107_11183[2] = null;
                              statearr_11107_11183[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_11090 === 6) {
                                var inst_11023 = cljs.core.deref.call(null, cs);
                                var inst_11024 = cljs.core.keys.call(null, inst_11023);
                                var inst_11025 = cljs.core.count.call(null, inst_11024);
                                var inst_11026 = cljs.core.reset_BANG_.call(null, dctr, inst_11025);
                                var inst_11031 = cljs.core.seq.call(null, inst_11024);
                                var inst_11032 = inst_11031;
                                var inst_11033 = null;
                                var inst_11034 = 0;
                                var inst_11035 = 0;
                                var state_11089__$1 = function() {
                                  var statearr_11108 = state_11089;
                                  statearr_11108[17] = inst_11026;
                                  statearr_11108[8] = inst_11032;
                                  statearr_11108[9] = inst_11033;
                                  statearr_11108[10] = inst_11035;
                                  statearr_11108[11] = inst_11034;
                                  return statearr_11108;
                                }();
                                var statearr_11109_11184 = state_11089__$1;
                                statearr_11109_11184[2] = null;
                                statearr_11109_11184[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_11090 === 38) {
                                  var inst_11073 = state_11089[2];
                                  var state_11089__$1 = state_11089;
                                  var statearr_11110_11185 = state_11089__$1;
                                  statearr_11110_11185[2] = inst_11073;
                                  statearr_11110_11185[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_11090 === 7) {
                                    var inst_11085 = state_11089[2];
                                    var state_11089__$1 = state_11089;
                                    var statearr_11111_11186 = state_11089__$1;
                                    statearr_11111_11186[2] = inst_11085;
                                    statearr_11111_11186[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_11090 === 39) {
                                      var inst_11052 = state_11089[7];
                                      var inst_11069 = state_11089[2];
                                      var inst_11070 = cljs.core.next.call(null, inst_11052);
                                      var inst_11032 = inst_11070;
                                      var inst_11033 = null;
                                      var inst_11034 = 0;
                                      var inst_11035 = 0;
                                      var state_11089__$1 = function() {
                                        var statearr_11112 = state_11089;
                                        statearr_11112[18] = inst_11069;
                                        statearr_11112[8] = inst_11032;
                                        statearr_11112[9] = inst_11033;
                                        statearr_11112[10] = inst_11035;
                                        statearr_11112[11] = inst_11034;
                                        return statearr_11112;
                                      }();
                                      var statearr_11113_11187 = state_11089__$1;
                                      statearr_11113_11187[2] = null;
                                      statearr_11113_11187[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_11090 === 8) {
                                        var inst_10976 = state_11089[12];
                                        var inst_10975 = state_11089[15];
                                        var inst_10978 = inst_10976 < inst_10975;
                                        var inst_10979 = inst_10978;
                                        var state_11089__$1 = state_11089;
                                        if (cljs.core.truth_(inst_10979)) {
                                          var statearr_11114_11188 = state_11089__$1;
                                          statearr_11114_11188[1] = 10;
                                        } else {
                                          var statearr_11115_11189 = state_11089__$1;
                                          statearr_11115_11189[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_11090 === 40) {
                                          var inst_11061 = state_11089[16];
                                          var inst_11062 = state_11089[2];
                                          var inst_11063 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_11064 = cljs.core.async.untap_STAR_.call(null, m, inst_11061);
                                          var state_11089__$1 = function() {
                                            var statearr_11116 = state_11089;
                                            statearr_11116[19] = inst_11063;
                                            statearr_11116[20] = inst_11062;
                                            return statearr_11116;
                                          }();
                                          var statearr_11117_11190 = state_11089__$1;
                                          statearr_11117_11190[2] = inst_11064;
                                          statearr_11117_11190[1] = 39;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_11090 === 9) {
                                            var inst_11021 = state_11089[2];
                                            var state_11089__$1 = state_11089;
                                            var statearr_11118_11191 = state_11089__$1;
                                            statearr_11118_11191[2] = inst_11021;
                                            statearr_11118_11191[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_11090 === 41) {
                                              try {
                                                var inst_10964 = state_11089[5];
                                                var inst_11061 = state_11089[16];
                                                var inst_11067 = cljs.core.async.put_BANG_.call(null, inst_11061, inst_10964, done);
                                                var state_11089__$1 = state_11089;
                                                var statearr_11121_11192 = state_11089__$1;
                                                statearr_11121_11192[2] = inst_11067;
                                                statearr_11121_11192[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } catch (e11119) {
                                                if (e11119 instanceof Object) {
                                                  var ex__5875__auto__ = e11119;
                                                  var statearr_11120_11193 = state_11089;
                                                  statearr_11120_11193[1] = 40;
                                                  statearr_11120_11193[2] = ex__5875__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                    throw e11119;
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            } else {
                                              if (state_val_11090 === 10) {
                                                var inst_10976 = state_11089[12];
                                                var inst_10974 = state_11089[14];
                                                var inst_10982 = cljs.core._nth.call(null, inst_10974, inst_10976);
                                                var inst_10983 = cljs.core.nth.call(null, inst_10982, 0, null);
                                                var inst_10984 = cljs.core.nth.call(null, inst_10982, 1, null);
                                                var state_11089__$1 = function() {
                                                  var statearr_11122 = state_11089;
                                                  statearr_11122[21] = inst_10983;
                                                  return statearr_11122;
                                                }();
                                                if (cljs.core.truth_(inst_10984)) {
                                                  var statearr_11123_11194 = state_11089__$1;
                                                  statearr_11123_11194[1] = 13;
                                                } else {
                                                  var statearr_11124_11195 = state_11089__$1;
                                                  statearr_11124_11195[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_11090 === 42) {
                                                  var inst_11082 = state_11089[2];
                                                  var state_11089__$1 = function() {
                                                    var statearr_11125 = state_11089;
                                                    statearr_11125[22] = inst_11082;
                                                    return statearr_11125;
                                                  }();
                                                  var statearr_11126_11196 = state_11089__$1;
                                                  statearr_11126_11196[2] = null;
                                                  statearr_11126_11196[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_11090 === 11) {
                                                    var inst_10993 = state_11089[23];
                                                    var inst_10973 = state_11089[13];
                                                    var inst_10993__$1 = cljs.core.seq.call(null, inst_10973);
                                                    var state_11089__$1 = function() {
                                                      var statearr_11127 = state_11089;
                                                      statearr_11127[23] = inst_10993__$1;
                                                      return statearr_11127;
                                                    }();
                                                    if (inst_10993__$1) {
                                                      var statearr_11128_11197 = state_11089__$1;
                                                      statearr_11128_11197[1] = 16;
                                                    } else {
                                                      var statearr_11129_11198 = state_11089__$1;
                                                      statearr_11129_11198[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_11090 === 12) {
                                                      var inst_11019 = state_11089[2];
                                                      var state_11089__$1 = state_11089;
                                                      var statearr_11130_11199 = state_11089__$1;
                                                      statearr_11130_11199[2] = inst_11019;
                                                      statearr_11130_11199[1] = 9;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_11090 === 13) {
                                                        var inst_10983 = state_11089[21];
                                                        var inst_10986 = cljs.core.async.close_BANG_.call(null, inst_10983);
                                                        var state_11089__$1 = state_11089;
                                                        var statearr_11134_11200 = state_11089__$1;
                                                        statearr_11134_11200[2] = inst_10986;
                                                        statearr_11134_11200[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_11090 === 14) {
                                                          var state_11089__$1 = state_11089;
                                                          var statearr_11135_11201 = state_11089__$1;
                                                          statearr_11135_11201[2] = null;
                                                          statearr_11135_11201[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_11090 === 15) {
                                                            var inst_10976 = state_11089[12];
                                                            var inst_10973 = state_11089[13];
                                                            var inst_10974 = state_11089[14];
                                                            var inst_10975 = state_11089[15];
                                                            var inst_10989 = state_11089[2];
                                                            var inst_10990 = inst_10976 + 1;
                                                            var tmp11131 = inst_10973;
                                                            var tmp11132 = inst_10974;
                                                            var tmp11133 = inst_10975;
                                                            var inst_10973__$1 = tmp11131;
                                                            var inst_10974__$1 = tmp11132;
                                                            var inst_10975__$1 = tmp11133;
                                                            var inst_10976__$1 = inst_10990;
                                                            var state_11089__$1 = function() {
                                                              var statearr_11136 = state_11089;
                                                              statearr_11136[12] = inst_10976__$1;
                                                              statearr_11136[24] = inst_10989;
                                                              statearr_11136[13] = inst_10973__$1;
                                                              statearr_11136[14] = inst_10974__$1;
                                                              statearr_11136[15] = inst_10975__$1;
                                                              return statearr_11136;
                                                            }();
                                                            var statearr_11137_11202 = state_11089__$1;
                                                            statearr_11137_11202[2] = null;
                                                            statearr_11137_11202[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_11090 === 16) {
                                                              var inst_10993 = state_11089[23];
                                                              var inst_10995 = cljs.core.chunked_seq_QMARK_.call(null, inst_10993);
                                                              var state_11089__$1 = state_11089;
                                                              if (inst_10995) {
                                                                var statearr_11138_11203 = state_11089__$1;
                                                                statearr_11138_11203[1] = 19;
                                                              } else {
                                                                var statearr_11139_11204 = state_11089__$1;
                                                                statearr_11139_11204[1] = 20;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_11090 === 17) {
                                                                var state_11089__$1 = state_11089;
                                                                var statearr_11140_11205 = state_11089__$1;
                                                                statearr_11140_11205[2] = null;
                                                                statearr_11140_11205[1] = 18;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_11090 === 18) {
                                                                  var inst_11017 = state_11089[2];
                                                                  var state_11089__$1 = state_11089;
                                                                  var statearr_11141_11206 = state_11089__$1;
                                                                  statearr_11141_11206[2] = inst_11017;
                                                                  statearr_11141_11206[1] = 12;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_11090 === 19) {
                                                                    var inst_10993 = state_11089[23];
                                                                    var inst_10997 = cljs.core.chunk_first.call(null, inst_10993);
                                                                    var inst_10998 = cljs.core.chunk_rest.call(null, inst_10993);
                                                                    var inst_10999 = cljs.core.count.call(null, inst_10997);
                                                                    var inst_10973 = inst_10998;
                                                                    var inst_10974 = inst_10997;
                                                                    var inst_10975 = inst_10999;
                                                                    var inst_10976 = 0;
                                                                    var state_11089__$1 = function() {
                                                                      var statearr_11142 = state_11089;
                                                                      statearr_11142[12] = inst_10976;
                                                                      statearr_11142[13] = inst_10973;
                                                                      statearr_11142[14] = inst_10974;
                                                                      statearr_11142[15] = inst_10975;
                                                                      return statearr_11142;
                                                                    }();
                                                                    var statearr_11143_11207 = state_11089__$1;
                                                                    statearr_11143_11207[2] = null;
                                                                    statearr_11143_11207[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_11090 === 20) {
                                                                      var inst_10993 = state_11089[23];
                                                                      var inst_11003 = cljs.core.first.call(null, inst_10993);
                                                                      var inst_11004 = cljs.core.nth.call(null, inst_11003, 0, null);
                                                                      var inst_11005 = cljs.core.nth.call(null, inst_11003, 1, null);
                                                                      var state_11089__$1 = function() {
                                                                        var statearr_11144 = state_11089;
                                                                        statearr_11144[25] = inst_11004;
                                                                        return statearr_11144;
                                                                      }();
                                                                      if (cljs.core.truth_(inst_11005)) {
                                                                        var statearr_11145_11208 = state_11089__$1;
                                                                        statearr_11145_11208[1] = 22;
                                                                      } else {
                                                                        var statearr_11146_11209 = state_11089__$1;
                                                                        statearr_11146_11209[1] = 23;
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_11090 === 21) {
                                                                        var inst_11014 = state_11089[2];
                                                                        var state_11089__$1 = state_11089;
                                                                        var statearr_11147_11210 = state_11089__$1;
                                                                        statearr_11147_11210[2] = inst_11014;
                                                                        statearr_11147_11210[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_11090 === 22) {
                                                                          var inst_11004 = state_11089[25];
                                                                          var inst_11007 = cljs.core.async.close_BANG_.call(null, inst_11004);
                                                                          var state_11089__$1 = state_11089;
                                                                          var statearr_11148_11211 = state_11089__$1;
                                                                          statearr_11148_11211[2] = inst_11007;
                                                                          statearr_11148_11211[1] = 24;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_11090 === 23) {
                                                                            var state_11089__$1 = state_11089;
                                                                            var statearr_11149_11212 = state_11089__$1;
                                                                            statearr_11149_11212[2] = null;
                                                                            statearr_11149_11212[1] = 24;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_11090 === 24) {
                                                                              var inst_10993 = state_11089[23];
                                                                              var inst_11010 = state_11089[2];
                                                                              var inst_11011 = cljs.core.next.call(null, inst_10993);
                                                                              var inst_10973 = inst_11011;
                                                                              var inst_10974 = null;
                                                                              var inst_10975 = 0;
                                                                              var inst_10976 = 0;
                                                                              var state_11089__$1 = function() {
                                                                                var statearr_11150 = state_11089;
                                                                                statearr_11150[26] = inst_11010;
                                                                                statearr_11150[12] = inst_10976;
                                                                                statearr_11150[13] = inst_10973;
                                                                                statearr_11150[14] = inst_10974;
                                                                                statearr_11150[15] = inst_10975;
                                                                                return statearr_11150;
                                                                              }();
                                                                              var statearr_11151_11213 = state_11089__$1;
                                                                              statearr_11151_11213[2] = null;
                                                                              statearr_11151_11213[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_11090 === 25) {
                                                                                var inst_11035 = state_11089[10];
                                                                                var inst_11034 = state_11089[11];
                                                                                var inst_11037 = inst_11035 < inst_11034;
                                                                                var inst_11038 = inst_11037;
                                                                                var state_11089__$1 = state_11089;
                                                                                if (cljs.core.truth_(inst_11038)) {
                                                                                  var statearr_11152_11214 = state_11089__$1;
                                                                                  statearr_11152_11214[1] = 27;
                                                                                } else {
                                                                                  var statearr_11153_11215 = state_11089__$1;
                                                                                  statearr_11153_11215[1] = 28;
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_11090 === 26) {
                                                                                  var inst_11080 = state_11089[2];
                                                                                  var state_11089__$1 = function() {
                                                                                    var statearr_11154 = state_11089;
                                                                                    statearr_11154[27] = inst_11080;
                                                                                    return statearr_11154;
                                                                                  }();
                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11089__$1, 42, dchan);
                                                                                } else {
                                                                                  if (state_val_11090 === 27) {
                                                                                    var inst_11033 = state_11089[9];
                                                                                    var inst_11035 = state_11089[10];
                                                                                    var inst_11040 = cljs.core._nth.call(null, inst_11033, inst_11035);
                                                                                    var state_11089__$1 = function() {
                                                                                      var statearr_11155 = state_11089;
                                                                                      statearr_11155[6] = inst_11040;
                                                                                      return statearr_11155;
                                                                                    }();
                                                                                    var statearr_11156_11216 = state_11089__$1;
                                                                                    statearr_11156_11216[2] = null;
                                                                                    statearr_11156_11216[1] = 32;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_11090 === 28) {
                                                                                      var inst_11052 = state_11089[7];
                                                                                      var inst_11032 = state_11089[8];
                                                                                      var inst_11052__$1 = cljs.core.seq.call(null, inst_11032);
                                                                                      var state_11089__$1 = function() {
                                                                                        var statearr_11160 = state_11089;
                                                                                        statearr_11160[7] = inst_11052__$1;
                                                                                        return statearr_11160;
                                                                                      }();
                                                                                      if (inst_11052__$1) {
                                                                                        var statearr_11161_11217 = state_11089__$1;
                                                                                        statearr_11161_11217[1] = 33;
                                                                                      } else {
                                                                                        var statearr_11162_11218 = state_11089__$1;
                                                                                        statearr_11162_11218[1] = 34;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_11090 === 29) {
                                                                                        var inst_11078 = state_11089[2];
                                                                                        var state_11089__$1 = state_11089;
                                                                                        var statearr_11163_11219 = state_11089__$1;
                                                                                        statearr_11163_11219[2] = inst_11078;
                                                                                        statearr_11163_11219[1] = 26;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_11090 === 30) {
                                                                                          var inst_11032 = state_11089[8];
                                                                                          var inst_11033 = state_11089[9];
                                                                                          var inst_11035 = state_11089[10];
                                                                                          var inst_11034 = state_11089[11];
                                                                                          var inst_11048 = state_11089[2];
                                                                                          var inst_11049 = inst_11035 + 1;
                                                                                          var tmp11157 = inst_11032;
                                                                                          var tmp11158 = inst_11033;
                                                                                          var tmp11159 = inst_11034;
                                                                                          var inst_11032__$1 = tmp11157;
                                                                                          var inst_11033__$1 = tmp11158;
                                                                                          var inst_11034__$1 = tmp11159;
                                                                                          var inst_11035__$1 = inst_11049;
                                                                                          var state_11089__$1 = function() {
                                                                                            var statearr_11164 = state_11089;
                                                                                            statearr_11164[8] = inst_11032__$1;
                                                                                            statearr_11164[9] = inst_11033__$1;
                                                                                            statearr_11164[28] = inst_11048;
                                                                                            statearr_11164[10] = inst_11035__$1;
                                                                                            statearr_11164[11] = inst_11034__$1;
                                                                                            return statearr_11164;
                                                                                          }();
                                                                                          var statearr_11165_11220 = state_11089__$1;
                                                                                          statearr_11165_11220[2] = null;
                                                                                          statearr_11165_11220[1] = 25;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_11090 === 31) {
                                                                                            var inst_11040 = state_11089[6];
                                                                                            var inst_11041 = state_11089[2];
                                                                                            var inst_11042 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                            var inst_11043 = cljs.core.async.untap_STAR_.call(null, m, inst_11040);
                                                                                            var state_11089__$1 = function() {
                                                                                              var statearr_11166 = state_11089;
                                                                                              statearr_11166[29] = inst_11041;
                                                                                              statearr_11166[30] = inst_11042;
                                                                                              return statearr_11166;
                                                                                            }();
                                                                                            var statearr_11167_11221 = state_11089__$1;
                                                                                            statearr_11167_11221[2] = inst_11043;
                                                                                            statearr_11167_11221[1] = 30;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            return null;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5881__auto__) {
        return function() {
          var state_machine__5882__auto__ = null;
          var state_machine__5882__auto____0 = function() {
            var statearr_11169 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_11169[0] = state_machine__5882__auto__;
            statearr_11169[1] = 1;
            return statearr_11169;
          };
          var state_machine__5882__auto____1 = function(state_11089) {
            while (true) {
              var result__5883__auto__ = switch__5881__auto__.call(null, state_11089);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5883__auto__;
              }
              break;
            }
          };
          state_machine__5882__auto__ = function(state_11089) {
            switch(arguments.length) {
              case 0:
                return state_machine__5882__auto____0.call(this);
              case 1:
                return state_machine__5882__auto____1.call(this, state_11089);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
          return state_machine__5882__auto__;
        }();
      }(switch__5881__auto__);
    }();
    var state__5933__auto__ = function() {
      var statearr_11170 = f__5932__auto__.call(null);
      statearr_11170[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___11171;
      return statearr_11170;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj11223 = {};
  return obj11223;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t11329 !== "undefined") {
    } else {
      cljs.core.async.t11329 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta11330) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta11330 = meta11330;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t11329.cljs$lang$type = true;
      cljs.core.async.t11329.cljs$lang$ctorStr = "cljs.core.async/t11329";
      cljs.core.async.t11329.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t11329");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11329.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t11329.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11329.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11329.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11329.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11329.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11329.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t11329.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11329.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11331) {
          var self__ = this;
          var _11331__$1 = this;
          return self__.meta11330;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11329.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11331, meta11330__$1) {
          var self__ = this;
          var _11331__$1 = this;
          return new cljs.core.async.t11329(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta11330__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t11329 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t11329(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta11330) {
          return new cljs.core.async.t11329(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta11330);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t11329(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__5931__auto___11434 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5932__auto__ = function() {
      var switch__5881__auto__ = function(state_11396) {
        var state_val_11397 = state_11396[1];
        if (state_val_11397 === 1) {
          var inst_11335 = state_11396[5];
          var inst_11335__$1 = calc_state.call(null);
          var inst_11336 = cljs.core.seq_QMARK_.call(null, inst_11335__$1);
          var state_11396__$1 = function() {
            var statearr_11398 = state_11396;
            statearr_11398[5] = inst_11335__$1;
            return statearr_11398;
          }();
          if (inst_11336) {
            var statearr_11399_11435 = state_11396__$1;
            statearr_11399_11435[1] = 2;
          } else {
            var statearr_11400_11436 = state_11396__$1;
            statearr_11400_11436[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_11397 === 2) {
            var inst_11335 = state_11396[5];
            var inst_11338 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11335);
            var state_11396__$1 = state_11396;
            var statearr_11401_11437 = state_11396__$1;
            statearr_11401_11437[2] = inst_11338;
            statearr_11401_11437[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_11397 === 3) {
              var inst_11335 = state_11396[5];
              var state_11396__$1 = state_11396;
              var statearr_11402_11438 = state_11396__$1;
              statearr_11402_11438[2] = inst_11335;
              statearr_11402_11438[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_11397 === 4) {
                var inst_11335 = state_11396[5];
                var inst_11341 = state_11396[2];
                var inst_11342 = cljs.core.get.call(null, inst_11341, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_11343 = cljs.core.get.call(null, inst_11341, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_11344 = cljs.core.get.call(null, inst_11341, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_11345 = inst_11335;
                var state_11396__$1 = function() {
                  var statearr_11403 = state_11396;
                  statearr_11403[6] = inst_11345;
                  statearr_11403[7] = inst_11344;
                  statearr_11403[8] = inst_11343;
                  statearr_11403[9] = inst_11342;
                  return statearr_11403;
                }();
                var statearr_11404_11439 = state_11396__$1;
                statearr_11404_11439[2] = null;
                statearr_11404_11439[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_11397 === 5) {
                  var inst_11345 = state_11396[6];
                  var inst_11348 = cljs.core.seq_QMARK_.call(null, inst_11345);
                  var state_11396__$1 = state_11396;
                  if (inst_11348) {
                    var statearr_11405_11440 = state_11396__$1;
                    statearr_11405_11440[1] = 7;
                  } else {
                    var statearr_11406_11441 = state_11396__$1;
                    statearr_11406_11441[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_11397 === 6) {
                    var inst_11394 = state_11396[2];
                    var state_11396__$1 = state_11396;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11396__$1, inst_11394);
                  } else {
                    if (state_val_11397 === 7) {
                      var inst_11345 = state_11396[6];
                      var inst_11350 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11345);
                      var state_11396__$1 = state_11396;
                      var statearr_11407_11442 = state_11396__$1;
                      statearr_11407_11442[2] = inst_11350;
                      statearr_11407_11442[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_11397 === 8) {
                        var inst_11345 = state_11396[6];
                        var state_11396__$1 = state_11396;
                        var statearr_11408_11443 = state_11396__$1;
                        statearr_11408_11443[2] = inst_11345;
                        statearr_11408_11443[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_11397 === 9) {
                          var inst_11353 = state_11396[10];
                          var inst_11353__$1 = state_11396[2];
                          var inst_11354 = cljs.core.get.call(null, inst_11353__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_11355 = cljs.core.get.call(null, inst_11353__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_11356 = cljs.core.get.call(null, inst_11353__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_11396__$1 = function() {
                            var statearr_11409 = state_11396;
                            statearr_11409[11] = inst_11356;
                            statearr_11409[12] = inst_11355;
                            statearr_11409[10] = inst_11353__$1;
                            return statearr_11409;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_11396__$1, 10, inst_11354);
                        } else {
                          if (state_val_11397 === 10) {
                            var inst_11360 = state_11396[13];
                            var inst_11361 = state_11396[14];
                            var inst_11359 = state_11396[2];
                            var inst_11360__$1 = cljs.core.nth.call(null, inst_11359, 0, null);
                            var inst_11361__$1 = cljs.core.nth.call(null, inst_11359, 1, null);
                            var inst_11362 = inst_11360__$1 == null;
                            var inst_11363 = cljs.core._EQ_.call(null, inst_11361__$1, change);
                            var inst_11364 = inst_11362 || inst_11363;
                            var state_11396__$1 = function() {
                              var statearr_11410 = state_11396;
                              statearr_11410[13] = inst_11360__$1;
                              statearr_11410[14] = inst_11361__$1;
                              return statearr_11410;
                            }();
                            if (cljs.core.truth_(inst_11364)) {
                              var statearr_11411_11444 = state_11396__$1;
                              statearr_11411_11444[1] = 11;
                            } else {
                              var statearr_11412_11445 = state_11396__$1;
                              statearr_11412_11445[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_11397 === 11) {
                              var inst_11360 = state_11396[13];
                              var inst_11366 = inst_11360 == null;
                              var state_11396__$1 = state_11396;
                              if (cljs.core.truth_(inst_11366)) {
                                var statearr_11413_11446 = state_11396__$1;
                                statearr_11413_11446[1] = 14;
                              } else {
                                var statearr_11414_11447 = state_11396__$1;
                                statearr_11414_11447[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_11397 === 12) {
                                var inst_11375 = state_11396[15];
                                var inst_11361 = state_11396[14];
                                var inst_11356 = state_11396[11];
                                var inst_11375__$1 = inst_11356.call(null, inst_11361);
                                var state_11396__$1 = function() {
                                  var statearr_11415 = state_11396;
                                  statearr_11415[15] = inst_11375__$1;
                                  return statearr_11415;
                                }();
                                if (cljs.core.truth_(inst_11375__$1)) {
                                  var statearr_11416_11448 = state_11396__$1;
                                  statearr_11416_11448[1] = 17;
                                } else {
                                  var statearr_11417_11449 = state_11396__$1;
                                  statearr_11417_11449[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_11397 === 13) {
                                  var inst_11392 = state_11396[2];
                                  var state_11396__$1 = state_11396;
                                  var statearr_11418_11450 = state_11396__$1;
                                  statearr_11418_11450[2] = inst_11392;
                                  statearr_11418_11450[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_11397 === 14) {
                                    var inst_11361 = state_11396[14];
                                    var inst_11368 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_11361);
                                    var state_11396__$1 = state_11396;
                                    var statearr_11419_11451 = state_11396__$1;
                                    statearr_11419_11451[2] = inst_11368;
                                    statearr_11419_11451[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_11397 === 15) {
                                      var state_11396__$1 = state_11396;
                                      var statearr_11420_11452 = state_11396__$1;
                                      statearr_11420_11452[2] = null;
                                      statearr_11420_11452[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_11397 === 16) {
                                        var inst_11371 = state_11396[2];
                                        var inst_11372 = calc_state.call(null);
                                        var inst_11345 = inst_11372;
                                        var state_11396__$1 = function() {
                                          var statearr_11421 = state_11396;
                                          statearr_11421[16] = inst_11371;
                                          statearr_11421[6] = inst_11345;
                                          return statearr_11421;
                                        }();
                                        var statearr_11422_11453 = state_11396__$1;
                                        statearr_11422_11453[2] = null;
                                        statearr_11422_11453[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_11397 === 17) {
                                          var inst_11375 = state_11396[15];
                                          var state_11396__$1 = state_11396;
                                          var statearr_11423_11454 = state_11396__$1;
                                          statearr_11423_11454[2] = inst_11375;
                                          statearr_11423_11454[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_11397 === 18) {
                                            var inst_11361 = state_11396[14];
                                            var inst_11356 = state_11396[11];
                                            var inst_11355 = state_11396[12];
                                            var inst_11378 = cljs.core.empty_QMARK_.call(null, inst_11356);
                                            var inst_11379 = inst_11355.call(null, inst_11361);
                                            var inst_11380 = cljs.core.not.call(null, inst_11379);
                                            var inst_11381 = inst_11378 && inst_11380;
                                            var state_11396__$1 = state_11396;
                                            var statearr_11424_11455 = state_11396__$1;
                                            statearr_11424_11455[2] = inst_11381;
                                            statearr_11424_11455[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_11397 === 19) {
                                              var inst_11383 = state_11396[2];
                                              var state_11396__$1 = state_11396;
                                              if (cljs.core.truth_(inst_11383)) {
                                                var statearr_11425_11456 = state_11396__$1;
                                                statearr_11425_11456[1] = 20;
                                              } else {
                                                var statearr_11426_11457 = state_11396__$1;
                                                statearr_11426_11457[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_11397 === 20) {
                                                var inst_11360 = state_11396[13];
                                                var state_11396__$1 = state_11396;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11396__$1, 23, out, inst_11360);
                                              } else {
                                                if (state_val_11397 === 21) {
                                                  var state_11396__$1 = state_11396;
                                                  var statearr_11427_11458 = state_11396__$1;
                                                  statearr_11427_11458[2] = null;
                                                  statearr_11427_11458[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_11397 === 22) {
                                                    var inst_11353 = state_11396[10];
                                                    var inst_11389 = state_11396[2];
                                                    var inst_11345 = inst_11353;
                                                    var state_11396__$1 = function() {
                                                      var statearr_11428 = state_11396;
                                                      statearr_11428[6] = inst_11345;
                                                      statearr_11428[17] = inst_11389;
                                                      return statearr_11428;
                                                    }();
                                                    var statearr_11429_11459 = state_11396__$1;
                                                    statearr_11429_11459[2] = null;
                                                    statearr_11429_11459[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_11397 === 23) {
                                                      var inst_11386 = state_11396[2];
                                                      var state_11396__$1 = state_11396;
                                                      var statearr_11430_11460 = state_11396__$1;
                                                      statearr_11430_11460[2] = inst_11386;
                                                      statearr_11430_11460[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5881__auto__) {
        return function() {
          var state_machine__5882__auto__ = null;
          var state_machine__5882__auto____0 = function() {
            var statearr_11432 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_11432[0] = state_machine__5882__auto__;
            statearr_11432[1] = 1;
            return statearr_11432;
          };
          var state_machine__5882__auto____1 = function(state_11396) {
            while (true) {
              var result__5883__auto__ = switch__5881__auto__.call(null, state_11396);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5883__auto__;
              }
              break;
            }
          };
          state_machine__5882__auto__ = function(state_11396) {
            switch(arguments.length) {
              case 0:
                return state_machine__5882__auto____0.call(this);
              case 1:
                return state_machine__5882__auto____1.call(this, state_11396);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
          return state_machine__5882__auto__;
        }();
      }(switch__5881__auto__);
    }();
    var state__5933__auto__ = function() {
      var statearr_11433 = f__5932__auto__.call(null);
      statearr_11433[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___11434;
      return statearr_11433;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj11462 = {};
  return obj11462;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3388__auto__ = p;
    if (and__3388__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4021__auto__ = p == null ? null : p;
    return function() {
      var or__3400__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3388__auto__ = p;
    if (and__3388__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4021__auto__ = p == null ? null : p;
    return function() {
      var or__3400__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3388__auto__ = p;
      if (and__3388__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4021__auto__ = p == null ? null : p;
      return function() {
        var or__3400__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3388__auto__ = p;
      if (and__3388__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4021__auto__ = p == null ? null : p;
      return function() {
        var or__3400__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3400__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3400__auto__, mults) {
            return function(p1__11463_SHARP_) {
              if (cljs.core.truth_(p1__11463_SHARP_.call(null, topic))) {
                return p1__11463_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__11463_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3400__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t11587 !== "undefined") {
      } else {
        cljs.core.async.t11587 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta11588) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta11588 = meta11588;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t11587.cljs$lang$type = true;
        cljs.core.async.t11587.cljs$lang$ctorStr = "cljs.core.async/t11587";
        cljs.core.async.t11587.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
            return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t11587");
          };
        }(mults, ensure_mult);
        cljs.core.async.t11587.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t11587.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11587.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t11587.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11587.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11587.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t11587.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t11587.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_11589) {
            var self__ = this;
            var _11589__$1 = this;
            return self__.meta11588;
          };
        }(mults, ensure_mult);
        cljs.core.async.t11587.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_11589, meta11588__$1) {
            var self__ = this;
            var _11589__$1 = this;
            return new cljs.core.async.t11587(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta11588__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t11587 = function(mults, ensure_mult) {
          return function __GT_t11587(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta11588) {
            return new cljs.core.async.t11587(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta11588);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t11587(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5931__auto___11710 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_11662) {
          var state_val_11663 = state_11662[1];
          if (state_val_11663 === 1) {
            var state_11662__$1 = state_11662;
            var statearr_11664_11711 = state_11662__$1;
            statearr_11664_11711[2] = null;
            statearr_11664_11711[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_11663 === 2) {
              var state_11662__$1 = state_11662;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11662__$1, 4, ch);
            } else {
              if (state_val_11663 === 3) {
                var inst_11660 = state_11662[2];
                var state_11662__$1 = state_11662;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11662__$1, inst_11660);
              } else {
                if (state_val_11663 === 4) {
                  var inst_11592 = state_11662[5];
                  var inst_11592__$1 = state_11662[2];
                  var inst_11593 = inst_11592__$1 == null;
                  var state_11662__$1 = function() {
                    var statearr_11665 = state_11662;
                    statearr_11665[5] = inst_11592__$1;
                    return statearr_11665;
                  }();
                  if (cljs.core.truth_(inst_11593)) {
                    var statearr_11666_11712 = state_11662__$1;
                    statearr_11666_11712[1] = 5;
                  } else {
                    var statearr_11667_11713 = state_11662__$1;
                    statearr_11667_11713[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_11663 === 5) {
                    var inst_11599 = cljs.core.deref.call(null, mults);
                    var inst_11600 = cljs.core.vals.call(null, inst_11599);
                    var inst_11601 = cljs.core.seq.call(null, inst_11600);
                    var inst_11602 = inst_11601;
                    var inst_11603 = null;
                    var inst_11604 = 0;
                    var inst_11605 = 0;
                    var state_11662__$1 = function() {
                      var statearr_11668 = state_11662;
                      statearr_11668[6] = inst_11602;
                      statearr_11668[7] = inst_11604;
                      statearr_11668[8] = inst_11603;
                      statearr_11668[9] = inst_11605;
                      return statearr_11668;
                    }();
                    var statearr_11669_11714 = state_11662__$1;
                    statearr_11669_11714[2] = null;
                    statearr_11669_11714[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_11663 === 6) {
                      var inst_11592 = state_11662[5];
                      var inst_11642 = state_11662[10];
                      var inst_11640 = state_11662[11];
                      var inst_11640__$1 = topic_fn.call(null, inst_11592);
                      var inst_11641 = cljs.core.deref.call(null, mults);
                      var inst_11642__$1 = cljs.core.get.call(null, inst_11641, inst_11640__$1);
                      var state_11662__$1 = function() {
                        var statearr_11670 = state_11662;
                        statearr_11670[10] = inst_11642__$1;
                        statearr_11670[11] = inst_11640__$1;
                        return statearr_11670;
                      }();
                      if (cljs.core.truth_(inst_11642__$1)) {
                        var statearr_11671_11715 = state_11662__$1;
                        statearr_11671_11715[1] = 19;
                      } else {
                        var statearr_11672_11716 = state_11662__$1;
                        statearr_11672_11716[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_11663 === 7) {
                        var inst_11658 = state_11662[2];
                        var state_11662__$1 = state_11662;
                        var statearr_11673_11717 = state_11662__$1;
                        statearr_11673_11717[2] = inst_11658;
                        statearr_11673_11717[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_11663 === 8) {
                          var inst_11604 = state_11662[7];
                          var inst_11605 = state_11662[9];
                          var inst_11607 = inst_11605 < inst_11604;
                          var inst_11608 = inst_11607;
                          var state_11662__$1 = state_11662;
                          if (cljs.core.truth_(inst_11608)) {
                            var statearr_11677_11718 = state_11662__$1;
                            statearr_11677_11718[1] = 10;
                          } else {
                            var statearr_11678_11719 = state_11662__$1;
                            statearr_11678_11719[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_11663 === 9) {
                            var inst_11638 = state_11662[2];
                            var state_11662__$1 = state_11662;
                            var statearr_11679_11720 = state_11662__$1;
                            statearr_11679_11720[2] = inst_11638;
                            statearr_11679_11720[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_11663 === 10) {
                              var inst_11602 = state_11662[6];
                              var inst_11604 = state_11662[7];
                              var inst_11603 = state_11662[8];
                              var inst_11605 = state_11662[9];
                              var inst_11610 = cljs.core._nth.call(null, inst_11603, inst_11605);
                              var inst_11611 = cljs.core.async.muxch_STAR_.call(null, inst_11610);
                              var inst_11612 = cljs.core.async.close_BANG_.call(null, inst_11611);
                              var inst_11613 = inst_11605 + 1;
                              var tmp11674 = inst_11602;
                              var tmp11675 = inst_11604;
                              var tmp11676 = inst_11603;
                              var inst_11602__$1 = tmp11674;
                              var inst_11603__$1 = tmp11676;
                              var inst_11604__$1 = tmp11675;
                              var inst_11605__$1 = inst_11613;
                              var state_11662__$1 = function() {
                                var statearr_11680 = state_11662;
                                statearr_11680[12] = inst_11612;
                                statearr_11680[6] = inst_11602__$1;
                                statearr_11680[7] = inst_11604__$1;
                                statearr_11680[8] = inst_11603__$1;
                                statearr_11680[9] = inst_11605__$1;
                                return statearr_11680;
                              }();
                              var statearr_11681_11721 = state_11662__$1;
                              statearr_11681_11721[2] = null;
                              statearr_11681_11721[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_11663 === 11) {
                                var inst_11602 = state_11662[6];
                                var inst_11616 = state_11662[13];
                                var inst_11616__$1 = cljs.core.seq.call(null, inst_11602);
                                var state_11662__$1 = function() {
                                  var statearr_11682 = state_11662;
                                  statearr_11682[13] = inst_11616__$1;
                                  return statearr_11682;
                                }();
                                if (inst_11616__$1) {
                                  var statearr_11683_11722 = state_11662__$1;
                                  statearr_11683_11722[1] = 13;
                                } else {
                                  var statearr_11684_11723 = state_11662__$1;
                                  statearr_11684_11723[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_11663 === 12) {
                                  var inst_11636 = state_11662[2];
                                  var state_11662__$1 = state_11662;
                                  var statearr_11685_11724 = state_11662__$1;
                                  statearr_11685_11724[2] = inst_11636;
                                  statearr_11685_11724[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_11663 === 13) {
                                    var inst_11616 = state_11662[13];
                                    var inst_11618 = cljs.core.chunked_seq_QMARK_.call(null, inst_11616);
                                    var state_11662__$1 = state_11662;
                                    if (inst_11618) {
                                      var statearr_11686_11725 = state_11662__$1;
                                      statearr_11686_11725[1] = 16;
                                    } else {
                                      var statearr_11687_11726 = state_11662__$1;
                                      statearr_11687_11726[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_11663 === 14) {
                                      var state_11662__$1 = state_11662;
                                      var statearr_11688_11727 = state_11662__$1;
                                      statearr_11688_11727[2] = null;
                                      statearr_11688_11727[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_11663 === 15) {
                                        var inst_11634 = state_11662[2];
                                        var state_11662__$1 = state_11662;
                                        var statearr_11689_11728 = state_11662__$1;
                                        statearr_11689_11728[2] = inst_11634;
                                        statearr_11689_11728[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_11663 === 16) {
                                          var inst_11616 = state_11662[13];
                                          var inst_11620 = cljs.core.chunk_first.call(null, inst_11616);
                                          var inst_11621 = cljs.core.chunk_rest.call(null, inst_11616);
                                          var inst_11622 = cljs.core.count.call(null, inst_11620);
                                          var inst_11602 = inst_11621;
                                          var inst_11603 = inst_11620;
                                          var inst_11604 = inst_11622;
                                          var inst_11605 = 0;
                                          var state_11662__$1 = function() {
                                            var statearr_11690 = state_11662;
                                            statearr_11690[6] = inst_11602;
                                            statearr_11690[7] = inst_11604;
                                            statearr_11690[8] = inst_11603;
                                            statearr_11690[9] = inst_11605;
                                            return statearr_11690;
                                          }();
                                          var statearr_11691_11729 = state_11662__$1;
                                          statearr_11691_11729[2] = null;
                                          statearr_11691_11729[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_11663 === 17) {
                                            var inst_11616 = state_11662[13];
                                            var inst_11625 = cljs.core.first.call(null, inst_11616);
                                            var inst_11626 = cljs.core.async.muxch_STAR_.call(null, inst_11625);
                                            var inst_11627 = cljs.core.async.close_BANG_.call(null, inst_11626);
                                            var inst_11628 = cljs.core.next.call(null, inst_11616);
                                            var inst_11602 = inst_11628;
                                            var inst_11603 = null;
                                            var inst_11604 = 0;
                                            var inst_11605 = 0;
                                            var state_11662__$1 = function() {
                                              var statearr_11692 = state_11662;
                                              statearr_11692[14] = inst_11627;
                                              statearr_11692[6] = inst_11602;
                                              statearr_11692[7] = inst_11604;
                                              statearr_11692[8] = inst_11603;
                                              statearr_11692[9] = inst_11605;
                                              return statearr_11692;
                                            }();
                                            var statearr_11693_11730 = state_11662__$1;
                                            statearr_11693_11730[2] = null;
                                            statearr_11693_11730[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_11663 === 18) {
                                              var inst_11631 = state_11662[2];
                                              var state_11662__$1 = state_11662;
                                              var statearr_11694_11731 = state_11662__$1;
                                              statearr_11694_11731[2] = inst_11631;
                                              statearr_11694_11731[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_11663 === 19) {
                                                var state_11662__$1 = state_11662;
                                                var statearr_11695_11732 = state_11662__$1;
                                                statearr_11695_11732[2] = null;
                                                statearr_11695_11732[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_11663 === 20) {
                                                  var state_11662__$1 = state_11662;
                                                  var statearr_11696_11733 = state_11662__$1;
                                                  statearr_11696_11733[2] = null;
                                                  statearr_11696_11733[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_11663 === 21) {
                                                    var inst_11655 = state_11662[2];
                                                    var state_11662__$1 = function() {
                                                      var statearr_11697 = state_11662;
                                                      statearr_11697[15] = inst_11655;
                                                      return statearr_11697;
                                                    }();
                                                    var statearr_11698_11734 = state_11662__$1;
                                                    statearr_11698_11734[2] = null;
                                                    statearr_11698_11734[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_11663 === 22) {
                                                      var inst_11652 = state_11662[2];
                                                      var state_11662__$1 = state_11662;
                                                      var statearr_11699_11735 = state_11662__$1;
                                                      statearr_11699_11735[2] = inst_11652;
                                                      statearr_11699_11735[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_11663 === 23) {
                                                        var inst_11640 = state_11662[11];
                                                        var inst_11644 = state_11662[2];
                                                        var inst_11645 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_11640);
                                                        var state_11662__$1 = function() {
                                                          var statearr_11700 = state_11662;
                                                          statearr_11700[16] = inst_11644;
                                                          return statearr_11700;
                                                        }();
                                                        var statearr_11701_11736 = state_11662__$1;
                                                        statearr_11701_11736[2] = inst_11645;
                                                        statearr_11701_11736[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_11663 === 24) {
                                                          try {
                                                            var inst_11592 = state_11662[5];
                                                            var inst_11642 = state_11662[10];
                                                            var inst_11648 = cljs.core.async.muxch_STAR_.call(null, inst_11642);
                                                            var state_11662__$1 = state_11662;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11662__$1, 25, inst_11648, inst_11592);
                                                          } catch (e11702) {
                                                            if (e11702 instanceof Object) {
                                                              var ex__5875__auto__ = e11702;
                                                              var statearr_11703_11737 = state_11662;
                                                              statearr_11703_11737[1] = 23;
                                                              statearr_11703_11737[2] = ex__5875__auto__;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                throw e11702;
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        } else {
                                                          if (state_val_11663 === 25) {
                                                            try {
                                                              var inst_11650 = state_11662[2];
                                                              var state_11662__$1 = state_11662;
                                                              var statearr_11706_11738 = state_11662__$1;
                                                              statearr_11706_11738[2] = inst_11650;
                                                              statearr_11706_11738[1] = 22;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } catch (e11704) {
                                                              if (e11704 instanceof Object) {
                                                                var ex__5875__auto__ = e11704;
                                                                var statearr_11705_11739 = state_11662;
                                                                statearr_11705_11739[1] = 23;
                                                                statearr_11705_11739[2] = ex__5875__auto__;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                  throw e11704;
                                                                } else {
                                                                  return null;
                                                                }
                                                              }
                                                            }
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_11708 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11708[0] = state_machine__5882__auto__;
              statearr_11708[1] = 1;
              return statearr_11708;
            };
            var state_machine__5882__auto____1 = function(state_11662) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_11662);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_11662) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_11662);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_11709 = f__5932__auto__.call(null);
        statearr_11709[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___11710;
        return statearr_11709;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5931__auto___11870 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_11842) {
          var state_val_11843 = state_11842[1];
          if (state_val_11843 === 1) {
            var state_11842__$1 = state_11842;
            var statearr_11844_11871 = state_11842__$1;
            statearr_11844_11871[2] = null;
            statearr_11844_11871[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_11843 === 2) {
              var inst_11806 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_11807 = 0;
              var state_11842__$1 = function() {
                var statearr_11845 = state_11842;
                statearr_11845[5] = inst_11807;
                statearr_11845[6] = inst_11806;
                return statearr_11845;
              }();
              var statearr_11846_11872 = state_11842__$1;
              statearr_11846_11872[2] = null;
              statearr_11846_11872[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_11843 === 3) {
                var inst_11840 = state_11842[2];
                var state_11842__$1 = state_11842;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11842__$1, inst_11840);
              } else {
                if (state_val_11843 === 4) {
                  var inst_11807 = state_11842[5];
                  var inst_11809 = inst_11807 < cnt;
                  var state_11842__$1 = state_11842;
                  if (cljs.core.truth_(inst_11809)) {
                    var statearr_11847_11873 = state_11842__$1;
                    statearr_11847_11873[1] = 6;
                  } else {
                    var statearr_11848_11874 = state_11842__$1;
                    statearr_11848_11874[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_11843 === 5) {
                    var inst_11826 = state_11842[2];
                    var state_11842__$1 = function() {
                      var statearr_11849 = state_11842;
                      statearr_11849[7] = inst_11826;
                      return statearr_11849;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11842__$1, 12, dchan);
                  } else {
                    if (state_val_11843 === 6) {
                      var state_11842__$1 = state_11842;
                      var statearr_11850_11875 = state_11842__$1;
                      statearr_11850_11875[2] = null;
                      statearr_11850_11875[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_11843 === 7) {
                        var state_11842__$1 = state_11842;
                        var statearr_11851_11876 = state_11842__$1;
                        statearr_11851_11876[2] = null;
                        statearr_11851_11876[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_11843 === 8) {
                          var inst_11824 = state_11842[2];
                          var state_11842__$1 = state_11842;
                          var statearr_11852_11877 = state_11842__$1;
                          statearr_11852_11877[2] = inst_11824;
                          statearr_11852_11877[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_11843 === 9) {
                            var inst_11807 = state_11842[5];
                            var inst_11819 = state_11842[2];
                            var inst_11820 = inst_11807 + 1;
                            var inst_11807__$1 = inst_11820;
                            var state_11842__$1 = function() {
                              var statearr_11853 = state_11842;
                              statearr_11853[5] = inst_11807__$1;
                              statearr_11853[8] = inst_11819;
                              return statearr_11853;
                            }();
                            var statearr_11854_11878 = state_11842__$1;
                            statearr_11854_11878[2] = null;
                            statearr_11854_11878[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_11843 === 10) {
                              var inst_11811 = state_11842[2];
                              var inst_11812 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_11842__$1 = function() {
                                var statearr_11855 = state_11842;
                                statearr_11855[9] = inst_11811;
                                return statearr_11855;
                              }();
                              var statearr_11856_11879 = state_11842__$1;
                              statearr_11856_11879[2] = inst_11812;
                              statearr_11856_11879[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_11843 === 11) {
                                try {
                                  var inst_11807 = state_11842[5];
                                  var inst_11815 = chs__$1.call(null, inst_11807);
                                  var inst_11816 = done.call(null, inst_11807);
                                  var inst_11817 = cljs.core.async.take_BANG_.call(null, inst_11815, inst_11816);
                                  var state_11842__$1 = state_11842;
                                  var statearr_11859_11880 = state_11842__$1;
                                  statearr_11859_11880[2] = inst_11817;
                                  statearr_11859_11880[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } catch (e11857) {
                                  if (e11857 instanceof Object) {
                                    var ex__5875__auto__ = e11857;
                                    var statearr_11858_11881 = state_11842;
                                    statearr_11858_11881[1] = 10;
                                    statearr_11858_11881[2] = ex__5875__auto__;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                      throw e11857;
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              } else {
                                if (state_val_11843 === 12) {
                                  var inst_11828 = state_11842[10];
                                  var inst_11828__$1 = state_11842[2];
                                  var inst_11829 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_11828__$1);
                                  var state_11842__$1 = function() {
                                    var statearr_11860 = state_11842;
                                    statearr_11860[10] = inst_11828__$1;
                                    return statearr_11860;
                                  }();
                                  if (cljs.core.truth_(inst_11829)) {
                                    var statearr_11861_11882 = state_11842__$1;
                                    statearr_11861_11882[1] = 13;
                                  } else {
                                    var statearr_11862_11883 = state_11842__$1;
                                    statearr_11862_11883[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_11843 === 13) {
                                    var inst_11831 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_11842__$1 = state_11842;
                                    var statearr_11863_11884 = state_11842__$1;
                                    statearr_11863_11884[2] = inst_11831;
                                    statearr_11863_11884[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_11843 === 14) {
                                      var inst_11828 = state_11842[10];
                                      var inst_11833 = cljs.core.apply.call(null, f, inst_11828);
                                      var state_11842__$1 = state_11842;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11842__$1, 16, out, inst_11833);
                                    } else {
                                      if (state_val_11843 === 15) {
                                        var inst_11838 = state_11842[2];
                                        var state_11842__$1 = state_11842;
                                        var statearr_11864_11885 = state_11842__$1;
                                        statearr_11864_11885[2] = inst_11838;
                                        statearr_11864_11885[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_11843 === 16) {
                                          var inst_11835 = state_11842[2];
                                          var state_11842__$1 = function() {
                                            var statearr_11865 = state_11842;
                                            statearr_11865[11] = inst_11835;
                                            return statearr_11865;
                                          }();
                                          var statearr_11866_11886 = state_11842__$1;
                                          statearr_11866_11886[2] = null;
                                          statearr_11866_11886[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_11868 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11868[0] = state_machine__5882__auto__;
              statearr_11868[1] = 1;
              return statearr_11868;
            };
            var state_machine__5882__auto____1 = function(state_11842) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_11842);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_11842) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_11842);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_11869 = f__5932__auto__.call(null);
        statearr_11869[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___11870;
        return statearr_11869;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5931__auto___11986 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_11966) {
          var state_val_11967 = state_11966[1];
          if (state_val_11967 === 1) {
            var inst_11937 = cljs.core.vec.call(null, chs);
            var inst_11938 = inst_11937;
            var state_11966__$1 = function() {
              var statearr_11968 = state_11966;
              statearr_11968[5] = inst_11938;
              return statearr_11968;
            }();
            var statearr_11969_11987 = state_11966__$1;
            statearr_11969_11987[2] = null;
            statearr_11969_11987[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_11967 === 2) {
              var inst_11938 = state_11966[5];
              var inst_11940 = cljs.core.count.call(null, inst_11938);
              var inst_11941 = inst_11940 > 0;
              var state_11966__$1 = state_11966;
              if (cljs.core.truth_(inst_11941)) {
                var statearr_11970_11988 = state_11966__$1;
                statearr_11970_11988[1] = 4;
              } else {
                var statearr_11971_11989 = state_11966__$1;
                statearr_11971_11989[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_11967 === 3) {
                var inst_11964 = state_11966[2];
                var state_11966__$1 = state_11966;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11966__$1, inst_11964);
              } else {
                if (state_val_11967 === 4) {
                  var inst_11938 = state_11966[5];
                  var state_11966__$1 = state_11966;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_11966__$1, 7, inst_11938);
                } else {
                  if (state_val_11967 === 5) {
                    var inst_11960 = cljs.core.async.close_BANG_.call(null, out);
                    var state_11966__$1 = state_11966;
                    var statearr_11972_11990 = state_11966__$1;
                    statearr_11972_11990[2] = inst_11960;
                    statearr_11972_11990[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_11967 === 6) {
                      var inst_11962 = state_11966[2];
                      var state_11966__$1 = state_11966;
                      var statearr_11973_11991 = state_11966__$1;
                      statearr_11973_11991[2] = inst_11962;
                      statearr_11973_11991[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_11967 === 7) {
                        var inst_11945 = state_11966[6];
                        var inst_11946 = state_11966[7];
                        var inst_11945__$1 = state_11966[2];
                        var inst_11946__$1 = cljs.core.nth.call(null, inst_11945__$1, 0, null);
                        var inst_11947 = cljs.core.nth.call(null, inst_11945__$1, 1, null);
                        var inst_11948 = inst_11946__$1 == null;
                        var state_11966__$1 = function() {
                          var statearr_11974 = state_11966;
                          statearr_11974[6] = inst_11945__$1;
                          statearr_11974[8] = inst_11947;
                          statearr_11974[7] = inst_11946__$1;
                          return statearr_11974;
                        }();
                        if (cljs.core.truth_(inst_11948)) {
                          var statearr_11975_11992 = state_11966__$1;
                          statearr_11975_11992[1] = 8;
                        } else {
                          var statearr_11976_11993 = state_11966__$1;
                          statearr_11976_11993[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_11967 === 8) {
                          var inst_11945 = state_11966[6];
                          var inst_11947 = state_11966[8];
                          var inst_11946 = state_11966[7];
                          var inst_11938 = state_11966[5];
                          var inst_11950 = function() {
                            var c = inst_11947;
                            var v = inst_11946;
                            var vec__11943 = inst_11945;
                            var cs = inst_11938;
                            return function(c, v, vec__11943, cs, inst_11945, inst_11947, inst_11946, inst_11938, state_val_11967) {
                              return function(p1__11887_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__11887_SHARP_);
                              };
                            }(c, v, vec__11943, cs, inst_11945, inst_11947, inst_11946, inst_11938, state_val_11967);
                          }();
                          var inst_11951 = cljs.core.filterv.call(null, inst_11950, inst_11938);
                          var inst_11938__$1 = inst_11951;
                          var state_11966__$1 = function() {
                            var statearr_11977 = state_11966;
                            statearr_11977[5] = inst_11938__$1;
                            return statearr_11977;
                          }();
                          var statearr_11978_11994 = state_11966__$1;
                          statearr_11978_11994[2] = null;
                          statearr_11978_11994[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_11967 === 9) {
                            var inst_11946 = state_11966[7];
                            var state_11966__$1 = state_11966;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11966__$1, 11, out, inst_11946);
                          } else {
                            if (state_val_11967 === 10) {
                              var inst_11958 = state_11966[2];
                              var state_11966__$1 = state_11966;
                              var statearr_11980_11995 = state_11966__$1;
                              statearr_11980_11995[2] = inst_11958;
                              statearr_11980_11995[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_11967 === 11) {
                                var inst_11938 = state_11966[5];
                                var inst_11955 = state_11966[2];
                                var tmp11979 = inst_11938;
                                var inst_11938__$1 = tmp11979;
                                var state_11966__$1 = function() {
                                  var statearr_11981 = state_11966;
                                  statearr_11981[9] = inst_11955;
                                  statearr_11981[5] = inst_11938__$1;
                                  return statearr_11981;
                                }();
                                var statearr_11982_11996 = state_11966__$1;
                                statearr_11982_11996[2] = null;
                                statearr_11982_11996[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_11984 = [null, null, null, null, null, null, null, null, null, null];
              statearr_11984[0] = state_machine__5882__auto__;
              statearr_11984[1] = 1;
              return statearr_11984;
            };
            var state_machine__5882__auto____1 = function(state_11966) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_11966);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_11966) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_11966);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_11985 = f__5932__auto__.call(null);
        statearr_11985[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___11986;
        return statearr_11985;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("chaperone.websocket");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc.Response");
goog.require("chaperone.crossover.rpc.Request");
goog.require("chaperone.crossover.rpc");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
chaperone.websocket.create_sub_system = function create_sub_system(system, host, port) {
  var sub_system = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "host", "host", 1017112858), host, new cljs.core.Keyword(null, "port", "port", 1017351155), port, new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), 
  new cljs.core.Keyword(null, "edn-readers", "edn-readers", 2679897956), chaperone.crossover.rpc.all_edn_readers.call(null)], null);
  return cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), sub_system);
};
chaperone.websocket.sub_system = function sub_system(system) {
  return(new cljs.core.Keyword(null, "websocket", "websocket", 784338745)).cljs$core$IFn$_invoke$arity$1(system);
};
chaperone.websocket.respond_BANG_ = function respond_BANG_(web_sockets, response) {
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_sockets);
  var rpc_id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(response));
  var rpc_chan = cljs.core.get.call(null, cljs.core.deref.call(null, rpc_map), rpc_id);
  cljs.core.async.put_BANG_.call(null, rpc_chan, response);
  cljs.core.async.close_BANG_.call(null, rpc_chan);
  return cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.dissoc, rpc_id);
};
chaperone.websocket.start_request_chan_listen_BANG_ = function start_request_chan_listen_BANG_(web_socket) {
  var socket = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(web_socket);
  var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5932__auto__ = function() {
      var switch__5881__auto__ = function(state_8129) {
        var state_val_8130 = state_8129[1];
        if (state_val_8130 === 8) {
          var inst_8121 = state_8129[2];
          var inst_8114 = inst_8121;
          var state_8129__$1 = function() {
            var statearr_8131 = state_8129;
            statearr_8131[5] = inst_8114;
            return statearr_8131;
          }();
          var statearr_8132_8143 = state_8129__$1;
          statearr_8132_8143[2] = null;
          statearr_8132_8143[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_8130 === 7) {
            var inst_8125 = state_8129[2];
            var state_8129__$1 = state_8129;
            var statearr_8133_8144 = state_8129__$1;
            statearr_8133_8144[2] = inst_8125;
            statearr_8133_8144[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_8130 === 6) {
              var state_8129__$1 = state_8129;
              var statearr_8134_8145 = state_8129__$1;
              statearr_8134_8145[2] = null;
              statearr_8134_8145[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_8130 === 5) {
                var inst_8119 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_8129__$1 = state_8129;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8129__$1, 8, inst_8119);
              } else {
                if (state_val_8130 === 4) {
                  var inst_8127 = state_8129[2];
                  var state_8129__$1 = state_8129;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8129__$1, inst_8127);
                } else {
                  if (state_val_8130 === 3) {
                    var inst_8114 = state_8129[5];
                    var inst_8116 = cljs.core.pr_str.call(null, inst_8114);
                    var inst_8117 = socket.send(inst_8116);
                    var state_8129__$1 = function() {
                      var statearr_8135 = state_8129;
                      statearr_8135[6] = inst_8117;
                      return statearr_8135;
                    }();
                    if (cljs.core.truth_(inst_8114)) {
                      var statearr_8136_8146 = state_8129__$1;
                      statearr_8136_8146[1] = 5;
                    } else {
                      var statearr_8137_8147 = state_8129__$1;
                      statearr_8137_8147[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_8130 === 2) {
                      var inst_8113 = state_8129[2];
                      var inst_8114 = inst_8113;
                      var state_8129__$1 = function() {
                        var statearr_8138 = state_8129;
                        statearr_8138[5] = inst_8114;
                        return statearr_8138;
                      }();
                      var statearr_8139_8148 = state_8129__$1;
                      statearr_8139_8148[2] = null;
                      statearr_8139_8148[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_8130 === 1) {
                        var inst_8111 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
                        var state_8129__$1 = state_8129;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8129__$1, 2, inst_8111);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5881__auto__) {
        return function() {
          var state_machine__5882__auto__ = null;
          var state_machine__5882__auto____0 = function() {
            var statearr_8141 = [null, null, null, null, null, null, null];
            statearr_8141[0] = state_machine__5882__auto__;
            statearr_8141[1] = 1;
            return statearr_8141;
          };
          var state_machine__5882__auto____1 = function(state_8129) {
            while (true) {
              var result__5883__auto__ = switch__5881__auto__.call(null, state_8129);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5883__auto__;
              }
              break;
            }
          };
          state_machine__5882__auto__ = function(state_8129) {
            switch(arguments.length) {
              case 0:
                return state_machine__5882__auto____0.call(this);
              case 1:
                return state_machine__5882__auto____1.call(this, state_8129);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
          return state_machine__5882__auto__;
        }();
      }(switch__5881__auto__);
    }();
    var state__5933__auto__ = function() {
      var statearr_8142 = f__5932__auto__.call(null);
      statearr_8142[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
      return statearr_8142;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
  });
  return c__5931__auto__;
};
chaperone.websocket.start_response_chan_listen_BANG_ = function start_response_chan_listen_BANG_(web_socket) {
  var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5932__auto__ = function() {
      var switch__5881__auto__ = function(state_8199) {
        var state_val_8200 = state_8199[1];
        if (state_val_8200 === 8) {
          var inst_8191 = state_8199[2];
          var inst_8184 = inst_8191;
          var state_8199__$1 = function() {
            var statearr_8201 = state_8199;
            statearr_8201[5] = inst_8184;
            return statearr_8201;
          }();
          var statearr_8202_8213 = state_8199__$1;
          statearr_8202_8213[2] = null;
          statearr_8202_8213[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_8200 === 7) {
            var inst_8195 = state_8199[2];
            var state_8199__$1 = state_8199;
            var statearr_8203_8214 = state_8199__$1;
            statearr_8203_8214[2] = inst_8195;
            statearr_8203_8214[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_8200 === 6) {
              var state_8199__$1 = state_8199;
              var statearr_8204_8215 = state_8199__$1;
              statearr_8204_8215[2] = null;
              statearr_8204_8215[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_8200 === 5) {
                var inst_8189 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_8199__$1 = state_8199;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8199__$1, 8, inst_8189);
              } else {
                if (state_val_8200 === 4) {
                  var inst_8197 = state_8199[2];
                  var state_8199__$1 = state_8199;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8199__$1, inst_8197);
                } else {
                  if (state_val_8200 === 3) {
                    var inst_8184 = state_8199[5];
                    var inst_8186 = cljs.reader.read_string.call(null, inst_8184);
                    var inst_8187 = chaperone.websocket.respond_BANG_.call(null, web_socket, inst_8186);
                    var state_8199__$1 = function() {
                      var statearr_8205 = state_8199;
                      statearr_8205[6] = inst_8187;
                      return statearr_8205;
                    }();
                    if (cljs.core.truth_(inst_8184)) {
                      var statearr_8206_8216 = state_8199__$1;
                      statearr_8206_8216[1] = 5;
                    } else {
                      var statearr_8207_8217 = state_8199__$1;
                      statearr_8207_8217[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_8200 === 2) {
                      var inst_8183 = state_8199[2];
                      var inst_8184 = inst_8183;
                      var state_8199__$1 = function() {
                        var statearr_8208 = state_8199;
                        statearr_8208[5] = inst_8184;
                        return statearr_8208;
                      }();
                      var statearr_8209_8218 = state_8199__$1;
                      statearr_8209_8218[2] = null;
                      statearr_8209_8218[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_8200 === 1) {
                        var inst_8181 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket);
                        var state_8199__$1 = state_8199;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8199__$1, 2, inst_8181);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5881__auto__) {
        return function() {
          var state_machine__5882__auto__ = null;
          var state_machine__5882__auto____0 = function() {
            var statearr_8211 = [null, null, null, null, null, null, null];
            statearr_8211[0] = state_machine__5882__auto__;
            statearr_8211[1] = 1;
            return statearr_8211;
          };
          var state_machine__5882__auto____1 = function(state_8199) {
            while (true) {
              var result__5883__auto__ = switch__5881__auto__.call(null, state_8199);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5883__auto__;
              }
              break;
            }
          };
          state_machine__5882__auto__ = function(state_8199) {
            switch(arguments.length) {
              case 0:
                return state_machine__5882__auto____0.call(this);
              case 1:
                return state_machine__5882__auto____1.call(this, state_8199);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
          return state_machine__5882__auto__;
        }();
      }(switch__5881__auto__);
    }();
    var state__5933__auto__ = function() {
      var statearr_8212 = f__5932__auto__.call(null);
      statearr_8212[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
      return statearr_8212;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
  });
  return c__5931__auto__;
};
chaperone.websocket.connect_websocket_BANG_ = function connect_websocket_BANG_(web_socket, socket_connected) {
  var ws_url = [cljs.core.str("ws://"), cljs.core.str((new cljs.core.Keyword(null, "host", "host", 1017112858)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str(":"), cljs.core.str((new cljs.core.Keyword(null, "port", "port", 1017351155)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str("/rpc")].join("");
  var socket = new WebSocket(ws_url);
  console.log("Connecting to WS: ", ws_url);
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onopen"], null), function() {
    console.log("Connected!");
    return cljs.core.async.put_BANG_.call(null, socket_connected, true);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onerror"], null), function(e) {
    return console.error("Websocket Error: ", e);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onmessage"], null), function(e) {
    console.log("On Message: ", purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
    return cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket), purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
  });
  return socket;
};
chaperone.websocket.start_BANG_ = function start_BANG_(system) {
  var seq__8235_8251 = cljs.core.seq.call(null, chaperone.crossover.rpc.all_edn_readers.call(null));
  var chunk__8236_8252 = null;
  var count__8237_8253 = 0;
  var i__8238_8254 = 0;
  while (true) {
    if (i__8238_8254 < count__8237_8253) {
      var vec__8239_8255 = cljs.core._nth.call(null, chunk__8236_8252, i__8238_8254);
      var tag_8256 = cljs.core.nth.call(null, vec__8239_8255, 0, null);
      var f_8257 = cljs.core.nth.call(null, vec__8239_8255, 1, null);
      cljs.reader.register_tag_parser_BANG_.call(null, tag_8256, f_8257);
      var G__8258 = seq__8235_8251;
      var G__8259 = chunk__8236_8252;
      var G__8260 = count__8237_8253;
      var G__8261 = i__8238_8254 + 1;
      seq__8235_8251 = G__8258;
      chunk__8236_8252 = G__8259;
      count__8237_8253 = G__8260;
      i__8238_8254 = G__8261;
      continue;
    } else {
      var temp__4092__auto___8262 = cljs.core.seq.call(null, seq__8235_8251);
      if (temp__4092__auto___8262) {
        var seq__8235_8263__$1 = temp__4092__auto___8262;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8235_8263__$1)) {
          var c__4142__auto___8264 = cljs.core.chunk_first.call(null, seq__8235_8263__$1);
          var G__8265 = cljs.core.chunk_rest.call(null, seq__8235_8263__$1);
          var G__8266 = c__4142__auto___8264;
          var G__8267 = cljs.core.count.call(null, c__4142__auto___8264);
          var G__8268 = 0;
          seq__8235_8251 = G__8265;
          chunk__8236_8252 = G__8266;
          count__8237_8253 = G__8267;
          i__8238_8254 = G__8268;
          continue;
        } else {
          var vec__8240_8269 = cljs.core.first.call(null, seq__8235_8263__$1);
          var tag_8270 = cljs.core.nth.call(null, vec__8240_8269, 0, null);
          var f_8271 = cljs.core.nth.call(null, vec__8240_8269, 1, null);
          cljs.reader.register_tag_parser_BANG_.call(null, tag_8270, f_8271);
          var G__8272 = cljs.core.next.call(null, seq__8235_8263__$1);
          var G__8273 = null;
          var G__8274 = 0;
          var G__8275 = 0;
          seq__8235_8251 = G__8272;
          chunk__8236_8252 = G__8273;
          count__8237_8253 = G__8274;
          i__8238_8254 = G__8275;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  var socket_connected = cljs.core.async.timeout.call(null, 1E4);
  var socket = chaperone.websocket.connect_websocket_BANG_.call(null, web_socket, socket_connected);
  var web_socket__$1 = cljs.core.assoc.call(null, web_socket, new cljs.core.Keyword(null, "socket", "socket", 4411822821), socket);
  chaperone.websocket.start_response_chan_listen_BANG_.call(null, web_socket__$1);
  var system__$1 = cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), web_socket__$1);
  var c__5931__auto___8276 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5932__auto__ = function() {
      var switch__5881__auto__ = function(state_8245) {
        var state_val_8246 = state_8245[1];
        if (state_val_8246 === 2) {
          var inst_8242 = state_8245[2];
          var inst_8243 = chaperone.websocket.start_request_chan_listen_BANG_.call(null, web_socket__$1);
          var state_8245__$1 = function() {
            var statearr_8247 = state_8245;
            statearr_8247[5] = inst_8242;
            return statearr_8247;
          }();
          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8245__$1, inst_8243);
        } else {
          if (state_val_8246 === 1) {
            var state_8245__$1 = state_8245;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8245__$1, 2, socket_connected);
          } else {
            return null;
          }
        }
      };
      return function(switch__5881__auto__) {
        return function() {
          var state_machine__5882__auto__ = null;
          var state_machine__5882__auto____0 = function() {
            var statearr_8249 = [null, null, null, null, null, null];
            statearr_8249[0] = state_machine__5882__auto__;
            statearr_8249[1] = 1;
            return statearr_8249;
          };
          var state_machine__5882__auto____1 = function(state_8245) {
            while (true) {
              var result__5883__auto__ = switch__5881__auto__.call(null, state_8245);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5883__auto__;
              }
              break;
            }
          };
          state_machine__5882__auto__ = function(state_8245) {
            switch(arguments.length) {
              case 0:
                return state_machine__5882__auto____0.call(this);
              case 1:
                return state_machine__5882__auto____1.call(this, state_8245);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
          return state_machine__5882__auto__;
        }();
      }(switch__5881__auto__);
    }();
    var state__5933__auto__ = function() {
      var statearr_8250 = f__5932__auto__.call(null);
      statearr_8250[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto___8276;
      return statearr_8250;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
  });
  return system__$1;
};
chaperone.websocket.stop_BANG_ = function stop_BANG_(system) {
  var web_socket_8277 = chaperone.websocket.sub_system.call(null, system);
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket_8277));
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket_8277));
  return system;
};
chaperone.websocket.send_BANG_ = function send_BANG_(web_socket, request) {
  var id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(request);
  var request_chan = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
  var result_chan = cljs.core.async.chan.call(null);
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_socket);
  cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.assoc, id, result_chan);
  cljs.core.async.put_BANG_.call(null, request_chan, request);
  return result_chan;
};
goog.provide("purnam.common");
goog.require("cljs.core");
purnam.common.flags = function() {
  var obj12400 = {};
  return obj12400;
}();
purnam.common.get_context = function get_context() {
  return purnam.common._STAR_pure_context_STAR_;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__12401 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__12401;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__12405 = cljs.core._EQ_;
    var expr__12406 = limit;
    if (cljs.core.truth_(pred__12405.call(null, 1, expr__12406))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__12405.call(null, 2, expr__12406))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__12408 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__12409 = limit__$1 - 1;
            var G__12410 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__12408;
            limit__$1 = G__12409;
            parts = G__12410;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__12411 = index - 1;
        index = G__12411;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___12412 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___12412)) {
        var replacement_12413 = temp__4090__auto___12412;
        buffer.append([cljs.core.str(replacement_12413)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__12414 = index + 1;
      index = G__12414;
      continue;
    }
    break;
  }
};
goog.provide("purnam.native$");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("purnam.common");
goog.require("purnam.common");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.native$.nested_val = function nested_val(p__12078, val) {
  var vec__12082 = p__12078;
  var k = cljs.core.nth.call(null, vec__12082, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__12082, 1);
  if (k == null) {
    return val;
  } else {
    var o = function() {
      var obj12084 = {};
      return obj12084;
    }();
    o[k] = nested_val.call(null, ks, val);
    return o;
  }
};
purnam.native$.nested_delete = function nested_delete(p__12085, val) {
  var vec__12087 = p__12085;
  var k = cljs.core.nth.call(null, vec__12087, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__12087, 1);
  if (ks == null) {
    delete val[k];
  } else {
    nested_delete.call(null, ks, val);
  }
  return val;
};
purnam.native$.aset_in = function() {
  var aset_in = null;
  var aset_in__2 = function(var$, arr) {
    return aset_in.call(null, var$, arr, null);
  };
  var aset_in__3 = function(var$, arr, val) {
    var vec__12089 = arr;
    var k = cljs.core.nth.call(null, vec__12089, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12089, 1);
    if (k == null) {
    } else {
      if (cljs.core.empty_QMARK_.call(null, ks)) {
        if (cljs.core.truth_(val)) {
          var$[k] = val;
        } else {
          delete var$[k];
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var temp__4090__auto___12090 = var$[k];
          if (cljs.core.truth_(temp__4090__auto___12090)) {
            var svar_12091 = temp__4090__auto___12090;
            aset_in.call(null, svar_12091, ks, val);
          } else {
            if (cljs.core.truth_(val)) {
              var$[k] = purnam.native$.nested_val.call(null, ks, val);
            } else {
            }
          }
        } else {
        }
      }
    }
    return var$;
  };
  aset_in = function(var$, arr, val) {
    switch(arguments.length) {
      case 2:
        return aset_in__2.call(this, var$, arr);
      case 3:
        return aset_in__3.call(this, var$, arr, val);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset_in.cljs$core$IFn$_invoke$arity$2 = aset_in__2;
  aset_in.cljs$core$IFn$_invoke$arity$3 = aset_in__3;
  return aset_in;
}();
purnam.native$.aget_in = function() {
  var aget_in = null;
  var aget_in__1 = function(var$) {
    return var$;
  };
  var aget_in__2 = function(var$, arr) {
    if (var$ == null) {
      return null;
    } else {
      if (cljs.core.empty_QMARK_.call(null, arr)) {
        return var$;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return aget_in.call(null, var$[cljs.core.first.call(null, arr)], cljs.core.next.call(null, arr));
        } else {
          return null;
        }
      }
    }
  };
  aget_in = function(var$, arr) {
    switch(arguments.length) {
      case 1:
        return aget_in__1.call(this, var$);
      case 2:
        return aget_in__2.call(this, var$, arr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget_in.cljs$core$IFn$_invoke$arity$1 = aget_in__1;
  aget_in.cljs$core$IFn$_invoke$arity$2 = aget_in__2;
  return aget_in;
}();
purnam.native$.js_strkey = function js_strkey(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(x)].join("");
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_obj_name = function js_obj_name(this$) {
  var temp__4090__auto__ = cljs.core.re_find.call(null, /^function (\w+)/, [cljs.core.str(this$)].join(""));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__12093 = temp__4090__auto__;
    var _ = cljs.core.nth.call(null, vec__12093, 0, null);
    var n = cljs.core.nth.call(null, vec__12093, 1, null);
    return n;
  } else {
    return "Object";
  }
};
purnam.native$.js_type = function js_type(o) {
  var ty = cljs.core.type.call(null, o);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3388__auto__ = ty;
    if (cljs.core.truth_(and__3388__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3388__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(o);
  return ty__$1;
};
purnam.native$.js_lookup = function() {
  var js_lookup = null;
  var js_lookup__2 = function(o, k) {
    return o[purnam.native$.js_strkey.call(null, k)];
  };
  var js_lookup__3 = function(o, k, not_found) {
    var s = purnam.native$.js_strkey.call(null, k);
    var temp__4090__auto__ = o[s];
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return res;
    } else {
      return not_found;
    }
  };
  js_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return js_lookup__2.call(this, o, k);
      case 3:
        return js_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_lookup.cljs$core$IFn$_invoke$arity$2 = js_lookup__2;
  js_lookup.cljs$core$IFn$_invoke$arity$3 = js_lookup__3;
  return js_lookup;
}();
purnam.native$.js_range = function js_range(n) {
  var res = new Array(n);
  var i = 0;
  while (true) {
    if (i < n) {
      res.push(i);
      var G__12094 = i + 1;
      i = G__12094;
      continue;
    } else {
      return res;
    }
    break;
  }
};
purnam.native$.js_assoc = function() {
  var js_assoc = null;
  var js_assoc__3 = function(o, k, v) {
    o[purnam.native$.js_strkey.call(null, k)] = v;
    return o;
  };
  var js_assoc__4 = function() {
    var G__12095__delegate = function(o, k, v, more) {
      while (true) {
        js_assoc.call(null, o, k, v);
        if (cljs.core.truth_(more)) {
          var G__12096 = o;
          var G__12097 = cljs.core.first.call(null, more);
          var G__12098 = cljs.core.second.call(null, more);
          var G__12099 = cljs.core.nnext.call(null, more);
          o = G__12096;
          k = G__12097;
          v = G__12098;
          more = G__12099;
          continue;
        } else {
          return o;
        }
        break;
      }
    };
    var G__12095 = function(o, k, v, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12095__delegate.call(this, o, k, v, more);
    };
    G__12095.cljs$lang$maxFixedArity = 3;
    G__12095.cljs$lang$applyTo = function(arglist__12100) {
      var o = cljs.core.first(arglist__12100);
      arglist__12100 = cljs.core.next(arglist__12100);
      var k = cljs.core.first(arglist__12100);
      arglist__12100 = cljs.core.next(arglist__12100);
      var v = cljs.core.first(arglist__12100);
      var more = cljs.core.rest(arglist__12100);
      return G__12095__delegate(o, k, v, more);
    };
    G__12095.cljs$core$IFn$_invoke$arity$variadic = G__12095__delegate;
    return G__12095;
  }();
  js_assoc = function(o, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return js_assoc__3.call(this, o, k, v);
      default:
        return js_assoc__4.cljs$core$IFn$_invoke$arity$variadic(o, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_assoc.cljs$lang$maxFixedArity = 3;
  js_assoc.cljs$lang$applyTo = js_assoc__4.cljs$lang$applyTo;
  js_assoc.cljs$core$IFn$_invoke$arity$3 = js_assoc__3;
  js_assoc.cljs$core$IFn$_invoke$arity$variadic = js_assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return js_assoc;
}();
purnam.native$.js_dissoc = function() {
  var js_dissoc__delegate = function(o, k, more) {
    while (true) {
      delete o[purnam.native$.js_strkey.call(null, k)];
      if (cljs.core.truth_(more)) {
        var G__12101 = o;
        var G__12102 = cljs.core.first.call(null, more);
        var G__12103 = cljs.core.next.call(null, more);
        o = G__12101;
        k = G__12102;
        more = G__12103;
        continue;
      } else {
        return o;
      }
      break;
    }
  };
  var js_dissoc = function(o, k, var_args) {
    var more = null;
    if (arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return js_dissoc__delegate.call(this, o, k, more);
  };
  js_dissoc.cljs$lang$maxFixedArity = 2;
  js_dissoc.cljs$lang$applyTo = function(arglist__12104) {
    var o = cljs.core.first(arglist__12104);
    arglist__12104 = cljs.core.next(arglist__12104);
    var k = cljs.core.first(arglist__12104);
    var more = cljs.core.rest(arglist__12104);
    return js_dissoc__delegate(o, k, more);
  };
  js_dissoc.cljs$core$IFn$_invoke$arity$variadic = js_dissoc__delegate;
  return js_dissoc;
}();
purnam.native$.js_empty = function js_empty(o) {
  var G__12110_12115 = goog.typeOf(o);
  if (cljs.core._EQ_.call(null, "array", G__12110_12115)) {
    o["length"] = 0;
  } else {
    if (cljs.core._EQ_.call(null, "object", G__12110_12115)) {
      var seq__12111_12116 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o));
      var chunk__12112_12117 = null;
      var count__12113_12118 = 0;
      var i__12114_12119 = 0;
      while (true) {
        if (i__12114_12119 < count__12113_12118) {
          var k_12120 = cljs.core._nth.call(null, chunk__12112_12117, i__12114_12119);
          delete o[k_12120];
          var G__12121 = seq__12111_12116;
          var G__12122 = chunk__12112_12117;
          var G__12123 = count__12113_12118;
          var G__12124 = i__12114_12119 + 1;
          seq__12111_12116 = G__12121;
          chunk__12112_12117 = G__12122;
          count__12113_12118 = G__12123;
          i__12114_12119 = G__12124;
          continue;
        } else {
          var temp__4092__auto___12125 = cljs.core.seq.call(null, seq__12111_12116);
          if (temp__4092__auto___12125) {
            var seq__12111_12126__$1 = temp__4092__auto___12125;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12111_12126__$1)) {
              var c__4142__auto___12127 = cljs.core.chunk_first.call(null, seq__12111_12126__$1);
              var G__12128 = cljs.core.chunk_rest.call(null, seq__12111_12126__$1);
              var G__12129 = c__4142__auto___12127;
              var G__12130 = cljs.core.count.call(null, c__4142__auto___12127);
              var G__12131 = 0;
              seq__12111_12116 = G__12128;
              chunk__12112_12117 = G__12129;
              count__12113_12118 = G__12130;
              i__12114_12119 = G__12131;
              continue;
            } else {
              var k_12132 = cljs.core.first.call(null, seq__12111_12126__$1);
              delete o[k_12132];
              var G__12133 = cljs.core.next.call(null, seq__12111_12126__$1);
              var G__12134 = null;
              var G__12135 = 0;
              var G__12136 = 0;
              seq__12111_12116 = G__12133;
              chunk__12112_12117 = G__12134;
              count__12113_12118 = G__12135;
              i__12114_12119 = G__12136;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(goog.typeOf(o))].join(""));
      } else {
      }
    }
  }
  return o;
};
purnam.native$.js_merge = function() {
  var js_merge = null;
  var js_merge__2 = function(o1, o2) {
    var seq__12141_12145 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__12142_12146 = null;
    var count__12143_12147 = 0;
    var i__12144_12148 = 0;
    while (true) {
      if (i__12144_12148 < count__12143_12147) {
        var k_12149 = cljs.core._nth.call(null, chunk__12142_12146, i__12144_12148);
        o1[k_12149] = o2[k_12149];
        var G__12150 = seq__12141_12145;
        var G__12151 = chunk__12142_12146;
        var G__12152 = count__12143_12147;
        var G__12153 = i__12144_12148 + 1;
        seq__12141_12145 = G__12150;
        chunk__12142_12146 = G__12151;
        count__12143_12147 = G__12152;
        i__12144_12148 = G__12153;
        continue;
      } else {
        var temp__4092__auto___12154 = cljs.core.seq.call(null, seq__12141_12145);
        if (temp__4092__auto___12154) {
          var seq__12141_12155__$1 = temp__4092__auto___12154;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12141_12155__$1)) {
            var c__4142__auto___12156 = cljs.core.chunk_first.call(null, seq__12141_12155__$1);
            var G__12157 = cljs.core.chunk_rest.call(null, seq__12141_12155__$1);
            var G__12158 = c__4142__auto___12156;
            var G__12159 = cljs.core.count.call(null, c__4142__auto___12156);
            var G__12160 = 0;
            seq__12141_12145 = G__12157;
            chunk__12142_12146 = G__12158;
            count__12143_12147 = G__12159;
            i__12144_12148 = G__12160;
            continue;
          } else {
            var k_12161 = cljs.core.first.call(null, seq__12141_12155__$1);
            o1[k_12161] = o2[k_12161];
            var G__12162 = cljs.core.next.call(null, seq__12141_12155__$1);
            var G__12163 = null;
            var G__12164 = 0;
            var G__12165 = 0;
            seq__12141_12145 = G__12162;
            chunk__12142_12146 = G__12163;
            count__12143_12147 = G__12164;
            i__12144_12148 = G__12165;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge__3 = function() {
    var G__12166__delegate = function(o1, o2, more) {
      return cljs.core.apply.call(null, js_merge, js_merge.call(null, o1, o2), more);
    };
    var G__12166 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12166__delegate.call(this, o1, o2, more);
    };
    G__12166.cljs$lang$maxFixedArity = 2;
    G__12166.cljs$lang$applyTo = function(arglist__12167) {
      var o1 = cljs.core.first(arglist__12167);
      arglist__12167 = cljs.core.next(arglist__12167);
      var o2 = cljs.core.first(arglist__12167);
      var more = cljs.core.rest(arglist__12167);
      return G__12166__delegate(o1, o2, more);
    };
    G__12166.cljs$core$IFn$_invoke$arity$variadic = G__12166__delegate;
    return G__12166;
  }();
  js_merge = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge__2.call(this, o1, o2);
      default:
        return js_merge__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge.cljs$lang$maxFixedArity = 2;
  js_merge.cljs$lang$applyTo = js_merge__3.cljs$lang$applyTo;
  js_merge.cljs$core$IFn$_invoke$arity$2 = js_merge__2;
  js_merge.cljs$core$IFn$_invoke$arity$variadic = js_merge__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge;
}();
purnam.native$.js_merge_nil = function() {
  var js_merge_nil = null;
  var js_merge_nil__2 = function(o1, o2) {
    var seq__12172_12176 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__12173_12177 = null;
    var count__12174_12178 = 0;
    var i__12175_12179 = 0;
    while (true) {
      if (i__12175_12179 < count__12174_12178) {
        var k_12180 = cljs.core._nth.call(null, chunk__12173_12177, i__12175_12179);
        if (cljs.core.not.call(null, o1[k_12180])) {
          o1[k_12180] = o2[k_12180];
        } else {
        }
        var G__12181 = seq__12172_12176;
        var G__12182 = chunk__12173_12177;
        var G__12183 = count__12174_12178;
        var G__12184 = i__12175_12179 + 1;
        seq__12172_12176 = G__12181;
        chunk__12173_12177 = G__12182;
        count__12174_12178 = G__12183;
        i__12175_12179 = G__12184;
        continue;
      } else {
        var temp__4092__auto___12185 = cljs.core.seq.call(null, seq__12172_12176);
        if (temp__4092__auto___12185) {
          var seq__12172_12186__$1 = temp__4092__auto___12185;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12172_12186__$1)) {
            var c__4142__auto___12187 = cljs.core.chunk_first.call(null, seq__12172_12186__$1);
            var G__12188 = cljs.core.chunk_rest.call(null, seq__12172_12186__$1);
            var G__12189 = c__4142__auto___12187;
            var G__12190 = cljs.core.count.call(null, c__4142__auto___12187);
            var G__12191 = 0;
            seq__12172_12176 = G__12188;
            chunk__12173_12177 = G__12189;
            count__12174_12178 = G__12190;
            i__12175_12179 = G__12191;
            continue;
          } else {
            var k_12192 = cljs.core.first.call(null, seq__12172_12186__$1);
            if (cljs.core.not.call(null, o1[k_12192])) {
              o1[k_12192] = o2[k_12192];
            } else {
            }
            var G__12193 = cljs.core.next.call(null, seq__12172_12186__$1);
            var G__12194 = null;
            var G__12195 = 0;
            var G__12196 = 0;
            seq__12172_12176 = G__12193;
            chunk__12173_12177 = G__12194;
            count__12174_12178 = G__12195;
            i__12175_12179 = G__12196;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge_nil__3 = function() {
    var G__12197__delegate = function(o1, o2, more) {
      while (true) {
        js_merge_nil.call(null, o1, o2);
        if (cljs.core.truth_(more)) {
          var G__12198 = js_merge_nil.call(null, o1, o2);
          var G__12199 = cljs.core.first.call(null, more);
          var G__12200 = cljs.core.next.call(null, more);
          o1 = G__12198;
          o2 = G__12199;
          more = G__12200;
          continue;
        } else {
          return o1;
        }
        break;
      }
    };
    var G__12197 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12197__delegate.call(this, o1, o2, more);
    };
    G__12197.cljs$lang$maxFixedArity = 2;
    G__12197.cljs$lang$applyTo = function(arglist__12201) {
      var o1 = cljs.core.first(arglist__12201);
      arglist__12201 = cljs.core.next(arglist__12201);
      var o2 = cljs.core.first(arglist__12201);
      var more = cljs.core.rest(arglist__12201);
      return G__12197__delegate(o1, o2, more);
    };
    G__12197.cljs$core$IFn$_invoke$arity$variadic = G__12197__delegate;
    return G__12197;
  }();
  js_merge_nil = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge_nil__2.call(this, o1, o2);
      default:
        return js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge_nil.cljs$lang$maxFixedArity = 2;
  js_merge_nil.cljs$lang$applyTo = js_merge_nil__3.cljs$lang$applyTo;
  js_merge_nil.cljs$core$IFn$_invoke$arity$2 = js_merge_nil__2;
  js_merge_nil.cljs$core$IFn$_invoke$arity$variadic = js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge_nil;
}();
purnam.native$.js_replace = function js_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_merge.call(null, o1, o2);
};
purnam.native$.js_equals = function js_equals(v1, v2) {
  if (cljs.core._EQ_.call(null, v1, v2)) {
    return true;
  } else {
    var t1 = goog.typeOf(v1);
    var t2 = goog.typeOf(v2);
    if (cljs.core._EQ_.call(null, "array", t1, t2)) {
      return goog.array.equals(v1, v2, js_equals);
    } else {
      if (cljs.core._EQ_.call(null, "object", t1, t2)) {
        var ks1 = cljs.core.js_keys.call(null, v1).sort();
        var ks2 = cljs.core.js_keys.call(null, v2).sort();
        if (cljs.core.truth_(goog.array.equals(ks1, ks2))) {
          return goog.array.every(ks1, function(k) {
            return js_equals.call(null, v1[k], v2[k]);
          });
        } else {
          return false;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
  }
};
purnam.native$.js_copy = function js_copy(o) {
  return goog.object.clone(o);
};
purnam.native$.js_initial_value = function js_initial_value(v) {
  var t = goog.typeOf(v);
  if (cljs.core._EQ_.call(null, t, "object")) {
    var obj12205 = {};
    return obj12205;
  } else {
    if (cljs.core._EQ_.call(null, t, "array")) {
      return[];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return v;
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_deep_extend = function() {
  var js_deep_extend = null;
  var js_deep_extend__2 = function(to, from) {
    var visited = [from];
    var visitedlu = [to];
    js_deep_extend.call(null, to, from, visited, visitedlu);
    return to;
  };
  var js_deep_extend__4 = function(to, from, visited, visitedlu) {
    var seq__12210_12214 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, from));
    var chunk__12211_12215 = null;
    var count__12212_12216 = 0;
    var i__12213_12217 = 0;
    while (true) {
      if (i__12213_12217 < count__12212_12216) {
        var k_12218 = cljs.core._nth.call(null, chunk__12211_12215, i__12213_12217);
        var v_12219 = from[k_12218];
        var vn_12220 = purnam.native$.js_initial_value.call(null, v_12219);
        if (cljs.core.not_EQ_.call(null, v_12219, vn_12220)) {
          var i_12221 = visited.indexOf(v_12219);
          if (cljs.core._EQ_.call(null, -1, i_12221)) {
            visited.push(v_12219);
            visitedlu.push(vn_12220);
            js_deep_extend.call(null, vn_12220, v_12219, visited, visitedlu);
            to[k_12218] = vn_12220;
          } else {
            to[k_12218] = visitedlu[i_12221];
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            to[k_12218] = v_12219;
          } else {
          }
        }
        var G__12222 = seq__12210_12214;
        var G__12223 = chunk__12211_12215;
        var G__12224 = count__12212_12216;
        var G__12225 = i__12213_12217 + 1;
        seq__12210_12214 = G__12222;
        chunk__12211_12215 = G__12223;
        count__12212_12216 = G__12224;
        i__12213_12217 = G__12225;
        continue;
      } else {
        var temp__4092__auto___12226 = cljs.core.seq.call(null, seq__12210_12214);
        if (temp__4092__auto___12226) {
          var seq__12210_12227__$1 = temp__4092__auto___12226;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12210_12227__$1)) {
            var c__4142__auto___12228 = cljs.core.chunk_first.call(null, seq__12210_12227__$1);
            var G__12229 = cljs.core.chunk_rest.call(null, seq__12210_12227__$1);
            var G__12230 = c__4142__auto___12228;
            var G__12231 = cljs.core.count.call(null, c__4142__auto___12228);
            var G__12232 = 0;
            seq__12210_12214 = G__12229;
            chunk__12211_12215 = G__12230;
            count__12212_12216 = G__12231;
            i__12213_12217 = G__12232;
            continue;
          } else {
            var k_12233 = cljs.core.first.call(null, seq__12210_12227__$1);
            var v_12234 = from[k_12233];
            var vn_12235 = purnam.native$.js_initial_value.call(null, v_12234);
            if (cljs.core.not_EQ_.call(null, v_12234, vn_12235)) {
              var i_12236 = visited.indexOf(v_12234);
              if (cljs.core._EQ_.call(null, -1, i_12236)) {
                visited.push(v_12234);
                visitedlu.push(vn_12235);
                js_deep_extend.call(null, vn_12235, v_12234, visited, visitedlu);
                to[k_12233] = vn_12235;
              } else {
                to[k_12233] = visitedlu[i_12236];
              }
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                to[k_12233] = v_12234;
              } else {
              }
            }
            var G__12237 = cljs.core.next.call(null, seq__12210_12227__$1);
            var G__12238 = null;
            var G__12239 = 0;
            var G__12240 = 0;
            seq__12210_12214 = G__12237;
            chunk__12211_12215 = G__12238;
            count__12212_12216 = G__12239;
            i__12213_12217 = G__12240;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return to;
  };
  js_deep_extend = function(to, from, visited, visitedlu) {
    switch(arguments.length) {
      case 2:
        return js_deep_extend__2.call(this, to, from);
      case 4:
        return js_deep_extend__4.call(this, to, from, visited, visitedlu);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_deep_extend.cljs$core$IFn$_invoke$arity$2 = js_deep_extend__2;
  js_deep_extend.cljs$core$IFn$_invoke$arity$4 = js_deep_extend__4;
  return js_deep_extend;
}();
purnam.native$.js_deep_copy = function js_deep_copy(value) {
  var vn = purnam.native$.js_initial_value.call(null, value);
  if (cljs.core.not_EQ_.call(null, value, vn)) {
    return purnam.native$.js_deep_extend.call(null, vn, value);
  } else {
    return value;
  }
};
purnam.native$.js_deep_replace = function js_deep_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_deep_extend.call(null, o1, o2);
};
purnam.native$.js_map_STAR_ = function() {
  var js_map_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var seq__12246_12250 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__12247_12251 = null;
    var count__12248_12252 = 0;
    var i__12249_12253 = 0;
    while (true) {
      if (i__12249_12253 < count__12248_12252) {
        var i_12254 = cljs.core._nth.call(null, chunk__12247_12251, i__12249_12253);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__12246_12250, chunk__12247_12251, count__12248_12252, i__12249_12253, i_12254) {
          return function(p1__12241_SHARP_) {
            return p1__12241_SHARP_[i_12254];
          };
        }(seq__12246_12250, chunk__12247_12251, count__12248_12252, i__12249_12253, i_12254), args)));
        var G__12255 = seq__12246_12250;
        var G__12256 = chunk__12247_12251;
        var G__12257 = count__12248_12252;
        var G__12258 = i__12249_12253 + 1;
        seq__12246_12250 = G__12255;
        chunk__12247_12251 = G__12256;
        count__12248_12252 = G__12257;
        i__12249_12253 = G__12258;
        continue;
      } else {
        var temp__4092__auto___12259 = cljs.core.seq.call(null, seq__12246_12250);
        if (temp__4092__auto___12259) {
          var seq__12246_12260__$1 = temp__4092__auto___12259;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12246_12260__$1)) {
            var c__4142__auto___12261 = cljs.core.chunk_first.call(null, seq__12246_12260__$1);
            var G__12262 = cljs.core.chunk_rest.call(null, seq__12246_12260__$1);
            var G__12263 = c__4142__auto___12261;
            var G__12264 = cljs.core.count.call(null, c__4142__auto___12261);
            var G__12265 = 0;
            seq__12246_12250 = G__12262;
            chunk__12247_12251 = G__12263;
            count__12248_12252 = G__12264;
            i__12249_12253 = G__12265;
            continue;
          } else {
            var i_12266 = cljs.core.first.call(null, seq__12246_12260__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__12246_12250, chunk__12247_12251, count__12248_12252, i__12249_12253, i_12266, seq__12246_12260__$1, temp__4092__auto___12259) {
              return function(p1__12241_SHARP_) {
                return p1__12241_SHARP_[i_12266];
              };
            }(seq__12246_12250, chunk__12247_12251, count__12248_12252, i__12249_12253, i_12266, seq__12246_12260__$1, temp__4092__auto___12259), args)));
            var G__12267 = cljs.core.next.call(null, seq__12246_12260__$1);
            var G__12268 = null;
            var G__12269 = 0;
            var G__12270 = 0;
            seq__12246_12250 = G__12267;
            chunk__12247_12251 = G__12268;
            count__12248_12252 = G__12269;
            i__12249_12253 = G__12270;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map_STAR___delegate.call(this, f, args);
  };
  js_map_STAR_.cljs$lang$maxFixedArity = 1;
  js_map_STAR_.cljs$lang$applyTo = function(arglist__12271) {
    var f = cljs.core.first(arglist__12271);
    var args = cljs.core.rest(arglist__12271);
    return js_map_STAR___delegate(f, args);
  };
  js_map_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_map_STAR___delegate;
  return js_map_STAR_;
}();
purnam.native$.js_mapcat_STAR_ = function() {
  var js_mapcat_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__12272_SHARP_) {
            return p1__12272_SHARP_[i];
          };
        }(i, output__$1), args));
        var G__12273 = i + 1;
        var G__12274 = output__$1.concat(res);
        i = G__12273;
        output__$1 = G__12274;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat_STAR___delegate.call(this, f, args);
  };
  js_mapcat_STAR_.cljs$lang$maxFixedArity = 1;
  js_mapcat_STAR_.cljs$lang$applyTo = function(arglist__12275) {
    var f = cljs.core.first(arglist__12275);
    var args = cljs.core.rest(arglist__12275);
    return js_mapcat_STAR___delegate(f, args);
  };
  js_mapcat_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_mapcat_STAR___delegate;
  return js_mapcat_STAR_;
}();
purnam.native$.js_map = function() {
  var js_map__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var seq__12281_12285 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__12282_12286 = null;
    var count__12283_12287 = 0;
    var i__12284_12288 = 0;
    while (true) {
      if (i__12284_12288 < count__12283_12287) {
        var i_12289 = cljs.core._nth.call(null, chunk__12282_12286, i__12284_12288);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__12281_12285, chunk__12282_12286, count__12283_12287, i__12284_12288, i_12289) {
          return function(p1__12276_SHARP_) {
            return cljs.core.nth.call(null, p1__12276_SHARP_, i_12289);
          };
        }(seq__12281_12285, chunk__12282_12286, count__12283_12287, i__12284_12288, i_12289), args)));
        var G__12290 = seq__12281_12285;
        var G__12291 = chunk__12282_12286;
        var G__12292 = count__12283_12287;
        var G__12293 = i__12284_12288 + 1;
        seq__12281_12285 = G__12290;
        chunk__12282_12286 = G__12291;
        count__12283_12287 = G__12292;
        i__12284_12288 = G__12293;
        continue;
      } else {
        var temp__4092__auto___12294 = cljs.core.seq.call(null, seq__12281_12285);
        if (temp__4092__auto___12294) {
          var seq__12281_12295__$1 = temp__4092__auto___12294;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12281_12295__$1)) {
            var c__4142__auto___12296 = cljs.core.chunk_first.call(null, seq__12281_12295__$1);
            var G__12297 = cljs.core.chunk_rest.call(null, seq__12281_12295__$1);
            var G__12298 = c__4142__auto___12296;
            var G__12299 = cljs.core.count.call(null, c__4142__auto___12296);
            var G__12300 = 0;
            seq__12281_12285 = G__12297;
            chunk__12282_12286 = G__12298;
            count__12283_12287 = G__12299;
            i__12284_12288 = G__12300;
            continue;
          } else {
            var i_12301 = cljs.core.first.call(null, seq__12281_12295__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__12281_12285, chunk__12282_12286, count__12283_12287, i__12284_12288, i_12301, seq__12281_12295__$1, temp__4092__auto___12294) {
              return function(p1__12276_SHARP_) {
                return cljs.core.nth.call(null, p1__12276_SHARP_, i_12301);
              };
            }(seq__12281_12285, chunk__12282_12286, count__12283_12287, i__12284_12288, i_12301, seq__12281_12295__$1, temp__4092__auto___12294), args)));
            var G__12302 = cljs.core.next.call(null, seq__12281_12295__$1);
            var G__12303 = null;
            var G__12304 = 0;
            var G__12305 = 0;
            seq__12281_12285 = G__12302;
            chunk__12282_12286 = G__12303;
            count__12283_12287 = G__12304;
            i__12284_12288 = G__12305;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map__delegate.call(this, f, args);
  };
  js_map.cljs$lang$maxFixedArity = 1;
  js_map.cljs$lang$applyTo = function(arglist__12306) {
    var f = cljs.core.first(arglist__12306);
    var args = cljs.core.rest(arglist__12306);
    return js_map__delegate(f, args);
  };
  js_map.cljs$core$IFn$_invoke$arity$variadic = js_map__delegate;
  return js_map;
}();
purnam.native$.js_mapcat = function() {
  var js_mapcat__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__12307_SHARP_) {
            return cljs.core.nth.call(null, p1__12307_SHARP_, i);
          };
        }(i, output__$1), args));
        var G__12308 = i + 1;
        var G__12309 = output__$1.concat(res);
        i = G__12308;
        output__$1 = G__12309;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat__delegate.call(this, f, args);
  };
  js_mapcat.cljs$lang$maxFixedArity = 1;
  js_mapcat.cljs$lang$applyTo = function(arglist__12310) {
    var f = cljs.core.first(arglist__12310);
    var args = cljs.core.rest(arglist__12310);
    return js_mapcat__delegate(f, args);
  };
  js_mapcat.cljs$core$IFn$_invoke$arity$variadic = js_mapcat__delegate;
  return js_mapcat;
}();
purnam.native$.js_concat = function() {
  var js_concat__delegate = function(args) {
    var output = [];
    var seq__12323_12335 = cljs.core.seq.call(null, args);
    var chunk__12328_12336 = null;
    var count__12329_12337 = 0;
    var i__12330_12338 = 0;
    while (true) {
      if (i__12330_12338 < count__12329_12337) {
        var ar_12339 = cljs.core._nth.call(null, chunk__12328_12336, i__12330_12338);
        var seq__12331_12340 = cljs.core.seq.call(null, ar_12339);
        var chunk__12332_12341 = null;
        var count__12333_12342 = 0;
        var i__12334_12343 = 0;
        while (true) {
          if (i__12334_12343 < count__12333_12342) {
            var v_12344 = cljs.core._nth.call(null, chunk__12332_12341, i__12334_12343);
            output.push(v_12344);
            var G__12345 = seq__12331_12340;
            var G__12346 = chunk__12332_12341;
            var G__12347 = count__12333_12342;
            var G__12348 = i__12334_12343 + 1;
            seq__12331_12340 = G__12345;
            chunk__12332_12341 = G__12346;
            count__12333_12342 = G__12347;
            i__12334_12343 = G__12348;
            continue;
          } else {
            var temp__4092__auto___12349 = cljs.core.seq.call(null, seq__12331_12340);
            if (temp__4092__auto___12349) {
              var seq__12331_12350__$1 = temp__4092__auto___12349;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__12331_12350__$1)) {
                var c__4142__auto___12351 = cljs.core.chunk_first.call(null, seq__12331_12350__$1);
                var G__12352 = cljs.core.chunk_rest.call(null, seq__12331_12350__$1);
                var G__12353 = c__4142__auto___12351;
                var G__12354 = cljs.core.count.call(null, c__4142__auto___12351);
                var G__12355 = 0;
                seq__12331_12340 = G__12352;
                chunk__12332_12341 = G__12353;
                count__12333_12342 = G__12354;
                i__12334_12343 = G__12355;
                continue;
              } else {
                var v_12356 = cljs.core.first.call(null, seq__12331_12350__$1);
                output.push(v_12356);
                var G__12357 = cljs.core.next.call(null, seq__12331_12350__$1);
                var G__12358 = null;
                var G__12359 = 0;
                var G__12360 = 0;
                seq__12331_12340 = G__12357;
                chunk__12332_12341 = G__12358;
                count__12333_12342 = G__12359;
                i__12334_12343 = G__12360;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__12361 = seq__12323_12335;
        var G__12362 = chunk__12328_12336;
        var G__12363 = count__12329_12337;
        var G__12364 = i__12330_12338 + 1;
        seq__12323_12335 = G__12361;
        chunk__12328_12336 = G__12362;
        count__12329_12337 = G__12363;
        i__12330_12338 = G__12364;
        continue;
      } else {
        var temp__4092__auto___12365 = cljs.core.seq.call(null, seq__12323_12335);
        if (temp__4092__auto___12365) {
          var seq__12323_12366__$1 = temp__4092__auto___12365;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12323_12366__$1)) {
            var c__4142__auto___12367 = cljs.core.chunk_first.call(null, seq__12323_12366__$1);
            var G__12368 = cljs.core.chunk_rest.call(null, seq__12323_12366__$1);
            var G__12369 = c__4142__auto___12367;
            var G__12370 = cljs.core.count.call(null, c__4142__auto___12367);
            var G__12371 = 0;
            seq__12323_12335 = G__12368;
            chunk__12328_12336 = G__12369;
            count__12329_12337 = G__12370;
            i__12330_12338 = G__12371;
            continue;
          } else {
            var ar_12372 = cljs.core.first.call(null, seq__12323_12366__$1);
            var seq__12324_12373 = cljs.core.seq.call(null, ar_12372);
            var chunk__12325_12374 = null;
            var count__12326_12375 = 0;
            var i__12327_12376 = 0;
            while (true) {
              if (i__12327_12376 < count__12326_12375) {
                var v_12377 = cljs.core._nth.call(null, chunk__12325_12374, i__12327_12376);
                output.push(v_12377);
                var G__12378 = seq__12324_12373;
                var G__12379 = chunk__12325_12374;
                var G__12380 = count__12326_12375;
                var G__12381 = i__12327_12376 + 1;
                seq__12324_12373 = G__12378;
                chunk__12325_12374 = G__12379;
                count__12326_12375 = G__12380;
                i__12327_12376 = G__12381;
                continue;
              } else {
                var temp__4092__auto___12382__$1 = cljs.core.seq.call(null, seq__12324_12373);
                if (temp__4092__auto___12382__$1) {
                  var seq__12324_12383__$1 = temp__4092__auto___12382__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__12324_12383__$1)) {
                    var c__4142__auto___12384 = cljs.core.chunk_first.call(null, seq__12324_12383__$1);
                    var G__12385 = cljs.core.chunk_rest.call(null, seq__12324_12383__$1);
                    var G__12386 = c__4142__auto___12384;
                    var G__12387 = cljs.core.count.call(null, c__4142__auto___12384);
                    var G__12388 = 0;
                    seq__12324_12373 = G__12385;
                    chunk__12325_12374 = G__12386;
                    count__12326_12375 = G__12387;
                    i__12327_12376 = G__12388;
                    continue;
                  } else {
                    var v_12389 = cljs.core.first.call(null, seq__12324_12383__$1);
                    output.push(v_12389);
                    var G__12390 = cljs.core.next.call(null, seq__12324_12383__$1);
                    var G__12391 = null;
                    var G__12392 = 0;
                    var G__12393 = 0;
                    seq__12324_12373 = G__12390;
                    chunk__12325_12374 = G__12391;
                    count__12326_12375 = G__12392;
                    i__12327_12376 = G__12393;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__12394 = cljs.core.next.call(null, seq__12323_12366__$1);
            var G__12395 = null;
            var G__12396 = 0;
            var G__12397 = 0;
            seq__12323_12335 = G__12394;
            chunk__12328_12336 = G__12395;
            count__12329_12337 = G__12396;
            i__12330_12338 = G__12397;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return js_concat__delegate.call(this, args);
  };
  js_concat.cljs$lang$maxFixedArity = 0;
  js_concat.cljs$lang$applyTo = function(arglist__12398) {
    var args = cljs.core.seq(arglist__12398);
    return js_concat__delegate(args);
  };
  js_concat.cljs$core$IFn$_invoke$arity$variadic = js_concat__delegate;
  return js_concat;
}();
purnam.native$.js_LT__ = function js_LT__(obj) {
  return cljs.core.clj__GT_js.call(null, obj);
};
purnam.native$.log = function() {
  var log = null;
  var log__1 = function(x) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x)].join(""), x);
    } else {
      console.log([cljs.core.str(x)].join(""));
    }
    return x;
  };
  var log__2 = function(x, y) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""), y);
    } else {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""));
    }
    return y;
  };
  log = function(x, y) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, x);
      case 2:
        return log__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log;
}();
purnam.native$.augment_fn_string = function augment_fn_string(func) {
  if (typeof func === "string") {
    return function(x) {
      return purnam.native$.aget_in.call(null, x, clojure.string.split.call(null, func, /\./));
    };
  } else {
    return func;
  }
};
purnam.native$.check_fn = function() {
  var check_fn = null;
  var check_fn__1 = function(chk) {
    return function(x) {
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, x);
      } else {
        return cljs.core._EQ_.call(null, x, chk);
      }
    };
  };
  var check_fn__2 = function(func, chk) {
    return function(x) {
      var res = func.call(null, x);
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, res);
      } else {
        return cljs.core._EQ_.call(null, res, chk);
      }
    };
  };
  check_fn = function(func, chk) {
    switch(arguments.length) {
      case 1:
        return check_fn__1.call(this, func);
      case 2:
        return check_fn__2.call(this, func, chk);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_fn.cljs$core$IFn$_invoke$arity$1 = check_fn__1;
  check_fn.cljs$core$IFn$_invoke$arity$2 = check_fn__2;
  return check_fn;
}();
goog.provide("test_helper");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
test_helper.mock_websocket = function mock_websocket() {
  return purnam.native$.aset_in.call(null, window, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["WebSocket"], null), function(url) {
    var G__8774 = function() {
      var obj8777 = {};
      return obj8777;
    }();
    return G__8774;
  });
};
test_helper.init_tests = function init_tests() {
  test_helper.mock_websocket.call(null);
  return beforeEach(function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, this, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["addMatchers"];
    return fn_SHARP_.call(obj_SHARP_, function() {
      var G__8782 = function() {
        var obj8785 = {};
        return obj8785;
      }();
      G__8782["toSatisfy"] = function(expected, tactual, texpected) {
        var actual = purnam.native$.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["actual"], null));
        var actualText = [cljs.core.str(actual)].join("");
        var actualText__$1 = cljs.core._EQ_.call(null, actualText, "[object Object]") ? function() {
          var ks = function() {
            var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
            var fn_SHARP___$1 = obj_SHARP___$1["getKeys"];
            return fn_SHARP___$1.call(obj_SHARP___$1, actual);
          }();
          var vs = function() {
            var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
            var fn_SHARP___$1 = obj_SHARP___$1["getValues"];
            return fn_SHARP___$1.call(obj_SHARP___$1, actual);
          }();
          return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(ks, vs, actual, actualText) {
            return function(x, y) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null);
            };
          }(ks, vs, actual, actualText), ks, vs));
        }() : actualText;
        var notText = cljs.core.truth_(purnam.native$.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["isNot"], null))) ? "Not " : "";
        this["message"] = function() {
          return[cljs.core.str("Expression: "), cljs.core.str(tactual), cljs.core.str("\n  Expected: "), cljs.core.str(notText), cljs.core.str(texpected), cljs.core.str("\n  Actual: "), cljs.core.str(actualText__$1)].join("");
        };
        if (cljs.core._EQ_.call(null, function() {
          var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, cljs.core.PersistentVector.EMPTY);
          var fn_SHARP___$1 = obj_SHARP___$1["typeOf"];
          return fn_SHARP___$1.call(obj_SHARP___$1, expected);
        }(), "array")) {
          return purnam.native$.js_equals.call(null, expected, actual);
        } else {
          if (cljs.core.fn_QMARK_.call(null, expected)) {
            return expected.call(null, actual);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              var or__3400__auto__ = cljs.core._EQ_.call(null, expected, actual);
              if (or__3400__auto__) {
                return or__3400__auto__;
              } else {
                return purnam.native$.js_equals.call(null, expected, actual);
              }
            } else {
              return null;
            }
          }
        }
      };
      return G__8782;
    }());
  });
};
goog.provide("chaperone.messagebox");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chaperone.messagebox.create_sub_system = function create_sub_system(system) {
  var sub_system = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773), cljs.core.async.chan.call(null)], null);
  return cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "messagebox", "messagebox", 3618152406), sub_system);
};
chaperone.messagebox.sub_system = function sub_system(system) {
  return(new cljs.core.Keyword(null, "messagebox", "messagebox", 3618152406)).cljs$core$IFn$_invoke$arity$1(system);
};
chaperone.messagebox.send_message_BANG_ = function send_message_BANG_(messagebox, level, message) {
  var message_queue = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(messagebox);
  return cljs.core.async.put_BANG_.call(null, message_queue, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "level", "level", 1116770038), level, new cljs.core.Keyword(null, "message", "message", 1968829305), message], null));
};
goog.provide("chaperone.core");
goog.require("cljs.core");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
chaperone.core.create_system = function create_system(host, port) {
  var context = cljs.core.PersistentArrayMap.EMPTY;
  return chaperone.messagebox.create_sub_system.call(null, chaperone.websocket.create_sub_system.call(null, context, host, port));
};
chaperone.core.start_BANG_ = function start_BANG_(system) {
  console.log("Starting the system");
  return chaperone.websocket.start_BANG_.call(null, system);
};
chaperone.core.stop_BANG_ = function stop_BANG_(system) {
  console.log("Stopping the system");
  return chaperone.websocket.stop_BANG_.call(null, system);
};
goog.provide("chaperone.ng.core");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("chaperone.core");
goog.require("chaperone.core");
chaperone.ng.core.chaperone_app = angular.module("chaperone.app", ["ngRoute"]);
chaperone.ng.core.chaperone_app_System = ["$location", function($location) {
  return chaperone.core.start_BANG_.call(null, chaperone.core.create_system.call(null, function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["host"];
    return fn_SHARP_.call(obj_SHARP_);
  }(), function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["port"];
    return fn_SHARP_.call(obj_SHARP_);
  }()));
}];
angular.module("chaperone.app").factory("System", chaperone.ng.core.chaperone_app_System);
angular.module("chaperone.app").config(["$routeProvider", function($routeProvider) {
  var G__8467 = $routeProvider;
  G__8467.when("/admin/users/add", function() {
    var G__8468 = function() {
      var obj8471 = {};
      return obj8471;
    }();
    G__8468["templateUrl"] = "/public/partials/admin/user/add-user-form.html";
    G__8468["controller"] = "AdminUserCtrl";
    return G__8468;
  }());
  G__8467.when("/admin/users/edit/:id", function() {
    var G__8472 = function() {
      var obj8475 = {};
      return obj8475;
    }();
    G__8472["templateUrl"] = "/public/partials/admin/user/edit-user-form.html";
    G__8472["controller"] = "AdminUserCtrl";
    return G__8472;
  }());
  G__8467.when("/admin/users/list", function() {
    var G__8476 = function() {
      var obj8479 = {};
      return obj8479;
    }();
    G__8476["templateUrl"] = "/public/partials/admin/user/list.html";
    G__8476["controller"] = "AdminUserCtrl";
    return G__8476;
  }());
  G__8467.otherwise(function() {
    var G__8480 = function() {
      var obj8483 = {};
      return obj8483;
    }();
    G__8480["templateUrl"] = "/public/partials/index.html";
    return G__8480;
  }());
  return G__8467;
}]);
goog.provide("jayq.core");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
jayq.core.crate_meta = function crate_meta(func) {
  return func.prototype._crateGroup;
};
jayq.core.__GT_selector = function __GT_selector(sel) {
  if (typeof sel === "string") {
    return sel;
  } else {
    if (cljs.core.fn_QMARK_.call(null, sel)) {
      var temp__4090__auto__ = jayq.core.crate_meta.call(null, sel);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var cm = temp__4090__auto__;
        return[cljs.core.str("[crateGroup\x3d"), cljs.core.str(cm), cljs.core.str("]")].join("");
      } else {
        return sel;
      }
    } else {
      if (sel instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, sel);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return sel;
        } else {
          return null;
        }
      }
    }
  }
};
jayq.core.$ = function() {
  var $ = null;
  var $__1 = function(sel) {
    return jQuery(jayq.core.__GT_selector.call(null, sel));
  };
  var $__2 = function(sel, context) {
    return jQuery(jayq.core.__GT_selector.call(null, sel), context);
  };
  $ = function(sel, context) {
    switch(arguments.length) {
      case 1:
        return $__1.call(this, sel);
      case 2:
        return $__2.call(this, sel, context);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  $.cljs$core$IFn$_invoke$arity$1 = $__1;
  $.cljs$core$IFn$_invoke$arity$2 = $__2;
  return $;
}();
jQuery.prototype.cljs$core$IFn$ = true;
jQuery.prototype.call = function() {
  var G__12416 = null;
  var G__12416__2 = function(self__, k) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__12416__3 = function(self__, k, not_found) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__12416 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12416__2.call(this, self__, k);
      case 3:
        return G__12416__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12416;
}();
jQuery.prototype.apply = function(self__, args12415) {
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12415)));
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
jQuery.prototype.cljs$core$IReduce$ = true;
jQuery.prototype.cljs$core$IReduce$_reduce$arity$2 = function(this$, f) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f);
};
jQuery.prototype.cljs$core$IReduce$_reduce$arity$3 = function(this$, f, start) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f, start);
};
jQuery.prototype.cljs$core$ILookup$ = true;
jQuery.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var this$__$1 = this;
  var or__3400__auto__ = this$__$1.slice(k, k + 1);
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, k, not_found);
};
jQuery.prototype.cljs$core$ISequential$ = true;
jQuery.prototype.cljs$core$IIndexed$ = true;
jQuery.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    if (void 0 === not_found) {
      return null;
    } else {
      return not_found;
    }
  }
};
jQuery.prototype.cljs$core$ICounted$ = true;
jQuery.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.length;
};
jQuery.prototype.cljs$core$ISeq$ = true;
jQuery.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.get(0);
};
jQuery.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.count.call(null, this$__$1) > 1) {
    return this$__$1.slice(1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
jQuery.prototype.cljs$core$ISeqable$ = true;
jQuery.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.truth_(this$__$1.get(0))) {
    return this$__$1;
  } else {
    return null;
  }
};
jayq.core.anim = function anim($elem, props, dur) {
  return $elem.animate(cljs.core.clj__GT_js.call(null, props), dur);
};
jayq.core.text = function() {
  var text = null;
  var text__1 = function($elem) {
    return $elem.text();
  };
  var text__2 = function($elem, txt) {
    return $elem.text(txt);
  };
  text = function($elem, txt) {
    switch(arguments.length) {
      case 1:
        return text__1.call(this, $elem);
      case 2:
        return text__2.call(this, $elem, txt);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  text.cljs$core$IFn$_invoke$arity$1 = text__1;
  text.cljs$core$IFn$_invoke$arity$2 = text__2;
  return text;
}();
jayq.core.css = function() {
  var css = null;
  var css__2 = function($elem, opts) {
    return $elem.css(cljs.core.clj__GT_js.call(null, opts));
  };
  var css__3 = function($elem, p, v) {
    return $elem.css(cljs.core.name.call(null, p), v);
  };
  css = function($elem, p, v) {
    switch(arguments.length) {
      case 2:
        return css__2.call(this, $elem, p);
      case 3:
        return css__3.call(this, $elem, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  css.cljs$core$IFn$_invoke$arity$2 = css__2;
  css.cljs$core$IFn$_invoke$arity$3 = css__3;
  return css;
}();
jayq.core.attr = function() {
  var attr = null;
  var attr__2 = function($elem, x) {
    return $elem.attr(cljs.core.clj__GT_js.call(null, x));
  };
  var attr__3 = function($elem, n, v) {
    return $elem.attr(cljs.core.name.call(null, n), v);
  };
  attr = function($elem, n, v) {
    switch(arguments.length) {
      case 2:
        return attr__2.call(this, $elem, n);
      case 3:
        return attr__3.call(this, $elem, n, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  attr.cljs$core$IFn$_invoke$arity$2 = attr__2;
  attr.cljs$core$IFn$_invoke$arity$3 = attr__3;
  return attr;
}();
jayq.core.prop = function() {
  var prop = null;
  var prop__2 = function($elem, x) {
    return $elem.prop(cljs.core.clj__GT_js.call(null, x));
  };
  var prop__3 = function($elem, n, v) {
    return $elem.prop(cljs.core.name.call(null, n), v);
  };
  prop = function($elem, n, v) {
    switch(arguments.length) {
      case 2:
        return prop__2.call(this, $elem, n);
      case 3:
        return prop__3.call(this, $elem, n, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prop.cljs$core$IFn$_invoke$arity$2 = prop__2;
  prop.cljs$core$IFn$_invoke$arity$3 = prop__3;
  return prop;
}();
jayq.core.remove_attr = function remove_attr($elem, a) {
  return $elem.removeAttr(cljs.core.name.call(null, a));
};
jayq.core.remove_prop = function remove_prop($elem, a) {
  return $elem.removeProp(cljs.core.name.call(null, a));
};
jayq.core.data = function() {
  var data = null;
  var data__1 = function($elem) {
    return $elem.data();
  };
  var data__2 = function($elem, k) {
    return $elem.data(cljs.core.clj__GT_js.call(null, k));
  };
  var data__3 = function($elem, k, v) {
    return $elem.data(cljs.core.name.call(null, k), cljs.core.clj__GT_js.call(null, v));
  };
  data = function($elem, k, v) {
    switch(arguments.length) {
      case 1:
        return data__1.call(this, $elem);
      case 2:
        return data__2.call(this, $elem, k);
      case 3:
        return data__3.call(this, $elem, k, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  data.cljs$core$IFn$_invoke$arity$1 = data__1;
  data.cljs$core$IFn$_invoke$arity$2 = data__2;
  data.cljs$core$IFn$_invoke$arity$3 = data__3;
  return data;
}();
jayq.core.add_class = function add_class($elem, cl) {
  return $elem.addClass(cljs.core.name.call(null, cl));
};
jayq.core.remove_class = function remove_class($elem, cl) {
  return $elem.removeClass(cljs.core.name.call(null, cl));
};
jayq.core.toggle_class = function toggle_class($elem, cl) {
  return $elem.toggleClass(cljs.core.name.call(null, cl));
};
jayq.core.has_class = function has_class($elem, cl) {
  return $elem.hasClass(cljs.core.name.call(null, cl));
};
jayq.core.is = function is($elem, selector) {
  return $elem.is(jayq.core.__GT_selector.call(null, selector));
};
jayq.core.after = function after($elem, content) {
  return $elem.after(content);
};
jayq.core.before = function before($elem, content) {
  return $elem.before(content);
};
jayq.core.append = function append($elem, content) {
  return $elem.append(content);
};
jayq.core.prepend = function prepend($elem, content) {
  return $elem.prepend(content);
};
jayq.core.append_to = function append_to($elem, target) {
  return $elem.appendTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.prepend_to = function prepend_to($elem, target) {
  return $elem.prependTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_before = function insert_before($elem, target) {
  return $elem.insertBefore(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_after = function insert_after($elem, target) {
  return $elem.insertAfter(jayq.core.__GT_selector.call(null, target));
};
jayq.core.replace_with = function replace_with($elem, content) {
  return $elem.replaceWith(content);
};
jayq.core.remove = function remove($elem) {
  return $elem.remove();
};
jayq.core.hide = function() {
  var hide__delegate = function($elem, p__12417) {
    var vec__12419 = p__12417;
    var speed = cljs.core.nth.call(null, vec__12419, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__12419, 1, null);
    return $elem.hide(speed, on_finish);
  };
  var hide = function($elem, var_args) {
    var p__12417 = null;
    if (arguments.length > 1) {
      p__12417 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hide__delegate.call(this, $elem, p__12417);
  };
  hide.cljs$lang$maxFixedArity = 1;
  hide.cljs$lang$applyTo = function(arglist__12420) {
    var $elem = cljs.core.first(arglist__12420);
    var p__12417 = cljs.core.rest(arglist__12420);
    return hide__delegate($elem, p__12417);
  };
  hide.cljs$core$IFn$_invoke$arity$variadic = hide__delegate;
  return hide;
}();
jayq.core.show = function() {
  var show__delegate = function($elem, p__12421) {
    var vec__12423 = p__12421;
    var speed = cljs.core.nth.call(null, vec__12423, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__12423, 1, null);
    return $elem.show(speed, on_finish);
  };
  var show = function($elem, var_args) {
    var p__12421 = null;
    if (arguments.length > 1) {
      p__12421 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return show__delegate.call(this, $elem, p__12421);
  };
  show.cljs$lang$maxFixedArity = 1;
  show.cljs$lang$applyTo = function(arglist__12424) {
    var $elem = cljs.core.first(arglist__12424);
    var p__12421 = cljs.core.rest(arglist__12424);
    return show__delegate($elem, p__12421);
  };
  show.cljs$core$IFn$_invoke$arity$variadic = show__delegate;
  return show;
}();
jayq.core.toggle = function() {
  var toggle__delegate = function($elem, p__12425) {
    var vec__12427 = p__12425;
    var speed = cljs.core.nth.call(null, vec__12427, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__12427, 1, null);
    return $elem.toggle(speed, on_finish);
  };
  var toggle = function($elem, var_args) {
    var p__12425 = null;
    if (arguments.length > 1) {
      p__12425 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return toggle__delegate.call(this, $elem, p__12425);
  };
  toggle.cljs$lang$maxFixedArity = 1;
  toggle.cljs$lang$applyTo = function(arglist__12428) {
    var $elem = cljs.core.first(arglist__12428);
    var p__12425 = cljs.core.rest(arglist__12428);
    return toggle__delegate($elem, p__12425);
  };
  toggle.cljs$core$IFn$_invoke$arity$variadic = toggle__delegate;
  return toggle;
}();
jayq.core.fade_out = function() {
  var fade_out__delegate = function($elem, p__12429) {
    var vec__12431 = p__12429;
    var speed = cljs.core.nth.call(null, vec__12431, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__12431, 1, null);
    return $elem.fadeOut(speed, on_finish);
  };
  var fade_out = function($elem, var_args) {
    var p__12429 = null;
    if (arguments.length > 1) {
      p__12429 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fade_out__delegate.call(this, $elem, p__12429);
  };
  fade_out.cljs$lang$maxFixedArity = 1;
  fade_out.cljs$lang$applyTo = function(arglist__12432) {
    var $elem = cljs.core.first(arglist__12432);
    var p__12429 = cljs.core.rest(arglist__12432);
    return fade_out__delegate($elem, p__12429);
  };
  fade_out.cljs$core$IFn$_invoke$arity$variadic = fade_out__delegate;
  return fade_out;
}();
jayq.core.fade_in = function() {
  var fade_in__delegate = function($elem, p__12433) {
    var vec__12435 = p__12433;
    var speed = cljs.core.nth.call(null, vec__12435, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__12435, 1, null);
    return $elem.fadeIn(speed, on_finish);
  };
  var fade_in = function($elem, var_args) {
    var p__12433 = null;
    if (arguments.length > 1) {
      p__12433 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fade_in__delegate.call(this, $elem, p__12433);
  };
  fade_in.cljs$lang$maxFixedArity = 1;
  fade_in.cljs$lang$applyTo = function(arglist__12436) {
    var $elem = cljs.core.first(arglist__12436);
    var p__12433 = cljs.core.rest(arglist__12436);
    return fade_in__delegate($elem, p__12433);
  };
  fade_in.cljs$core$IFn$_invoke$arity$variadic = fade_in__delegate;
  return fade_in;
}();
jayq.core.slide_up = function() {
  var slide_up__delegate = function($elem, p__12437) {
    var vec__12439 = p__12437;
    var speed = cljs.core.nth.call(null, vec__12439, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__12439, 1, null);
    return $elem.slideUp(speed, on_finish);
  };
  var slide_up = function($elem, var_args) {
    var p__12437 = null;
    if (arguments.length > 1) {
      p__12437 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return slide_up__delegate.call(this, $elem, p__12437);
  };
  slide_up.cljs$lang$maxFixedArity = 1;
  slide_up.cljs$lang$applyTo = function(arglist__12440) {
    var $elem = cljs.core.first(arglist__12440);
    var p__12437 = cljs.core.rest(arglist__12440);
    return slide_up__delegate($elem, p__12437);
  };
  slide_up.cljs$core$IFn$_invoke$arity$variadic = slide_up__delegate;
  return slide_up;
}();
jayq.core.slide_down = function() {
  var slide_down__delegate = function($elem, p__12441) {
    var vec__12443 = p__12441;
    var speed = cljs.core.nth.call(null, vec__12443, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__12443, 1, null);
    return $elem.slideDown(speed, on_finish);
  };
  var slide_down = function($elem, var_args) {
    var p__12441 = null;
    if (arguments.length > 1) {
      p__12441 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return slide_down__delegate.call(this, $elem, p__12441);
  };
  slide_down.cljs$lang$maxFixedArity = 1;
  slide_down.cljs$lang$applyTo = function(arglist__12444) {
    var $elem = cljs.core.first(arglist__12444);
    var p__12441 = cljs.core.rest(arglist__12444);
    return slide_down__delegate($elem, p__12441);
  };
  slide_down.cljs$core$IFn$_invoke$arity$variadic = slide_down__delegate;
  return slide_down;
}();
jayq.core.siblings = function() {
  var siblings = null;
  var siblings__1 = function($elem) {
    return $elem.siblings();
  };
  var siblings__2 = function($elem, selector) {
    return $elem.siblings(cljs.core.name.call(null, selector));
  };
  siblings = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return siblings__1.call(this, $elem);
      case 2:
        return siblings__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  siblings.cljs$core$IFn$_invoke$arity$1 = siblings__1;
  siblings.cljs$core$IFn$_invoke$arity$2 = siblings__2;
  return siblings;
}();
jayq.core.parent = function parent($elem) {
  return $elem.parent();
};
jayq.core.parents = function() {
  var parents = null;
  var parents__1 = function($elem) {
    return $elem.parents();
  };
  var parents__2 = function($elem, selector) {
    return $elem.parents(cljs.core.name.call(null, selector));
  };
  parents = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, $elem);
      case 2:
        return parents__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
jayq.core.parents_until = function() {
  var parents_until = null;
  var parents_until__1 = function($elem) {
    return $elem.parentsUntil();
  };
  var parents_until__2 = function($elem, selector) {
    return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var parents_until__3 = function($elem, selector, filtr) {
    return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  parents_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return parents_until__1.call(this, $elem);
      case 2:
        return parents_until__2.call(this, $elem, selector);
      case 3:
        return parents_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents_until.cljs$core$IFn$_invoke$arity$1 = parents_until__1;
  parents_until.cljs$core$IFn$_invoke$arity$2 = parents_until__2;
  parents_until.cljs$core$IFn$_invoke$arity$3 = parents_until__3;
  return parents_until;
}();
jayq.core.children = function() {
  var children = null;
  var children__1 = function($elem) {
    return $elem.children();
  };
  var children__2 = function($elem, selector) {
    return $elem.children(cljs.core.name.call(null, selector));
  };
  children = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return children__1.call(this, $elem);
      case 2:
        return children__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  children.cljs$core$IFn$_invoke$arity$1 = children__1;
  children.cljs$core$IFn$_invoke$arity$2 = children__2;
  return children;
}();
jayq.core.next = function() {
  var next = null;
  var next__1 = function($elem) {
    return $elem.next();
  };
  var next__2 = function($elem, selector) {
    return $elem.next(cljs.core.name.call(null, selector));
  };
  next = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return next__1.call(this, $elem);
      case 2:
        return next__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next.cljs$core$IFn$_invoke$arity$1 = next__1;
  next.cljs$core$IFn$_invoke$arity$2 = next__2;
  return next;
}();
jayq.core.prev = function() {
  var prev = null;
  var prev__1 = function($elem) {
    return $elem.prev();
  };
  var prev__2 = function($elem, selector) {
    return $elem.prev(cljs.core.name.call(null, selector));
  };
  prev = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return prev__1.call(this, $elem);
      case 2:
        return prev__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev.cljs$core$IFn$_invoke$arity$1 = prev__1;
  prev.cljs$core$IFn$_invoke$arity$2 = prev__2;
  return prev;
}();
jayq.core.next_all = function() {
  var next_all = null;
  var next_all__1 = function($elem) {
    return $elem.nextAll();
  };
  var next_all__2 = function($elem, selector) {
    return $elem.nextAll(cljs.core.name.call(null, selector));
  };
  next_all = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return next_all__1.call(this, $elem);
      case 2:
        return next_all__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next_all.cljs$core$IFn$_invoke$arity$1 = next_all__1;
  next_all.cljs$core$IFn$_invoke$arity$2 = next_all__2;
  return next_all;
}();
jayq.core.prev_all = function() {
  var prev_all = null;
  var prev_all__1 = function($elem) {
    return $elem.prevAll();
  };
  var prev_all__2 = function($elem, selector) {
    return $elem.prevAll(cljs.core.name.call(null, selector));
  };
  prev_all = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return prev_all__1.call(this, $elem);
      case 2:
        return prev_all__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev_all.cljs$core$IFn$_invoke$arity$1 = prev_all__1;
  prev_all.cljs$core$IFn$_invoke$arity$2 = prev_all__2;
  return prev_all;
}();
jayq.core.next_until = function() {
  var next_until = null;
  var next_until__1 = function($elem) {
    return $elem.nextUntil();
  };
  var next_until__2 = function($elem, selector) {
    return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var next_until__3 = function($elem, selector, filtr) {
    return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  next_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return next_until__1.call(this, $elem);
      case 2:
        return next_until__2.call(this, $elem, selector);
      case 3:
        return next_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next_until.cljs$core$IFn$_invoke$arity$1 = next_until__1;
  next_until.cljs$core$IFn$_invoke$arity$2 = next_until__2;
  next_until.cljs$core$IFn$_invoke$arity$3 = next_until__3;
  return next_until;
}();
jayq.core.prev_until = function() {
  var prev_until = null;
  var prev_until__1 = function($elem) {
    return $elem.prevUntil();
  };
  var prev_until__2 = function($elem, selector) {
    return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var prev_until__3 = function($elem, selector, filtr) {
    return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  prev_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return prev_until__1.call(this, $elem);
      case 2:
        return prev_until__2.call(this, $elem, selector);
      case 3:
        return prev_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev_until.cljs$core$IFn$_invoke$arity$1 = prev_until__1;
  prev_until.cljs$core$IFn$_invoke$arity$2 = prev_until__2;
  prev_until.cljs$core$IFn$_invoke$arity$3 = prev_until__3;
  return prev_until;
}();
jayq.core.find = function find($elem, selector) {
  return $elem.find(cljs.core.name.call(null, selector));
};
jayq.core.closest = function() {
  var closest__delegate = function($elem, selector, p__12445) {
    var vec__12447 = p__12445;
    var context = cljs.core.nth.call(null, vec__12447, 0, null);
    return $elem.closest(jayq.core.__GT_selector.call(null, selector), context);
  };
  var closest = function($elem, selector, var_args) {
    var p__12445 = null;
    if (arguments.length > 2) {
      p__12445 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return closest__delegate.call(this, $elem, selector, p__12445);
  };
  closest.cljs$lang$maxFixedArity = 2;
  closest.cljs$lang$applyTo = function(arglist__12448) {
    var $elem = cljs.core.first(arglist__12448);
    arglist__12448 = cljs.core.next(arglist__12448);
    var selector = cljs.core.first(arglist__12448);
    var p__12445 = cljs.core.rest(arglist__12448);
    return closest__delegate($elem, selector, p__12445);
  };
  closest.cljs$core$IFn$_invoke$arity$variadic = closest__delegate;
  return closest;
}();
jayq.core.clone = function clone($elem) {
  return $elem.clone();
};
jayq.core.html = function() {
  var html = null;
  var html__1 = function($elem) {
    return $elem.html();
  };
  var html__2 = function($elem, v) {
    return $elem.html(v);
  };
  html = function($elem, v) {
    switch(arguments.length) {
      case 1:
        return html__1.call(this, $elem);
      case 2:
        return html__2.call(this, $elem, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  html.cljs$core$IFn$_invoke$arity$1 = html__1;
  html.cljs$core$IFn$_invoke$arity$2 = html__2;
  return html;
}();
jayq.core.inner = jayq.core.html;
jayq.core.empty = function empty($elem) {
  return $elem.empty();
};
jayq.core.val = function() {
  var val = null;
  var val__1 = function($elem) {
    return $elem.val();
  };
  var val__2 = function($elem, v) {
    return $elem.val(v);
  };
  val = function($elem, v) {
    switch(arguments.length) {
      case 1:
        return val__1.call(this, $elem);
      case 2:
        return val__2.call(this, $elem, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  val.cljs$core$IFn$_invoke$arity$1 = val__1;
  val.cljs$core$IFn$_invoke$arity$2 = val__2;
  return val;
}();
jayq.core.serialize = function serialize($elem) {
  return $elem.serialize();
};
jayq.core.queue = function() {
  var queue = null;
  var queue__1 = function($elem) {
    return $elem.queue();
  };
  var queue__2 = function($elem, x) {
    return $elem.queue(x);
  };
  var queue__3 = function($elem, x, y) {
    return $elem.queue(x, y);
  };
  queue = function($elem, x, y) {
    switch(arguments.length) {
      case 1:
        return queue__1.call(this, $elem);
      case 2:
        return queue__2.call(this, $elem, x);
      case 3:
        return queue__3.call(this, $elem, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  queue.cljs$core$IFn$_invoke$arity$1 = queue__1;
  queue.cljs$core$IFn$_invoke$arity$2 = queue__2;
  queue.cljs$core$IFn$_invoke$arity$3 = queue__3;
  return queue;
}();
jayq.core.dequeue = function() {
  var dequeue = null;
  var dequeue__1 = function($elem) {
    return $elem.dequeue();
  };
  var dequeue__2 = function($elem, queue_name) {
    return $elem.dequeue(queue_name);
  };
  dequeue = function($elem, queue_name) {
    switch(arguments.length) {
      case 1:
        return dequeue__1.call(this, $elem);
      case 2:
        return dequeue__2.call(this, $elem, queue_name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dequeue.cljs$core$IFn$_invoke$arity$1 = dequeue__1;
  dequeue.cljs$core$IFn$_invoke$arity$2 = dequeue__2;
  return dequeue;
}();
jayq.core.document_ready = function document_ready(func) {
  return jayq.core.$.call(null, document).ready(func);
};
jayq.core.mimetype_converter = function mimetype_converter(s) {
  return cljs.reader.read_string.call(null, [cljs.core.str(s)].join(""));
};
jQuery.ajaxSetup(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "accepts", "accepts", 4131250141), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "edn", "edn", 1014004513), "application/edn, text/edn", new cljs.core.Keyword(null, "clojure", "clojure", 1880188502), "application/clojure, text/clojure"], null), new cljs.core.Keyword(null, "contents", "contents", 4741549708), new cljs.core.PersistentArrayMap(null, 1, ["clojure", 
/edn|clojure/], null), new cljs.core.Keyword(null, "converters", "converters", 3057163845), new cljs.core.PersistentArrayMap(null, 2, ["text edn", jayq.core.mimetype_converter, "text clojure", jayq.core.mimetype_converter], null)], null)));
jayq.core.clj_content_type_QMARK_ = function clj_content_type_QMARK_(x) {
  return cljs.core.re_find.call(null, /^(text|application)\/(clojure|edn)/, x);
};
jayq.core.__GT_content_type = function __GT_content_type(ct) {
  if (typeof ct === "string") {
    return ct;
  } else {
    if (ct instanceof cljs.core.Keyword) {
      return cljs.core.subs.call(null, [cljs.core.str(ct)].join(""), 1);
    } else {
      return null;
    }
  }
};
jayq.core.preprocess_request = function preprocess_request(p__12451) {
  var map__12453 = p__12451;
  var map__12453__$1 = cljs.core.seq_QMARK_.call(null, map__12453) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12453) : map__12453;
  var request = map__12453__$1;
  var contentType = cljs.core.get.call(null, map__12453__$1, new cljs.core.Keyword(null, "contentType", "contentType", 624772805));
  var data = cljs.core.get.call(null, map__12453__$1, new cljs.core.Keyword(null, "data", "data", 1016980252));
  var ct = jayq.core.__GT_content_type.call(null, contentType);
  return function(p1__12450_SHARP_) {
    if (cljs.core.truth_(jayq.core.clj_content_type_QMARK_.call(null, ct))) {
      return cljs.core.assoc.call(null, p1__12450_SHARP_, new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.pr_str.call(null, data));
    } else {
      return p1__12450_SHARP_;
    }
  }.call(null, function(p1__12449_SHARP_) {
    if (cljs.core.truth_(ct)) {
      return cljs.core.assoc.call(null, p1__12449_SHARP_, new cljs.core.Keyword(null, "contentType", "contentType", 624772805), ct);
    } else {
      return p1__12449_SHARP_;
    }
  }.call(null, request));
};
jayq.core.__GT_ajax_settings = function __GT_ajax_settings(request) {
  return cljs.core.clj__GT_js.call(null, jayq.core.preprocess_request.call(null, request));
};
jayq.core.ajax = function() {
  var ajax = null;
  var ajax__1 = function(settings) {
    return jQuery.ajax(jayq.core.__GT_ajax_settings.call(null, settings));
  };
  var ajax__2 = function(url, settings) {
    return jQuery.ajax(url, jayq.core.__GT_ajax_settings.call(null, settings));
  };
  ajax = function(url, settings) {
    switch(arguments.length) {
      case 1:
        return ajax__1.call(this, url);
      case 2:
        return ajax__2.call(this, url, settings);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax.cljs$core$IFn$_invoke$arity$1 = ajax__1;
  ajax.cljs$core$IFn$_invoke$arity$2 = ajax__2;
  return ajax;
}();
jayq.core.xhr = function xhr(p__12454, content, callback) {
  var vec__12456 = p__12454;
  var method = cljs.core.nth.call(null, vec__12456, 0, null);
  var uri = cljs.core.nth.call(null, vec__12456, 1, null);
  var params = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), clojure.string.upper_case.call(null, cljs.core.name.call(null, method)), new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.clj__GT_js.call(null, content), new cljs.core.Keyword(null, "success", "success", 3441701749), callback], null));
  return jQuery.ajax(uri, params);
};
jayq.core.read = function read($elem) {
  return cljs.reader.read_string.call(null, jayq.core.html.call(null, $elem));
};
jayq.core.bind = function bind($elem, ev, func) {
  return $elem.bind(cljs.core.name.call(null, ev), func);
};
jayq.core.unbind = function() {
  var unbind__delegate = function($elem, ev, p__12457) {
    var vec__12459 = p__12457;
    var func = cljs.core.nth.call(null, vec__12459, 0, null);
    return $elem.unbind(cljs.core.name.call(null, ev), func);
  };
  var unbind = function($elem, ev, var_args) {
    var p__12457 = null;
    if (arguments.length > 2) {
      p__12457 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return unbind__delegate.call(this, $elem, ev, p__12457);
  };
  unbind.cljs$lang$maxFixedArity = 2;
  unbind.cljs$lang$applyTo = function(arglist__12460) {
    var $elem = cljs.core.first(arglist__12460);
    arglist__12460 = cljs.core.next(arglist__12460);
    var ev = cljs.core.first(arglist__12460);
    var p__12457 = cljs.core.rest(arglist__12460);
    return unbind__delegate($elem, ev, p__12457);
  };
  unbind.cljs$core$IFn$_invoke$arity$variadic = unbind__delegate;
  return unbind;
}();
jayq.core.trigger = function trigger($elem, ev) {
  return $elem.trigger(cljs.core.name.call(null, ev));
};
jayq.core.delegate = function delegate($elem, sel, ev, func) {
  return $elem.delegate(jayq.core.__GT_selector.call(null, sel), cljs.core.name.call(null, ev), func);
};
jayq.core.__GT_event = function __GT_event(e) {
  if (cljs.core.coll_QMARK_.call(null, e)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.name, e));
  } else {
    return cljs.core.clj__GT_js.call(null, e);
  }
};
jayq.core.on = function() {
  var on__delegate = function($elem, events, p__12461) {
    var vec__12463 = p__12461;
    var sel = cljs.core.nth.call(null, vec__12463, 0, null);
    var data = cljs.core.nth.call(null, vec__12463, 1, null);
    var handler = cljs.core.nth.call(null, vec__12463, 2, null);
    return $elem.on(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
  };
  var on = function($elem, events, var_args) {
    var p__12461 = null;
    if (arguments.length > 2) {
      p__12461 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return on__delegate.call(this, $elem, events, p__12461);
  };
  on.cljs$lang$maxFixedArity = 2;
  on.cljs$lang$applyTo = function(arglist__12464) {
    var $elem = cljs.core.first(arglist__12464);
    arglist__12464 = cljs.core.next(arglist__12464);
    var events = cljs.core.first(arglist__12464);
    var p__12461 = cljs.core.rest(arglist__12464);
    return on__delegate($elem, events, p__12461);
  };
  on.cljs$core$IFn$_invoke$arity$variadic = on__delegate;
  return on;
}();
jayq.core.one = function() {
  var one__delegate = function($elem, events, p__12465) {
    var vec__12467 = p__12465;
    var sel = cljs.core.nth.call(null, vec__12467, 0, null);
    var data = cljs.core.nth.call(null, vec__12467, 1, null);
    var handler = cljs.core.nth.call(null, vec__12467, 2, null);
    return $elem.one(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
  };
  var one = function($elem, events, var_args) {
    var p__12465 = null;
    if (arguments.length > 2) {
      p__12465 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return one__delegate.call(this, $elem, events, p__12465);
  };
  one.cljs$lang$maxFixedArity = 2;
  one.cljs$lang$applyTo = function(arglist__12468) {
    var $elem = cljs.core.first(arglist__12468);
    arglist__12468 = cljs.core.next(arglist__12468);
    var events = cljs.core.first(arglist__12468);
    var p__12465 = cljs.core.rest(arglist__12468);
    return one__delegate($elem, events, p__12465);
  };
  one.cljs$core$IFn$_invoke$arity$variadic = one__delegate;
  return one;
}();
jayq.core.off = function() {
  var off__delegate = function($elem, events, p__12469) {
    var vec__12471 = p__12469;
    var sel = cljs.core.nth.call(null, vec__12471, 0, null);
    var handler = cljs.core.nth.call(null, vec__12471, 1, null);
    return $elem.off(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), handler);
  };
  var off = function($elem, events, var_args) {
    var p__12469 = null;
    if (arguments.length > 2) {
      p__12469 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return off__delegate.call(this, $elem, events, p__12469);
  };
  off.cljs$lang$maxFixedArity = 2;
  off.cljs$lang$applyTo = function(arglist__12472) {
    var $elem = cljs.core.first(arglist__12472);
    arglist__12472 = cljs.core.next(arglist__12472);
    var events = cljs.core.first(arglist__12472);
    var p__12469 = cljs.core.rest(arglist__12472);
    return off__delegate($elem, events, p__12469);
  };
  off.cljs$core$IFn$_invoke$arity$variadic = off__delegate;
  return off;
}();
jayq.core.prevent = function prevent(e) {
  return e.preventDefault();
};
jayq.core.height = function() {
  var height = null;
  var height__1 = function($elem) {
    return $elem.height();
  };
  var height__2 = function($elem, x) {
    return $elem.height(x);
  };
  height = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return height__1.call(this, $elem);
      case 2:
        return height__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  height.cljs$core$IFn$_invoke$arity$1 = height__1;
  height.cljs$core$IFn$_invoke$arity$2 = height__2;
  return height;
}();
jayq.core.width = function() {
  var width = null;
  var width__1 = function($elem) {
    return $elem.width();
  };
  var width__2 = function($elem, x) {
    return $elem.width(x);
  };
  width = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return width__1.call(this, $elem);
      case 2:
        return width__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  width.cljs$core$IFn$_invoke$arity$1 = width__1;
  width.cljs$core$IFn$_invoke$arity$2 = width__2;
  return width;
}();
jayq.core.inner_height = function inner_height($elem) {
  return $elem.innerHeight();
};
jayq.core.inner_width = function inner_width($elem) {
  return $elem.innerWidth();
};
jayq.core.outer_height = function outer_height($elem) {
  return $elem.outerHeight();
};
jayq.core.outer_width = function outer_width($elem) {
  return $elem.outerWidth();
};
jayq.core.offset = function() {
  var offset = null;
  var offset__1 = function($elem) {
    return cljs.core.js__GT_clj.call(null, $elem.offset(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
  };
  var offset__2 = function($elem, coords) {
    return cljs.core.clj__GT_js.call(null, coords).offset();
  };
  offset = function($elem, coords) {
    switch(arguments.length) {
      case 1:
        return offset__1.call(this, $elem);
      case 2:
        return offset__2.call(this, $elem, coords);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  offset.cljs$core$IFn$_invoke$arity$1 = offset__1;
  offset.cljs$core$IFn$_invoke$arity$2 = offset__2;
  return offset;
}();
jayq.core.offset_parent = function offset_parent($elem) {
  return $elem.offsetParent();
};
jayq.core.position = function position($elem) {
  return cljs.core.js__GT_clj.call(null, $elem.position(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
};
jayq.core.scroll_left = function() {
  var scroll_left = null;
  var scroll_left__1 = function($elem) {
    return $elem.scrollLeft();
  };
  var scroll_left__2 = function($elem, x) {
    return $elem.scrollLeft(x);
  };
  scroll_left = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return scroll_left__1.call(this, $elem);
      case 2:
        return scroll_left__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll_left.cljs$core$IFn$_invoke$arity$1 = scroll_left__1;
  scroll_left.cljs$core$IFn$_invoke$arity$2 = scroll_left__2;
  return scroll_left;
}();
jayq.core.scroll_top = function() {
  var scroll_top = null;
  var scroll_top__1 = function($elem) {
    return $elem.scrollTop();
  };
  var scroll_top__2 = function($elem, x) {
    return $elem.scrollTop(x);
  };
  scroll_top = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return scroll_top__1.call(this, $elem);
      case 2:
        return scroll_top__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll_top.cljs$core$IFn$_invoke$arity$1 = scroll_top__1;
  scroll_top.cljs$core$IFn$_invoke$arity$2 = scroll_top__2;
  return scroll_top;
}();
jayq.core.$deferred = $.Deferred;
jayq.core.$when = $.when;
jayq.core.then = function() {
  var then = null;
  var then__3 = function(deferred, done_fn, fail_fn) {
    return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn));
  };
  var then__4 = function(deferred, done_fn, fail_fn, progress_fn) {
    return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn), cljs.core.clj__GT_js.call(null, progress_fn));
  };
  then = function(deferred, done_fn, fail_fn, progress_fn) {
    switch(arguments.length) {
      case 3:
        return then__3.call(this, deferred, done_fn, fail_fn);
      case 4:
        return then__4.call(this, deferred, done_fn, fail_fn, progress_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  then.cljs$core$IFn$_invoke$arity$3 = then__3;
  then.cljs$core$IFn$_invoke$arity$4 = then__4;
  return then;
}();
jayq.core.done = function() {
  var done__delegate = function(deferred, fns_args) {
    return deferred.done.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var done = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return done__delegate.call(this, deferred, fns_args);
  };
  done.cljs$lang$maxFixedArity = 1;
  done.cljs$lang$applyTo = function(arglist__12473) {
    var deferred = cljs.core.first(arglist__12473);
    var fns_args = cljs.core.rest(arglist__12473);
    return done__delegate(deferred, fns_args);
  };
  done.cljs$core$IFn$_invoke$arity$variadic = done__delegate;
  return done;
}();
jayq.core.fail = function() {
  var fail__delegate = function(deferred, fns_args) {
    return deferred.fail.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var fail = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fail__delegate.call(this, deferred, fns_args);
  };
  fail.cljs$lang$maxFixedArity = 1;
  fail.cljs$lang$applyTo = function(arglist__12474) {
    var deferred = cljs.core.first(arglist__12474);
    var fns_args = cljs.core.rest(arglist__12474);
    return fail__delegate(deferred, fns_args);
  };
  fail.cljs$core$IFn$_invoke$arity$variadic = fail__delegate;
  return fail;
}();
jayq.core.progress = function progress(deferred, fns_args) {
  return deferred.progress(cljs.core.clj__GT_js.call(null, fns_args));
};
jayq.core.promise = function() {
  var promise = null;
  var promise__1 = function(deferred) {
    return deferred.promise();
  };
  var promise__2 = function(deferred, type) {
    return deferred.promise(type);
  };
  var promise__3 = function(deferred, type, target) {
    return deferred.promise(type, target);
  };
  promise = function(deferred, type, target) {
    switch(arguments.length) {
      case 1:
        return promise__1.call(this, deferred);
      case 2:
        return promise__2.call(this, deferred, type);
      case 3:
        return promise__3.call(this, deferred, type, target);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  promise.cljs$core$IFn$_invoke$arity$1 = promise__1;
  promise.cljs$core$IFn$_invoke$arity$2 = promise__2;
  promise.cljs$core$IFn$_invoke$arity$3 = promise__3;
  return promise;
}();
jayq.core.always = function() {
  var always__delegate = function(deferred, fns_args) {
    return deferred.always.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var always = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return always__delegate.call(this, deferred, fns_args);
  };
  always.cljs$lang$maxFixedArity = 1;
  always.cljs$lang$applyTo = function(arglist__12475) {
    var deferred = cljs.core.first(arglist__12475);
    var fns_args = cljs.core.rest(arglist__12475);
    return always__delegate(deferred, fns_args);
  };
  always.cljs$core$IFn$_invoke$arity$variadic = always__delegate;
  return always;
}();
jayq.core.reject = function reject(deferred, args) {
  return deferred.reject(args);
};
jayq.core.reject_with = function reject_with(deferred, context, args) {
  return deferred.rejectWith(context, args);
};
jayq.core.notify = function notify(deferred, args) {
  return deferred.notify(args);
};
jayq.core.notify_with = function notify_with(deferred, context, args) {
  return deferred.notifyWith(context, args);
};
jayq.core.resolve = function resolve(deferred, args) {
  return deferred.resolve(args);
};
jayq.core.resolve_with = function resolve_with(deferred, context, args) {
  return deferred.resolveWith(context, args);
};
jayq.core.pipe = function() {
  var pipe = null;
  var pipe__2 = function(deferred, done_filter) {
    return deferred.pipe(done_filter);
  };
  var pipe__3 = function(deferred, done_filter, fail_filter) {
    return deferred.pipe(done_filter, fail_filter);
  };
  var pipe__4 = function(deferred, done_filter, fail_filter, progress_filter) {
    return deferred.pipe(done_filter, fail_filter, progress_filter);
  };
  pipe = function(deferred, done_filter, fail_filter, progress_filter) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, deferred, done_filter);
      case 3:
        return pipe__3.call(this, deferred, done_filter, fail_filter);
      case 4:
        return pipe__4.call(this, deferred, done_filter, fail_filter, progress_filter);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  pipe.cljs$core$IFn$_invoke$arity$4 = pipe__4;
  return pipe;
}();
jayq.core.state = function state(deferred) {
  return cljs.core.keyword.call(null, deferred.state());
};
jayq.core.deferred_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", 4374474914), jayq.core.$when, new cljs.core.Keyword(null, "bind", "bind", 1016928175), function(x, f) {
  var dfd = jayq.core.$deferred.call(null);
  jayq.core.done.call(null, x, function(v) {
    return jayq.core.done.call(null, f.call(null, v), cljs.core.partial.call(null, jayq.core.resolve, dfd));
  });
  return jayq.core.promise.call(null, dfd);
}, new cljs.core.Keyword(null, "zero", "zero", 1017639450), cljs.core.identity], null);
jayq.core.ajax_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", 4374474914), cljs.core.identity, new cljs.core.Keyword(null, "bind", "bind", 1016928175), function(x, f) {
  return jayq.core.done.call(null, jayq.core.ajax.call(null, x), f);
}, new cljs.core.Keyword(null, "zero", "zero", 1017639450), cljs.core.identity], null);
goog.provide("chaperone.ng.directive");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("purnam.native$");
goog.require("clojure.string");
goog.require("purnam.native$");
goog.require("jayq.core");
goog.require("jayq.core");
goog.require("chaperone.ng.core");
chaperone.ng.directive.chaperone_app_clickRow = ["$location", function($location) {
  var link = function(scope, row, attr) {
    var row__$1 = jayq.core.$.call(null, row);
    return jayq.core.on.call(null, row__$1, new cljs.core.Keyword(null, "click", "click", 1108654330), function(row__$1) {
      return function(e) {
        var href = jayq.core.attr.call(null, jayq.core.find.call(null, row__$1, new cljs.core.Keyword(null, "a", "a", 1013904339)), new cljs.core.Keyword(null, "href", "href", 1017115293));
        return scope.$apply(function(href, row__$1) {
          return function() {
            var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
            var fn_SHARP_ = obj_SHARP_["path"];
            return fn_SHARP_.call(obj_SHARP_, clojure.string.replace_first.call(null, href, "#", ""));
          };
        }(href, row__$1));
      };
    }(row__$1));
  };
  var G__8544 = function() {
    var obj8547 = {};
    return obj8547;
  }();
  G__8544["link"] = link;
  return G__8544;
}];
angular.module("chaperone.app").directive("clickRow", chaperone.ng.directive.chaperone_app_clickRow);
chaperone.ng.directive.chaperone_app_submitButton = [function() {
  var G__8548 = function() {
    var obj8551 = {};
    return obj8551;
  }();
  G__8548["templateUrl"] = "/public/directives/submit.html";
  G__8548["restrict"] = "E";
  return G__8548;
}];
angular.module("chaperone.app").directive("submitButton", chaperone.ng.directive.chaperone_app_submitButton);
goog.provide("chaperone.ng.directive_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.ng.directive");
goog.require("jayq.core");
goog.require("jayq.core");
test_helper.init_tests.call(null);
var spec_8943 = function() {
  var obj8942 = {};
  return obj8942;
}();
describe("Click Row Directive", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$compile", "$location", "$rootScope", function($compile, $location, $rootScope) {
    spec_8943["$compile"] = $compile;
    spec_8943["$rootScope"] = $rootScope;
    return spec_8943["$location"] = $location;
  }]));
  it("when using row-click directive, the path should be the href location when the row is clicked", function() {
    var table = function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_8943, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["$compile"];
      return fn_SHARP_.call(obj_SHARP_, "\x3ctable\x3e\x3ctbody\x3e\x3ctr click-row\x3e\x3ctd\x3e\x3ca href\x3d'/link'\x3elink\x3c/a\x3e\x3c/td\x3e\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e");
    }().call(null, purnam.native$.aget_in.call(null, spec_8943, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null)));
    var obj_SHARP__8944 = purnam.native$.aget_in.call(null, spec_8943, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null));
    var fn_SHARP__8945 = obj_SHARP__8944["$digest"];
    fn_SHARP__8945.call(obj_SHARP__8944);
    jayq.core.trigger.call(null, jayq.core.find.call(null, jayq.core.$.call(null, table), new cljs.core.Keyword(null, "tr", "tr", 1013907952)), new cljs.core.Keyword(null, "click", "click", 1108654330));
    return expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_8943, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$location"], null));
      var fn_SHARP_ = obj_SHARP_["path"];
      return fn_SHARP_.call(obj_SHARP_);
    }()).toSatisfy("/link", '(let [obj# (purnam.native/aget-in spec ["$location"]) fn# (aget obj# "path")] (.call fn# obj#))', "/link");
  });
  return null;
});
var spec_8948 = function() {
  var obj8947 = {};
  return obj8947;
}();
describe("Submit button directive", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$compile", "$rootScope", "$templateCache", function($compile, $rootScope, $templateCache) {
    spec_8948["$compile"] = $compile;
    spec_8948["$rootScope"] = $rootScope;
    return spec_8948["$templateCache"] = $templateCache;
  }]));
  it("should show a submit button with a glyph on it", function() {
    var submit = function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_8948, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["$compile"];
      return fn_SHARP_.call(obj_SHARP_, "\x3csubmit-button/\x3e");
    }().call(null, purnam.native$.aget_in.call(null, spec_8948, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null)));
    var obj_SHARP__8949 = purnam.native$.aget_in.call(null, spec_8948, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null));
    var fn_SHARP__8950 = obj_SHARP__8949["$digest"];
    fn_SHARP__8950.call(obj_SHARP__8949);
    var html = jayq.core.html.call(null, jayq.core.$.call(null, submit));
    expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, html, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["indexOf"];
      return fn_SHARP_.call(obj_SHARP_, '\x3cbutton type\x3d"submit"');
    }()).not.toSatisfy(-1, '(let [obj# (purnam.native/aget-in html []) fn# (aget obj# "indexOf")] (.call fn# obj# "\x3cbutton type\x3d\\"submit\\""))', "-1");
    return expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, html, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["indexOf"];
      return fn_SHARP_.call(obj_SHARP_, "glyphicon-floppy-save");
    }()).not.toSatisfy(-1, '(let [obj# (purnam.native/aget-in html []) fn# (aget obj# "indexOf")] (.call fn# obj# "glyphicon-floppy-save"))', "-1");
  });
  return null;
});
goog.provide("chaperone.websocket_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("test_helper");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.websocket");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.rpc");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.core");
goog.require("chaperone.core");
test_helper.init_tests.call(null);
var spec_8815 = function() {
  var obj8814 = {};
  return obj8814;
}();
describe("Websocket subsystem", function() {
  it("should have the websocket subsystem", function() {
    var system = chaperone.core.create_system.call(null, "localhost", 8080);
    return expect(cljs.core.map_QMARK_.call(null, chaperone.websocket.sub_system.call(null, system))).toSatisfy(true, "(map? (sub-system system))", "true");
  });
  return null;
});
var spec_8819 = function() {
  var obj8818 = {};
  return obj8818;
}();
var system_8820 = chaperone.core.create_system.call(null, "localhost", 8080);
var ws_system_8821 = chaperone.websocket.sub_system.call(null, system_8820);
var ws_chan_8822 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(ws_system_8821);
var rpc_map_8823 = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(ws_system_8821);
describe("Websocket RPC (Not started)", function() {
  it("Should take a RPC request, put it in the websocket channel, and setup the response channel handler", function() {
    var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "request-category", "request-category", 2279649774), new cljs.core.Keyword(null, "request-action", "request-action", 1648081574), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", 1014010321), "value"], null));
    var result = cljs.core.atom.call(null, false);
    cljs.core.async.take_BANG_.call(null, ws_chan_8822, function(p1__8816_SHARP_) {
      return cljs.core.reset_BANG_.call(null, result, p1__8816_SHARP_);
    });
    runs(function() {
      return chaperone.websocket.send_BANG_.call(null, ws_system_8821, request);
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, result);
    }, "No value placed in Websocket channel", 1E3);
    return runs(function() {
      return expect(cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, rpc_map_8823), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, result)))).toSatisfy(true, "(contains? (clojure.core/deref rpc-map) (:id (clojure.core/deref result)))", "true");
    });
  });
  return null;
});
var spec_8830 = function() {
  var obj8825 = {};
  return obj8825;
}();
var system_8831 = chaperone.websocket.start_BANG_.call(null, chaperone.core.create_system.call(null, "localhost", 8080));
var ws_system_8832 = chaperone.websocket.sub_system.call(null, system_8831);
var rpc_map_8833 = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(ws_system_8832);
var response_chan_8834 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(ws_system_8832);
var socket_8835 = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(ws_system_8832);
describe("Websocket RPC (Started)", function() {
  it("Should send back a response on the returned request channel, when a response is sent back", function() {
    var obj_SHARP__8836 = purnam.native$.aget_in.call(null, socket_8835, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP__8837 = obj_SHARP__8836["onopen"];
    fn_SHARP__8837.call(obj_SHARP__8836);
    var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "thing", "thing", 1124235360), new cljs.core.Keyword(null, "do-thing", "do-thing", 4623549598), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", 1014010321), "value"], null));
    var ws_complete = cljs.core.atom.call(null, false);
    var response = chaperone.crossover.rpc.new_response.call(null, request, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "data", "data", 1016980252), "oooer"], null));
    var response_result = cljs.core.atom.call(null, false);
    runs(function() {
      purnam.native$.aset_in.call(null, socket_8835, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["send"], null), function(v) {
        return cljs.core.reset_BANG_.call(null, ws_complete, v);
      });
      return cljs.core.async.take_BANG_.call(null, chaperone.websocket.send_BANG_.call(null, ws_system_8832, request), function(v) {
        return cljs.core.reset_BANG_.call(null, response_result, v);
      });
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, ws_complete);
    }, "No value placed in Websocket channel", 1E3);
    runs(function() {
      var socket__$1 = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(ws_system_8832);
      var obj_SHARP_ = purnam.native$.aget_in.call(null, socket__$1, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["onmessage"];
      return fn_SHARP_.call(obj_SHARP_, function() {
        var G__8826 = function() {
          var obj8829 = {};
          return obj8829;
        }();
        G__8826["data"] = cljs.core.pr_str.call(null, response);
        return G__8826;
      }());
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, response_result);
    }, "No value returned on RPC's channel", 1E3);
    return runs(function() {
      expect(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, response_result)), request)).toSatisfy(true, "(\x3d (-\x3e (clojure.core/deref response-result) :request) request)", "true");
      return expect(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, response_result)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "data", "data", 1016980252), "oooer"], null))).toSatisfy(true, '(\x3d (:data (clojure.core/deref response-result)) {:data "oooer"})', "true");
    });
  });
  return null;
});
goog.provide("purnam.types.clojure");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.types.clojure.obj_only = function obj_only(o, method) {
  if (cljs.core.type.call(null, o) === Object) {
    return null;
  } else {
    throw new TypeError([cljs.core.str(purnam.native$.js_type.call(null, o)), cljs.core.str(" does not implement '"), cljs.core.str(cljs.core.name.call(null, method)), cljs.core.str("'")].join(""));
  }
};
cljs.core.ISeqable["object"] = true;
cljs.core._seq["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "seq", "seq", 1014018001));
  return cljs.core.map.call(null, function(k) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, o, k)], null);
  }, cljs.core.js_keys.call(null, o));
};
cljs.core.ICounted["array"] = true;
cljs.core._count["array"] = function(a) {
  return a.length;
};
cljs.core.ICounted["object"] = true;
cljs.core._count["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "count", "count", 1108755585));
  return cljs.core.js_keys.call(null, o).length;
};
cljs.core.ILookup["array"] = true;
cljs.core._lookup["array"] = function() {
  var G__12486 = null;
  var G__12486__2 = function(a, k) {
    return purnam.native$.js_lookup.call(null, a, k);
  };
  var G__12486__3 = function(a, k, not_found) {
    return purnam.native$.js_lookup.call(null, a, k, not_found);
  };
  G__12486 = function(a, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12486__2.call(this, a, k);
      case 3:
        return G__12486__3.call(this, a, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12486;
}();
cljs.core.ILookup["object"] = true;
cljs.core._lookup["object"] = function() {
  var G__12487 = null;
  var G__12487__2 = function(o, k) {
    return purnam.native$.js_lookup.call(null, o, k);
  };
  var G__12487__3 = function(o, k, not_found) {
    return purnam.native$.js_lookup.call(null, o, k, not_found);
  };
  G__12487 = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12487__2.call(this, o, k);
      case 3:
        return G__12487__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12487;
}();
cljs.core.ITransientAssociative["array"] = true;
cljs.core._assoc_BANG_["array"] = function(o, i, v) {
  return purnam.native$.js_assoc.call(null, o, i, v);
};
cljs.core.ITransientAssociative["object"] = true;
cljs.core._assoc_BANG_["object"] = function(o, k, v) {
  return purnam.native$.js_assoc.call(null, o, k, v);
};
cljs.core.ITransientCollection["array"] = true;
cljs.core._conj_BANG_["array"] = function(a, v) {
  a.push(v);
  return a;
};
cljs.core._persistent_BANG_["array"] = function(a) {
  return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, a);
};
cljs.core.ITransientCollection["object"] = true;
cljs.core._conj_BANG_["object"] = function(o, p__12488) {
  var vec__12489 = p__12488;
  var k = cljs.core.nth.call(null, vec__12489, 0, null);
  var v = cljs.core.nth.call(null, vec__12489, 1, null);
  return purnam.native$.js_assoc.call(null, o, k, v);
};
cljs.core._persistent_BANG_["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "persistent!", "persistent!", 4015339484));
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__12490) {
    var vec__12491 = p__12490;
    var k = cljs.core.nth.call(null, vec__12491, 0, null);
    var v = cljs.core.nth.call(null, vec__12491, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
  }, o));
};
cljs.core.IEmptyableCollection["array"] = true;
cljs.core._empty["array"] = function(a) {
  return[];
};
cljs.core.IEmptyableCollection["object"] = true;
cljs.core._empty["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
  var obj12493 = {};
  return obj12493;
};
cljs.core.IAssociative["array"] = true;
cljs.core._assoc["array"] = function() {
  var G__12494__delegate = function(o, more) {
    return purnam.native$.js_copy_assoc.call(null, o, more);
  };
  var G__12494 = function(o, var_args) {
    var more = null;
    if (arguments.length > 1) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__12494__delegate.call(this, o, more);
  };
  G__12494.cljs$lang$maxFixedArity = 1;
  G__12494.cljs$lang$applyTo = function(arglist__12495) {
    var o = cljs.core.first(arglist__12495);
    var more = cljs.core.rest(arglist__12495);
    return G__12494__delegate(o, more);
  };
  G__12494.cljs$core$IFn$_invoke$arity$variadic = G__12494__delegate;
  return G__12494;
}();
cljs.core.IAssociative["object"] = true;
cljs.core._assoc["object"] = function() {
  var G__12496__delegate = function(o, more) {
    return purnam.native$.js_copy_assoc.call(null, o, more);
  };
  var G__12496 = function(o, var_args) {
    var more = null;
    if (arguments.length > 1) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__12496__delegate.call(this, o, more);
  };
  G__12496.cljs$lang$maxFixedArity = 1;
  G__12496.cljs$lang$applyTo = function(arglist__12497) {
    var o = cljs.core.first(arglist__12497);
    var more = cljs.core.rest(arglist__12497);
    return G__12496__delegate(o, more);
  };
  G__12496.cljs$core$IFn$_invoke$arity$variadic = G__12496__delegate;
  return G__12496;
}();
purnam.types.clojure.js_conj_object_BANG_ = function js_conj_object_BANG_(output, p__12498) {
  while (true) {
    var vec__12501 = p__12498;
    var vec__12502 = cljs.core.nth.call(null, vec__12501, 0, null);
    var k = cljs.core.nth.call(null, vec__12502, 0, null);
    var v = cljs.core.nth.call(null, vec__12502, 1, null);
    var ps = cljs.core.nthnext.call(null, vec__12501, 1);
    if (cljs.core.not.call(null, k)) {
      return output;
    } else {
      var G__12503 = purnam.native$.js_assoc.call(null, output, k, v);
      var G__12504 = ps;
      output = G__12503;
      p__12498 = G__12504;
      continue;
    }
    break;
  }
};
purnam.types.clojure.js_conj_array_BANG_ = function js_conj_array_BANG_(output, p__12505) {
  while (true) {
    var vec__12507 = p__12505;
    var v = cljs.core.nth.call(null, vec__12507, 0, null);
    var vs = cljs.core.nthnext.call(null, vec__12507, 1);
    if (cljs.core.not.call(null, v)) {
      return output;
    } else {
      var G__12508 = function() {
        output.push(v);
        return output;
      }();
      var G__12509 = vs;
      output = G__12508;
      p__12505 = G__12509;
      continue;
    }
    break;
  }
};
purnam.types.clojure.js_conj_object = function js_conj_object(parent, pairs) {
  var o = goog.object.clone(parent);
  return purnam.types.clojure.js_conj_object_BANG_.call(null, o, pairs);
};
purnam.types.clojure.js_conj_array = function js_conj_array(parent, values) {
  var a = goog.array.clone(parent);
  purnam.types.clojure.js_conj_array_BANG_.call(null, a, values);
  return a;
};
cljs.core.ICollection["array"] = true;
cljs.core._conj["array"] = function() {
  var G__12510__delegate = function(parent, values) {
    return purnam.types.clojure.js_conj_array.call(null, parent, values);
  };
  var G__12510 = function(parent, var_args) {
    var values = null;
    if (arguments.length > 1) {
      values = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__12510__delegate.call(this, parent, values);
  };
  G__12510.cljs$lang$maxFixedArity = 1;
  G__12510.cljs$lang$applyTo = function(arglist__12511) {
    var parent = cljs.core.first(arglist__12511);
    var values = cljs.core.rest(arglist__12511);
    return G__12510__delegate(parent, values);
  };
  G__12510.cljs$core$IFn$_invoke$arity$variadic = G__12510__delegate;
  return G__12510;
}();
cljs.core.ICollection["object"] = true;
cljs.core._conj["object"] = function() {
  var G__12512__delegate = function(parent, pairs) {
    return purnam.types.clojure.js_conj_object.call(null, parent, pairs);
  };
  var G__12512 = function(parent, var_args) {
    var pairs = null;
    if (arguments.length > 1) {
      pairs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__12512__delegate.call(this, parent, pairs);
  };
  G__12512.cljs$lang$maxFixedArity = 1;
  G__12512.cljs$lang$applyTo = function(arglist__12513) {
    var parent = cljs.core.first(arglist__12513);
    var pairs = cljs.core.rest(arglist__12513);
    return G__12512__delegate(parent, pairs);
  };
  G__12512.cljs$core$IFn$_invoke$arity$variadic = G__12512__delegate;
  return G__12512;
}();
cljs.core.ITransientMap["object"] = true;
cljs.core._dissoc_BANG_["object"] = function(o, k) {
  goog.object.remove(o, purnam.native$.js_strkey.call(null, k));
  return o;
};
cljs.core.IMap["object"] = true;
cljs.core._dissoc["object"] = function(parent, k) {
  purnam.types.clojure.obj_only.call(null, parent, new cljs.core.Keyword(null, "dissoc", "dissoc", 3977329067));
  var o = function() {
    var obj12515 = {};
    return obj12515;
  }();
  goog.object.extend(o, parent);
  return cljs.core.dissoc_BANG_.call(null, o, k);
};
cljs.core.IAssociative["object"] = true;
cljs.core._assoc["object"] = function(o, k, v) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "assoc", "assoc", 1107025799));
  return cljs.core.conj.call(null, o, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
};
goog.provide("chaperone.ng.messagebox");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("purnam.types.clojure");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("chaperone.ng.core");
chaperone.ng.messagebox.add_message_BANG_ = function add_message_BANG_($scope, $timeout, message) {
  var js_message = cljs.core.clj__GT_js.call(null, message);
  $scope.$apply(function() {
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), cljs.core.clj__GT_js.call(null, cljs.core.cons.call(null, js_message, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null)))));
  });
  return $timeout.call(null, function() {
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), cljs.core.clj__GT_js.call(null, cljs.core.remove.call(null, function(p1__8602_SHARP_) {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, angular, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["equals"];
      return fn_SHARP_.call(obj_SHARP_, js_message, p1__8602_SHARP_);
    }, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null)))));
  }, 4E3);
};
chaperone.ng.messagebox.start_message_queue_listening_BANG_ = function start_message_queue_listening_BANG_(system, $scope, $timeout) {
  var mb = chaperone.messagebox.sub_system.call(null, system);
  var queue = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(mb);
  var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5932__auto__ = function() {
      var switch__5881__auto__ = function(state_8647) {
        var state_val_8648 = state_8647[1];
        if (state_val_8648 === 8) {
          var inst_8639 = state_8647[2];
          var inst_8634 = inst_8639;
          var state_8647__$1 = function() {
            var statearr_8649 = state_8647;
            statearr_8649[5] = inst_8634;
            return statearr_8649;
          }();
          var statearr_8650_8661 = state_8647__$1;
          statearr_8650_8661[2] = null;
          statearr_8650_8661[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_8648 === 7) {
            var inst_8643 = state_8647[2];
            var state_8647__$1 = state_8647;
            var statearr_8651_8662 = state_8647__$1;
            statearr_8651_8662[2] = inst_8643;
            statearr_8651_8662[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_8648 === 6) {
              var state_8647__$1 = state_8647;
              var statearr_8652_8663 = state_8647__$1;
              statearr_8652_8663[2] = null;
              statearr_8652_8663[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_8648 === 5) {
                var state_8647__$1 = state_8647;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8647__$1, 8, queue);
              } else {
                if (state_val_8648 === 4) {
                  var inst_8645 = state_8647[2];
                  var state_8647__$1 = state_8647;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8647__$1, inst_8645);
                } else {
                  if (state_val_8648 === 3) {
                    var inst_8634 = state_8647[5];
                    var inst_8636 = chaperone.ng.messagebox.add_message_BANG_.call(null, $scope, $timeout, inst_8634);
                    var state_8647__$1 = function() {
                      var statearr_8653 = state_8647;
                      statearr_8653[6] = inst_8636;
                      return statearr_8653;
                    }();
                    if (cljs.core.truth_(inst_8634)) {
                      var statearr_8654_8664 = state_8647__$1;
                      statearr_8654_8664[1] = 5;
                    } else {
                      var statearr_8655_8665 = state_8647__$1;
                      statearr_8655_8665[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_8648 === 2) {
                      var inst_8633 = state_8647[2];
                      var inst_8634 = inst_8633;
                      var state_8647__$1 = function() {
                        var statearr_8656 = state_8647;
                        statearr_8656[5] = inst_8634;
                        return statearr_8656;
                      }();
                      var statearr_8657_8666 = state_8647__$1;
                      statearr_8657_8666[2] = null;
                      statearr_8657_8666[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_8648 === 1) {
                        var state_8647__$1 = state_8647;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8647__$1, 2, queue);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5881__auto__) {
        return function() {
          var state_machine__5882__auto__ = null;
          var state_machine__5882__auto____0 = function() {
            var statearr_8659 = [null, null, null, null, null, null, null];
            statearr_8659[0] = state_machine__5882__auto__;
            statearr_8659[1] = 1;
            return statearr_8659;
          };
          var state_machine__5882__auto____1 = function(state_8647) {
            while (true) {
              var result__5883__auto__ = switch__5881__auto__.call(null, state_8647);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5883__auto__;
              }
              break;
            }
          };
          state_machine__5882__auto__ = function(state_8647) {
            switch(arguments.length) {
              case 0:
                return state_machine__5882__auto____0.call(this);
              case 1:
                return state_machine__5882__auto____1.call(this, state_8647);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
          state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
          return state_machine__5882__auto__;
        }();
      }(switch__5881__auto__);
    }();
    var state__5933__auto__ = function() {
      var statearr_8660 = f__5932__auto__.call(null);
      statearr_8660[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
      return statearr_8660;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
  });
  return c__5931__auto__;
};
chaperone.ng.messagebox.chaperone_app_MessageBoxCtrl = ["$scope", "$timeout", "System", function($scope, $timeout, System) {
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["init"], null), function() {
    purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), []);
    return chaperone.ng.messagebox.start_message_queue_listening_BANG_.call(null, System, $scope, $timeout);
  });
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messageClass"], null), function(level) {
    return[cljs.core.str("alert-"), cljs.core.str(level)].join("");
  });
}];
angular.module("chaperone.app").controller("MessageBoxCtrl", chaperone.ng.messagebox.chaperone_app_MessageBoxCtrl);
goog.provide("chaperone.ng.messagebox_test");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("purnam.types.clojure");
goog.require("chaperone.ng.messagebox");
test_helper.init_tests.call(null);
var spec_8912 = function() {
  var obj8899 = {};
  return obj8899;
}();
describe("MessageBoxCtrl", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["System", "$controller", "$timeout", "$rootScope", function(System, $controller, $timeout, $rootScope) {
    spec_8912["$scope"] = $controller.call(null, "MessageBoxCtrl", function() {
      var G__8900 = function() {
        var obj8903 = {};
        return obj8903;
      }();
      G__8900["$scope"] = function() {
        var obj_SHARP_ = purnam.native$.aget_in.call(null, $rootScope, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP_ = obj_SHARP_["$new"];
        return fn_SHARP_.call(obj_SHARP_);
      }();
      return G__8900;
    }());
    spec_8912["System"] = System;
    return spec_8912["$timeout"] = $timeout;
  }]));
  it("Should have an empty array in scope on init", function() {
    var obj_SHARP__8913 = purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__8914 = obj_SHARP__8913["init"];
    fn_SHARP__8914.call(obj_SHARP__8913);
    return expect(purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
  });
  it("should put the message in the array when it is added", function() {
    var obj_SHARP__8915 = purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__8916 = obj_SHARP__8915["init"];
    fn_SHARP__8916.call(obj_SHARP__8915);
    runs(function() {
      expect(purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return!cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)));
    }, "Messages doesn't get the message", 1E3);
    runs(function() {
      expect(cljs.core.first.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(function() {
        var G__8904 = function() {
          var obj8907 = {};
          return obj8907;
        }();
        G__8904["message"] = "Hello World!";
        G__8904["level"] = "info";
        return G__8904;
      }(), '(first (purnam.native/aget-in spec ["$scope" "messages"]))', '(obj :level "info" :message "Hello World!")');
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "warning", "warning", 2138350350), "Hello World!");
    });
    waitsFor(function() {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))), 2);
    }, "Messages should have a second message", 1E3);
    return runs(function() {
      return expect(cljs.core.first.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(function() {
        var G__8908 = function() {
          var obj8911 = {};
          return obj8911;
        }();
        G__8908["message"] = "Hello World!";
        G__8908["level"] = "warning";
        return G__8908;
      }(), '(first (purnam.native/aget-in spec ["$scope" "messages"]))', '(obj :level "warning" :message "Hello World!")');
    });
  });
  it("should remove a message from the array after 4 seconds", function() {
    var obj_SHARP__8917 = purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__8918 = obj_SHARP__8917["init"];
    fn_SHARP__8918.call(obj_SHARP__8917);
    runs(function() {
      expect(purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return!cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)));
    }, "Messages doesn't get the message", 1E3);
    return runs(function() {
      var obj_SHARP__8919 = purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$timeout"], null));
      var fn_SHARP__8920 = obj_SHARP__8919["flush"];
      fn_SHARP__8920.call(obj_SHARP__8919);
      return expect(cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(true, '(empty? (purnam.native/aget-in spec ["$scope" "messages"]))', "true");
    });
  });
  it("should return the correct class for a messagebox by it's level", function() {
    return expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_8912, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP_ = obj_SHARP_["messageClass"];
      return fn_SHARP_.call(obj_SHARP_, "success");
    }()).toSatisfy("alert-success", '(let [obj# (purnam.native/aget-in spec ["$scope"]) fn# (aget obj# "messageClass")] (.call fn# obj# "success"))', "alert-success");
  });
  return null;
});
goog.provide("chaperone.messagebox_test");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("chaperone.messagebox");
goog.require("test_helper");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.messagebox");
goog.require("chaperone.core");
goog.require("chaperone.core");
test_helper.init_tests.call(null);
var spec_8812 = function() {
  var obj8811 = {};
  return obj8811;
}();
describe("Message queuing", function() {
  it("should put a message in the queue", function() {
    var system = chaperone.core.create_system.call(null, "localhost", 80);
    var mb = chaperone.messagebox.sub_system.call(null, system);
    var chan = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(mb);
    var result = cljs.core.atom.call(null, false);
    runs(function() {
      cljs.core.async.take_BANG_.call(null, chan, function(p1__8809_SHARP_) {
        return cljs.core.reset_BANG_.call(null, result, p1__8809_SHARP_);
      });
      return chaperone.messagebox.send_message_BANG_.call(null, mb, new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, result);
    }, "No value in the message queue", 2E3);
    return runs(function() {
      return expect(cljs.core.deref.call(null, result)).toSatisfy(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "level", "level", 1116770038), new cljs.core.Keyword(null, "info", "info", 1017141280), new cljs.core.Keyword(null, "message", "message", 1968829305), "Hello World!"], null), "(clojure.core/deref result)", '{:level :info, :message "Hello World!"}');
    });
  });
  return null;
});
goog.provide("chaperone.rpc");
goog.require("cljs.core");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
chaperone.rpc.send_request = function send_request(system, category, action, data) {
  var request = chaperone.crossover.rpc.new_request.call(null, category, action, data);
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  return chaperone.websocket.send_BANG_.call(null, web_socket, request);
};
goog.provide("chaperone.user");
goog.require("cljs.core");
goog.require("chaperone.crossover.user.User");
goog.require("chaperone.rpc");
goog.require("chaperone.rpc");
chaperone.user.save_user = function save_user(system, user) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "save", "save", 1017427183), user);
};
chaperone.user.list_users = function list_users(system) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "list", "list", 1017226256), cljs.core.PersistentArrayMap.EMPTY);
};
chaperone.user.get_user_by_id = function get_user_by_id(system, id) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "load", "load", 1017231448), id);
};
goog.provide("chaperone.ng.core_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.core");
test_helper.init_tests.call(null);
var spec_8897 = function() {
  var obj8896 = {};
  return obj8896;
}();
describe("Test the System service factory", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["System", function(System) {
    return spec_8897["System"] = System;
  }]));
  it("Should be a map", function() {
    return expect(cljs.core.map_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_8897, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null)))).toSatisfy(true, '(map? (purnam.native/aget-in spec ["System"]))', "true");
  });
  it("Should have a websocket key", function() {
    return expect(cljs.core.contains_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_8897, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null)), new cljs.core.Keyword(null, "websocket", "websocket", 784338745))).toSatisfy(true, '(contains? (purnam.native/aget-in spec ["System"]) :websocket)', "true");
  });
  return null;
});
goog.provide("chaperone.ng.admin.user");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("chaperone.messagebox");
goog.require("chaperone.crossover.user");
goog.require("chaperone.messagebox");
goog.require("chaperone.ng.core");
goog.require("chaperone.crossover.user");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("purnam.native$");
goog.require("chaperone.ng.core");
chaperone.ng.admin.user.chaperone_app_AdminUserCtrl = ["$scope", "$location", "$routeParams", "System", function($scope, $location, $routeParams, System) {
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initAddUserForm"], null), function() {
    var user = chaperone.crossover.user.new_user.call(null, "", "", "", "");
    purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null), user);
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user));
  });
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initEditUserForm"], null), function() {
    var chan = chaperone.user.get_user_by_id.call(null, System, purnam.native$.aget_in.call(null, $routeParams, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["id"], null)));
    var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_8558) {
          var state_val_8559 = state_8558[1];
          if (state_val_8559 === 2) {
            var inst_8553 = state_8558[2];
            var inst_8554 = (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(inst_8553);
            var inst_8555 = function() {
              var user = inst_8554;
              var response = inst_8553;
              return function(user, response, inst_8553, inst_8554, state_val_8559) {
                return function() {
                  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null), user);
                  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user));
                };
              }(user, response, inst_8553, inst_8554, state_val_8559);
            }();
            var inst_8556 = $scope.$apply(inst_8555);
            var state_8558__$1 = state_8558;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8558__$1, inst_8556);
          } else {
            if (state_val_8559 === 1) {
              var state_8558__$1 = state_8558;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8558__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_8561 = [null, null, null, null, null];
              statearr_8561[0] = state_machine__5882__auto__;
              statearr_8561[1] = 1;
              return statearr_8561;
            };
            var state_machine__5882__auto____1 = function(state_8558) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_8558);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_8558) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_8558);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_8562 = f__5932__auto__.call(null);
        statearr_8562[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
        return statearr_8562;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return c__5931__auto__;
  });
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["saveUser"], null), function() {
    var data = cljs.core.merge.call(null, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null)), cljs.core.js__GT_clj.call(null, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null)), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true));
    var user = chaperone.crossover.user.map__GT_User.call(null, data);
    var chan = chaperone.user.save_user.call(null, System, user);
    var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_8570) {
          var state_val_8571 = state_8570[1];
          if (state_val_8571 === 2) {
            var inst_8564 = state_8570[2];
            var inst_8565 = chaperone.messagebox.sub_system.call(null, System);
            var inst_8566 = chaperone.messagebox.send_message_BANG_.call(null, inst_8565, new cljs.core.Keyword(null, "success", "success", 3441701749), "User has been saved successfully");
            var inst_8567 = function() {
              var mb = inst_8565;
              var result = inst_8564;
              return function(mb, result, inst_8564, inst_8565, inst_8566, state_val_8571) {
                return function() {
                  var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
                  var fn_SHARP_ = obj_SHARP_["path"];
                  return fn_SHARP_.call(obj_SHARP_, "/admin/users/list");
                };
              }(mb, result, inst_8564, inst_8565, inst_8566, state_val_8571);
            }();
            var inst_8568 = $scope.$apply(inst_8567);
            var state_8570__$1 = function() {
              var statearr_8572 = state_8570;
              statearr_8572[5] = inst_8566;
              return statearr_8572;
            }();
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8570__$1, inst_8568);
          } else {
            if (state_val_8571 === 1) {
              var state_8570__$1 = state_8570;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8570__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_8574 = [null, null, null, null, null, null];
              statearr_8574[0] = state_machine__5882__auto__;
              statearr_8574[1] = 1;
              return statearr_8574;
            };
            var state_machine__5882__auto____1 = function(state_8570) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_8570);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_8570) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_8570);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_8575 = f__5932__auto__.call(null);
        statearr_8575[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
        return statearr_8575;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return c__5931__auto__;
  });
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initListUsers"], null), function() {
    var chan = chaperone.user.list_users.call(null, System);
    var c__5931__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5932__auto__ = function() {
        var switch__5881__auto__ = function(state_8581) {
          var state_val_8582 = state_8581[1];
          if (state_val_8582 === 2) {
            var inst_8577 = state_8581[2];
            var inst_8578 = function() {
              var result = inst_8577;
              return function(result, inst_8577, state_val_8582) {
                return function() {
                  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["userList"], null), cljs.core.clj__GT_js.call(null, (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(result)));
                };
              }(result, inst_8577, state_val_8582);
            }();
            var inst_8579 = $scope.$apply(inst_8578);
            var state_8581__$1 = state_8581;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_8581__$1, inst_8579);
          } else {
            if (state_val_8582 === 1) {
              var state_8581__$1 = state_8581;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_8581__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5881__auto__) {
          return function() {
            var state_machine__5882__auto__ = null;
            var state_machine__5882__auto____0 = function() {
              var statearr_8584 = [null, null, null, null, null];
              statearr_8584[0] = state_machine__5882__auto__;
              statearr_8584[1] = 1;
              return statearr_8584;
            };
            var state_machine__5882__auto____1 = function(state_8581) {
              while (true) {
                var result__5883__auto__ = switch__5881__auto__.call(null, state_8581);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5883__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5883__auto__;
                }
                break;
              }
            };
            state_machine__5882__auto__ = function(state_8581) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5882__auto____0.call(this);
                case 1:
                  return state_machine__5882__auto____1.call(this, state_8581);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5882__auto____0;
            state_machine__5882__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5882__auto____1;
            return state_machine__5882__auto__;
          }();
        }(switch__5881__auto__);
      }();
      var state__5933__auto__ = function() {
        var statearr_8585 = f__5932__auto__.call(null);
        statearr_8585[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5931__auto__;
        return statearr_8585;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5933__auto__);
    });
    return c__5931__auto__;
  });
}];
angular.module("chaperone.app").controller("AdminUserCtrl", chaperone.ng.admin.user.chaperone_app_AdminUserCtrl);
goog.provide("chaperone.core_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.core");
goog.require("chaperone.core");
goog.require("purnam.native$");
goog.require("test_helper");
test_helper.init_tests.call(null);
var spec_8788 = function() {
  var obj8787 = {};
  return obj8787;
}();
describe("Create the system", function() {
  it("Should return a map", function() {
    return expect(true).toSatisfy(cljs.core.map_QMARK_.call(null, chaperone.core.create_system.call(null, "localhost", 80)), "true", '(map? (create-system "localhost" 80))');
  });
  return null;
});
goog.provide("chaperone.ng.admin.user_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("test_helper");
goog.require("chaperone.user");
goog.require("chaperone.ng.admin.user");
goog.require("test_helper");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.user");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.admin.user");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.user");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("purnam.native$");
test_helper.init_tests.call(null);
var spec_8930 = function() {
  var obj8922 = {};
  return obj8922;
}();
describe("Testing AdminUserCtrl", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$controller", "$routeParams", "$location", "$rootScope", function($controller, $routeParams, $location, $rootScope) {
    spec_8930["$scope"] = $controller.call(null, "AdminUserCtrl", function() {
      var G__8923 = function() {
        var obj8926 = {};
        return obj8926;
      }();
      G__8923["$scope"] = function() {
        var obj_SHARP_ = purnam.native$.aget_in.call(null, $rootScope, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP_ = obj_SHARP_["$new"];
        return fn_SHARP_.call(obj_SHARP_);
      }();
      G__8923["$location"] = $location;
      return G__8923;
    }());
    spec_8930["$location"] = $location;
    return spec_8930["$routeParams"] = $routeParams;
  }]));
  it("Should create a new user into scope, when a non existent usersid is used", function() {
    var obj_SHARP__8931 = purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__8932 = obj_SHARP__8931["initAddUserForm"];
    fn_SHARP__8932.call(obj_SHARP__8931);
    expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "firstname"])', "");
    expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "lastname"])', "");
    expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "email"])', "");
    return expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "password"])', "");
  });
  it("Should change the location when a user is saved", function() {
    var obj_SHARP__8933 = purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__8934 = obj_SHARP__8933["initAddUserForm"];
    fn_SHARP__8934.call(obj_SHARP__8933);
    purnam.native$.aset_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null), "John");
    purnam.native$.aset_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null), "Doe");
    purnam.native$.aset_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null), "email@email.com");
    purnam.native$.aset_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null), "password");
    var ws_chan = cljs.core.async.chan.call(null);
    var save_user8927 = chaperone.user.save_user;
    try {
      chaperone.user.save_user = function(system, user) {
        return ws_chan;
      };
      var obj_SHARP__8935 = purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__8936 = obj_SHARP__8935["saveUser"];
      fn_SHARP__8936.call(obj_SHARP__8935);
      runs(function() {
        return cljs.core.async.put_BANG_.call(null, ws_chan, cljs.core.PersistentArrayMap.EMPTY);
      });
      return waitsFor(function() {
        return cljs.core._EQ_.call(null, function() {
          var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$location"], null));
          var fn_SHARP_ = obj_SHARP_["path"];
          return fn_SHARP_.call(obj_SHARP_);
        }(), "/admin/users/list");
      }, "Location never gets set", 1E3);
    } finally {
      chaperone.user.save_user = save_user8927;
    }
  });
  it("Should load a list of users in scope", function() {
    var ws_chan = cljs.core.async.chan.call(null);
    var list_users8928 = chaperone.user.list_users;
    try {
      chaperone.user.list_users = function(system) {
        cljs.core.async.put_BANG_.call(null, ws_chan, chaperone.crossover.rpc.new_response.call(null, chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "list", "list", 1017226256), cljs.core.PersistentArrayMap.EMPTY), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [chaperone.crossover.user.new_user.call(null, "M", "M", "E", "P")], null)));
        return ws_chan;
      };
      var obj_SHARP__8937 = purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__8938 = obj_SHARP__8937["initListUsers"];
      fn_SHARP__8938.call(obj_SHARP__8937);
      waitsFor(function() {
        return purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList"], null));
      }, "User list never gets set", 1E3);
      return runs(function() {
        expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "length"], null))).toSatisfy(1, '(purnam.native/aget-in spec ["$scope" "userList" "length"])', "1");
        expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "firstname"], null))).toSatisfy("M", '(purnam.native/aget-in spec ["$scope" "userList" "0" "firstname"])', "M");
        expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "lastname"], null))).toSatisfy("M", '(purnam.native/aget-in spec ["$scope" "userList" "0" "lastname"])', "M");
        expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "email"], null))).toSatisfy("E", '(purnam.native/aget-in spec ["$scope" "userList" "0" "email"])', "E");
        return expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "password"], null))).toSatisfy("P", '(purnam.native/aget-in spec ["$scope" "userList" "0" "password"])', "P");
      });
    } finally {
      chaperone.user.list_users = list_users8928;
    }
  });
  it("Should load a user of a specific id", function() {
    var ws_chan = cljs.core.async.chan.call(null);
    var test_user = chaperone.crossover.user.new_user.call(null, "M", "M", "E", "P");
    purnam.native$.aset_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$routeParams", "id"], null), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user));
    var get_user_by_id8929 = chaperone.user.get_user_by_id;
    try {
      chaperone.user.get_user_by_id = function(system, id) {
        cljs.core.async.put_BANG_.call(null, ws_chan, chaperone.crossover.rpc.new_response.call(null, chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "load", "load", 1017231448), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user)), test_user));
        return ws_chan;
      };
      var obj_SHARP__8939 = purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__8940 = obj_SHARP__8939["initEditUserForm"];
      fn_SHARP__8940.call(obj_SHARP__8939);
      waitsFor(function() {
        return purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user"], null));
      }, "User never gets set ", 1E3);
      return runs(function() {
        expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "id"], null))).toSatisfy((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "id"])', "(:id test-user)");
        expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null))).toSatisfy((new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "firstname"])', "(:firstname test-user)");
        expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null))).toSatisfy((new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "lastname"])', "(:lastname test-user)");
        return expect(purnam.native$.aget_in.call(null, spec_8930, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null))).toSatisfy((new cljs.core.Keyword(null, "email", "email", 1110523662)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "email"])', "(:email test-user)");
      });
    } finally {
      chaperone.user.get_user_by_id = get_user_by_id8929;
    }
  });
  return null;
});

//# sourceMappingURL=main.js.map