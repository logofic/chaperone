var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while(namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if(goog.getObjectByName(namespace)) {
        break
      }
      goog.implicitNamespaces_[namespace] = true
    }
  }
  goog.exportPath_(name)
};
goog.setTestOnly = function(opt_message) {
  if(COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if(!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name)
  };
  goog.implicitNamespaces_ = {}
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if(!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0])
  }
  for(var part;parts.length && (part = parts.shift());) {
    if(!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object
    }else {
      if(cur[part]) {
        cur = cur[part]
      }else {
        cur = cur[part] = {}
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for(var part;part = parts.shift();) {
    if(goog.isDefAndNotNull(cur[part])) {
      cur = cur[part]
    }else {
      return null
    }
  }
  return cur
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for(var x in obj) {
    global[x] = obj[x]
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if(!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for(var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if(!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {}
      }
      deps.pathToNames[path][provide] = true
    }
    for(var j = 0;require = requires[j];j++) {
      if(!(path in deps.requires)) {
        deps.requires[path] = {}
      }
      deps.requires[path][require] = true
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      return
    }
    if(goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if(path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if(goog.global.console) {
      goog.global.console["error"](errorMessage)
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if(ctor.instance_) {
      return ctor.instance_
    }
    if(goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor
    }
    return ctor.instance_ = new ctor
  }
};
goog.instantiatedSingletons_ = [];
if(!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc
  };
  goog.findBasePath_ = function() {
    if(goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return
    }else {
      if(!goog.inHtmlDocument_()) {
        return
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for(var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if(src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if(!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true
    }
  };
  goog.writeScriptTag_ = function(src) {
    if(goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if(doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if(isDeps) {
          return false
        }else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true
    }else {
      return false
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if(path in deps.written) {
        return
      }
      if(path in deps.visited) {
        if(!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path)
        }
        return
      }
      deps.visited[path] = true;
      if(path in deps.requires) {
        for(var requireName in deps.requires[path]) {
          if(!goog.isProvided_(requireName)) {
            if(requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName])
            }else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if(!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path)
      }
    }
    for(var path in goog.included_) {
      if(!deps.written[path]) {
        visitNode(path)
      }
    }
    for(var i = 0;i < scripts.length;i++) {
      if(scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i])
      }else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if(rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule]
    }else {
      return null
    }
  };
  goog.findBasePath_();
  if(!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js")
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if(s == "object") {
    if(value) {
      if(value instanceof Array) {
        return"array"
      }else {
        if(value instanceof Object) {
          return s
        }
      }
      var className = Object.prototype.toString.call(value);
      if(className == "[object Window]") {
        return"object"
      }
      if(className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return"array"
      }
      if(className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if(s == "function" && typeof value.call == "undefined") {
      return"object"
    }
  }
  return s
};
goog.isDef = function(val) {
  return val !== undefined
};
goog.isNull = function(val) {
  return val === null
};
goog.isDefAndNotNull = function(val) {
  return val != null
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array"
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number"
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function"
};
goog.isString = function(val) {
  return typeof val == "string"
};
goog.isBoolean = function(val) {
  return typeof val == "boolean"
};
goog.isNumber = function(val) {
  return typeof val == "number"
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function"
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function"
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(obj) {
  if("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_)
  }
  try {
    delete obj[goog.UID_PROPERTY_]
  }catch(ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.cloneObject(obj[key])
    }
    return clone
  }
  return obj
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return fn.call.apply(fn.bind, arguments)
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if(!fn) {
    throw new Error;
  }
  if(arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs)
    }
  }else {
    return function() {
      return fn.apply(selfObj, arguments)
    }
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if(Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_
  }else {
    goog.bind = goog.bindJs_
  }
  return goog.bind.apply(null, arguments)
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs)
  }
};
goog.mixin = function(target, source) {
  for(var x in source) {
    target[x] = source[x]
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date
};
goog.globalEval = function(script) {
  if(goog.global.execScript) {
    goog.global.execScript(script, "JavaScript")
  }else {
    if(goog.global.eval) {
      if(goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if(typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true
        }else {
          goog.evalWorksForGlobals_ = false
        }
      }
      if(goog.evalWorksForGlobals_) {
        goog.global.eval(script)
      }else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt)
      }
    }else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for(var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]))
    }
    return mapped.join("-")
  };
  var rename;
  if(goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts
  }else {
    rename = function(a) {
      return a
    }
  }
  if(opt_modifier) {
    return className + "-" + rename(opt_modifier)
  }else {
    return rename(className)
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if(!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for(var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value)
  }
  return str
};
goog.getMsgWithFallback = function(a, b) {
  return a
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo)
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if(caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1))
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for(var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if(ctor.prototype[opt_methodName] === caller) {
      foundCaller = true
    }else {
      if(foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args)
      }
    }
  }
  if(me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args)
  }else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global)
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0
};
goog.string.subs = function(str, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement)
  }
  return str
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "")
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str)
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str))
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str)
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str)
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str)
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str)
};
goog.string.isSpace = function(ch) {
  return ch == " "
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd"
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ")
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n")
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ")
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ")
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "")
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "")
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "")
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "")
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if(test1 < test2) {
    return-1
  }else {
    if(test1 == test2) {
      return 0
    }else {
      return 1
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if(str1 == str2) {
    return 0
  }
  if(!str1) {
    return-1
  }
  if(!str2) {
    return 1
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for(var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if(a != b) {
      var num1 = parseInt(a, 10);
      if(!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if(!isNaN(num2) && num1 - num2) {
          return num1 - num2
        }
      }
      return a < b ? -1 : 1
    }
  }
  if(tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length
  }
  return str1 < str2 ? -1 : 1
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str))
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "))
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "<br />" : "<br>")
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if(opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "&amp;").replace(goog.string.ltRe_, "&lt;").replace(goog.string.gtRe_, "&gt;").replace(goog.string.quotRe_, "&quot;")
  }else {
    if(!goog.string.allRe_.test(str)) {
      return str
    }
    if(str.indexOf("&") != -1) {
      str = str.replace(goog.string.amperRe_, "&amp;")
    }
    if(str.indexOf("<") != -1) {
      str = str.replace(goog.string.ltRe_, "&lt;")
    }
    if(str.indexOf(">") != -1) {
      str = str.replace(goog.string.gtRe_, "&gt;")
    }
    if(str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "&quot;")
    }
    return str
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if(goog.string.contains(str, "&")) {
    if("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str)
    }else {
      return goog.string.unescapePureXmlEntities_(str)
    }
  }
  return str
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"&amp;":"&", "&lt;":"<", "&gt;":">", "&quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if(value) {
      return value
    }
    if(entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if(!isNaN(n)) {
        value = String.fromCharCode(n)
      }
    }
    if(!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1)
    }
    return seen[s] = value
  })
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return"&";
      case "lt":
        return"<";
      case "gt":
        return">";
      case "quot":
        return'"';
      default:
        if(entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if(!isNaN(n)) {
            return String.fromCharCode(n)
          }
        }
        return s
    }
  })
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " &#160;"), opt_xml)
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for(var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if(str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1)
    }
  }
  return str
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(str.length > chars) {
    str = str.substring(0, chars - 3) + "..."
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(opt_trailingChars && str.length > chars) {
    if(opt_trailingChars > chars) {
      opt_trailingChars = chars
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint)
  }else {
    if(str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos)
    }
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\u0008":"\\b", "\u000c":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\u000b":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if(s.quote) {
    return s.quote()
  }else {
    var sb = ['"'];
    for(var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch))
    }
    sb.push('"');
    return sb.join("")
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for(var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i))
  }
  return sb.join("")
};
goog.string.escapeChar = function(c) {
  if(c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c]
  }
  if(c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c]
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if(cc > 31 && cc < 127) {
    rv = c
  }else {
    if(cc < 256) {
      rv = "\\x";
      if(cc < 16 || cc > 256) {
        rv += "0"
      }
    }else {
      rv = "\\u";
      if(cc < 4096) {
        rv += "0"
      }
    }
    rv += cc.toString(16).toUpperCase()
  }
  return goog.string.jsEscapeCache_[c] = rv
};
goog.string.toMap = function(s) {
  var rv = {};
  for(var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true
  }
  return rv
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if(index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength)
  }
  return resultStr
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "")
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "")
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string)
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if(index == -1) {
    index = s.length
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj)
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "")
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36)
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for(var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if(v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2])
    }while(order == 0)
  }
  return order
};
goog.string.compareElements_ = function(left, right) {
  if(left < right) {
    return-1
  }else {
    if(left > right) {
      return 1
    }
  }
  return 0
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for(var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_
  }
  return result
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return"goog_" + goog.string.uniqueStringCounter_++
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if(num == 0 && goog.string.isEmpty(str)) {
    return NaN
  }
  return num
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  })
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase()
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase()
  })
};
goog.string.parseInt = function(value) {
  if(isFinite(value)) {
    value = String(value)
  }
  if(goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10)
  }
  return NaN
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if(Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error)
  }else {
    this.stack = (new Error).stack || ""
  }
  if(opt_msg) {
    this.message = String(opt_msg)
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if(givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs
  }else {
    if(defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return condition
};
goog.asserts.fail = function(opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3))
  }
  return value
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1]
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.indexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i < arr.length;i++) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if(fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex)
  }
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.lastIndexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i >= 0;i--) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;--i) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      var val = arr2[i];
      if(f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val
      }
    }
  }
  return res
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr)
    }
  }
  return res
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if(arr.reduce) {
    if(opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduce(f, val)
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if(arr.reduceRight) {
    if(opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduceRight(f, val)
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true
    }
  }
  return false
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false
    }
  }
  return true
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if(f.call(opt_obj, element, index, arr)) {
      ++count
    }
  }, opt_obj);
  return count
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;i--) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0
};
goog.array.clear = function(arr) {
  if(!goog.isArray(arr)) {
    for(var i = arr.length - 1;i >= 0;i--) {
      delete arr[i]
    }
  }
  arr.length = 0
};
goog.array.insert = function(arr, obj) {
  if(!goog.array.contains(arr, obj)) {
    arr.push(obj)
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj)
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if(arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj)
  }else {
    goog.array.insertAt(arr, obj, i)
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if(rv = i >= 0) {
    goog.array.removeAt(arr, i)
  }
  return rv
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if(i >= 0) {
    goog.array.removeAt(arr, i);
    return true
  }
  return false
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments)
};
goog.array.toArray = function(object) {
  var length = object.length;
  if(length > 0) {
    var rv = new Array(length);
    for(var i = 0;i < length;i++) {
      rv[i] = object[i]
    }
    return rv
  }
  return[]
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if(goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2)
    }else {
      if(isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for(var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j]
        }
      }else {
        arr1.push(arr2)
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1))
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if(arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start)
  }else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end)
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while(cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if(!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current
    }
  }
  returnArray.length = cursorInsert
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target)
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj)
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while(left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if(isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr)
    }else {
      compareResult = compareFn(opt_target, arr[middle])
    }
    if(compareResult > 0) {
      left = middle + 1
    }else {
      right = middle;
      found = !compareResult
    }
  }
  return found ? left : ~left
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare)
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for(var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]}
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
  }
  goog.array.sort(arr, stableCompareFn);
  for(var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key])
  })
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for(var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if(compareResult > 0 || compareResult == 0 && opt_strict) {
      return false
    }
  }
  return true
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if(!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for(var i = 0;i < l;i++) {
    if(!equalsFn(arr1[i], arr2[i])) {
      return false
    }
  }
  return true
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn)
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for(var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if(result != 0) {
      return result
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length)
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if(index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true
  }
  return false
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for(var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if(goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value)
    }
  }
  return buckets
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element
  });
  return ret
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if(opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end
  }
  if(step * (end - start) < 0) {
    return[]
  }
  if(step > 0) {
    for(var i = start;i < end;i += step) {
      array.push(i)
    }
  }else {
    for(var i = start;i > end;i += step) {
      array.push(i)
    }
  }
  return array
};
goog.array.repeat = function(value, n) {
  var array = [];
  for(var i = 0;i < n;i++) {
    array[i] = value
  }
  return array
};
goog.array.flatten = function(var_args) {
  var result = [];
  for(var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if(goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element))
    }else {
      result.push(element)
    }
  }
  return result
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if(array.length) {
    n %= array.length;
    if(n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n))
    }else {
      if(n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n))
      }
    }
  }
  return array
};
goog.array.zip = function(var_args) {
  if(!arguments.length) {
    return[]
  }
  var result = [];
  for(var i = 0;true;i++) {
    var value = [];
    for(var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if(i >= arr.length) {
        return result
      }
      value.push(arr[i])
    }
    result.push(value)
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for(var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for(var key in obj) {
    f.call(opt_obj, obj[key], key, obj)
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key]
    }
  }
  return res
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj)
  }
  return res
};
goog.object.some = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      return true
    }
  }
  return false
};
goog.object.every = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(!f.call(opt_obj, obj[key], key, obj)) {
      return false
    }
  }
  return true
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for(var key in obj) {
    rv++
  }
  return rv
};
goog.object.getAnyKey = function(obj) {
  for(var key in obj) {
    return key
  }
};
goog.object.getAnyValue = function(obj) {
  for(var key in obj) {
    return obj[key]
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val)
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = obj[key]
  }
  return res
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = key
  }
  return res
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for(var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if(!goog.isDef(obj)) {
      break
    }
  }
  return obj
};
goog.object.containsKey = function(obj, key) {
  return key in obj
};
goog.object.containsValue = function(obj, val) {
  for(var key in obj) {
    if(obj[key] == val) {
      return true
    }
  }
  return false
};
goog.object.findKey = function(obj, f, opt_this) {
  for(var key in obj) {
    if(f.call(opt_this, obj[key], key, obj)) {
      return key
    }
  }
  return undefined
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key]
};
goog.object.isEmpty = function(obj) {
  for(var key in obj) {
    return false
  }
  return true
};
goog.object.clear = function(obj) {
  for(var i in obj) {
    delete obj[i]
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if(rv = key in obj) {
    delete obj[key]
  }
  return rv
};
goog.object.add = function(obj, key, val) {
  if(key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val)
};
goog.object.get = function(obj, key, opt_val) {
  if(key in obj) {
    return obj[key]
  }
  return opt_val
};
goog.object.set = function(obj, key, value) {
  obj[key] = value
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value
};
goog.object.clone = function(obj) {
  var res = {};
  for(var key in obj) {
    res[key] = obj[key]
  }
  return res
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key])
    }
    return clone
  }
  return obj
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for(var key in obj) {
    transposed[obj[key]] = key
  }
  return transposed
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for(var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for(key in source) {
      target[key] = source[key]
    }
    for(var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if(Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key]
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0])
  }
  if(argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for(var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1]
  }
  return rv
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0])
  }
  var rv = {};
  for(var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true
  }
  return rv
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if(Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result)
  }
  return result
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj)
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if(opt_a1 != null) {
    this.append.apply(this, arguments)
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if(opt_a2 != null) {
    for(var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i]
    }
  }
  return this
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = ""
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2080";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null)
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__105523__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args))
    };
    var G__105523 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__105523__delegate.call(this, args)
    };
    G__105523.cljs$lang$maxFixedArity = 0;
    G__105523.cljs$lang$applyTo = function(arglist__105524) {
      var args = cljs.core.seq(arglist__105524);
      return G__105523__delegate(args)
    };
    G__105523.cljs$core$IFn$_invoke$arity$variadic = G__105523__delegate;
    return G__105523
  }()
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number"
};
cljs.core.not = function not(x) {
  if(cljs.core.truth_(x)) {
    return false
  }else {
    return true
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x)
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if(p[goog.typeOf(x__$1)]) {
    return true
  }else {
    if(p["_"]) {
      return true
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false
      }else {
        return null
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if(x == null) {
    return null
  }else {
    return x.constructor
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3273__auto__ = ty;
    if(cljs.core.truth_(and__3273__auto__)) {
      return ty.cljs$lang$type
    }else {
      return and__3273__auto__
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""))
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if(cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s
  }else {
    return[cljs.core.str(ty)].join("")
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size)
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size)
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4108__auto___105525 = len;
  var i_105526 = 0;
  while(true) {
    if(i_105526 < n__4108__auto___105525) {
      new_arr[i_105526] = arr[i_105526];
      var G__105527 = i_105526 + 1;
      i_105526 = G__105527;
      continue
    }else {
    }
    break
  }
  return new_arr
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments)
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i]
  };
  var aget__3 = function() {
    var G__105528__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs)
    };
    var G__105528 = function(array, i, var_args) {
      var idxs = null;
      if(arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105528__delegate.call(this, array, i, idxs)
    };
    G__105528.cljs$lang$maxFixedArity = 2;
    G__105528.cljs$lang$applyTo = function(arglist__105529) {
      var array = cljs.core.first(arglist__105529);
      arglist__105529 = cljs.core.next(arglist__105529);
      var i = cljs.core.first(arglist__105529);
      var idxs = cljs.core.rest(arglist__105529);
      return G__105528__delegate(array, i, idxs)
    };
    G__105528.cljs$core$IFn$_invoke$arity$variadic = G__105528__delegate;
    return G__105528
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val
  };
  var aset__4 = function() {
    var G__105530__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv)
    };
    var G__105530 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if(arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__105530__delegate.call(this, array, idx, idx2, idxv)
    };
    G__105530.cljs$lang$maxFixedArity = 3;
    G__105530.cljs$lang$applyTo = function(arglist__105531) {
      var array = cljs.core.first(arglist__105531);
      arglist__105531 = cljs.core.next(arglist__105531);
      var idx = cljs.core.first(arglist__105531);
      arglist__105531 = cljs.core.next(arglist__105531);
      var idx2 = cljs.core.first(arglist__105531);
      var idxv = cljs.core.rest(arglist__105531);
      return G__105530__delegate(array, idx, idx2, idxv)
    };
    G__105530.cljs$core$IFn$_invoke$arity$variadic = G__105530__delegate;
    return G__105530
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset
}();
cljs.core.alength = function alength(array) {
  return array.length
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq)
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a
    }, [], aseq)
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array
}();
cljs.core.Fn = function() {
  var obj105533 = {};
  return obj105533
}();
cljs.core.IFn = function() {
  var obj105535 = {};
  return obj105535
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$)
    }
  };
  var _invoke__2 = function(this$, a) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a)
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b)
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c)
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d)
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e)
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f)
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g)
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h)
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i)
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j)
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k)
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke
}();
cljs.core.ICounted = function() {
  var obj105537 = {};
  return obj105537
}();
cljs.core._count = function _count(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._count[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._count["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj105539 = {};
  return obj105539
}();
cljs.core._empty = function _empty(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._empty[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._empty["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ICollection = function() {
  var obj105541 = {};
  return obj105541
}();
cljs.core._conj = function _conj(coll, o) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._conj[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._conj["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o)
  }
};
cljs.core.IIndexed = function() {
  var obj105543 = {};
  return obj105543
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if(function() {
      var and__3273__auto__ = coll;
      if(and__3273__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
    }else {
      var x__3888__auto__ = coll == null ? null : coll;
      return function() {
        var or__3285__auto__ = cljs.core._nth[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._nth["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n)
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if(function() {
      var and__3273__auto__ = coll;
      if(and__3273__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3
      }else {
        return and__3273__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found)
    }else {
      var x__3888__auto__ = coll == null ? null : coll;
      return function() {
        var or__3285__auto__ = cljs.core._nth[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._nth["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found)
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth
}();
cljs.core.ASeq = function() {
  var obj105545 = {};
  return obj105545
}();
cljs.core.ISeq = function() {
  var obj105547 = {};
  return obj105547
}();
cljs.core._first = function _first(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._first[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._first["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._rest = function _rest(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._rest[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._rest["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INext = function() {
  var obj105549 = {};
  return obj105549
}();
cljs.core._next = function _next(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$INext$_next$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._next[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._next["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ILookup = function() {
  var obj105551 = {};
  return obj105551
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if(function() {
      var and__3273__auto__ = o;
      if(and__3273__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k)
    }else {
      var x__3888__auto__ = o == null ? null : o;
      return function() {
        var or__3285__auto__ = cljs.core._lookup[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._lookup["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k)
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if(function() {
      var and__3273__auto__ = o;
      if(and__3273__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3
      }else {
        return and__3273__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found)
    }else {
      var x__3888__auto__ = o == null ? null : o;
      return function() {
        var or__3285__auto__ = cljs.core._lookup[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._lookup["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found)
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup
}();
cljs.core.IAssociative = function() {
  var obj105553 = {};
  return obj105553
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._assoc[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._assoc["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v)
  }
};
cljs.core.IMap = function() {
  var obj105555 = {};
  return obj105555
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._dissoc[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._dissoc["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core.IMapEntry = function() {
  var obj105557 = {};
  return obj105557
}();
cljs.core._key = function _key(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._key[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._key["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._val = function _val(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._val[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._val["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISet = function() {
  var obj105559 = {};
  return obj105559
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._disjoin[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._disjoin["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v)
  }
};
cljs.core.IStack = function() {
  var obj105561 = {};
  return obj105561
}();
cljs.core._peek = function _peek(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._peek[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._peek["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._pop = function _pop(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._pop[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._pop["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IVector = function() {
  var obj105563 = {};
  return obj105563
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._assoc_n[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._assoc_n["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val)
  }
};
cljs.core.IDeref = function() {
  var obj105565 = {};
  return obj105565
}();
cljs.core._deref = function _deref(o) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._deref[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._deref["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj105567 = {};
  return obj105567
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._deref_with_timeout["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val)
  }
};
cljs.core.IMeta = function() {
  var obj105569 = {};
  return obj105569
}();
cljs.core._meta = function _meta(o) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._meta[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._meta["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IWithMeta = function() {
  var obj105571 = {};
  return obj105571
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._with_meta[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._with_meta["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta)
  }
};
cljs.core.IReduce = function() {
  var obj105573 = {};
  return obj105573
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if(function() {
      var and__3273__auto__ = coll;
      if(and__3273__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f)
    }else {
      var x__3888__auto__ = coll == null ? null : coll;
      return function() {
        var or__3285__auto__ = cljs.core._reduce[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._reduce["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f)
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if(function() {
      var and__3273__auto__ = coll;
      if(and__3273__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3
      }else {
        return and__3273__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start)
    }else {
      var x__3888__auto__ = coll == null ? null : coll;
      return function() {
        var or__3285__auto__ = cljs.core._reduce[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._reduce["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start)
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce
}();
cljs.core.IKVReduce = function() {
  var obj105575 = {};
  return obj105575
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._kv_reduce[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._kv_reduce["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init)
  }
};
cljs.core.IEquiv = function() {
  var obj105577 = {};
  return obj105577
}();
cljs.core._equiv = function _equiv(o, other) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._equiv[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._equiv["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other)
  }
};
cljs.core.IHash = function() {
  var obj105579 = {};
  return obj105579
}();
cljs.core._hash = function _hash(o) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IHash$_hash$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._hash[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._hash["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISeqable = function() {
  var obj105581 = {};
  return obj105581
}();
cljs.core._seq = function _seq(o) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._seq[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._seq["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISequential = function() {
  var obj105583 = {};
  return obj105583
}();
cljs.core.IList = function() {
  var obj105585 = {};
  return obj105585
}();
cljs.core.IRecord = function() {
  var obj105587 = {};
  return obj105587
}();
cljs.core.IReversible = function() {
  var obj105589 = {};
  return obj105589
}();
cljs.core._rseq = function _rseq(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._rseq[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._rseq["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISorted = function() {
  var obj105591 = {};
  return obj105591
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._sorted_seq[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._sorted_seq["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_)
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._sorted_seq_from["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_)
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._entry_key[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._entry_key["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry)
  }
};
cljs.core._comparator = function _comparator(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._comparator[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._comparator["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IWriter = function() {
  var obj105593 = {};
  return obj105593
}();
cljs.core._write = function _write(writer, s) {
  if(function() {
    var and__3273__auto__ = writer;
    if(and__3273__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s)
  }else {
    var x__3888__auto__ = writer == null ? null : writer;
    return function() {
      var or__3285__auto__ = cljs.core._write[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._write["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s)
  }
};
cljs.core._flush = function _flush(writer) {
  if(function() {
    var and__3273__auto__ = writer;
    if(and__3273__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer)
  }else {
    var x__3888__auto__ = writer == null ? null : writer;
    return function() {
      var or__3285__auto__ = cljs.core._flush[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._flush["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer)
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj105595 = {};
  return obj105595
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._pr_writer[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._pr_writer["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts)
  }
};
cljs.core.IPending = function() {
  var obj105597 = {};
  return obj105597
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if(function() {
    var and__3273__auto__ = d;
    if(and__3273__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d)
  }else {
    var x__3888__auto__ = d == null ? null : d;
    return function() {
      var or__3285__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._realized_QMARK_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d)
  }
};
cljs.core.IWatchable = function() {
  var obj105599 = {};
  return obj105599
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if(function() {
    var and__3273__auto__ = this$;
    if(and__3273__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval)
  }else {
    var x__3888__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3285__auto__ = cljs.core._notify_watches[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._notify_watches["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval)
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if(function() {
    var and__3273__auto__ = this$;
    if(and__3273__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f)
  }else {
    var x__3888__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3285__auto__ = cljs.core._add_watch[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._add_watch["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f)
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if(function() {
    var and__3273__auto__ = this$;
    if(and__3273__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key)
  }else {
    var x__3888__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3285__auto__ = cljs.core._remove_watch[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._remove_watch["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key)
  }
};
cljs.core.IEditableCollection = function() {
  var obj105601 = {};
  return obj105601
}();
cljs.core._as_transient = function _as_transient(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._as_transient[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._as_transient["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ITransientCollection = function() {
  var obj105603 = {};
  return obj105603
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._conj_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val)
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._persistent_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientAssociative = function() {
  var obj105605 = {};
  return obj105605
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._assoc_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val)
  }
};
cljs.core.ITransientMap = function() {
  var obj105607 = {};
  return obj105607
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key)
  }
};
cljs.core.ITransientVector = function() {
  var obj105609 = {};
  return obj105609
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val)
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._pop_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientSet = function() {
  var obj105611 = {};
  return obj105611
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v)
  }
};
cljs.core.IComparable = function() {
  var obj105613 = {};
  return obj105613
}();
cljs.core._compare = function _compare(x, y) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._compare[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._compare["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y)
  }
};
cljs.core.IChunk = function() {
  var obj105615 = {};
  return obj105615
}();
cljs.core._drop_first = function _drop_first(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._drop_first[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._drop_first["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedSeq = function() {
  var obj105617 = {};
  return obj105617
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._chunked_first[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._chunked_first["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._chunked_rest[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._chunked_rest["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedNext = function() {
  var obj105619 = {};
  return obj105619
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._chunked_next[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._chunked_next["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INamed = function() {
  var obj105621 = {};
  return obj105621
}();
cljs.core._name = function _name(x) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$INamed$_name$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._name[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._name["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._namespace = function _namespace(x) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._namespace[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._namespace["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s)
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb)
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("")
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name))
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if(cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0
  }else {
    if(cljs.core.truth_(function() {
      var and__3273__auto__ = cljs.core.not.call(null, a.ns);
      if(and__3273__auto__) {
        return b.ns
      }else {
        return and__3273__auto__
      }
    }())) {
      return-1
    }else {
      if(cljs.core.truth_(a.ns)) {
        if(cljs.core.not.call(null, b.ns)) {
          return 1
        }else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if(nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name)
          }else {
            return nsc
          }
        }
      }else {
        if(new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Symbol")
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str)
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3696__auto__ = self__._hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta)
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta
};
cljs.core.Symbol.prototype.call = function() {
  var G__105623 = null;
  var G__105623__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null)
  };
  var G__105623__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found)
  };
  G__105623 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__105623__2.call(this, self__, coll);
      case 3:
        return G__105623__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__105623
}();
cljs.core.Symbol.prototype.apply = function(self__, args105622) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args105622)))
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null)
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found)
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if(other instanceof cljs.core.Symbol) {
    return self__.str === other.str
  }else {
    return false
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta)
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if(name instanceof cljs.core.Symbol) {
      return name
    }else {
      return symbol.call(null, null, name)
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null)
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol
}();
cljs.core.seq = function seq(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__105625 = coll;
      if(G__105625) {
        var bit__3904__auto__ = G__105625.cljs$lang$protocol_mask$partition0$ & 8388608;
        if(bit__3904__auto__ || G__105625.cljs$core$ISeqable$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._seq.call(null, coll)
    }else {
      if(coll instanceof Array) {
        if(coll.length === 0) {
          return null
        }else {
          return new cljs.core.IndexedSeq(coll, 0)
        }
      }else {
        if(typeof coll === "string") {
          if(coll.length === 0) {
            return null
          }else {
            return new cljs.core.IndexedSeq(coll, 0)
          }
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__105627 = coll;
      if(G__105627) {
        var bit__3904__auto__ = G__105627.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__3904__auto__ || G__105627.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._first.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s == null) {
        return null
      }else {
        return cljs.core._first.call(null, s)
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__105629 = coll;
      if(G__105629) {
        var bit__3904__auto__ = G__105629.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__3904__auto__ || G__105629.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._rest.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s) {
        return cljs.core._rest.call(null, s)
      }else {
        return cljs.core.List.EMPTY
      }
    }
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.next = function next(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__105631 = coll;
      if(G__105631) {
        var bit__3904__auto__ = G__105631.cljs$lang$protocol_mask$partition0$ & 128;
        if(bit__3904__auto__ || G__105631.cljs$core$INext$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._next.call(null, coll)
    }else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll))
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true
  };
  var _EQ___2 = function(x, y) {
    return x === y || cljs.core._equiv.call(null, x, y)
  };
  var _EQ___3 = function() {
    var G__105632__delegate = function(x, y, more) {
      while(true) {
        if(_EQ_.call(null, x, y)) {
          if(cljs.core.next.call(null, more)) {
            var G__105633 = y;
            var G__105634 = cljs.core.first.call(null, more);
            var G__105635 = cljs.core.next.call(null, more);
            x = G__105633;
            y = G__105634;
            more = G__105635;
            continue
          }else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__105632 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105632__delegate.call(this, x, y, more)
    };
    G__105632.cljs$lang$maxFixedArity = 2;
    G__105632.cljs$lang$applyTo = function(arglist__105636) {
      var x = cljs.core.first(arglist__105636);
      arglist__105636 = cljs.core.next(arglist__105636);
      var y = cljs.core.first(arglist__105636);
      var more = cljs.core.rest(arglist__105636);
      return G__105632__delegate(x, y, more)
    };
    G__105632.cljs$core$IFn$_invoke$arity$variadic = G__105632__delegate;
    return G__105632
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_
}();
cljs.core.IHash["null"] = true;
cljs.core._hash["null"] = function(o) {
  return 0
};
cljs.core.INext["null"] = true;
cljs.core._next["null"] = function(_) {
  return null
};
cljs.core.IKVReduce["null"] = true;
cljs.core._kv_reduce["null"] = function(_, f, init) {
  return init
};
cljs.core.ISet["null"] = true;
cljs.core._disjoin["null"] = function(_, v) {
  return null
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0
};
cljs.core.IStack["null"] = true;
cljs.core._peek["null"] = function(_) {
  return null
};
cljs.core._pop["null"] = function(_) {
  return null
};
cljs.core.IEquiv["null"] = true;
cljs.core._equiv["null"] = function(_, o) {
  return o == null
};
cljs.core.IWithMeta["null"] = true;
cljs.core._with_meta["null"] = function(_, meta) {
  return null
};
cljs.core.IMeta["null"] = true;
cljs.core._meta["null"] = function(_) {
  return null
};
cljs.core.IEmptyableCollection["null"] = true;
cljs.core._empty["null"] = function(_) {
  return null
};
cljs.core.IMap["null"] = true;
cljs.core._dissoc["null"] = function(_, k) {
  return null
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString()
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o)
};
cljs.core.inc = function inc(x) {
  return x + 1
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Reduced")
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val)
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x)
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if(cnt === 0) {
      return f.call(null)
    }else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__105637 = nval;
            var G__105638 = n + 1;
            val = G__105637;
            n = G__105638;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__105639 = nval;
          var G__105640 = n + 1;
          val__$1 = G__105639;
          n = G__105640;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__105641 = nval;
          var G__105642 = n + 1;
          val__$1 = G__105641;
          n = G__105642;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if(arr.length === 0) {
      return f.call(null)
    }else {
      var val = arr[0];
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__105643 = nval;
            var G__105644 = n + 1;
            val = G__105643;
            n = G__105644;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__105645 = nval;
          var G__105646 = n + 1;
          val__$1 = G__105645;
          n = G__105646;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__105647 = nval;
          var G__105648 = n + 1;
          val__$1 = G__105647;
          n = G__105648;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__105650 = x;
  if(G__105650) {
    var bit__3911__auto__ = G__105650.cljs$lang$protocol_mask$partition0$ & 2;
    if(bit__3911__auto__ || G__105650.cljs$core$ICounted$) {
      return true
    }else {
      if(!G__105650.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__105650)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__105650)
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__105652 = x;
  if(G__105652) {
    var bit__3911__auto__ = G__105652.cljs$lang$protocol_mask$partition0$ & 16;
    if(bit__3911__auto__ || G__105652.cljs$core$IIndexed$) {
      return true
    }else {
      if(!G__105652.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__105652)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__105652)
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if(c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i)
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i]
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.arr.length) {
    return self__.arr[i__$1]
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.arr.length) {
    return self__.arr[i__$1]
  }else {
    return not_found
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i)
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0)
  };
  var prim_seq__2 = function(prim, i) {
    if(i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i)
    }else {
      return null
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0)
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i)
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/RSeq")
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1)
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1)
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i)
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null)
  }else {
    return null
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta)
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta)
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll))
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll))
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll))
};
cljs.core.last = function last(s) {
  while(true) {
    var sn = cljs.core.next.call(null, s);
    if(!(sn == null)) {
      var G__105653 = sn;
      s = G__105653;
      continue
    }else {
      return cljs.core.first.call(null, s)
    }
    break
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if(!(coll == null)) {
      return cljs.core._conj.call(null, coll, x)
    }else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x)
    }
  };
  var conj__3 = function() {
    var G__105654__delegate = function(coll, x, xs) {
      while(true) {
        if(cljs.core.truth_(xs)) {
          var G__105655 = conj.call(null, coll, x);
          var G__105656 = cljs.core.first.call(null, xs);
          var G__105657 = cljs.core.next.call(null, xs);
          coll = G__105655;
          x = G__105656;
          xs = G__105657;
          continue
        }else {
          return conj.call(null, coll, x)
        }
        break
      }
    };
    var G__105654 = function(coll, x, var_args) {
      var xs = null;
      if(arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105654__delegate.call(this, coll, x, xs)
    };
    G__105654.cljs$lang$maxFixedArity = 2;
    G__105654.cljs$lang$applyTo = function(arglist__105658) {
      var coll = cljs.core.first(arglist__105658);
      arglist__105658 = cljs.core.next(arglist__105658);
      var x = cljs.core.first(arglist__105658);
      var xs = cljs.core.rest(arglist__105658);
      return G__105654__delegate(coll, x, xs)
    };
    G__105654.cljs$core$IFn$_invoke$arity$variadic = G__105654__delegate;
    return G__105654
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj
}();
cljs.core.empty = function empty(coll) {
  return cljs.core._empty.call(null, coll)
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while(true) {
    if(cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s)
    }else {
      var G__105659 = cljs.core.next.call(null, s);
      var G__105660 = acc + 1;
      s = G__105659;
      acc = G__105660;
      continue
    }
    break
  }
};
cljs.core.count = function count(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__105662 = coll;
      if(G__105662) {
        var bit__3904__auto__ = G__105662.cljs$lang$protocol_mask$partition0$ & 2;
        if(bit__3904__auto__ || G__105662.cljs$core$ICounted$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._count.call(null, coll)
    }else {
      if(coll instanceof Array) {
        return coll.length
      }else {
        if(typeof coll === "string") {
          return coll.length
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  }else {
    return 0
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while(true) {
      if(coll == null) {
        throw new Error("Index out of bounds");
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            throw new Error("Index out of bounds");
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__105663 = cljs.core.next.call(null, coll);
              var G__105664 = n - 1;
              coll = G__105663;
              n = G__105664;
              continue
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while(true) {
      if(coll == null) {
        return not_found
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            return not_found
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__105665 = cljs.core.next.call(null, coll);
              var G__105666 = n - 1;
              var G__105667 = not_found;
              coll = G__105665;
              n = G__105666;
              not_found = G__105667;
              continue
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if(coll == null) {
      return null
    }else {
      if(function() {
        var G__105672 = coll;
        if(G__105672) {
          var bit__3904__auto__ = G__105672.cljs$lang$protocol_mask$partition0$ & 16;
          if(bit__3904__auto__ || G__105672.cljs$core$IIndexed$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._nth.call(null, coll, n)
      }else {
        if(coll instanceof Array) {
          if(n < coll.length) {
            return coll[n]
          }else {
            return null
          }
        }else {
          if(typeof coll === "string") {
            if(n < coll.length) {
              return coll[n]
            }else {
              return null
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if(function() {
                  var G__105673 = coll;
                  if(G__105673) {
                    var bit__3911__auto__ = G__105673.cljs$lang$protocol_mask$partition0$ & 64;
                    if(bit__3911__auto__ || G__105673.cljs$core$ISeq$) {
                      return true
                    }else {
                      if(!G__105673.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__105673)
                      }else {
                        return false
                      }
                    }
                  }else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__105673)
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n)
                }else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }else {
                return null
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if(!(coll == null)) {
      if(function() {
        var G__105674 = coll;
        if(G__105674) {
          var bit__3904__auto__ = G__105674.cljs$lang$protocol_mask$partition0$ & 16;
          if(bit__3904__auto__ || G__105674.cljs$core$IIndexed$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found)
      }else {
        if(coll instanceof Array) {
          if(n < coll.length) {
            return coll[n]
          }else {
            return not_found
          }
        }else {
          if(typeof coll === "string") {
            if(n < coll.length) {
              return coll[n]
            }else {
              return not_found
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if(function() {
                  var G__105675 = coll;
                  if(G__105675) {
                    var bit__3911__auto__ = G__105675.cljs$lang$protocol_mask$partition0$ & 64;
                    if(bit__3911__auto__ || G__105675.cljs$core$ISeq$) {
                      return true
                    }else {
                      if(!G__105675.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__105675)
                      }else {
                        return false
                      }
                    }
                  }else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__105675)
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found)
                }else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }else {
                return null
              }
            }
          }
        }
      }
    }else {
      return not_found
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if(o == null) {
      return null
    }else {
      if(function() {
        var G__105678 = o;
        if(G__105678) {
          var bit__3904__auto__ = G__105678.cljs$lang$protocol_mask$partition0$ & 256;
          if(bit__3904__auto__ || G__105678.cljs$core$ILookup$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._lookup.call(null, o, k)
      }else {
        if(o instanceof Array) {
          if(k < o.length) {
            return o[k]
          }else {
            return null
          }
        }else {
          if(typeof o === "string") {
            if(k < o.length) {
              return o[k]
            }else {
              return null
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null
              }else {
                return null
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if(!(o == null)) {
      if(function() {
        var G__105679 = o;
        if(G__105679) {
          var bit__3904__auto__ = G__105679.cljs$lang$protocol_mask$partition0$ & 256;
          if(bit__3904__auto__ || G__105679.cljs$core$ILookup$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found)
      }else {
        if(o instanceof Array) {
          if(k < o.length) {
            return o[k]
          }else {
            return not_found
          }
        }else {
          if(typeof o === "string") {
            if(k < o.length) {
              return o[k]
            }else {
              return not_found
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
    }else {
      return not_found
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if(!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v)
    }else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v])
    }
  };
  var assoc__4 = function() {
    var G__105680__delegate = function(coll, k, v, kvs) {
      while(true) {
        var ret = assoc.call(null, coll, k, v);
        if(cljs.core.truth_(kvs)) {
          var G__105681 = ret;
          var G__105682 = cljs.core.first.call(null, kvs);
          var G__105683 = cljs.core.second.call(null, kvs);
          var G__105684 = cljs.core.nnext.call(null, kvs);
          coll = G__105681;
          k = G__105682;
          v = G__105683;
          kvs = G__105684;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__105680 = function(coll, k, v, var_args) {
      var kvs = null;
      if(arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__105680__delegate.call(this, coll, k, v, kvs)
    };
    G__105680.cljs$lang$maxFixedArity = 3;
    G__105680.cljs$lang$applyTo = function(arglist__105685) {
      var coll = cljs.core.first(arglist__105685);
      arglist__105685 = cljs.core.next(arglist__105685);
      var k = cljs.core.first(arglist__105685);
      arglist__105685 = cljs.core.next(arglist__105685);
      var v = cljs.core.first(arglist__105685);
      var kvs = cljs.core.rest(arglist__105685);
      return G__105680__delegate(coll, k, v, kvs)
    };
    G__105680.cljs$core$IFn$_invoke$arity$variadic = G__105680__delegate;
    return G__105680
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll
  };
  var dissoc__2 = function(coll, k) {
    return cljs.core._dissoc.call(null, coll, k)
  };
  var dissoc__3 = function() {
    var G__105686__delegate = function(coll, k, ks) {
      while(true) {
        var ret = dissoc.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__105687 = ret;
          var G__105688 = cljs.core.first.call(null, ks);
          var G__105689 = cljs.core.next.call(null, ks);
          coll = G__105687;
          k = G__105688;
          ks = G__105689;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__105686 = function(coll, k, var_args) {
      var ks = null;
      if(arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105686__delegate.call(this, coll, k, ks)
    };
    G__105686.cljs$lang$maxFixedArity = 2;
    G__105686.cljs$lang$applyTo = function(arglist__105690) {
      var coll = cljs.core.first(arglist__105690);
      arglist__105690 = cljs.core.next(arglist__105690);
      var k = cljs.core.first(arglist__105690);
      var ks = cljs.core.rest(arglist__105690);
      return G__105686__delegate(coll, k, ks)
    };
    G__105686.cljs$core$IFn$_invoke$arity$variadic = G__105686__delegate;
    return G__105686
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3285__auto__ = goog.isFunction(f);
  if(or__3285__auto__) {
    return or__3285__auto__
  }else {
    var G__105694 = f;
    if(G__105694) {
      var bit__3911__auto__ = null;
      if(cljs.core.truth_(function() {
        var or__3285__auto____$1 = bit__3911__auto__;
        if(cljs.core.truth_(or__3285__auto____$1)) {
          return or__3285__auto____$1
        }else {
          return G__105694.cljs$core$Fn$
        }
      }())) {
        return true
      }else {
        if(!G__105694.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__105694)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__105694)
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if(cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__105702 = o;
    if(G__105702) {
      var bit__3911__auto__ = G__105702.cljs$lang$protocol_mask$partition0$ & 262144;
      if(bit__3911__auto__ || G__105702.cljs$core$IWithMeta$) {
        return true
      }else {
        if(!G__105702.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__105702)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__105702)
    }
  }()) {
    return with_meta.call(null, function() {
      if(typeof cljs.core.t105703 !== "undefined") {
      }else {
        cljs.core.t105703 = function(meta, o, with_meta, meta105704) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta105704 = meta105704;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217
        };
        cljs.core.t105703.cljs$lang$type = true;
        cljs.core.t105703.cljs$lang$ctorStr = "cljs.core/t105703";
        cljs.core.t105703.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
          return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/t105703")
        };
        cljs.core.t105703.prototype.call = function() {
          var G__105707__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args)
          };
          var G__105707 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if(arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
            }
            return G__105707__delegate.call(this, self__, args)
          };
          G__105707.cljs$lang$maxFixedArity = 1;
          G__105707.cljs$lang$applyTo = function(arglist__105708) {
            var self__ = cljs.core.first(arglist__105708);
            var args = cljs.core.rest(arglist__105708);
            return G__105707__delegate(self__, args)
          };
          G__105707.cljs$core$IFn$_invoke$arity$variadic = G__105707__delegate;
          return G__105707
        }();
        cljs.core.t105703.prototype.apply = function(self__, args105706) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args105706)))
        };
        cljs.core.t105703.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__105709__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args)
          };
          var G__105709 = function(var_args) {
            var self__ = this;
            var args = null;
            if(arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
            }
            return G__105709__delegate.call(this, args)
          };
          G__105709.cljs$lang$maxFixedArity = 0;
          G__105709.cljs$lang$applyTo = function(arglist__105710) {
            var args = cljs.core.seq(arglist__105710);
            return G__105709__delegate(args)
          };
          G__105709.cljs$core$IFn$_invoke$arity$variadic = G__105709__delegate;
          return G__105709
        }();
        cljs.core.t105703.prototype.cljs$core$Fn$ = true;
        cljs.core.t105703.prototype.cljs$core$IMeta$_meta$arity$1 = function(_105705) {
          var self__ = this;
          var _105705__$1 = this;
          return self__.meta105704
        };
        cljs.core.t105703.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_105705, meta105704__$1) {
          var self__ = this;
          var _105705__$1 = this;
          return new cljs.core.t105703(self__.meta, self__.o, self__.with_meta, meta105704__$1)
        };
        cljs.core.__GT_t105703 = function __GT_t105703(meta__$1, o__$1, with_meta__$1, meta105704) {
          return new cljs.core.t105703(meta__$1, o__$1, with_meta__$1, meta105704)
        }
      }
      return new cljs.core.t105703(meta, o, with_meta, null)
    }(), meta)
  }else {
    return cljs.core._with_meta.call(null, o, meta)
  }
};
cljs.core.meta = function meta(o) {
  if(function() {
    var G__105712 = o;
    if(G__105712) {
      var bit__3911__auto__ = G__105712.cljs$lang$protocol_mask$partition0$ & 131072;
      if(bit__3911__auto__ || G__105712.cljs$core$IMeta$) {
        return true
      }else {
        if(!G__105712.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__105712)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__105712)
    }
  }()) {
    return cljs.core._meta.call(null, o)
  }else {
    return null
  }
};
cljs.core.peek = function peek(coll) {
  return cljs.core._peek.call(null, coll)
};
cljs.core.pop = function pop(coll) {
  return cljs.core._pop.call(null, coll)
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll
  };
  var disj__2 = function(coll, k) {
    return cljs.core._disjoin.call(null, coll, k)
  };
  var disj__3 = function() {
    var G__105713__delegate = function(coll, k, ks) {
      while(true) {
        var ret = disj.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__105714 = ret;
          var G__105715 = cljs.core.first.call(null, ks);
          var G__105716 = cljs.core.next.call(null, ks);
          coll = G__105714;
          k = G__105715;
          ks = G__105716;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__105713 = function(coll, k, var_args) {
      var ks = null;
      if(arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105713__delegate.call(this, coll, k, ks)
    };
    G__105713.cljs$lang$maxFixedArity = 2;
    G__105713.cljs$lang$applyTo = function(arglist__105717) {
      var coll = cljs.core.first(arglist__105717);
      arglist__105717 = cljs.core.next(arglist__105717);
      var k = cljs.core.first(arglist__105717);
      var ks = cljs.core.rest(arglist__105717);
      return G__105713__delegate(coll, k, ks)
    };
    G__105713.cljs$core$IFn$_invoke$arity$variadic = G__105713__delegate;
    return G__105713
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj
}();
cljs.core.string_hash_cache = function() {
  var obj105719 = {};
  return obj105719
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if(cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj105723 = {};
      return obj105723
    }();
    cljs.core.string_hash_cache_count = 0
  }else {
  }
  var h = cljs.core.string_hash_cache[k];
  if(typeof h === "number") {
    return h
  }else {
    return cljs.core.add_to_string_hash_cache.call(null, k)
  }
};
cljs.core.hash = function hash(o) {
  if(function() {
    var G__105725 = o;
    if(G__105725) {
      var bit__3904__auto__ = G__105725.cljs$lang$protocol_mask$partition0$ & 4194304;
      if(bit__3904__auto__ || G__105725.cljs$core$IHash$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._hash.call(null, o)
  }else {
    if(typeof o === "number") {
      return Math.floor(o) % 2147483647
    }else {
      if(o === true) {
        return 1
      }else {
        if(o === false) {
          return 0
        }else {
          if(typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core._hash.call(null, o)
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__105727 = x;
    if(G__105727) {
      var bit__3911__auto__ = G__105727.cljs$lang$protocol_mask$partition0$ & 8;
      if(bit__3911__auto__ || G__105727.cljs$core$ICollection$) {
        return true
      }else {
        if(!G__105727.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__105727)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__105727)
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__105729 = x;
    if(G__105729) {
      var bit__3911__auto__ = G__105729.cljs$lang$protocol_mask$partition0$ & 4096;
      if(bit__3911__auto__ || G__105729.cljs$core$ISet$) {
        return true
      }else {
        if(!G__105729.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__105729)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__105729)
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__105731 = x;
  if(G__105731) {
    var bit__3911__auto__ = G__105731.cljs$lang$protocol_mask$partition0$ & 512;
    if(bit__3911__auto__ || G__105731.cljs$core$IAssociative$) {
      return true
    }else {
      if(!G__105731.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__105731)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__105731)
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__105733 = x;
  if(G__105733) {
    var bit__3911__auto__ = G__105733.cljs$lang$protocol_mask$partition0$ & 16777216;
    if(bit__3911__auto__ || G__105733.cljs$core$ISequential$) {
      return true
    }else {
      if(!G__105733.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__105733)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__105733)
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__105735 = x;
  if(G__105735) {
    var bit__3911__auto__ = G__105735.cljs$lang$protocol_mask$partition0$ & 524288;
    if(bit__3911__auto__ || G__105735.cljs$core$IReduce$) {
      return true
    }else {
      if(!G__105735.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__105735)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__105735)
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__105737 = x;
    if(G__105737) {
      var bit__3911__auto__ = G__105737.cljs$lang$protocol_mask$partition0$ & 1024;
      if(bit__3911__auto__ || G__105737.cljs$core$IMap$) {
        return true
      }else {
        if(!G__105737.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__105737)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__105737)
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__105739 = x;
  if(G__105739) {
    var bit__3911__auto__ = G__105739.cljs$lang$protocol_mask$partition0$ & 16384;
    if(bit__3911__auto__ || G__105739.cljs$core$IVector$) {
      return true
    }else {
      if(!G__105739.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__105739)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__105739)
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__105741 = x;
  if(G__105741) {
    var bit__3904__auto__ = G__105741.cljs$lang$protocol_mask$partition1$ & 512;
    if(bit__3904__auto__ || G__105741.cljs$core$IChunkedSeq$) {
      return true
    }else {
      return false
    }
  }else {
    return false
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj105745 = {};
    return obj105745
  };
  var js_obj__1 = function() {
    var G__105746__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals)
    };
    var G__105746 = function(var_args) {
      var keyvals = null;
      if(arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__105746__delegate.call(this, keyvals)
    };
    G__105746.cljs$lang$maxFixedArity = 0;
    G__105746.cljs$lang$applyTo = function(arglist__105747) {
      var keyvals = cljs.core.seq(arglist__105747);
      return G__105746__delegate(keyvals)
    };
    G__105746.cljs$core$IFn$_invoke$arity$variadic = G__105746__delegate;
    return G__105746
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key)
  });
  return keys
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key]
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__105748 = i__$1 + 1;
      var G__105749 = j__$1 + 1;
      var G__105750 = len__$1 - 1;
      i__$1 = G__105748;
      j__$1 = G__105749;
      len__$1 = G__105750;
      continue
    }
    break
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__105751 = i__$1 - 1;
      var G__105752 = j__$1 - 1;
      var G__105753 = len__$1 - 1;
      i__$1 = G__105751;
      j__$1 = G__105752;
      len__$1 = G__105753;
      continue
    }
    break
  }
};
cljs.core.lookup_sentinel = function() {
  var obj105755 = {};
  return obj105755
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if(s == null) {
    return false
  }else {
    var G__105757 = s;
    if(G__105757) {
      var bit__3911__auto__ = G__105757.cljs$lang$protocol_mask$partition0$ & 64;
      if(bit__3911__auto__ || G__105757.cljs$core$ISeq$) {
        return true
      }else {
        if(!G__105757.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__105757)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__105757)
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__105759 = s;
  if(G__105759) {
    var bit__3911__auto__ = G__105759.cljs$lang$protocol_mask$partition0$ & 8388608;
    if(bit__3911__auto__ || G__105759.cljs$core$ISeqable$) {
      return true
    }else {
      if(!G__105759.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__105759)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__105759)
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if(cljs.core.truth_(x)) {
    return true
  }else {
    return false
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3285__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if(or__3285__auto__) {
    return or__3285__auto__
  }else {
    var G__105763 = f;
    if(G__105763) {
      var bit__3911__auto__ = G__105763.cljs$lang$protocol_mask$partition0$ & 1;
      if(bit__3911__auto__ || G__105763.cljs$core$IFn$) {
        return true
      }else {
        if(!G__105763.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__105763)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__105763)
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10)
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if(cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false
  }else {
    return true
  }
};
cljs.core.find = function find(coll, k) {
  if(!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null)
  }else {
    return null
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var distinct_QMARK___3 = function() {
    var G__105764__delegate = function(x, y, more) {
      if(!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while(true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if(cljs.core.truth_(xs)) {
            if(cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false
            }else {
              var G__105765 = cljs.core.conj.call(null, s, x__$1);
              var G__105766 = etc;
              s = G__105765;
              xs = G__105766;
              continue
            }
          }else {
            return true
          }
          break
        }
      }else {
        return false
      }
    };
    var G__105764 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105764__delegate.call(this, x, y, more)
    };
    G__105764.cljs$lang$maxFixedArity = 2;
    G__105764.cljs$lang$applyTo = function(arglist__105767) {
      var x = cljs.core.first(arglist__105767);
      arglist__105767 = cljs.core.next(arglist__105767);
      var y = cljs.core.first(arglist__105767);
      var more = cljs.core.rest(arglist__105767);
      return G__105764__delegate(x, y, more)
    };
    G__105764.cljs$core$IFn$_invoke$arity$variadic = G__105764__delegate;
    return G__105764
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_
}();
cljs.core.compare = function compare(x, y) {
  if(x === y) {
    return 0
  }else {
    if(x == null) {
      return-1
    }else {
      if(y == null) {
        return 1
      }else {
        if(cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if(function() {
            var G__105769 = x;
            if(G__105769) {
              var bit__3904__auto__ = G__105769.cljs$lang$protocol_mask$partition1$ & 2048;
              if(bit__3904__auto__ || G__105769.cljs$core$IComparable$) {
                return true
              }else {
                return false
              }
            }else {
              return false
            }
          }()) {
            return cljs.core._compare.call(null, x, y)
          }else {
            return goog.array.defaultCompare(x, y)
          }
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if(xl < yl) {
      return-1
    }else {
      if(xl > yl) {
        return 1
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0)
        }else {
          return null
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while(true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if(d === 0 && n + 1 < len) {
        var G__105770 = xs;
        var G__105771 = ys;
        var G__105772 = len;
        var G__105773 = n + 1;
        xs = G__105770;
        ys = G__105771;
        len = G__105772;
        n = G__105773;
        continue
      }else {
        return d
      }
      break
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if(cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare
  }else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if(typeof r === "number") {
        return r
      }else {
        if(cljs.core.truth_(r)) {
          return-1
        }else {
          if(cljs.core.truth_(f.call(null, y, x))) {
            return 1
          }else {
            return 0
          }
        }
      }
    }
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll)
  };
  var sort__2 = function(comp, coll) {
    if(cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a)
    }else {
      return cljs.core.List.EMPTY
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll)
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y))
    }, coll)
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s))
    }else {
      return f.call(null)
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while(true) {
      if(coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__105774 = nval;
          var G__105775 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__105774;
          coll__$1 = G__105775;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a)
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if(function() {
      var G__105778 = coll;
      if(G__105778) {
        var bit__3904__auto__ = G__105778.cljs$lang$protocol_mask$partition0$ & 524288;
        if(bit__3904__auto__ || G__105778.cljs$core$IReduce$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f)
    }else {
      if(coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f)
      }else {
        if(typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f)
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if(function() {
      var G__105779 = coll;
      if(G__105779) {
        var bit__3904__auto__ = G__105779.cljs$lang$protocol_mask$partition0$ & 524288;
        if(bit__3904__auto__ || G__105779.cljs$core$IReduce$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val)
    }else {
      if(coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val)
      }else {
        if(typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val)
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  return cljs.core._kv_reduce.call(null, coll, f, init)
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0
  };
  var _PLUS___1 = function(x) {
    return x
  };
  var _PLUS___2 = function(x, y) {
    return x + y
  };
  var _PLUS___3 = function() {
    var G__105780__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more)
    };
    var G__105780 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105780__delegate.call(this, x, y, more)
    };
    G__105780.cljs$lang$maxFixedArity = 2;
    G__105780.cljs$lang$applyTo = function(arglist__105781) {
      var x = cljs.core.first(arglist__105781);
      arglist__105781 = cljs.core.next(arglist__105781);
      var y = cljs.core.first(arglist__105781);
      var more = cljs.core.rest(arglist__105781);
      return G__105780__delegate(x, y, more)
    };
    G__105780.cljs$core$IFn$_invoke$arity$variadic = G__105780__delegate;
    return G__105780
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x
  };
  var ___2 = function(x, y) {
    return x - y
  };
  var ___3 = function() {
    var G__105782__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more)
    };
    var G__105782 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105782__delegate.call(this, x, y, more)
    };
    G__105782.cljs$lang$maxFixedArity = 2;
    G__105782.cljs$lang$applyTo = function(arglist__105783) {
      var x = cljs.core.first(arglist__105783);
      arglist__105783 = cljs.core.next(arglist__105783);
      var y = cljs.core.first(arglist__105783);
      var more = cljs.core.rest(arglist__105783);
      return G__105782__delegate(x, y, more)
    };
    G__105782.cljs$core$IFn$_invoke$arity$variadic = G__105782__delegate;
    return G__105782
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1
  };
  var _STAR___1 = function(x) {
    return x
  };
  var _STAR___2 = function(x, y) {
    return x * y
  };
  var _STAR___3 = function() {
    var G__105784__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more)
    };
    var G__105784 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105784__delegate.call(this, x, y, more)
    };
    G__105784.cljs$lang$maxFixedArity = 2;
    G__105784.cljs$lang$applyTo = function(arglist__105785) {
      var x = cljs.core.first(arglist__105785);
      arglist__105785 = cljs.core.next(arglist__105785);
      var y = cljs.core.first(arglist__105785);
      var more = cljs.core.rest(arglist__105785);
      return G__105784__delegate(x, y, more)
    };
    G__105784.cljs$core$IFn$_invoke$arity$variadic = G__105784__delegate;
    return G__105784
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x)
  };
  var _SLASH___2 = function(x, y) {
    return x / y
  };
  var _SLASH___3 = function() {
    var G__105786__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more)
    };
    var G__105786 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105786__delegate.call(this, x, y, more)
    };
    G__105786.cljs$lang$maxFixedArity = 2;
    G__105786.cljs$lang$applyTo = function(arglist__105787) {
      var x = cljs.core.first(arglist__105787);
      arglist__105787 = cljs.core.next(arglist__105787);
      var y = cljs.core.first(arglist__105787);
      var more = cljs.core.rest(arglist__105787);
      return G__105786__delegate(x, y, more)
    };
    G__105786.cljs$core$IFn$_invoke$arity$variadic = G__105786__delegate;
    return G__105786
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true
  };
  var _LT___2 = function(x, y) {
    return x < y
  };
  var _LT___3 = function() {
    var G__105788__delegate = function(x, y, more) {
      while(true) {
        if(x < y) {
          if(cljs.core.next.call(null, more)) {
            var G__105789 = y;
            var G__105790 = cljs.core.first.call(null, more);
            var G__105791 = cljs.core.next.call(null, more);
            x = G__105789;
            y = G__105790;
            more = G__105791;
            continue
          }else {
            return y < cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__105788 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105788__delegate.call(this, x, y, more)
    };
    G__105788.cljs$lang$maxFixedArity = 2;
    G__105788.cljs$lang$applyTo = function(arglist__105792) {
      var x = cljs.core.first(arglist__105792);
      arglist__105792 = cljs.core.next(arglist__105792);
      var y = cljs.core.first(arglist__105792);
      var more = cljs.core.rest(arglist__105792);
      return G__105788__delegate(x, y, more)
    };
    G__105788.cljs$core$IFn$_invoke$arity$variadic = G__105788__delegate;
    return G__105788
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y
  };
  var _LT__EQ___3 = function() {
    var G__105793__delegate = function(x, y, more) {
      while(true) {
        if(x <= y) {
          if(cljs.core.next.call(null, more)) {
            var G__105794 = y;
            var G__105795 = cljs.core.first.call(null, more);
            var G__105796 = cljs.core.next.call(null, more);
            x = G__105794;
            y = G__105795;
            more = G__105796;
            continue
          }else {
            return y <= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__105793 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105793__delegate.call(this, x, y, more)
    };
    G__105793.cljs$lang$maxFixedArity = 2;
    G__105793.cljs$lang$applyTo = function(arglist__105797) {
      var x = cljs.core.first(arglist__105797);
      arglist__105797 = cljs.core.next(arglist__105797);
      var y = cljs.core.first(arglist__105797);
      var more = cljs.core.rest(arglist__105797);
      return G__105793__delegate(x, y, more)
    };
    G__105793.cljs$core$IFn$_invoke$arity$variadic = G__105793__delegate;
    return G__105793
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true
  };
  var _GT___2 = function(x, y) {
    return x > y
  };
  var _GT___3 = function() {
    var G__105798__delegate = function(x, y, more) {
      while(true) {
        if(x > y) {
          if(cljs.core.next.call(null, more)) {
            var G__105799 = y;
            var G__105800 = cljs.core.first.call(null, more);
            var G__105801 = cljs.core.next.call(null, more);
            x = G__105799;
            y = G__105800;
            more = G__105801;
            continue
          }else {
            return y > cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__105798 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105798__delegate.call(this, x, y, more)
    };
    G__105798.cljs$lang$maxFixedArity = 2;
    G__105798.cljs$lang$applyTo = function(arglist__105802) {
      var x = cljs.core.first(arglist__105802);
      arglist__105802 = cljs.core.next(arglist__105802);
      var y = cljs.core.first(arglist__105802);
      var more = cljs.core.rest(arglist__105802);
      return G__105798__delegate(x, y, more)
    };
    G__105798.cljs$core$IFn$_invoke$arity$variadic = G__105798__delegate;
    return G__105798
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y
  };
  var _GT__EQ___3 = function() {
    var G__105803__delegate = function(x, y, more) {
      while(true) {
        if(x >= y) {
          if(cljs.core.next.call(null, more)) {
            var G__105804 = y;
            var G__105805 = cljs.core.first.call(null, more);
            var G__105806 = cljs.core.next.call(null, more);
            x = G__105804;
            y = G__105805;
            more = G__105806;
            continue
          }else {
            return y >= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__105803 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105803__delegate.call(this, x, y, more)
    };
    G__105803.cljs$lang$maxFixedArity = 2;
    G__105803.cljs$lang$applyTo = function(arglist__105807) {
      var x = cljs.core.first(arglist__105807);
      arglist__105807 = cljs.core.next(arglist__105807);
      var y = cljs.core.first(arglist__105807);
      var more = cljs.core.rest(arglist__105807);
      return G__105803__delegate(x, y, more)
    };
    G__105803.cljs$core$IFn$_invoke$arity$variadic = G__105803__delegate;
    return G__105803
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_
}();
cljs.core.dec = function dec(x) {
  return x - 1
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x
  };
  var max__2 = function(x, y) {
    var x__3592__auto__ = x;
    var y__3593__auto__ = y;
    return x__3592__auto__ > y__3593__auto__ ? x__3592__auto__ : y__3593__auto__
  };
  var max__3 = function() {
    var G__105808__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3592__auto__ = x;
        var y__3593__auto__ = y;
        return x__3592__auto__ > y__3593__auto__ ? x__3592__auto__ : y__3593__auto__
      }(), more)
    };
    var G__105808 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105808__delegate.call(this, x, y, more)
    };
    G__105808.cljs$lang$maxFixedArity = 2;
    G__105808.cljs$lang$applyTo = function(arglist__105809) {
      var x = cljs.core.first(arglist__105809);
      arglist__105809 = cljs.core.next(arglist__105809);
      var y = cljs.core.first(arglist__105809);
      var more = cljs.core.rest(arglist__105809);
      return G__105808__delegate(x, y, more)
    };
    G__105808.cljs$core$IFn$_invoke$arity$variadic = G__105808__delegate;
    return G__105808
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x
  };
  var min__2 = function(x, y) {
    var x__3599__auto__ = x;
    var y__3600__auto__ = y;
    return x__3599__auto__ < y__3600__auto__ ? x__3599__auto__ : y__3600__auto__
  };
  var min__3 = function() {
    var G__105810__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3599__auto__ = x;
        var y__3600__auto__ = y;
        return x__3599__auto__ < y__3600__auto__ ? x__3599__auto__ : y__3600__auto__
      }(), more)
    };
    var G__105810 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105810__delegate.call(this, x, y, more)
    };
    G__105810.cljs$lang$maxFixedArity = 2;
    G__105810.cljs$lang$applyTo = function(arglist__105811) {
      var x = cljs.core.first(arglist__105811);
      arglist__105811 = cljs.core.next(arglist__105811);
      var y = cljs.core.first(arglist__105811);
      var more = cljs.core.rest(arglist__105811);
      return G__105810__delegate(x, y, more)
    };
    G__105810.cljs$core$IFn$_invoke$arity$variadic = G__105810__delegate;
    return G__105810
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min
}();
cljs.core.byte$ = function byte$(x) {
  return x
};
cljs.core.char$ = function char$(x) {
  if(typeof x === "number") {
    return String.fromCharCode(x)
  }else {
    if(typeof x === "string" && x.length === 1) {
      return x
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      }else {
        return null
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x
};
cljs.core.float$ = function float$(x) {
  return x
};
cljs.core.double$ = function double$(x) {
  return x
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0
  };
  var unchecked_add__1 = function(x) {
    return x
  };
  var unchecked_add__2 = function(x, y) {
    return x + y
  };
  var unchecked_add__3 = function() {
    var G__105812__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more)
    };
    var G__105812 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105812__delegate.call(this, x, y, more)
    };
    G__105812.cljs$lang$maxFixedArity = 2;
    G__105812.cljs$lang$applyTo = function(arglist__105813) {
      var x = cljs.core.first(arglist__105813);
      arglist__105813 = cljs.core.next(arglist__105813);
      var y = cljs.core.first(arglist__105813);
      var more = cljs.core.rest(arglist__105813);
      return G__105812__delegate(x, y, more)
    };
    G__105812.cljs$core$IFn$_invoke$arity$variadic = G__105812__delegate;
    return G__105812
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0
  };
  var unchecked_add_int__1 = function(x) {
    return x
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y
  };
  var unchecked_add_int__3 = function() {
    var G__105814__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more)
    };
    var G__105814 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105814__delegate.call(this, x, y, more)
    };
    G__105814.cljs$lang$maxFixedArity = 2;
    G__105814.cljs$lang$applyTo = function(arglist__105815) {
      var x = cljs.core.first(arglist__105815);
      arglist__105815 = cljs.core.next(arglist__105815);
      var y = cljs.core.first(arglist__105815);
      var more = cljs.core.rest(arglist__105815);
      return G__105814__delegate(x, y, more)
    };
    G__105814.cljs$core$IFn$_invoke$arity$variadic = G__105814__delegate;
    return G__105814
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x)
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y
  };
  var unchecked_divide_int__3 = function() {
    var G__105816__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more)
    };
    var G__105816 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105816__delegate.call(this, x, y, more)
    };
    G__105816.cljs$lang$maxFixedArity = 2;
    G__105816.cljs$lang$applyTo = function(arglist__105817) {
      var x = cljs.core.first(arglist__105817);
      arglist__105817 = cljs.core.next(arglist__105817);
      var y = cljs.core.first(arglist__105817);
      var more = cljs.core.rest(arglist__105817);
      return G__105816__delegate(x, y, more)
    };
    G__105816.cljs$core$IFn$_invoke$arity$variadic = G__105816__delegate;
    return G__105816
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1
  };
  var unchecked_multiply__1 = function(x) {
    return x
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y
  };
  var unchecked_multiply__3 = function() {
    var G__105818__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more)
    };
    var G__105818 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105818__delegate.call(this, x, y, more)
    };
    G__105818.cljs$lang$maxFixedArity = 2;
    G__105818.cljs$lang$applyTo = function(arglist__105819) {
      var x = cljs.core.first(arglist__105819);
      arglist__105819 = cljs.core.next(arglist__105819);
      var y = cljs.core.first(arglist__105819);
      var more = cljs.core.rest(arglist__105819);
      return G__105818__delegate(x, y, more)
    };
    G__105818.cljs$core$IFn$_invoke$arity$variadic = G__105818__delegate;
    return G__105818
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1
  };
  var unchecked_multiply_int__1 = function(x) {
    return x
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y
  };
  var unchecked_multiply_int__3 = function() {
    var G__105820__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more)
    };
    var G__105820 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105820__delegate.call(this, x, y, more)
    };
    G__105820.cljs$lang$maxFixedArity = 2;
    G__105820.cljs$lang$applyTo = function(arglist__105821) {
      var x = cljs.core.first(arglist__105821);
      arglist__105821 = cljs.core.next(arglist__105821);
      var y = cljs.core.first(arglist__105821);
      var more = cljs.core.rest(arglist__105821);
      return G__105820__delegate(x, y, more)
    };
    G__105820.cljs$core$IFn$_invoke$arity$variadic = G__105820__delegate;
    return G__105820
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n)
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y
  };
  var unchecked_substract__3 = function() {
    var G__105822__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more)
    };
    var G__105822 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105822__delegate.call(this, x, y, more)
    };
    G__105822.cljs$lang$maxFixedArity = 2;
    G__105822.cljs$lang$applyTo = function(arglist__105823) {
      var x = cljs.core.first(arglist__105823);
      arglist__105823 = cljs.core.next(arglist__105823);
      var y = cljs.core.first(arglist__105823);
      var more = cljs.core.rest(arglist__105823);
      return G__105822__delegate(x, y, more)
    };
    G__105822.cljs$core$IFn$_invoke$arity$variadic = G__105822__delegate;
    return G__105822
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y
  };
  var unchecked_substract_int__3 = function() {
    var G__105824__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more)
    };
    var G__105824 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105824__delegate.call(this, x, y, more)
    };
    G__105824.cljs$lang$maxFixedArity = 2;
    G__105824.cljs$lang$applyTo = function(arglist__105825) {
      var x = cljs.core.first(arglist__105825);
      arglist__105825 = cljs.core.next(arglist__105825);
      var y = cljs.core.first(arglist__105825);
      var more = cljs.core.rest(arglist__105825);
      return G__105824__delegate(x, y, more)
    };
    G__105824.cljs$core$IFn$_invoke$arity$variadic = G__105824__delegate;
    return G__105824
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int
}();
cljs.core.fix = function fix(q) {
  if(q >= 0) {
    return Math.floor.call(null, q)
  }else {
    return Math.ceil.call(null, q)
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.booleans = function booleans(x) {
  return x
};
cljs.core.bytes = function bytes(x) {
  return x
};
cljs.core.chars = function chars(x) {
  return x
};
cljs.core.shorts = function shorts(x) {
  return x
};
cljs.core.ints = function ints(x) {
  return x
};
cljs.core.floats = function floats(x) {
  return x
};
cljs.core.doubles = function doubles(x) {
  return x
};
cljs.core.longs = function longs(x) {
  return x
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d)
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null)
  };
  var rand__1 = function(n) {
    return n * rand.call(null)
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n))
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n)
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n
};
cljs.core.bit_not = function bit_not(x) {
  return~x
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y)
  };
  var _EQ__EQ___3 = function() {
    var G__105826__delegate = function(x, y, more) {
      while(true) {
        if(_EQ__EQ_.call(null, x, y)) {
          if(cljs.core.next.call(null, more)) {
            var G__105827 = y;
            var G__105828 = cljs.core.first.call(null, more);
            var G__105829 = cljs.core.next.call(null, more);
            x = G__105827;
            y = G__105828;
            more = G__105829;
            continue
          }else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__105826 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105826__delegate.call(this, x, y, more)
    };
    G__105826.cljs$lang$maxFixedArity = 2;
    G__105826.cljs$lang$applyTo = function(arglist__105830) {
      var x = cljs.core.first(arglist__105830);
      arglist__105830 = cljs.core.next(arglist__105830);
      var y = cljs.core.first(arglist__105830);
      var more = cljs.core.rest(arglist__105830);
      return G__105826__delegate(x, y, more)
    };
    G__105826.cljs$core$IFn$_invoke$arity$variadic = G__105826__delegate;
    return G__105826
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs && n__$1 > 0) {
      var G__105831 = n__$1 - 1;
      var G__105832 = cljs.core.next.call(null, xs);
      n__$1 = G__105831;
      xs = G__105832;
      continue
    }else {
      return xs
    }
    break
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return""
  };
  var str__1 = function(x) {
    if(x == null) {
      return""
    }else {
      return x.toString()
    }
  };
  var str__2 = function() {
    var G__105833__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while(true) {
        if(cljs.core.truth_(more)) {
          var G__105834 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__105835 = cljs.core.next.call(null, more);
          sb = G__105834;
          more = G__105835;
          continue
        }else {
          return sb.toString()
        }
        break
      }
    };
    var G__105833 = function(x, var_args) {
      var ys = null;
      if(arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__105833__delegate.call(this, x, ys)
    };
    G__105833.cljs$lang$maxFixedArity = 1;
    G__105833.cljs$lang$applyTo = function(arglist__105836) {
      var x = cljs.core.first(arglist__105836);
      var ys = cljs.core.rest(arglist__105836);
      return G__105833__delegate(x, ys)
    };
    G__105833.cljs$core$IFn$_invoke$arity$variadic = G__105833__delegate;
    return G__105833
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start)
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end)
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while(true) {
      if(xs == null) {
        return ys == null
      }else {
        if(ys == null) {
          return false
        }else {
          if(cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__105837 = cljs.core.next.call(null, xs);
            var G__105838 = cljs.core.next.call(null, ys);
            xs = G__105837;
            ys = G__105838;
            continue
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false
            }else {
              return null
            }
          }
        }
      }
      break
    }
  }() : null)
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2)
};
cljs.core.hash_coll = function hash_coll(coll) {
  if(cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while(true) {
      if(s == null) {
        return res
      }else {
        var G__105839 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__105840 = cljs.core.next.call(null, s);
        res = G__105839;
        s = G__105840;
        continue
      }
      break
    }
  }else {
    return 0
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while(true) {
    if(s) {
      var e = cljs.core.first.call(null, s);
      var G__105841 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__105842 = cljs.core.next.call(null, s);
      h = G__105841;
      s = G__105842;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while(true) {
    if(s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__105843 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__105844 = cljs.core.next.call(null, s__$1);
      h = G__105843;
      s__$1 = G__105844;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__105851_105857 = cljs.core.seq.call(null, fn_map);
  var chunk__105852_105858 = null;
  var count__105853_105859 = 0;
  var i__105854_105860 = 0;
  while(true) {
    if(i__105854_105860 < count__105853_105859) {
      var vec__105855_105861 = cljs.core._nth.call(null, chunk__105852_105858, i__105854_105860);
      var key_name_105862 = cljs.core.nth.call(null, vec__105855_105861, 0, null);
      var f_105863 = cljs.core.nth.call(null, vec__105855_105861, 1, null);
      var str_name_105864 = cljs.core.name.call(null, key_name_105862);
      obj[str_name_105864] = f_105863;
      var G__105865 = seq__105851_105857;
      var G__105866 = chunk__105852_105858;
      var G__105867 = count__105853_105859;
      var G__105868 = i__105854_105860 + 1;
      seq__105851_105857 = G__105865;
      chunk__105852_105858 = G__105866;
      count__105853_105859 = G__105867;
      i__105854_105860 = G__105868;
      continue
    }else {
      var temp__4092__auto___105869 = cljs.core.seq.call(null, seq__105851_105857);
      if(temp__4092__auto___105869) {
        var seq__105851_105870__$1 = temp__4092__auto___105869;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__105851_105870__$1)) {
          var c__4009__auto___105871 = cljs.core.chunk_first.call(null, seq__105851_105870__$1);
          var G__105872 = cljs.core.chunk_rest.call(null, seq__105851_105870__$1);
          var G__105873 = c__4009__auto___105871;
          var G__105874 = cljs.core.count.call(null, c__4009__auto___105871);
          var G__105875 = 0;
          seq__105851_105857 = G__105872;
          chunk__105852_105858 = G__105873;
          count__105853_105859 = G__105874;
          i__105854_105860 = G__105875;
          continue
        }else {
          var vec__105856_105876 = cljs.core.first.call(null, seq__105851_105870__$1);
          var key_name_105877 = cljs.core.nth.call(null, vec__105856_105876, 0, null);
          var f_105878 = cljs.core.nth.call(null, vec__105856_105876, 1, null);
          var str_name_105879 = cljs.core.name.call(null, key_name_105877);
          obj[str_name_105879] = f_105878;
          var G__105880 = cljs.core.next.call(null, seq__105851_105870__$1);
          var G__105881 = null;
          var G__105882 = 0;
          var G__105883 = 0;
          seq__105851_105857 = G__105880;
          chunk__105852_105858 = G__105881;
          count__105853_105859 = G__105882;
          i__105854_105860 = G__105883;
          continue
        }
      }else {
      }
    }
    break
  }
  return obj
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/List")
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.count === 1) {
    return null
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null)
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1)
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.count === 1) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash)
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash)
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/EmptyList")
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null)
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta)
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__105885 = coll;
  if(G__105885) {
    var bit__3911__auto__ = G__105885.cljs$lang$protocol_mask$partition0$ & 134217728;
    if(bit__3911__auto__ || G__105885.cljs$core$IReversible$) {
      return true
    }else {
      if(!G__105885.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__105885)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__105885)
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll)
};
cljs.core.reverse = function reverse(coll) {
  if(cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll)
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while(true) {
        if(!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__105886 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__105886;
          continue
        }else {
          return arr
        }
        break
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while(true) {
      if(i > 0) {
        var G__105887 = i - 1;
        var G__105888 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__105887;
        r = G__105888;
        continue
      }else {
        return r
      }
      break
    }
  };
  var list = function(var_args) {
    var xs = null;
    if(arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return list__delegate.call(this, xs)
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__105889) {
    var xs = cljs.core.seq(arglist__105889);
    return list__delegate(xs)
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Cons")
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.rest == null) {
    return null
  }else {
    return cljs.core.seq.call(null, self__.rest)
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash)
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.rest == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash)
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash)
};
cljs.core.cons = function cons(x, coll) {
  if(function() {
    var or__3285__auto__ = coll == null;
    if(or__3285__auto__) {
      return or__3285__auto__
    }else {
      var G__105893 = coll;
      if(G__105893) {
        var bit__3904__auto__ = G__105893.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__3904__auto__ || G__105893.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null)
  }else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null)
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__105895 = x;
  if(G__105895) {
    var bit__3911__auto__ = G__105895.cljs$lang$protocol_mask$partition0$ & 33554432;
    if(bit__3911__auto__ || G__105895.cljs$core$IList$) {
      return true
    }else {
      if(!G__105895.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__105895)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__105895)
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Keyword")
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""))
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash
  }else {
    return self__._hash
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__105897 = null;
  var G__105897__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw)
  };
  var G__105897__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found)
  };
  G__105897 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__105897__2.call(this, self__, coll);
      case 3:
        return G__105897__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__105897
}();
cljs.core.Keyword.prototype.apply = function(self__, args105896) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args105896)))
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw)
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found)
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if(other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn
  }else {
    return false
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("")
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash)
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if(x === y) {
    return true
  }else {
    if(x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn
    }else {
      return false
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if(function() {
    var G__105899 = x;
    if(G__105899) {
      var bit__3904__auto__ = G__105899.cljs$lang$protocol_mask$partition1$ & 4096;
      if(bit__3904__auto__ || G__105899.cljs$core$INamed$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._namespace.call(null, x)
  }else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if(name instanceof cljs.core.Keyword) {
      return name
    }else {
      if(name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null)
      }else {
        if(typeof name === "string") {
          var parts = name.split("/");
          if(parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null)
          }else {
            return new cljs.core.Keyword(null, parts[0], name, null)
          }
        }else {
          return null
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null)
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/LazySeq")
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(self__.s == null) {
    return null
  }else {
    return cljs.core.next.call(null, self__.s)
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if(self__.fn == null) {
    return self__.s
  }else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if(self__.s == null) {
    return null
  }else {
    var ls = self__.s;
    while(true) {
      if(ls instanceof cljs.core.LazySeq) {
        var G__105900 = ls.sval();
        ls = G__105900;
        continue
      }else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s)
      }
      break
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(self__.s == null) {
    return null
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash)
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash)
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end)
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0)
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1)
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off)
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  }else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end)
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i]
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i]
  }else {
    return not_found
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end)
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length)
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length)
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end)
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if(more__$1 == null) {
      return null
    }else {
      return more__$1
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1)
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    if(self__.more == null) {
      return cljs.core.List.EMPTY
    }else {
      return self__.more
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.more == null) {
    return null
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash)
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.more == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.more
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash)
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if(cljs.core._count.call(null, chunk) === 0) {
    return rest
  }else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null)
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x)
};
cljs.core.chunk = function chunk(b) {
  return b.chunk()
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s)
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s)
};
cljs.core.chunk_next = function chunk_next(s) {
  if(function() {
    var G__105902 = s;
    if(G__105902) {
      var bit__3904__auto__ = G__105902.cljs$lang$protocol_mask$partition1$ & 1024;
      if(bit__3904__auto__ || G__105902.cljs$core$IChunkedNext$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._chunked_next.call(null, s)
  }else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s))
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__105903 = cljs.core.next.call(null, s__$1);
      s__$1 = G__105903;
      continue
    }else {
      return ary
    }
    break
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_105904 = 0;
  var xs_105905 = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs_105905) {
      ret[i_105904] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_105905));
      var G__105906 = i_105904 + 1;
      var G__105907 = cljs.core.next.call(null, xs_105905);
      i_105904 = G__105906;
      xs_105905 = G__105907;
      continue
    }else {
    }
    break
  }
  return ret
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__105908 = i + 1;
          var G__105909 = cljs.core.next.call(null, s__$1);
          i = G__105908;
          s__$1 = G__105909;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4108__auto___105910 = size;
      var i_105911 = 0;
      while(true) {
        if(i_105911 < n__4108__auto___105910) {
          a[i_105911] = init_val_or_seq;
          var G__105912 = i_105911 + 1;
          i_105911 = G__105912;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__105913 = i + 1;
          var G__105914 = cljs.core.next.call(null, s__$1);
          i = G__105913;
          s__$1 = G__105914;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4108__auto___105915 = size;
      var i_105916 = 0;
      while(true) {
        if(i_105916 < n__4108__auto___105915) {
          a[i_105916] = init_val_or_seq;
          var G__105917 = i_105916 + 1;
          i_105916 = G__105917;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__105918 = i + 1;
          var G__105919 = cljs.core.next.call(null, s__$1);
          i = G__105918;
          s__$1 = G__105919;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4108__auto___105920 = size;
      var i_105921 = 0;
      while(true) {
        if(i_105921 < n__4108__auto___105920) {
          a[i_105921] = init_val_or_seq;
          var G__105922 = i_105921 + 1;
          i_105921 = G__105922;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__105923 = i + 1;
          var G__105924 = cljs.core.next.call(null, s__$1);
          i = G__105923;
          s__$1 = G__105924;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4108__auto___105925 = size;
      var i_105926 = 0;
      while(true) {
        if(i_105926 < n__4108__auto___105925) {
          a[i_105926] = init_val_or_seq;
          var G__105927 = i_105926 + 1;
          i_105926 = G__105927;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if(cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s)
  }else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while(true) {
      if(i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__105928 = cljs.core.next.call(null, s__$1);
        var G__105929 = i - 1;
        var G__105930 = sum + 1;
        s__$1 = G__105928;
        i = G__105929;
        sum = G__105930;
        continue
      }else {
        return sum
      }
      break
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if(arglist == null) {
    return null
  }else {
    if(cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist))
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)))
      }else {
        return null
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null
    }, null, null)
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x
    }, null, null)
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if(s) {
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y))
        }else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y))
        }
      }else {
        return y
      }
    }, null, null)
  };
  var concat__3 = function() {
    var G__105931__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if(xys__$1) {
            if(cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1))
            }else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1))
            }
          }else {
            if(cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1))
            }else {
              return null
            }
          }
        }, null, null)
      };
      return cat.call(null, concat.call(null, x, y), zs)
    };
    var G__105931 = function(x, y, var_args) {
      var zs = null;
      if(arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105931__delegate.call(this, x, y, zs)
    };
    G__105931.cljs$lang$maxFixedArity = 2;
    G__105931.cljs$lang$applyTo = function(arglist__105932) {
      var x = cljs.core.first(arglist__105932);
      arglist__105932 = cljs.core.next(arglist__105932);
      var y = cljs.core.first(arglist__105932);
      var zs = cljs.core.rest(arglist__105932);
      return G__105931__delegate(x, y, zs)
    };
    G__105931.cljs$core$IFn$_invoke$arity$variadic = G__105931__delegate;
    return G__105931
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args)
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args)
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args))
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)))
  };
  var list_STAR___5 = function() {
    var G__105933__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))))
    };
    var G__105933 = function(a, b, c, d, var_args) {
      var more = null;
      if(arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__105933__delegate.call(this, a, b, c, d, more)
    };
    G__105933.cljs$lang$maxFixedArity = 4;
    G__105933.cljs$lang$applyTo = function(arglist__105934) {
      var a = cljs.core.first(arglist__105934);
      arglist__105934 = cljs.core.next(arglist__105934);
      var b = cljs.core.first(arglist__105934);
      arglist__105934 = cljs.core.next(arglist__105934);
      var c = cljs.core.first(arglist__105934);
      arglist__105934 = cljs.core.next(arglist__105934);
      var d = cljs.core.first(arglist__105934);
      var more = cljs.core.rest(arglist__105934);
      return G__105933__delegate(a, b, c, d, more)
    };
    G__105933.cljs$core$IFn$_invoke$arity$variadic = G__105933__delegate;
    return G__105933
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll)
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll)
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val)
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val)
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key)
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll)
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val)
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if(argc === 0) {
    return f.call(null)
  }else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if(argc === 1) {
      if(f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a)
      }else {
        return f.call(null, a)
      }
    }else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if(argc === 2) {
        if(f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b)
        }else {
          return f.call(null, a, b)
        }
      }else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if(argc === 3) {
          if(f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c)
          }else {
            return f.call(null, a, b, c)
          }
        }else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if(argc === 4) {
            if(f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d)
            }else {
              return f.call(null, a, b, c, d)
            }
          }else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if(argc === 5) {
              if(f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e)
              }else {
                return f.call(null, a, b, c, d, e)
              }
            }else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if(argc === 6) {
                if(f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1)
                }else {
                  return f__$1.call(null, a, b, c, d, e, f__$1)
                }
              }else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if(argc === 7) {
                  if(f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g)
                  }else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g)
                  }
                }else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if(argc === 8) {
                    if(f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h)
                    }else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h)
                    }
                  }else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if(argc === 9) {
                      if(f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i)
                      }else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i)
                      }
                    }else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if(argc === 10) {
                        if(f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j)
                        }else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j)
                        }
                      }else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if(argc === 11) {
                          if(f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k)
                          }else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k)
                          }
                        }else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if(argc === 12) {
                            if(f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }
                          }else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if(argc === 13) {
                              if(f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }
                            }else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if(argc === 14) {
                                if(f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }
                              }else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if(argc === 15) {
                                  if(f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }
                                }else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if(argc === 16) {
                                    if(f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }
                                  }else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if(argc === 17) {
                                      if(f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }
                                    }else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if(argc === 18) {
                                        if(f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }
                                      }else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if(argc === 19) {
                                          if(f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }
                                        }else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if(argc === 20) {
                                            if(f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }
                                          }else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args)
      }else {
        return f.cljs$lang$applyTo(args)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, args))
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__6 = function() {
    var G__105935__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if(f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if(bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist)
        }else {
          return f.cljs$lang$applyTo(arglist)
        }
      }else {
        return f.apply(f, cljs.core.to_array.call(null, arglist))
      }
    };
    var G__105935 = function(f, a, b, c, d, var_args) {
      var args = null;
      if(arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__105935__delegate.call(this, f, a, b, c, d, args)
    };
    G__105935.cljs$lang$maxFixedArity = 5;
    G__105935.cljs$lang$applyTo = function(arglist__105936) {
      var f = cljs.core.first(arglist__105936);
      arglist__105936 = cljs.core.next(arglist__105936);
      var a = cljs.core.first(arglist__105936);
      arglist__105936 = cljs.core.next(arglist__105936);
      var b = cljs.core.first(arglist__105936);
      arglist__105936 = cljs.core.next(arglist__105936);
      var c = cljs.core.first(arglist__105936);
      arglist__105936 = cljs.core.next(arglist__105936);
      var d = cljs.core.first(arglist__105936);
      var args = cljs.core.rest(arglist__105936);
      return G__105935__delegate(f, a, b, c, d, args)
    };
    G__105935.cljs$core$IFn$_invoke$arity$variadic = G__105935__delegate;
    return G__105935
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply
}();
cljs.core.vary_meta = function() {
  var vary_meta__delegate = function(obj, f, args) {
    return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), args))
  };
  var vary_meta = function(obj, f, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return vary_meta__delegate.call(this, obj, f, args)
  };
  vary_meta.cljs$lang$maxFixedArity = 2;
  vary_meta.cljs$lang$applyTo = function(arglist__105937) {
    var obj = cljs.core.first(arglist__105937);
    arglist__105937 = cljs.core.next(arglist__105937);
    var f = cljs.core.first(arglist__105937);
    var args = cljs.core.rest(arglist__105937);
    return vary_meta__delegate(obj, f, args)
  };
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__delegate;
  return vary_meta
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var not_EQ___3 = function() {
    var G__105938__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more))
    };
    var G__105938 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__105938__delegate.call(this, x, y, more)
    };
    G__105938.cljs$lang$maxFixedArity = 2;
    G__105938.cljs$lang$applyTo = function(arglist__105939) {
      var x = cljs.core.first(arglist__105939);
      arglist__105939 = cljs.core.next(arglist__105939);
      var y = cljs.core.first(arglist__105939);
      var more = cljs.core.rest(arglist__105939);
      return G__105938__delegate(x, y, more)
    };
    G__105938.cljs$core$IFn$_invoke$arity$variadic = G__105938__delegate;
    return G__105938
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_
}();
cljs.core.not_empty = function not_empty(coll) {
  if(cljs.core.seq.call(null, coll)) {
    return coll
  }else {
    return null
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll) == null) {
      return true
    }else {
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__105940 = pred;
        var G__105941 = cljs.core.next.call(null, coll);
        pred = G__105940;
        coll = G__105941;
        continue
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll)
};
cljs.core.some = function some(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll)) {
      var or__3285__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if(cljs.core.truth_(or__3285__auto__)) {
        return or__3285__auto__
      }else {
        var G__105942 = pred;
        var G__105943 = cljs.core.next.call(null, coll);
        pred = G__105942;
        coll = G__105943;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll))
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if(cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0
  }else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n)
};
cljs.core.identity = function identity(x) {
  return x
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__105944 = null;
    var G__105944__0 = function() {
      return cljs.core.not.call(null, f.call(null))
    };
    var G__105944__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x))
    };
    var G__105944__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y))
    };
    var G__105944__3 = function() {
      var G__105945__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs))
      };
      var G__105945 = function(x, y, var_args) {
        var zs = null;
        if(arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
        }
        return G__105945__delegate.call(this, x, y, zs)
      };
      G__105945.cljs$lang$maxFixedArity = 2;
      G__105945.cljs$lang$applyTo = function(arglist__105946) {
        var x = cljs.core.first(arglist__105946);
        arglist__105946 = cljs.core.next(arglist__105946);
        var y = cljs.core.first(arglist__105946);
        var zs = cljs.core.rest(arglist__105946);
        return G__105945__delegate(x, y, zs)
      };
      G__105945.cljs$core$IFn$_invoke$arity$variadic = G__105945__delegate;
      return G__105945
    }();
    G__105944 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__105944__0.call(this);
        case 1:
          return G__105944__1.call(this, x);
        case 2:
          return G__105944__2.call(this, x, y);
        default:
          return G__105944__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__105944.cljs$lang$maxFixedArity = 2;
    G__105944.cljs$lang$applyTo = G__105944__3.cljs$lang$applyTo;
    return G__105944
  }()
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__105947__delegate = function(args) {
      return x
    };
    var G__105947 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__105947__delegate.call(this, args)
    };
    G__105947.cljs$lang$maxFixedArity = 0;
    G__105947.cljs$lang$applyTo = function(arglist__105948) {
      var args = cljs.core.seq(arglist__105948);
      return G__105947__delegate(args)
    };
    G__105947.cljs$core$IFn$_invoke$arity$variadic = G__105947__delegate;
    return G__105947
  }()
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity
  };
  var comp__1 = function(f) {
    return f
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__105949 = null;
      var G__105949__0 = function() {
        return f.call(null, g.call(null))
      };
      var G__105949__1 = function(x) {
        return f.call(null, g.call(null, x))
      };
      var G__105949__2 = function(x, y) {
        return f.call(null, g.call(null, x, y))
      };
      var G__105949__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z))
      };
      var G__105949__4 = function() {
        var G__105950__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__105950 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__105950__delegate.call(this, x, y, z, args)
        };
        G__105950.cljs$lang$maxFixedArity = 3;
        G__105950.cljs$lang$applyTo = function(arglist__105951) {
          var x = cljs.core.first(arglist__105951);
          arglist__105951 = cljs.core.next(arglist__105951);
          var y = cljs.core.first(arglist__105951);
          arglist__105951 = cljs.core.next(arglist__105951);
          var z = cljs.core.first(arglist__105951);
          var args = cljs.core.rest(arglist__105951);
          return G__105950__delegate(x, y, z, args)
        };
        G__105950.cljs$core$IFn$_invoke$arity$variadic = G__105950__delegate;
        return G__105950
      }();
      G__105949 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__105949__0.call(this);
          case 1:
            return G__105949__1.call(this, x);
          case 2:
            return G__105949__2.call(this, x, y);
          case 3:
            return G__105949__3.call(this, x, y, z);
          default:
            return G__105949__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__105949.cljs$lang$maxFixedArity = 3;
      G__105949.cljs$lang$applyTo = G__105949__4.cljs$lang$applyTo;
      return G__105949
    }()
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__105952 = null;
      var G__105952__0 = function() {
        return f.call(null, g.call(null, h.call(null)))
      };
      var G__105952__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)))
      };
      var G__105952__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)))
      };
      var G__105952__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)))
      };
      var G__105952__4 = function() {
        var G__105953__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)))
        };
        var G__105953 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__105953__delegate.call(this, x, y, z, args)
        };
        G__105953.cljs$lang$maxFixedArity = 3;
        G__105953.cljs$lang$applyTo = function(arglist__105954) {
          var x = cljs.core.first(arglist__105954);
          arglist__105954 = cljs.core.next(arglist__105954);
          var y = cljs.core.first(arglist__105954);
          arglist__105954 = cljs.core.next(arglist__105954);
          var z = cljs.core.first(arglist__105954);
          var args = cljs.core.rest(arglist__105954);
          return G__105953__delegate(x, y, z, args)
        };
        G__105953.cljs$core$IFn$_invoke$arity$variadic = G__105953__delegate;
        return G__105953
      }();
      G__105952 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__105952__0.call(this);
          case 1:
            return G__105952__1.call(this, x);
          case 2:
            return G__105952__2.call(this, x, y);
          case 3:
            return G__105952__3.call(this, x, y, z);
          default:
            return G__105952__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__105952.cljs$lang$maxFixedArity = 3;
      G__105952.cljs$lang$applyTo = G__105952__4.cljs$lang$applyTo;
      return G__105952
    }()
  };
  var comp__4 = function() {
    var G__105955__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__105956__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while(true) {
            if(fs__$2) {
              var G__105957 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__105958 = cljs.core.next.call(null, fs__$2);
              ret = G__105957;
              fs__$2 = G__105958;
              continue
            }else {
              return ret
            }
            break
          }
        };
        var G__105956 = function(var_args) {
          var args = null;
          if(arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__105956__delegate.call(this, args)
        };
        G__105956.cljs$lang$maxFixedArity = 0;
        G__105956.cljs$lang$applyTo = function(arglist__105959) {
          var args = cljs.core.seq(arglist__105959);
          return G__105956__delegate(args)
        };
        G__105956.cljs$core$IFn$_invoke$arity$variadic = G__105956__delegate;
        return G__105956
      }()
    };
    var G__105955 = function(f1, f2, f3, var_args) {
      var fs = null;
      if(arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__105955__delegate.call(this, f1, f2, f3, fs)
    };
    G__105955.cljs$lang$maxFixedArity = 3;
    G__105955.cljs$lang$applyTo = function(arglist__105960) {
      var f1 = cljs.core.first(arglist__105960);
      arglist__105960 = cljs.core.next(arglist__105960);
      var f2 = cljs.core.first(arglist__105960);
      arglist__105960 = cljs.core.next(arglist__105960);
      var f3 = cljs.core.first(arglist__105960);
      var fs = cljs.core.rest(arglist__105960);
      return G__105955__delegate(f1, f2, f3, fs)
    };
    G__105955.cljs$core$IFn$_invoke$arity$variadic = G__105955__delegate;
    return G__105955
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__105961__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args)
      };
      var G__105961 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__105961__delegate.call(this, args)
      };
      G__105961.cljs$lang$maxFixedArity = 0;
      G__105961.cljs$lang$applyTo = function(arglist__105962) {
        var args = cljs.core.seq(arglist__105962);
        return G__105961__delegate(args)
      };
      G__105961.cljs$core$IFn$_invoke$arity$variadic = G__105961__delegate;
      return G__105961
    }()
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__105963__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args)
      };
      var G__105963 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__105963__delegate.call(this, args)
      };
      G__105963.cljs$lang$maxFixedArity = 0;
      G__105963.cljs$lang$applyTo = function(arglist__105964) {
        var args = cljs.core.seq(arglist__105964);
        return G__105963__delegate(args)
      };
      G__105963.cljs$core$IFn$_invoke$arity$variadic = G__105963__delegate;
      return G__105963
    }()
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__105965__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args)
      };
      var G__105965 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__105965__delegate.call(this, args)
      };
      G__105965.cljs$lang$maxFixedArity = 0;
      G__105965.cljs$lang$applyTo = function(arglist__105966) {
        var args = cljs.core.seq(arglist__105966);
        return G__105965__delegate(args)
      };
      G__105965.cljs$core$IFn$_invoke$arity$variadic = G__105965__delegate;
      return G__105965
    }()
  };
  var partial__5 = function() {
    var G__105967__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__105968__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args))
        };
        var G__105968 = function(var_args) {
          var args = null;
          if(arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__105968__delegate.call(this, args)
        };
        G__105968.cljs$lang$maxFixedArity = 0;
        G__105968.cljs$lang$applyTo = function(arglist__105969) {
          var args = cljs.core.seq(arglist__105969);
          return G__105968__delegate(args)
        };
        G__105968.cljs$core$IFn$_invoke$arity$variadic = G__105968__delegate;
        return G__105968
      }()
    };
    var G__105967 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if(arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__105967__delegate.call(this, f, arg1, arg2, arg3, more)
    };
    G__105967.cljs$lang$maxFixedArity = 4;
    G__105967.cljs$lang$applyTo = function(arglist__105970) {
      var f = cljs.core.first(arglist__105970);
      arglist__105970 = cljs.core.next(arglist__105970);
      var arg1 = cljs.core.first(arglist__105970);
      arglist__105970 = cljs.core.next(arglist__105970);
      var arg2 = cljs.core.first(arglist__105970);
      arglist__105970 = cljs.core.next(arglist__105970);
      var arg3 = cljs.core.first(arglist__105970);
      var more = cljs.core.rest(arglist__105970);
      return G__105967__delegate(f, arg1, arg2, arg3, more)
    };
    G__105967.cljs$core$IFn$_invoke$arity$variadic = G__105967__delegate;
    return G__105967
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__105971 = null;
      var G__105971__1 = function(a) {
        return f.call(null, a == null ? x : a)
      };
      var G__105971__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b)
      };
      var G__105971__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c)
      };
      var G__105971__4 = function() {
        var G__105972__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds)
        };
        var G__105972 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__105972__delegate.call(this, a, b, c, ds)
        };
        G__105972.cljs$lang$maxFixedArity = 3;
        G__105972.cljs$lang$applyTo = function(arglist__105973) {
          var a = cljs.core.first(arglist__105973);
          arglist__105973 = cljs.core.next(arglist__105973);
          var b = cljs.core.first(arglist__105973);
          arglist__105973 = cljs.core.next(arglist__105973);
          var c = cljs.core.first(arglist__105973);
          var ds = cljs.core.rest(arglist__105973);
          return G__105972__delegate(a, b, c, ds)
        };
        G__105972.cljs$core$IFn$_invoke$arity$variadic = G__105972__delegate;
        return G__105972
      }();
      G__105971 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__105971__1.call(this, a);
          case 2:
            return G__105971__2.call(this, a, b);
          case 3:
            return G__105971__3.call(this, a, b, c);
          default:
            return G__105971__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__105971.cljs$lang$maxFixedArity = 3;
      G__105971.cljs$lang$applyTo = G__105971__4.cljs$lang$applyTo;
      return G__105971
    }()
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__105974 = null;
      var G__105974__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__105974__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c)
      };
      var G__105974__4 = function() {
        var G__105975__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds)
        };
        var G__105975 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__105975__delegate.call(this, a, b, c, ds)
        };
        G__105975.cljs$lang$maxFixedArity = 3;
        G__105975.cljs$lang$applyTo = function(arglist__105976) {
          var a = cljs.core.first(arglist__105976);
          arglist__105976 = cljs.core.next(arglist__105976);
          var b = cljs.core.first(arglist__105976);
          arglist__105976 = cljs.core.next(arglist__105976);
          var c = cljs.core.first(arglist__105976);
          var ds = cljs.core.rest(arglist__105976);
          return G__105975__delegate(a, b, c, ds)
        };
        G__105975.cljs$core$IFn$_invoke$arity$variadic = G__105975__delegate;
        return G__105975
      }();
      G__105974 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__105974__2.call(this, a, b);
          case 3:
            return G__105974__3.call(this, a, b, c);
          default:
            return G__105974__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__105974.cljs$lang$maxFixedArity = 3;
      G__105974.cljs$lang$applyTo = G__105974__4.cljs$lang$applyTo;
      return G__105974
    }()
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__105977 = null;
      var G__105977__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__105977__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c)
      };
      var G__105977__4 = function() {
        var G__105978__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds)
        };
        var G__105978 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__105978__delegate.call(this, a, b, c, ds)
        };
        G__105978.cljs$lang$maxFixedArity = 3;
        G__105978.cljs$lang$applyTo = function(arglist__105979) {
          var a = cljs.core.first(arglist__105979);
          arglist__105979 = cljs.core.next(arglist__105979);
          var b = cljs.core.first(arglist__105979);
          arglist__105979 = cljs.core.next(arglist__105979);
          var c = cljs.core.first(arglist__105979);
          var ds = cljs.core.rest(arglist__105979);
          return G__105978__delegate(a, b, c, ds)
        };
        G__105978.cljs$core$IFn$_invoke$arity$variadic = G__105978__delegate;
        return G__105978
      }();
      G__105977 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__105977__2.call(this, a, b);
          case 3:
            return G__105977__3.call(this, a, b, c);
          default:
            return G__105977__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__105977.cljs$lang$maxFixedArity = 3;
      G__105977.cljs$lang$applyTo = G__105977__4.cljs$lang$applyTo;
      return G__105977
    }()
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4108__auto___105980 = size;
          var i_105981 = 0;
          while(true) {
            if(i_105981 < n__4108__auto___105980) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_105981, cljs.core._nth.call(null, c, i_105981)));
              var G__105982 = i_105981 + 1;
              i_105981 = G__105982;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  return mapi.call(null, 0, coll)
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4108__auto___105983 = size;
        var i_105984 = 0;
        while(true) {
          if(i_105984 < n__4108__auto___105983) {
            var x_105985 = f.call(null, cljs.core._nth.call(null, c, i_105984));
            if(x_105985 == null) {
            }else {
              cljs.core.chunk_append.call(null, b, x_105985)
            }
            var G__105986 = i_105984 + 1;
            i_105984 = G__105986;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)))
      }else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if(x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s))
        }else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)))
        }
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4108__auto___105987 = size;
          var i_105988 = 0;
          while(true) {
            if(i_105988 < n__4108__auto___105987) {
              var x_105989 = f.call(null, idx + i_105988, cljs.core._nth.call(null, c, i_105988));
              if(x_105989 == null) {
              }else {
                cljs.core.chunk_append.call(null, b, x_105989)
              }
              var G__105990 = i_105988 + 1;
              i_105988 = G__105990;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if(x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s))
          }else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)))
          }
        }
      }else {
        return null
      }
    }, null, null)
  };
  return keepi.call(null, 0, coll)
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x))
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            return p.call(null, y)
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p.call(null, y);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              return p.call(null, z)
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep1__4 = function() {
        var G__105997__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args))
        };
        var G__105997 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__105997__delegate.call(this, x, y, z, args)
        };
        G__105997.cljs$lang$maxFixedArity = 3;
        G__105997.cljs$lang$applyTo = function(arglist__105998) {
          var x = cljs.core.first(arglist__105998);
          arglist__105998 = cljs.core.next(arglist__105998);
          var y = cljs.core.first(arglist__105998);
          arglist__105998 = cljs.core.next(arglist__105998);
          var z = cljs.core.first(arglist__105998);
          var args = cljs.core.rest(arglist__105998);
          return G__105997__delegate(x, y, z, args)
        };
        G__105997.cljs$core$IFn$_invoke$arity$variadic = G__105997__delegate;
        return G__105997
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1
    }()
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            return p2.call(null, x)
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              var and__3273__auto____$2 = p2.call(null, x);
              if(cljs.core.truth_(and__3273__auto____$2)) {
                return p2.call(null, y)
              }else {
                return and__3273__auto____$2
              }
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              var and__3273__auto____$2 = p1.call(null, z);
              if(cljs.core.truth_(and__3273__auto____$2)) {
                var and__3273__auto____$3 = p2.call(null, x);
                if(cljs.core.truth_(and__3273__auto____$3)) {
                  var and__3273__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3273__auto____$4)) {
                    return p2.call(null, z)
                  }else {
                    return and__3273__auto____$4
                  }
                }else {
                  return and__3273__auto____$3
                }
              }else {
                return and__3273__auto____$2
              }
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep2__4 = function() {
        var G__105999__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__105991_SHARP_) {
            var and__3273__auto__ = p1.call(null, p1__105991_SHARP_);
            if(cljs.core.truth_(and__3273__auto__)) {
              return p2.call(null, p1__105991_SHARP_)
            }else {
              return and__3273__auto__
            }
          }, args))
        };
        var G__105999 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__105999__delegate.call(this, x, y, z, args)
        };
        G__105999.cljs$lang$maxFixedArity = 3;
        G__105999.cljs$lang$applyTo = function(arglist__106000) {
          var x = cljs.core.first(arglist__106000);
          arglist__106000 = cljs.core.next(arglist__106000);
          var y = cljs.core.first(arglist__106000);
          arglist__106000 = cljs.core.next(arglist__106000);
          var z = cljs.core.first(arglist__106000);
          var args = cljs.core.rest(arglist__106000);
          return G__105999__delegate(x, y, z, args)
        };
        G__105999.cljs$core$IFn$_invoke$arity$variadic = G__105999__delegate;
        return G__105999
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2
    }()
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              return p3.call(null, x)
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              var and__3273__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3273__auto____$2)) {
                var and__3273__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3273__auto____$3)) {
                  var and__3273__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3273__auto____$4)) {
                    return p3.call(null, y)
                  }else {
                    return and__3273__auto____$4
                  }
                }else {
                  return and__3273__auto____$3
                }
              }else {
                return and__3273__auto____$2
              }
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              var and__3273__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3273__auto____$2)) {
                var and__3273__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3273__auto____$3)) {
                  var and__3273__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3273__auto____$4)) {
                    var and__3273__auto____$5 = p3.call(null, y);
                    if(cljs.core.truth_(and__3273__auto____$5)) {
                      var and__3273__auto____$6 = p1.call(null, z);
                      if(cljs.core.truth_(and__3273__auto____$6)) {
                        var and__3273__auto____$7 = p2.call(null, z);
                        if(cljs.core.truth_(and__3273__auto____$7)) {
                          return p3.call(null, z)
                        }else {
                          return and__3273__auto____$7
                        }
                      }else {
                        return and__3273__auto____$6
                      }
                    }else {
                      return and__3273__auto____$5
                    }
                  }else {
                    return and__3273__auto____$4
                  }
                }else {
                  return and__3273__auto____$3
                }
              }else {
                return and__3273__auto____$2
              }
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep3__4 = function() {
        var G__106001__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__105992_SHARP_) {
            var and__3273__auto__ = p1.call(null, p1__105992_SHARP_);
            if(cljs.core.truth_(and__3273__auto__)) {
              var and__3273__auto____$1 = p2.call(null, p1__105992_SHARP_);
              if(cljs.core.truth_(and__3273__auto____$1)) {
                return p3.call(null, p1__105992_SHARP_)
              }else {
                return and__3273__auto____$1
              }
            }else {
              return and__3273__auto__
            }
          }, args))
        };
        var G__106001 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__106001__delegate.call(this, x, y, z, args)
        };
        G__106001.cljs$lang$maxFixedArity = 3;
        G__106001.cljs$lang$applyTo = function(arglist__106002) {
          var x = cljs.core.first(arglist__106002);
          arglist__106002 = cljs.core.next(arglist__106002);
          var y = cljs.core.first(arglist__106002);
          arglist__106002 = cljs.core.next(arglist__106002);
          var z = cljs.core.first(arglist__106002);
          var args = cljs.core.rest(arglist__106002);
          return G__106001__delegate(x, y, z, args)
        };
        G__106001.cljs$core$IFn$_invoke$arity$variadic = G__106001__delegate;
        return G__106001
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3
    }()
  };
  var every_pred__4 = function() {
    var G__106003__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__105993_SHARP_) {
            return p1__105993_SHARP_.call(null, x)
          }, ps__$1)
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__105994_SHARP_) {
            var and__3273__auto__ = p1__105994_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3273__auto__)) {
              return p1__105994_SHARP_.call(null, y)
            }else {
              return and__3273__auto__
            }
          }, ps__$1)
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__105995_SHARP_) {
            var and__3273__auto__ = p1__105995_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3273__auto__)) {
              var and__3273__auto____$1 = p1__105995_SHARP_.call(null, y);
              if(cljs.core.truth_(and__3273__auto____$1)) {
                return p1__105995_SHARP_.call(null, z)
              }else {
                return and__3273__auto____$1
              }
            }else {
              return and__3273__auto__
            }
          }, ps__$1)
        };
        var epn__4 = function() {
          var G__106004__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__105996_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__105996_SHARP_, args)
            }, ps__$1))
          };
          var G__106004 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__106004__delegate.call(this, x, y, z, args)
          };
          G__106004.cljs$lang$maxFixedArity = 3;
          G__106004.cljs$lang$applyTo = function(arglist__106005) {
            var x = cljs.core.first(arglist__106005);
            arglist__106005 = cljs.core.next(arglist__106005);
            var y = cljs.core.first(arglist__106005);
            arglist__106005 = cljs.core.next(arglist__106005);
            var z = cljs.core.first(arglist__106005);
            var args = cljs.core.rest(arglist__106005);
            return G__106004__delegate(x, y, z, args)
          };
          G__106004.cljs$core$IFn$_invoke$arity$variadic = G__106004__delegate;
          return G__106004
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn
      }()
    };
    var G__106003 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__106003__delegate.call(this, p1, p2, p3, ps)
    };
    G__106003.cljs$lang$maxFixedArity = 3;
    G__106003.cljs$lang$applyTo = function(arglist__106006) {
      var p1 = cljs.core.first(arglist__106006);
      arglist__106006 = cljs.core.next(arglist__106006);
      var p2 = cljs.core.first(arglist__106006);
      arglist__106006 = cljs.core.next(arglist__106006);
      var p3 = cljs.core.first(arglist__106006);
      var ps = cljs.core.rest(arglist__106006);
      return G__106003__delegate(p1, p2, p3, ps)
    };
    G__106003.cljs$core$IFn$_invoke$arity$variadic = G__106003__delegate;
    return G__106003
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null
      };
      var sp1__1 = function(x) {
        return p.call(null, x)
      };
      var sp1__2 = function(x, y) {
        var or__3285__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          return p.call(null, y)
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3285__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p.call(null, y);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            return p.call(null, z)
          }
        }
      };
      var sp1__4 = function() {
        var G__106013__delegate = function(x, y, z, args) {
          var or__3285__auto__ = sp1.call(null, x, y, z);
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return cljs.core.some.call(null, p, args)
          }
        };
        var G__106013 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__106013__delegate.call(this, x, y, z, args)
        };
        G__106013.cljs$lang$maxFixedArity = 3;
        G__106013.cljs$lang$applyTo = function(arglist__106014) {
          var x = cljs.core.first(arglist__106014);
          arglist__106014 = cljs.core.next(arglist__106014);
          var y = cljs.core.first(arglist__106014);
          arglist__106014 = cljs.core.next(arglist__106014);
          var z = cljs.core.first(arglist__106014);
          var args = cljs.core.rest(arglist__106014);
          return G__106013__delegate(x, y, z, args)
        };
        G__106013.cljs$core$IFn$_invoke$arity$variadic = G__106013__delegate;
        return G__106013
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1
    }()
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null
      };
      var sp2__1 = function(x) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          return p2.call(null, x)
        }
      };
      var sp2__2 = function(x, y) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            var or__3285__auto____$2 = p2.call(null, x);
            if(cljs.core.truth_(or__3285__auto____$2)) {
              return or__3285__auto____$2
            }else {
              return p2.call(null, y)
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            var or__3285__auto____$2 = p1.call(null, z);
            if(cljs.core.truth_(or__3285__auto____$2)) {
              return or__3285__auto____$2
            }else {
              var or__3285__auto____$3 = p2.call(null, x);
              if(cljs.core.truth_(or__3285__auto____$3)) {
                return or__3285__auto____$3
              }else {
                var or__3285__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3285__auto____$4)) {
                  return or__3285__auto____$4
                }else {
                  return p2.call(null, z)
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__106015__delegate = function(x, y, z, args) {
          var or__3285__auto__ = sp2.call(null, x, y, z);
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return cljs.core.some.call(null, function(p1__106007_SHARP_) {
              var or__3285__auto____$1 = p1.call(null, p1__106007_SHARP_);
              if(cljs.core.truth_(or__3285__auto____$1)) {
                return or__3285__auto____$1
              }else {
                return p2.call(null, p1__106007_SHARP_)
              }
            }, args)
          }
        };
        var G__106015 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__106015__delegate.call(this, x, y, z, args)
        };
        G__106015.cljs$lang$maxFixedArity = 3;
        G__106015.cljs$lang$applyTo = function(arglist__106016) {
          var x = cljs.core.first(arglist__106016);
          arglist__106016 = cljs.core.next(arglist__106016);
          var y = cljs.core.first(arglist__106016);
          arglist__106016 = cljs.core.next(arglist__106016);
          var z = cljs.core.first(arglist__106016);
          var args = cljs.core.rest(arglist__106016);
          return G__106015__delegate(x, y, z, args)
        };
        G__106015.cljs$core$IFn$_invoke$arity$variadic = G__106015__delegate;
        return G__106015
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2
    }()
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null
      };
      var sp3__1 = function(x) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            return p3.call(null, x)
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            var or__3285__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3285__auto____$2)) {
              return or__3285__auto____$2
            }else {
              var or__3285__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3285__auto____$3)) {
                return or__3285__auto____$3
              }else {
                var or__3285__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3285__auto____$4)) {
                  return or__3285__auto____$4
                }else {
                  return p3.call(null, y)
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            var or__3285__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3285__auto____$2)) {
              return or__3285__auto____$2
            }else {
              var or__3285__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3285__auto____$3)) {
                return or__3285__auto____$3
              }else {
                var or__3285__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3285__auto____$4)) {
                  return or__3285__auto____$4
                }else {
                  var or__3285__auto____$5 = p3.call(null, y);
                  if(cljs.core.truth_(or__3285__auto____$5)) {
                    return or__3285__auto____$5
                  }else {
                    var or__3285__auto____$6 = p1.call(null, z);
                    if(cljs.core.truth_(or__3285__auto____$6)) {
                      return or__3285__auto____$6
                    }else {
                      var or__3285__auto____$7 = p2.call(null, z);
                      if(cljs.core.truth_(or__3285__auto____$7)) {
                        return or__3285__auto____$7
                      }else {
                        return p3.call(null, z)
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__106017__delegate = function(x, y, z, args) {
          var or__3285__auto__ = sp3.call(null, x, y, z);
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return cljs.core.some.call(null, function(p1__106008_SHARP_) {
              var or__3285__auto____$1 = p1.call(null, p1__106008_SHARP_);
              if(cljs.core.truth_(or__3285__auto____$1)) {
                return or__3285__auto____$1
              }else {
                var or__3285__auto____$2 = p2.call(null, p1__106008_SHARP_);
                if(cljs.core.truth_(or__3285__auto____$2)) {
                  return or__3285__auto____$2
                }else {
                  return p3.call(null, p1__106008_SHARP_)
                }
              }
            }, args)
          }
        };
        var G__106017 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__106017__delegate.call(this, x, y, z, args)
        };
        G__106017.cljs$lang$maxFixedArity = 3;
        G__106017.cljs$lang$applyTo = function(arglist__106018) {
          var x = cljs.core.first(arglist__106018);
          arglist__106018 = cljs.core.next(arglist__106018);
          var y = cljs.core.first(arglist__106018);
          arglist__106018 = cljs.core.next(arglist__106018);
          var z = cljs.core.first(arglist__106018);
          var args = cljs.core.rest(arglist__106018);
          return G__106017__delegate(x, y, z, args)
        };
        G__106017.cljs$core$IFn$_invoke$arity$variadic = G__106017__delegate;
        return G__106017
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3
    }()
  };
  var some_fn__4 = function() {
    var G__106019__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__106009_SHARP_) {
            return p1__106009_SHARP_.call(null, x)
          }, ps__$1)
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__106010_SHARP_) {
            var or__3285__auto__ = p1__106010_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return p1__106010_SHARP_.call(null, y)
            }
          }, ps__$1)
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__106011_SHARP_) {
            var or__3285__auto__ = p1__106011_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              var or__3285__auto____$1 = p1__106011_SHARP_.call(null, y);
              if(cljs.core.truth_(or__3285__auto____$1)) {
                return or__3285__auto____$1
              }else {
                return p1__106011_SHARP_.call(null, z)
              }
            }
          }, ps__$1)
        };
        var spn__4 = function() {
          var G__106020__delegate = function(x, y, z, args) {
            var or__3285__auto__ = spn.call(null, x, y, z);
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return cljs.core.some.call(null, function(p1__106012_SHARP_) {
                return cljs.core.some.call(null, p1__106012_SHARP_, args)
              }, ps__$1)
            }
          };
          var G__106020 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__106020__delegate.call(this, x, y, z, args)
          };
          G__106020.cljs$lang$maxFixedArity = 3;
          G__106020.cljs$lang$applyTo = function(arglist__106021) {
            var x = cljs.core.first(arglist__106021);
            arglist__106021 = cljs.core.next(arglist__106021);
            var y = cljs.core.first(arglist__106021);
            arglist__106021 = cljs.core.next(arglist__106021);
            var z = cljs.core.first(arglist__106021);
            var args = cljs.core.rest(arglist__106021);
            return G__106020__delegate(x, y, z, args)
          };
          G__106020.cljs$core$IFn$_invoke$arity$variadic = G__106020__delegate;
          return G__106020
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn
      }()
    };
    var G__106019 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__106019__delegate.call(this, p1, p2, p3, ps)
    };
    G__106019.cljs$lang$maxFixedArity = 3;
    G__106019.cljs$lang$applyTo = function(arglist__106022) {
      var p1 = cljs.core.first(arglist__106022);
      arglist__106022 = cljs.core.next(arglist__106022);
      var p2 = cljs.core.first(arglist__106022);
      arglist__106022 = cljs.core.next(arglist__106022);
      var p3 = cljs.core.first(arglist__106022);
      var ps = cljs.core.rest(arglist__106022);
      return G__106019__delegate(p1, p2, p3, ps)
    };
    G__106019.cljs$core$IFn$_invoke$arity$variadic = G__106019__delegate;
    return G__106019
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4108__auto___106024 = size;
          var i_106025 = 0;
          while(true) {
            if(i_106025 < n__4108__auto___106024) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_106025)));
              var G__106026 = i_106025 + 1;
              i_106025 = G__106026;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)))
      }else {
        return null
      }
    }, null, null)
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if(s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)))
      }else {
        return null
      }
    }, null, null)
  };
  var map__5 = function() {
    var G__106027__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)))
          }else {
            return null
          }
        }, null, null)
      };
      return map.call(null, function(p1__106023_SHARP_) {
        return cljs.core.apply.call(null, f, p1__106023_SHARP_)
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)))
    };
    var G__106027 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__106027__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__106027.cljs$lang$maxFixedArity = 4;
    G__106027.cljs$lang$applyTo = function(arglist__106028) {
      var f = cljs.core.first(arglist__106028);
      arglist__106028 = cljs.core.next(arglist__106028);
      var c1 = cljs.core.first(arglist__106028);
      arglist__106028 = cljs.core.next(arglist__106028);
      var c2 = cljs.core.first(arglist__106028);
      arglist__106028 = cljs.core.next(arglist__106028);
      var c3 = cljs.core.first(arglist__106028);
      var colls = cljs.core.rest(arglist__106028);
      return G__106027__delegate(f, c1, c2, c3, colls)
    };
    G__106027.cljs$core$IFn$_invoke$arity$variadic = G__106027__delegate;
    return G__106027
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if(n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(n__$1 > 0 && s) {
        var G__106029 = n__$1 - 1;
        var G__106030 = cljs.core.rest.call(null, s);
        n__$1 = G__106029;
        coll__$1 = G__106030;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll)
  }, null, null)
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s)
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x
    }, s, cljs.core.drop.call(null, n, s))
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while(true) {
    if(lead) {
      var G__106031 = cljs.core.next.call(null, s);
      var G__106032 = cljs.core.next.call(null, lead);
      s = G__106031;
      lead = G__106032;
      continue
    }else {
      return s
    }
    break
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3273__auto__ = s;
        if(and__3273__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s))
        }else {
          return and__3273__auto__
        }
      }())) {
        var G__106033 = pred__$1;
        var G__106034 = cljs.core.rest.call(null, s);
        pred__$1 = G__106033;
        coll__$1 = G__106034;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll)
  }, null, null)
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null)
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x))
    }, null, null)
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x))
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x))
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f))
    }, null, null)
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f))
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x))
  }, null, null))
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))))
      }else {
        return null
      }
    }, null, null)
  };
  var interleave__3 = function() {
    var G__106035__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)))
        }else {
          return null
        }
      }, null, null)
    };
    var G__106035 = function(c1, c2, var_args) {
      var colls = null;
      if(arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__106035__delegate.call(this, c1, c2, colls)
    };
    G__106035.cljs$lang$maxFixedArity = 2;
    G__106035.cljs$lang$applyTo = function(arglist__106036) {
      var c1 = cljs.core.first(arglist__106036);
      arglist__106036 = cljs.core.next(arglist__106036);
      var c2 = cljs.core.first(arglist__106036);
      var colls = cljs.core.rest(arglist__106036);
      return G__106035__delegate(c1, c2, colls)
    };
    G__106035.cljs$core$IFn$_invoke$arity$variadic = G__106035__delegate;
    return G__106035
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll))
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1))
      }else {
        if(cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1))
        }else {
          return null
        }
      }
    }, null, null)
  };
  return cat.call(null, null, colls)
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll))
  };
  var mapcat__3 = function() {
    var G__106037__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls))
    };
    var G__106037 = function(f, coll, var_args) {
      var colls = null;
      if(arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__106037__delegate.call(this, f, coll, colls)
    };
    G__106037.cljs$lang$maxFixedArity = 2;
    G__106037.cljs$lang$applyTo = function(arglist__106038) {
      var f = cljs.core.first(arglist__106038);
      arglist__106038 = cljs.core.next(arglist__106038);
      var coll = cljs.core.first(arglist__106038);
      var colls = cljs.core.rest(arglist__106038);
      return G__106037__delegate(f, coll, colls)
    };
    G__106037.cljs$core$IFn$_invoke$arity$variadic = G__106037__delegate;
    return G__106037
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4108__auto___106039 = size;
        var i_106040 = 0;
        while(true) {
          if(i_106040 < n__4108__auto___106039) {
            if(cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_106040)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_106040))
            }else {
            }
            var G__106041 = i_106040 + 1;
            i_106040 = G__106041;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)))
      }else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if(cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r))
        }else {
          return filter.call(null, pred, r)
        }
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll)
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null)
    }, null, null)
  };
  return walk.call(null, root)
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__106042_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__106042_SHARP_)
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)))
};
cljs.core.into = function into(to, from) {
  if(!(to == null)) {
    if(function() {
      var G__106044 = to;
      if(G__106044) {
        var bit__3904__auto__ = G__106044.cljs$lang$protocol_mask$partition1$ & 4;
        if(bit__3904__auto__ || G__106044.cljs$core$IEditableCollection$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from))
    }else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from)
    }
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from)
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o))
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2))
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3))
  };
  var mapv__5 = function() {
    var G__106045__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls))
    };
    var G__106045 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__106045__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__106045.cljs$lang$maxFixedArity = 4;
    G__106045.cljs$lang$applyTo = function(arglist__106046) {
      var f = cljs.core.first(arglist__106046);
      arglist__106046 = cljs.core.next(arglist__106046);
      var c1 = cljs.core.first(arglist__106046);
      arglist__106046 = cljs.core.next(arglist__106046);
      var c2 = cljs.core.first(arglist__106046);
      arglist__106046 = cljs.core.next(arglist__106046);
      var c3 = cljs.core.first(arglist__106046);
      var colls = cljs.core.rest(arglist__106046);
      return G__106045__delegate(f, c1, c2, c3, colls)
    };
    G__106045.cljs$core$IFn$_invoke$arity$variadic = G__106045__delegate;
    return G__106045
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if(cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o)
    }else {
      return v
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll)
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)))
        }else {
          return null
        }
      }else {
        return null
      }
    }, null, null)
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)))
        }else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null)
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while(true) {
      if(ks__$1) {
        if(!function() {
          var G__106048 = m__$1;
          if(G__106048) {
            var bit__3911__auto__ = G__106048.cljs$lang$protocol_mask$partition0$ & 256;
            if(bit__3911__auto__ || G__106048.cljs$core$ILookup$) {
              return true
            }else {
              if(!G__106048.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__106048)
              }else {
                return false
              }
            }
          }else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__106048)
          }
        }()) {
          return not_found
        }else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if(sentinel === m__$2) {
            return not_found
          }else {
            var G__106049 = sentinel;
            var G__106050 = m__$2;
            var G__106051 = cljs.core.next.call(null, ks__$1);
            sentinel = G__106049;
            m__$1 = G__106050;
            ks__$1 = G__106051;
            continue
          }
        }
      }else {
        return m__$1
      }
      break
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in
}();
cljs.core.assoc_in = function assoc_in(m, p__106052, v) {
  var vec__106054 = p__106052;
  var k = cljs.core.nth.call(null, vec__106054, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__106054, 1);
  if(ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v))
  }else {
    return cljs.core.assoc.call(null, m, k, v)
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__106055, f) {
    var vec__106065 = p__106055;
    var k = cljs.core.nth.call(null, vec__106065, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__106065, 1);
    if(ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)))
    }
  };
  var update_in__4 = function(m, p__106056, f, a) {
    var vec__106066 = p__106056;
    var k = cljs.core.nth.call(null, vec__106066, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__106066, 1);
    if(ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a))
    }
  };
  var update_in__5 = function(m, p__106057, f, a, b) {
    var vec__106067 = p__106057;
    var k = cljs.core.nth.call(null, vec__106067, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__106067, 1);
    if(ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b))
    }
  };
  var update_in__6 = function(m, p__106058, f, a, b, c) {
    var vec__106068 = p__106058;
    var k = cljs.core.nth.call(null, vec__106068, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__106068, 1);
    if(ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c))
    }
  };
  var update_in__7 = function() {
    var G__106070__delegate = function(m, p__106059, f, a, b, c, args) {
      var vec__106069 = p__106059;
      var k = cljs.core.nth.call(null, vec__106069, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__106069, 1);
      if(ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args))
      }else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args))
      }
    };
    var G__106070 = function(m, p__106059, f, a, b, c, var_args) {
      var args = null;
      if(arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0)
      }
      return G__106070__delegate.call(this, m, p__106059, f, a, b, c, args)
    };
    G__106070.cljs$lang$maxFixedArity = 6;
    G__106070.cljs$lang$applyTo = function(arglist__106071) {
      var m = cljs.core.first(arglist__106071);
      arglist__106071 = cljs.core.next(arglist__106071);
      var p__106059 = cljs.core.first(arglist__106071);
      arglist__106071 = cljs.core.next(arglist__106071);
      var f = cljs.core.first(arglist__106071);
      arglist__106071 = cljs.core.next(arglist__106071);
      var a = cljs.core.first(arglist__106071);
      arglist__106071 = cljs.core.next(arglist__106071);
      var b = cljs.core.first(arglist__106071);
      arglist__106071 = cljs.core.next(arglist__106071);
      var c = cljs.core.first(arglist__106071);
      var args = cljs.core.rest(arglist__106071);
      return G__106070__delegate(m, p__106059, f, a, b, c, args)
    };
    G__106070.cljs$core$IFn$_invoke$arity$variadic = G__106070__delegate;
    return G__106070
  }();
  update_in = function(m, p__106059, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__106059, f);
      case 4:
        return update_in__4.call(this, m, p__106059, f, a);
      case 5:
        return update_in__5.call(this, m, p__106059, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__106059, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__106059, f, a, b, c, cljs.core.array_seq(arguments, 6))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3832__auto__, writer__3833__auto__, opts__3834__auto__) {
  return cljs.core._write.call(null, writer__3833__auto__, "cljs.core/VectorNode")
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr)
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, new Array(32))
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx]
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr))
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if(cnt < 32) {
    return 0
  }else {
    return cnt - 1 >>> 5 << 5
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while(true) {
    if(ll === 0) {
      return ret
    }else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__106072 = ll - 5;
      var G__106073 = r;
      ll = G__106072;
      ret = G__106073;
      continue
    }
    break
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if(5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret
  }else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if(!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if(0 <= i && i < pv.cnt) {
    if(i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail
    }else {
      var node = pv.root;
      var level = pv.shift;
      while(true) {
        if(level > 0) {
          var G__106074 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__106075 = level - 5;
          node = G__106074;
          level = G__106075;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt)
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if(level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret
  }else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if(new_child == null && subidx === 0) {
      return null
    }else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail))
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= k && k < self__.cnt) {
    if(cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null)
    }else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null)
    }
  }else {
    if(k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__106077 = null;
  var G__106077__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
  };
  var G__106077__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
  };
  G__106077 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106077__2.call(this, self__, k);
      case 3:
        return G__106077__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106077
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args106076) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106076)))
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while(true) {
    if(i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while(true) {
          if(j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2
            }else {
              var G__106078 = j + 1;
              var G__106079 = init__$2;
              j = G__106078;
              init__$1 = G__106079;
              continue
            }
          }else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1
          }
          break
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1)
      }else {
        var G__106080 = i + step_init[0];
        i = G__106080;
        continue
      }
    }else {
      return step_init[1]
    }
    break
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4108__auto___106081 = len;
    var i_106082 = 0;
    while(true) {
      if(i_106082 < n__4108__auto___106081) {
        new_tail[i_106082] = self__.tail[i_106082];
        var G__106083 = i_106082 + 1;
        i_106082 = G__106083;
        continue
      }else {
      }
      break
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null)
  }else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0)
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1)
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start)
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt === 0) {
    return null
  }else {
    if(self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  }else {
    if(1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
    }else {
      if(1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if(5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null)
          }else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null)
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val)
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash)
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31]
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n)
  }else {
    return not_found
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash)
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, new Array(32));
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if(l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null)
  }else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while(true) {
      if(i < l) {
        var G__106084 = i + 1;
        var G__106085 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__106084;
        out = G__106085;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if(args instanceof cljs.core.IndexedSeq) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true)
    }else {
      return cljs.core.vec.call(null, args)
    }
  };
  var vector = function(var_args) {
    var args = null;
    if(arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return vector__delegate.call(this, args)
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__106086) {
    var args = cljs.core.seq(arglist__106086);
    return vector__delegate(args)
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return null
    }else {
      return s
    }
  }else {
    return cljs.core._chunked_next.call(null, coll__$1)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start)
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off]
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return cljs.core.List.EMPTY
    }else {
      return s
    }
  }else {
    return cljs.core._chunked_rest.call(null, coll__$1)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return null
  }else {
    return s
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return cljs.core.List.EMPTY
  }else {
    return s
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash)
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null)
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null)
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null)
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Subvec")
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3592__auto__ = self__.end;
    var y__3593__auto__ = v_pos + 1;
    return x__3592__auto__ > y__3593__auto__ ? x__3592__auto__ : y__3593__auto__
  }(), null)
};
cljs.core.Subvec.prototype.call = function() {
  var G__106088 = null;
  var G__106088__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
  };
  var G__106088__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
  };
  G__106088 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106088__2.call(this, self__, k);
      case 3:
        return G__106088__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106088
}();
cljs.core.Subvec.prototype.apply = function(self__, args106087) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106087)))
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null)
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1)
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if(i === self__.end) {
      return null
    }else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1)
      }, null, null))
    }
  };
  return subvec_seq.call(null, self__.start)
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1)
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  }else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null)
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val)
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash)
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if(n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start)
  }else {
    return cljs.core._nth.call(null, self__.v, self__.start + n)
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(n < 0 || self__.end <= self__.start + n) {
    return not_found
  }else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found)
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash)
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while(true) {
    if(v instanceof cljs.core.Subvec) {
      var G__106089 = meta;
      var G__106090 = v.v;
      var G__106091 = v.start + start;
      var G__106092 = v.start + end;
      var G__106093 = __hash;
      meta = G__106089;
      v = G__106090;
      start = G__106091;
      end = G__106092;
      __hash = G__106093;
      continue
    }else {
      var c = cljs.core.count.call(null, v);
      if(start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      }else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash)
    }
    break
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v))
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null)
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if(edit === node.edit) {
    return node
  }else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr))
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj106097 = {};
    return obj106097
  }(), cljs.core.aclone.call(null, node.arr))
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = new Array(32);
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if(!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node)
    }else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node)
    }
  }());
  return ret
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if(new_child == null && subidx === 0) {
      return null
    }else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if(0 <= i && i < tv.cnt) {
    if(i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail
    }else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while(true) {
        if(level > 0) {
          var G__106098 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__106099 = level - 5;
          node = G__106098;
          level = G__106099;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/TransientVector")
};
cljs.core.TransientVector.prototype.call = function() {
  var G__106101 = null;
  var G__106101__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106101__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106101 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106101__2.call(this, self__, k);
      case 3:
        return G__106101__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106101
}();
cljs.core.TransientVector.prototype.apply = function(self__, args106100) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106100)))
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31]
  }else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n)
  }else {
    return not_found
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.root.edit) {
    return self__.cnt
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(0 <= n && n < self__.cnt) {
      if(cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1
      }else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if(level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1
          }else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1
      }
    }else {
      if(n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        }else {
          return null
        }
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    }else {
      if(1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1
      }else {
        if((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if(!(nr == null)) {
                return nr
              }else {
                return new cljs.core.VectorNode(self__.root.edit, new Array(32))
              }
            }();
            if(5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1
            }else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1
            }
          }else {
            return null
          }
        }
      }
    }
  }else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val)
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1
    }else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = new Array(32);
      new_tail[0] = o;
      self__.tail = new_tail;
      if(self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = new Array(32);
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1
      }else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail)
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if(temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null)
  }else {
    if(self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1)
    }else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null)
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash)
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3285__auto__ = self__.rear;
      if(cljs.core.truth_(or__3285__auto__)) {
        return or__3285__auto__
      }else {
        return cljs.core.PersistentVector.EMPTY
      }
    }(), o), null)
  }else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null)
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if(cljs.core.truth_(function() {
    var or__3285__auto__ = self__.front;
    if(cljs.core.truth_(or__3285__auto__)) {
      return or__3285__auto__
    }else {
      return rear__$1
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null)
  }else {
    return null
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if(temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null)
    }else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null)
    }
  }else {
    return coll__$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1))
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash)
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv))
  }, x)) : null : null)
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while(true) {
    if(i < len) {
      if(k === array[i]) {
        return i
      }else {
        var G__106102 = i + incr;
        i = G__106102;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if(a__$1 < b__$1) {
    return-1
  }else {
    if(a__$1 > b__$1) {
      return 1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0
      }else {
        return null
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var k__$1 = ks[i];
      var G__106103 = i + 1;
      var G__106104 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__106103;
      out = G__106104;
      continue
    }else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm)
    }
    break
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj106108 = {};
    return obj106108
  }();
  var l = ks.length;
  var i_106109 = 0;
  while(true) {
    if(i_106109 < l) {
      var k_106110 = ks[i_106109];
      new_obj[k_106110] = obj[k_106110];
      var G__106111 = i_106109 + 1;
      i_106109 = G__106111;
      continue
    }else {
    }
    break
  }
  return new_obj
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ObjMap")
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1))
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k]
  }else {
    return not_found
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k)) {
    if(self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v)
    }else {
      if(!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null)
      }else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
      }
    }
  }else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v)
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true
  }else {
    return false
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__106114 = null;
  var G__106114__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106114__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106114 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106114__2.call(this, self__, k);
      case 3:
        return G__106114__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106114
}();
cljs.core.ObjMap.prototype.apply = function(self__, args106113) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106113)))
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while(true) {
    if(cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__106115 = cljs.core.rest.call(null, keys__$1);
        var G__106116 = init__$2;
        keys__$1 = G__106115;
        init__$1 = G__106116;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__106112_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__106112_SHARP_, self__.strobj[p1__106112_SHARP_]], null)
    }, self__.keys.sort(cljs.core.obj_map_compare_keys))
  }else {
    return null
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash)
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta)
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
  }else {
    return coll__$1
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash)
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj106118 = {};
  return obj106118
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null)
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(arr[i] == null) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__106119 = i + 2;
          i = G__106119;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn
      }()) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__106120 = i + 2;
          i = G__106120;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str
      }()) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__106121 = i + 2;
          i = G__106121;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(k === arr[i]) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__106122 = i + 2;
          i = G__106122;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(cljs.core._EQ_.call(null, k, arr[i])) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__106123 = i + 2;
          i = G__106123;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if(k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k)
  }else {
    if(goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k)
    }else {
      if(k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k)
      }else {
        if(k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k)
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_106124 = 0;
  while(true) {
    if(i_106124 < l) {
      narr[i_106124] = arr[i_106124];
      var G__106125 = i_106124 + 1;
      i_106124 = G__106125;
      continue
    }else {
    }
    break
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentArrayMapSeq")
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta)
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if(i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj106128 = {};
    return obj106128
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx === -1) {
    return not_found
  }else {
    return self__.arr[idx + 1]
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx === -1) {
    if(self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null)
    }else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta)
    }
  }else {
    if(v === self__.arr[idx + 1]) {
      return coll__$1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__106129 = cljs.core.aclone.call(null, self__.arr);
          G__106129[idx + 1] = v;
          return G__106129
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1)
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__106130 = null;
  var G__106130__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106130__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106130 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106130__2.call(this, self__, k);
      case 3:
        return G__106130__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106130
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args106126) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106126)))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__106131 = i + 2;
        var G__106132 = init__$2;
        i = G__106131;
        init__$1 = G__106132;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if(new_len === 0) {
      return cljs.core._empty.call(null, coll__$1)
    }else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while(true) {
        if(s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null)
        }else {
          if(cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__106133 = s + 2;
            var G__106134 = d;
            s = G__106133;
            d = G__106134;
            continue
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__106135 = s + 2;
              var G__106136 = d + 2;
              s = G__106135;
              d = G__106136;
              continue
            }else {
              return null
            }
          }
        }
        break
      }
    }
  }else {
    return coll__$1
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash)
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if(no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null)
  }else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while(true) {
      if(i < len) {
        var G__106137 = i + 2;
        var G__106138 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__106137;
        ret = G__106138;
        continue
      }else {
        return cljs.core._persistent_BANG_.call(null, ret)
      }
      break
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if(idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__106139_106141 = self__.arr;
      G__106139_106141.pop();
      G__106139_106141.pop();
      self__.len = self__.len - 2
    }else {
    }
    return tcoll__$1
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if(idx === -1) {
      if(self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1
      }else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val)
      }
    }else {
      if(val === self__.arr[idx + 1]) {
        return tcoll__$1
      }else {
        self__.arr[idx + 1] = val;
        return tcoll__$1
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    if(function() {
      var G__106140 = o;
      if(G__106140) {
        var bit__3911__auto__ = G__106140.cljs$lang$protocol_mask$partition0$ & 2048;
        if(bit__3911__auto__ || G__106140.cljs$core$IMapEntry$) {
          return true
        }else {
          if(!G__106140.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__106140)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__106140)
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__106142 = cljs.core.next.call(null, es);
          var G__106143 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__106142;
          tcoll__$2 = G__106143;
          continue
        }else {
          return tcoll__$2
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null)
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if(idx === -1) {
      return not_found
    }else {
      return self__.arr[idx + 1]
    }
  }else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2)
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr)
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while(true) {
    if(i < len) {
      var G__106144 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__106145 = i + 2;
      out = G__106144;
      i = G__106145;
      continue
    }else {
      return out
    }
    break
  }
};
cljs.core.Box = function(val) {
  this.val = val
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3832__auto__, writer__3833__auto__, opts__3834__auto__) {
  return cljs.core._write.call(null, writer__3833__auto__, "cljs.core/Box")
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val)
};
cljs.core.key_test = function key_test(key, other) {
  if(key === other) {
    return true
  }else {
    if(cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other)
      }else {
        return null
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__106148 = cljs.core.aclone.call(null, arr);
    G__106148[i] = a;
    return G__106148
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__106149 = cljs.core.aclone.call(null, arr);
    G__106149[i] = a;
    G__106149[j] = b;
    return G__106149
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1)
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31)
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if(!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1])
        }else {
          var node = arr[i + 1];
          if(!(node == null)) {
            return node.kv_reduce(f, init__$1)
          }else {
            return init__$1
          }
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__106150 = i + 2;
        var G__106151 = init__$2;
        i = G__106150;
        init__$1 = G__106151;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if(self__.bitmap === bit) {
    return null
  }else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable
    }else {
      if(n >= 16) {
        var nodes = new Array(32);
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_106152 = 0;
        var j_106153 = 0;
        while(true) {
          if(i_106152 < 32) {
            if((self__.bitmap >>> i_106152 & 1) === 0) {
              var G__106154 = i_106152 + 1;
              var G__106155 = j_106153;
              i_106152 = G__106154;
              j_106153 = G__106155;
              continue
            }else {
              nodes[i_106152] = !(self__.arr[j_106153] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_106153]), self__.arr[j_106153], self__.arr[j_106153 + 1], added_leaf_QMARK_) : self__.arr[j_106153 + 1];
              var G__106156 = i_106152 + 1;
              var G__106157 = j_106153 + 2;
              i_106152 = G__106156;
              j_106153 = G__106157;
              continue
            }
          }else {
          }
          break
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable
        }else {
          return null
        }
      }
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val)
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx)
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr)
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(n >= 16) {
      var nodes = new Array(32);
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_106158 = 0;
      var j_106159 = 0;
      while(true) {
        if(i_106158 < 32) {
          if((self__.bitmap >>> i_106158 & 1) === 0) {
            var G__106160 = i_106158 + 1;
            var G__106161 = j_106159;
            i_106158 = G__106160;
            j_106159 = G__106161;
            continue
          }else {
            nodes[i_106158] = !(self__.arr[j_106159] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_106159]), self__.arr[j_106159], self__.arr[j_106159 + 1], added_leaf_QMARK_) : self__.arr[j_106159 + 1];
            var G__106162 = i_106158 + 1;
            var G__106163 = j_106159 + 2;
            i_106158 = G__106162;
            j_106159 = G__106163;
            continue
          }
        }else {
        }
        break
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes)
    }else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr)
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val))
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr)
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, new Array(0));
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while(true) {
    if(i < len) {
      if(!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__106164 = i + 1;
        var G__106165 = j + 2;
        var G__106166 = bitmap | 1 << i;
        i = G__106164;
        j = G__106165;
        bitmap = G__106166;
        continue
      }else {
        var G__106167 = i + 1;
        var G__106168 = j;
        var G__106169 = bitmap;
        i = G__106167;
        j = G__106168;
        bitmap = G__106169;
        continue
      }
    }else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr)
    }
    break
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable
  }else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr)
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return inode
  }else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx)
        }else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr))
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var node = self__.arr[i];
      if(!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2)
        }else {
          var G__106170 = i + 1;
          var G__106171 = init__$2;
          i = G__106170;
          init__$1 = G__106171;
          continue
        }
      }else {
        var G__106172 = i + 1;
        var G__106173 = init__$1;
        i = G__106172;
        init__$1 = G__106173;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx)
        }else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }else {
          return null
        }
      }
    }
  }else {
    return inode
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)))
  }else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr)
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while(true) {
    if(i < lim) {
      if(cljs.core.key_test.call(null, key, arr[i])) {
        return i
      }else {
        var G__106174 = i + 2;
        i = G__106174;
        continue
      }
    }else {
      return-1
    }
    break
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      if(self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable
      }else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr)
      }
    }else {
      if(self__.arr[idx + 1] === val) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val)
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    removed_leaf_QMARK_[0] = true;
    if(self__.cnt === 1) {
      return null
    }else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr)
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    if(self__.cnt === 1) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)))
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr)
    }else {
      if(cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode
      }else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val))
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1]
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode
  }else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array)
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr)
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null)
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null)
  }else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash)
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null)
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          if(!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null)
          }else {
            var temp__4090__auto__ = nodes[j + 1];
            if(cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if(cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null)
              }else {
                var G__106175 = j + 2;
                j = G__106175;
                continue
              }
            }else {
              var G__106176 = j + 2;
              j = G__106176;
              continue
            }
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null)
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash)
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null)
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          var temp__4090__auto__ = nodes[j];
          if(cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if(cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null)
            }else {
              var G__106177 = j + 1;
              j = G__106177;
              continue
            }
          }else {
            var G__106178 = j + 1;
            j = G__106178;
            continue
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null)
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj106181 = {};
    return obj106181
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null)
    }
  }else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if(new_root === self__.root) {
      return coll__$1
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    return self__.has_nil_QMARK_
  }else {
    if(self__.root == null) {
      return false
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__106182 = null;
  var G__106182__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106182__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106182 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106182__2.call(this, self__, k);
      case 3:
        return G__106182__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106182
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args106179) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106179)))
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    if(!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if(self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s)
    }else {
      return s
    }
  }else {
    return null
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null)
    }else {
      return coll__$1
    }
  }else {
    if(self__.root == null) {
      return coll__$1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if(new_root === self__.root) {
          return coll__$1
        }else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash)
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__106183 = i + 1;
      var G__106184 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__106183;
      out = G__106184;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_()
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return null
    }
  }else {
    if(self__.root == null) {
      return null
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.edit) {
    return self__.count
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(function() {
      var G__106185 = o;
      if(G__106185) {
        var bit__3911__auto__ = G__106185.cljs$lang$protocol_mask$partition0$ & 2048;
        if(bit__3911__auto__ || G__106185.cljs$core$IMapEntry$) {
          return true
        }else {
          if(!G__106185.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__106185)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__106185)
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__106186 = cljs.core.next.call(null, es);
          var G__106187 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__106186;
          tcoll__$1 = G__106187;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.nil_val === v) {
      }else {
        self__.nil_val = v
      }
      if(self__.has_nil_QMARK_) {
      }else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true
      }
      return tcoll
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if(node === self__.root) {
      }else {
        self__.root = node
      }
      if(added_leaf_QMARK_.val) {
        self__.count = self__.count + 1
      }else {
      }
      return tcoll
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll
      }else {
        return tcoll
      }
    }else {
      if(self__.root == null) {
        return tcoll
      }else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if(node === self__.root) {
        }else {
          self__.root = node
        }
        if(cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1
        }else {
        }
        return tcoll
      }
    }
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val)
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while(true) {
    if(!(t == null)) {
      var G__106188 = ascending_QMARK_ ? t.left : t.right;
      var G__106189 = cljs.core.conj.call(null, stack__$1, t);
      t = G__106188;
      stack__$1 = G__106189;
      continue
    }else {
      return stack__$1
    }
    break
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1
  }else {
    return self__.cnt
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if(!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash)
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null)
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if(ins instanceof cljs.core.RedNode) {
    if(ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null)
    }else {
      if(ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, ins, right, null)
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if(ins instanceof cljs.core.RedNode) {
    if(ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null)
    }else {
      if(ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, left, ins, null)
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if(del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null)
  }else {
    if(right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden())
    }else {
      if(right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if(del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null)
  }else {
    if(left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del)
    }else {
      if(left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2)
    }else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if(cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3)
      }else {
        return init__$3
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/BlackNode")
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null)
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v)
};
cljs.core.BlackNode.prototype.call = function() {
  var G__106191 = null;
  var G__106191__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106191__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106191 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106191__2.call(this, self__, k);
      case 3:
        return G__106191__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106191
}();
cljs.core.BlackNode.prototype.apply = function(self__, args106190) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106190)))
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null)
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node)
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del)
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right)
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node)
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f)
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start)
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key)
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null)
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v)
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta)
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash)
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/RedNode")
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null)
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v)
};
cljs.core.RedNode.prototype.call = function() {
  var G__106193 = null;
  var G__106193__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106193__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106193 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106193__2.call(this, self__, k);
      case 3:
        return G__106193__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106193
}();
cljs.core.RedNode.prototype.apply = function(self__, args106192) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106192)))
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null)
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null)
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null)
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null)
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null)
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if(self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null)
  }else {
    if(self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if(self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null)
  }else {
    if(self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start)
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key)
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null)
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v)
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta)
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash)
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if(tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null)
  }else {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return null
    }else {
      if(c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if(!(ins == null)) {
          return tree.add_left(ins)
        }else {
          return null
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if(!(ins == null)) {
            return tree.add_right(ins)
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if(left == null) {
    return right
  }else {
    if(right == null) {
      return left
    }else {
      if(left instanceof cljs.core.RedNode) {
        if(right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if(app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null)
          }else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null)
          }
        }else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null)
        }
      }else {
        if(right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if(app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null)
            }else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null))
            }
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if(!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right)
    }else {
      if(c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if(!(del == null) || !(found[0] == null)) {
          if(tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right)
          }else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null)
          }
        }else {
          return null
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if(!(del == null) || !(found[0] == null)) {
            if(tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del)
            }else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null)
            }
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }else {
    return null
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if(c === 0) {
    return tree.replace(tk, v, tree.left, tree.right)
  }else {
    if(c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v))
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if(!(n == null)) {
    return n.val
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if(t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if(cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null)
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__106195 = null;
  var G__106195__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106195__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106195 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106195__2.call(this, self__, k);
      case 3:
        return G__106195__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106195
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args106194) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106194)))
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if(!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init)
  }else {
    return init
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while(true) {
    if(!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if(c === 0) {
        return t
      }else {
        if(c < 0) {
          var G__106196 = t.left;
          t = G__106196;
          continue
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__106197 = t.right;
            t = G__106197;
            continue
          }else {
            return null
          }
        }
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while(true) {
      if(!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if(c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null)
        }else {
          if(cljs.core.truth_(ascending_QMARK_)) {
            if(c < 0) {
              var G__106198 = cljs.core.conj.call(null, stack, t);
              var G__106199 = t.left;
              stack = G__106198;
              t = G__106199;
              continue
            }else {
              var G__106200 = stack;
              var G__106201 = t.right;
              stack = G__106200;
              t = G__106201;
              continue
            }
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if(c > 0) {
                var G__106202 = cljs.core.conj.call(null, stack, t);
                var G__106203 = t.right;
                stack = G__106202;
                t = G__106203;
                continue
              }else {
                var G__106204 = stack;
                var G__106205 = t.left;
                stack = G__106204;
                t = G__106205;
                continue
              }
            }else {
              return null
            }
          }
        }
      }else {
        if(stack == null) {
          return null
        }else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null)
        }
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if(t == null) {
    if(cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null)
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash)
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while(true) {
      if(in$) {
        var G__106206 = cljs.core.nnext.call(null, in$);
        var G__106207 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__106206;
        out = G__106207;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return hash_map__delegate.call(this, keyvals)
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__106208) {
    var keyvals = cljs.core.seq(arglist__106208);
    return hash_map__delegate(keyvals)
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null)
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return array_map__delegate.call(this, keyvals)
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__106209) {
    var keyvals = cljs.core.seq(arglist__106209);
    return array_map__delegate(keyvals)
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj106213 = {};
      return obj106213
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while(true) {
      if(kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__106214 = cljs.core.nnext.call(null, kvs);
        kvs = G__106214;
        continue
      }else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj)
      }
      break
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return obj_map__delegate.call(this, keyvals)
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__106215) {
    var keyvals = cljs.core.seq(arglist__106215);
    return obj_map__delegate(keyvals)
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while(true) {
      if(in$) {
        var G__106216 = cljs.core.nnext.call(null, in$);
        var G__106217 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__106216;
        out = G__106217;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_map__delegate.call(this, keyvals)
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__106218) {
    var keyvals = cljs.core.seq(arglist__106218);
    return sorted_map__delegate(keyvals)
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while(true) {
      if(in$) {
        var G__106219 = cljs.core.nnext.call(null, in$);
        var G__106220 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__106219;
        out = G__106220;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if(arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals)
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__106221) {
    var comparator = cljs.core.first(arglist__106221);
    var keyvals = cljs.core.rest(arglist__106221);
    return sorted_map_by__delegate(comparator, keyvals)
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/KeySeq")
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__106222 = self__.mseq;
    if(G__106222) {
      var bit__3911__auto__ = G__106222.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__3911__auto__ || G__106222.cljs$core$INext$) {
        return true
      }else {
        if(!G__106222.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__106222)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__106222)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(nseq == null) {
    return null
  }else {
    return new cljs.core.KeySeq(nseq, self__._meta)
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me)
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__106223 = self__.mseq;
    if(G__106223) {
      var bit__3911__auto__ = G__106223.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__3911__auto__ || G__106223.cljs$core$INext$) {
        return true
      }else {
        if(!G__106223.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__106223)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__106223)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta)
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta)
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if(temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null)
  }else {
    return null
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry)
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ValSeq")
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__106224 = self__.mseq;
    if(G__106224) {
      var bit__3911__auto__ = G__106224.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__3911__auto__ || G__106224.cljs$core$INext$) {
        return true
      }else {
        if(!G__106224.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__106224)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__106224)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(nseq == null) {
    return null
  }else {
    return new cljs.core.ValSeq(nseq, self__._meta)
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me)
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__106225 = self__.mseq;
    if(G__106225) {
      var bit__3911__auto__ = G__106225.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__3911__auto__ || G__106225.cljs$core$INext$) {
        return true
      }else {
        if(!G__106225.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__106225)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__106225)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta)
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta)
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if(temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null)
  }else {
    return null
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry)
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__106226_SHARP_, p2__106227_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3285__auto__ = p1__106226_SHARP_;
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return cljs.core.PersistentArrayMap.EMPTY
          }
        }(), p2__106227_SHARP_)
      }, maps)
    }else {
      return null
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if(arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return merge__delegate.call(this, maps)
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__106228) {
    var maps = cljs.core.seq(arglist__106228);
    return merge__delegate(maps)
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if(cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v))
        }else {
          return cljs.core.assoc.call(null, m, k, v)
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3285__auto__ = m1;
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return cljs.core.PersistentArrayMap.EMPTY
            }
          }(), cljs.core.seq.call(null, m2))
        }
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps)
    }else {
      return null
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if(arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return merge_with__delegate.call(this, f, maps)
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__106229) {
    var f = cljs.core.first(arglist__106229);
    var maps = cljs.core.rest(arglist__106229);
    return merge_with__delegate(f, maps)
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while(true) {
    if(keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__106230 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__106231 = cljs.core.next.call(null, keys);
      ret = G__106230;
      keys = G__106231;
      continue
    }else {
      return ret
    }
    break
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v
  }else {
    return not_found
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__106234 = null;
  var G__106234__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106234__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106234 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106234__2.call(this, self__, k);
      case 3:
        return G__106234__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106234
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args106233) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106233)))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null)
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__106232_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__106232_SHARP_)
  }, other)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash)
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if(len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while(true) {
      if(i < len) {
        var G__106235 = i + 1;
        var G__106236 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__106235;
        out = G__106236;
        continue
      }else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null)
      }
      break
    }
  }else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while(true) {
      if(i < len) {
        var G__106237 = i + 2;
        var G__106238 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__106237;
        out = G__106238;
        continue
      }else {
        return cljs.core._persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__106240 = null;
  var G__106240__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null
    }else {
      return k
    }
  };
  var G__106240__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found
    }else {
      return k
    }
  };
  G__106240 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106240__2.call(this, self__, k);
      case 3:
        return G__106240__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106240
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args106239) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106239)))
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null
  }else {
    return k
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return k
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null)
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return v
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map)
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null)
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map)
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if(!(n == null)) {
    return n.key
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__106243 = null;
  var G__106243__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__106243__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__106243 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__106243__2.call(this, self__, k);
      case 3:
        return G__106243__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__106243
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args106242) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args106242)))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map))
  }else {
    return null
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__106241_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__106241_SHARP_)
  }, other)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash)
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4102__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while(true) {
      if(i < a__4102__auto__.length) {
        var G__106244 = i + 1;
        var G__106245 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__106244;
        res = G__106245;
        continue
      }else {
        return res
      }
      break
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret)
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if(in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY
  }else {
    if(in$ instanceof cljs.core.IndexedSeq) {
      return cljs.core.set_from_indexed_seq.call(null, in$)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while(true) {
          if(!(in$__$1 == null)) {
            var G__106246 = cljs.core._next.call(null, in$__$1);
            var G__106247 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__106246;
            out = G__106247;
            continue
          }else {
            return cljs.core._persistent_BANG_.call(null, out)
          }
          break
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var hash_set__1 = function() {
    var G__106248__delegate = function(keys) {
      return cljs.core.set.call(null, keys)
    };
    var G__106248 = function(var_args) {
      var keys = null;
      if(arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__106248__delegate.call(this, keys)
    };
    G__106248.cljs$lang$maxFixedArity = 0;
    G__106248.cljs$lang$applyTo = function(arglist__106249) {
      var keys = cljs.core.seq(arglist__106249);
      return G__106248__delegate(keys)
    };
    G__106248.cljs$core$IFn$_invoke$arity$variadic = G__106248__delegate;
    return G__106248
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys)
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if(arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_set__delegate.call(this, keys)
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__106250) {
    var keys = cljs.core.seq(arglist__106250);
    return sorted_set__delegate(keys)
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys)
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if(arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_set_by__delegate.call(this, comparator, keys)
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__106251) {
    var comparator = cljs.core.first(arglist__106251);
    var keys = cljs.core.rest(arglist__106251);
    return sorted_set_by__delegate(comparator, keys)
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by
}();
cljs.core.replace = function replace(smap, coll) {
  if(cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e))
      }else {
        return v
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)))
  }else {
    return cljs.core.map.call(null, function(p1__106252_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__106252_SHARP_);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e)
      }else {
        return p1__106252_SHARP_
      }
    }, coll)
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__106259, seen__$1) {
        while(true) {
          var vec__106260 = p__106259;
          var f = cljs.core.nth.call(null, vec__106260, 0, null);
          var xs__$1 = vec__106260;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if(temp__4092__auto__) {
            var s = temp__4092__auto__;
            if(cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__106261 = cljs.core.rest.call(null, s);
              var G__106262 = seen__$1;
              p__106259 = G__106261;
              seen__$1 = G__106262;
              continue
            }else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)))
            }
          }else {
            return null
          }
          break
        }
      }.call(null, xs, seen)
    }, null, null)
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY)
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while(true) {
    if(cljs.core.next.call(null, s__$1)) {
      var G__106263 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__106264 = cljs.core.next.call(null, s__$1);
      ret = G__106263;
      s__$1 = G__106264;
      continue
    }else {
      return cljs.core.seq.call(null, ret)
    }
    break
  }
};
cljs.core.name = function name(x) {
  if(function() {
    var G__106266 = x;
    if(G__106266) {
      var bit__3904__auto__ = G__106266.cljs$lang$protocol_mask$partition1$ & 4096;
      if(bit__3904__auto__ || G__106266.cljs$core$INamed$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._name.call(null, x)
  }else {
    if(typeof x === "string") {
      return x
    }else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while(true) {
    if(ks && vs) {
      var G__106267 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__106268 = cljs.core.next.call(null, ks);
      var G__106269 = cljs.core.next.call(null, vs);
      map = G__106267;
      ks = G__106268;
      vs = G__106269;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, map)
    }
    break
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x
  };
  var max_key__3 = function(k, x, y) {
    if(k.call(null, x) > k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var max_key__4 = function() {
    var G__106272__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__106270_SHARP_, p2__106271_SHARP_) {
        return max_key.call(null, k, p1__106270_SHARP_, p2__106271_SHARP_)
      }, max_key.call(null, k, x, y), more)
    };
    var G__106272 = function(k, x, y, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__106272__delegate.call(this, k, x, y, more)
    };
    G__106272.cljs$lang$maxFixedArity = 3;
    G__106272.cljs$lang$applyTo = function(arglist__106273) {
      var k = cljs.core.first(arglist__106273);
      arglist__106273 = cljs.core.next(arglist__106273);
      var x = cljs.core.first(arglist__106273);
      arglist__106273 = cljs.core.next(arglist__106273);
      var y = cljs.core.first(arglist__106273);
      var more = cljs.core.rest(arglist__106273);
      return G__106272__delegate(k, x, y, more)
    };
    G__106272.cljs$core$IFn$_invoke$arity$variadic = G__106272__delegate;
    return G__106272
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x
  };
  var min_key__3 = function(k, x, y) {
    if(k.call(null, x) < k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var min_key__4 = function() {
    var G__106276__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__106274_SHARP_, p2__106275_SHARP_) {
        return min_key.call(null, k, p1__106274_SHARP_, p2__106275_SHARP_)
      }, min_key.call(null, k, x, y), more)
    };
    var G__106276 = function(k, x, y, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__106276__delegate.call(this, k, x, y, more)
    };
    G__106276.cljs$lang$maxFixedArity = 3;
    G__106276.cljs$lang$applyTo = function(arglist__106277) {
      var k = cljs.core.first(arglist__106277);
      arglist__106277 = cljs.core.next(arglist__106277);
      var x = cljs.core.first(arglist__106277);
      arglist__106277 = cljs.core.next(arglist__106277);
      var y = cljs.core.first(arglist__106277);
      var more = cljs.core.rest(arglist__106277);
      return G__106276__delegate(k, x, y, more)
    };
    G__106276.cljs$core$IFn$_invoke$arity$variadic = G__106276__delegate;
    return G__106276
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll)
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)))
      }else {
        return null
      }
    }, null, null)
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0)
  }
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__106280 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__106280, 0, null);
        var s = vec__106280;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true))
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__106281 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__106281, 0, null);
      var s = vec__106281;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__106284 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__106284, 0, null);
        var s = vec__106284;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false))
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__106285 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__106285, 0, null);
      var s = vec__106285;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Range")
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(self__.step > 0) {
    if(self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }else {
    if(self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1)
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s)
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(self__.step > 0) {
    if(self__.start < self__.end) {
      return rng__$1
    }else {
      return null
    }
  }else {
    if(self__.start > self__.end) {
      return rng__$1
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0
  }else {
    return Math.ceil((self__.end - self__.start) / self__.step)
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.start
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other)
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash)
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if(n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step
  }else {
    if(self__.start > self__.end && self__.step === 0) {
      return self__.start
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if(n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step
  }else {
    if(self__.start > self__.end && self__.step === 0) {
      return self__.start
    }else {
      return not_found
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash)
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1)
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1)
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1)
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null)
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null)
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__106286_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__106286_SHARP_))
        }
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1)
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll))
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s))
      }else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null))
      }
    }, null, null)
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s))
      }else {
        return null
      }
    }, null, null))
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__106297 = null;
      var G__106297__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null)
      };
      var G__106297__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null)
      };
      var G__106297__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null)
      };
      var G__106297__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null)
      };
      var G__106297__4 = function() {
        var G__106298__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null)
        };
        var G__106298 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__106298__delegate.call(this, x, y, z, args)
        };
        G__106298.cljs$lang$maxFixedArity = 3;
        G__106298.cljs$lang$applyTo = function(arglist__106299) {
          var x = cljs.core.first(arglist__106299);
          arglist__106299 = cljs.core.next(arglist__106299);
          var y = cljs.core.first(arglist__106299);
          arglist__106299 = cljs.core.next(arglist__106299);
          var z = cljs.core.first(arglist__106299);
          var args = cljs.core.rest(arglist__106299);
          return G__106298__delegate(x, y, z, args)
        };
        G__106298.cljs$core$IFn$_invoke$arity$variadic = G__106298__delegate;
        return G__106298
      }();
      G__106297 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__106297__0.call(this);
          case 1:
            return G__106297__1.call(this, x);
          case 2:
            return G__106297__2.call(this, x, y);
          case 3:
            return G__106297__3.call(this, x, y, z);
          default:
            return G__106297__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__106297.cljs$lang$maxFixedArity = 3;
      G__106297.cljs$lang$applyTo = G__106297__4.cljs$lang$applyTo;
      return G__106297
    }()
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__106300 = null;
      var G__106300__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null)
      };
      var G__106300__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null)
      };
      var G__106300__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null)
      };
      var G__106300__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null)
      };
      var G__106300__4 = function() {
        var G__106301__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null)
        };
        var G__106301 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__106301__delegate.call(this, x, y, z, args)
        };
        G__106301.cljs$lang$maxFixedArity = 3;
        G__106301.cljs$lang$applyTo = function(arglist__106302) {
          var x = cljs.core.first(arglist__106302);
          arglist__106302 = cljs.core.next(arglist__106302);
          var y = cljs.core.first(arglist__106302);
          arglist__106302 = cljs.core.next(arglist__106302);
          var z = cljs.core.first(arglist__106302);
          var args = cljs.core.rest(arglist__106302);
          return G__106301__delegate(x, y, z, args)
        };
        G__106301.cljs$core$IFn$_invoke$arity$variadic = G__106301__delegate;
        return G__106301
      }();
      G__106300 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__106300__0.call(this);
          case 1:
            return G__106300__1.call(this, x);
          case 2:
            return G__106300__2.call(this, x, y);
          case 3:
            return G__106300__3.call(this, x, y, z);
          default:
            return G__106300__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__106300.cljs$lang$maxFixedArity = 3;
      G__106300.cljs$lang$applyTo = G__106300__4.cljs$lang$applyTo;
      return G__106300
    }()
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__106303 = null;
      var G__106303__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null)
      };
      var G__106303__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null)
      };
      var G__106303__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null)
      };
      var G__106303__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null)
      };
      var G__106303__4 = function() {
        var G__106304__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null)
        };
        var G__106304 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__106304__delegate.call(this, x, y, z, args)
        };
        G__106304.cljs$lang$maxFixedArity = 3;
        G__106304.cljs$lang$applyTo = function(arglist__106305) {
          var x = cljs.core.first(arglist__106305);
          arglist__106305 = cljs.core.next(arglist__106305);
          var y = cljs.core.first(arglist__106305);
          arglist__106305 = cljs.core.next(arglist__106305);
          var z = cljs.core.first(arglist__106305);
          var args = cljs.core.rest(arglist__106305);
          return G__106304__delegate(x, y, z, args)
        };
        G__106304.cljs$core$IFn$_invoke$arity$variadic = G__106304__delegate;
        return G__106304
      }();
      G__106303 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__106303__0.call(this);
          case 1:
            return G__106303__1.call(this, x);
          case 2:
            return G__106303__2.call(this, x, y);
          case 3:
            return G__106303__3.call(this, x, y, z);
          default:
            return G__106303__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__106303.cljs$lang$maxFixedArity = 3;
      G__106303.cljs$lang$applyTo = G__106303__4.cljs$lang$applyTo;
      return G__106303
    }()
  };
  var juxt__4 = function() {
    var G__106306__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__106307 = null;
        var G__106307__0 = function() {
          return cljs.core.reduce.call(null, function(p1__106287_SHARP_, p2__106288_SHARP_) {
            return cljs.core.conj.call(null, p1__106287_SHARP_, p2__106288_SHARP_.call(null))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__106307__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__106289_SHARP_, p2__106290_SHARP_) {
            return cljs.core.conj.call(null, p1__106289_SHARP_, p2__106290_SHARP_.call(null, x))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__106307__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__106291_SHARP_, p2__106292_SHARP_) {
            return cljs.core.conj.call(null, p1__106291_SHARP_, p2__106292_SHARP_.call(null, x, y))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__106307__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__106293_SHARP_, p2__106294_SHARP_) {
            return cljs.core.conj.call(null, p1__106293_SHARP_, p2__106294_SHARP_.call(null, x, y, z))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__106307__4 = function() {
          var G__106308__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__106295_SHARP_, p2__106296_SHARP_) {
              return cljs.core.conj.call(null, p1__106295_SHARP_, cljs.core.apply.call(null, p2__106296_SHARP_, x, y, z, args))
            }, cljs.core.PersistentVector.EMPTY, fs__$1)
          };
          var G__106308 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__106308__delegate.call(this, x, y, z, args)
          };
          G__106308.cljs$lang$maxFixedArity = 3;
          G__106308.cljs$lang$applyTo = function(arglist__106309) {
            var x = cljs.core.first(arglist__106309);
            arglist__106309 = cljs.core.next(arglist__106309);
            var y = cljs.core.first(arglist__106309);
            arglist__106309 = cljs.core.next(arglist__106309);
            var z = cljs.core.first(arglist__106309);
            var args = cljs.core.rest(arglist__106309);
            return G__106308__delegate(x, y, z, args)
          };
          G__106308.cljs$core$IFn$_invoke$arity$variadic = G__106308__delegate;
          return G__106308
        }();
        G__106307 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__106307__0.call(this);
            case 1:
              return G__106307__1.call(this, x);
            case 2:
              return G__106307__2.call(this, x, y);
            case 3:
              return G__106307__3.call(this, x, y, z);
            default:
              return G__106307__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__106307.cljs$lang$maxFixedArity = 3;
        G__106307.cljs$lang$applyTo = G__106307__4.cljs$lang$applyTo;
        return G__106307
      }()
    };
    var G__106306 = function(f, g, h, var_args) {
      var fs = null;
      if(arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__106306__delegate.call(this, f, g, h, fs)
    };
    G__106306.cljs$lang$maxFixedArity = 3;
    G__106306.cljs$lang$applyTo = function(arglist__106310) {
      var f = cljs.core.first(arglist__106310);
      arglist__106310 = cljs.core.next(arglist__106310);
      var g = cljs.core.first(arglist__106310);
      arglist__106310 = cljs.core.next(arglist__106310);
      var h = cljs.core.first(arglist__106310);
      var fs = cljs.core.rest(arglist__106310);
      return G__106306__delegate(f, g, h, fs)
    };
    G__106306.cljs$core$IFn$_invoke$arity$variadic = G__106306__delegate;
    return G__106306
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll)) {
        var G__106311 = cljs.core.next.call(null, coll);
        coll = G__106311;
        continue
      }else {
        return null
      }
      break
    }
  };
  var dorun__2 = function(n, coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll) && n > 0) {
        var G__106312 = n - 1;
        var G__106313 = cljs.core.next.call(null, coll);
        n = G__106312;
        coll = G__106313;
        continue
      }else {
        return null
      }
      break
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }else {
    return null
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if(cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null)
    }, null, null)
  }else {
    return null
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__106315 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__106315, 0, null);
  var flags = cljs.core.nth.call(null, vec__106315, 1, null);
  var pattern = cljs.core.nth.call(null, vec__106315, 2, null);
  return new RegExp(pattern, flags)
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  cljs.core._write.call(null, writer, begin);
  if(cljs.core.seq.call(null, coll)) {
    print_one.call(null, cljs.core.first.call(null, coll), writer, opts)
  }else {
  }
  var coll_106316__$1 = cljs.core.next.call(null, coll);
  var n_106317 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
  while(true) {
    if(coll_106316__$1 && (n_106317 == null || !(n_106317 === 0))) {
      cljs.core._write.call(null, writer, sep);
      print_one.call(null, cljs.core.first.call(null, coll_106316__$1), writer, opts);
      var G__106318 = cljs.core.next.call(null, coll_106316__$1);
      var G__106319 = n_106317 - 1;
      coll_106316__$1 = G__106318;
      n_106317 = G__106319;
      continue
    }else {
    }
    break
  }
  if(cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
    cljs.core._write.call(null, writer, sep);
    print_one.call(null, "...", writer, opts)
  }else {
  }
  return cljs.core._write.call(null, writer, end)
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__106324 = cljs.core.seq.call(null, ss);
    var chunk__106325 = null;
    var count__106326 = 0;
    var i__106327 = 0;
    while(true) {
      if(i__106327 < count__106326) {
        var s = cljs.core._nth.call(null, chunk__106325, i__106327);
        cljs.core._write.call(null, writer, s);
        var G__106328 = seq__106324;
        var G__106329 = chunk__106325;
        var G__106330 = count__106326;
        var G__106331 = i__106327 + 1;
        seq__106324 = G__106328;
        chunk__106325 = G__106329;
        count__106326 = G__106330;
        i__106327 = G__106331;
        continue
      }else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__106324);
        if(temp__4092__auto__) {
          var seq__106324__$1 = temp__4092__auto__;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__106324__$1)) {
            var c__4009__auto__ = cljs.core.chunk_first.call(null, seq__106324__$1);
            var G__106332 = cljs.core.chunk_rest.call(null, seq__106324__$1);
            var G__106333 = c__4009__auto__;
            var G__106334 = cljs.core.count.call(null, c__4009__auto__);
            var G__106335 = 0;
            seq__106324 = G__106332;
            chunk__106325 = G__106333;
            count__106326 = G__106334;
            i__106327 = G__106335;
            continue
          }else {
            var s = cljs.core.first.call(null, seq__106324__$1);
            cljs.core._write.call(null, writer, s);
            var G__106336 = cljs.core.next.call(null, seq__106324__$1);
            var G__106337 = null;
            var G__106338 = 0;
            var G__106339 = 0;
            seq__106324 = G__106336;
            chunk__106325 = G__106337;
            count__106326 = G__106338;
            i__106327 = G__106339;
            continue
          }
        }else {
          return null
        }
      }
      break
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if(arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return write_all__delegate.call(this, writer, ss)
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__106340) {
    var writer = cljs.core.first(arglist__106340);
    var ss = cljs.core.rest(arglist__106340);
    return write_all__delegate(writer, ss)
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null
};
cljs.core.flush = function flush() {
  return null
};
cljs.core.char_escapes = function() {
  var obj106342 = {'"':'\\"', "\\":"\\\\", "\u0008":"\\b", "\u000c":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj106342
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\u0008\u000c\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match]
  })), cljs.core.str('"')].join("")
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if(obj == null) {
    return cljs.core._write.call(null, writer, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core._write.call(null, writer, "#<undefined>")
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if(cljs.core.truth_(function() {
          var and__3273__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = function() {
              var G__106348 = obj;
              if(G__106348) {
                var bit__3911__auto__ = G__106348.cljs$lang$protocol_mask$partition0$ & 131072;
                if(bit__3911__auto__ || G__106348.cljs$core$IMeta$) {
                  return true
                }else {
                  if(!G__106348.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__106348)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__106348)
              }
            }();
            if(and__3273__auto____$1) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ")
        }else {
        }
        if(obj == null) {
          return cljs.core._write.call(null, writer, "nil")
        }else {
          if(obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts)
          }else {
            if(function() {
              var G__106349 = obj;
              if(G__106349) {
                var bit__3904__auto__ = G__106349.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if(bit__3904__auto__ || G__106349.cljs$core$IPrintWithWriter$) {
                  return true
                }else {
                  return false
                }
              }else {
                return false
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts)
            }else {
              if(cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""))
              }else {
                if(obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#<Array [", ", ", "]>", opts, obj)
                }else {
                  if(goog.isString(obj)) {
                    if(cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj))
                    }else {
                      return cljs.core._write.call(null, writer, obj)
                    }
                  }else {
                    if(cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(obj)].join(""), ">")
                    }else {
                      if(obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while(true) {
                            if(cljs.core.count.call(null, ns) < len) {
                              var G__106351 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__106351;
                              continue
                            }else {
                              return ns
                            }
                            break
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"')
                      }else {
                        if(cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"')
                        }else {
                          if(function() {
                            var G__106350 = obj;
                            if(G__106350) {
                              var bit__3911__auto__ = G__106350.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if(bit__3911__auto__ || G__106350.cljs$core$IPrintWithWriter$) {
                                return true
                              }else {
                                if(!G__106350.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__106350)
                                }else {
                                  return false
                                }
                              }
                            }else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__106350)
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts)
                          }else {
                            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                              return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(obj)].join(""), ">")
                            }else {
                              return null
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__106356 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__106357 = null;
  var count__106358 = 0;
  var i__106359 = 0;
  while(true) {
    if(i__106359 < count__106358) {
      var obj = cljs.core._nth.call(null, chunk__106357, i__106359);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__106360 = seq__106356;
      var G__106361 = chunk__106357;
      var G__106362 = count__106358;
      var G__106363 = i__106359 + 1;
      seq__106356 = G__106360;
      chunk__106357 = G__106361;
      count__106358 = G__106362;
      i__106359 = G__106363;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__106356);
      if(temp__4092__auto__) {
        var seq__106356__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__106356__$1)) {
          var c__4009__auto__ = cljs.core.chunk_first.call(null, seq__106356__$1);
          var G__106364 = cljs.core.chunk_rest.call(null, seq__106356__$1);
          var G__106365 = c__4009__auto__;
          var G__106366 = cljs.core.count.call(null, c__4009__auto__);
          var G__106367 = 0;
          seq__106356 = G__106364;
          chunk__106357 = G__106365;
          count__106358 = G__106366;
          i__106359 = G__106367;
          continue
        }else {
          var obj = cljs.core.first.call(null, seq__106356__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__106368 = cljs.core.next.call(null, seq__106356__$1);
          var G__106369 = null;
          var G__106370 = 0;
          var G__106371 = 0;
          seq__106356 = G__106368;
          chunk__106357 = G__106369;
          count__106358 = G__106370;
          i__106359 = G__106371;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return""
  }else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("")
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return"\n"
  }else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("")
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts))
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if(cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null)
  }else {
    return null
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr_str__delegate.call(this, objs)
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__106372) {
    var objs = cljs.core.seq(arglist__106372);
    return pr_str__delegate(objs)
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var prn_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn_str__delegate.call(this, objs)
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__106373) {
    var objs = cljs.core.seq(arglist__106373);
    return prn_str__delegate(objs)
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr__delegate.call(this, objs)
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__106374) {
    var objs = cljs.core.seq(arglist__106374);
    return pr__delegate(objs)
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return cljs_core_print__delegate.call(this, objs)
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__106375) {
    var objs = cljs.core.seq(arglist__106375);
    return cljs_core_print__delegate(objs)
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var print_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return print_str__delegate.call(this, objs)
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__106376) {
    var objs = cljs.core.seq(arglist__106376);
    return print_str__delegate(objs)
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if(cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
    }else {
      return null
    }
  };
  var println = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println__delegate.call(this, objs)
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__106377) {
    var objs = cljs.core.seq(arglist__106377);
    return println__delegate(objs)
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var println_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println_str__delegate.call(this, objs)
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__106378) {
    var objs = cljs.core.seq(arglist__106378);
    return println_str__delegate(objs)
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if(cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
    }else {
      return null
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn__delegate.call(this, objs)
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__106379) {
    var objs = cljs.core.seq(arglist__106379);
    return prn__delegate(objs)
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn
}();
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y)
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y)
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y)
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y)
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Atom")
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__106380 = cljs.core.seq.call(null, self__.watches);
  var chunk__106381 = null;
  var count__106382 = 0;
  var i__106383 = 0;
  while(true) {
    if(i__106383 < count__106382) {
      var vec__106384 = cljs.core._nth.call(null, chunk__106381, i__106383);
      var key = cljs.core.nth.call(null, vec__106384, 0, null);
      var f = cljs.core.nth.call(null, vec__106384, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__106386 = seq__106380;
      var G__106387 = chunk__106381;
      var G__106388 = count__106382;
      var G__106389 = i__106383 + 1;
      seq__106380 = G__106386;
      chunk__106381 = G__106387;
      count__106382 = G__106388;
      i__106383 = G__106389;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__106380);
      if(temp__4092__auto__) {
        var seq__106380__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__106380__$1)) {
          var c__4009__auto__ = cljs.core.chunk_first.call(null, seq__106380__$1);
          var G__106390 = cljs.core.chunk_rest.call(null, seq__106380__$1);
          var G__106391 = c__4009__auto__;
          var G__106392 = cljs.core.count.call(null, c__4009__auto__);
          var G__106393 = 0;
          seq__106380 = G__106390;
          chunk__106381 = G__106391;
          count__106382 = G__106392;
          i__106383 = G__106393;
          continue
        }else {
          var vec__106385 = cljs.core.first.call(null, seq__106380__$1);
          var key = cljs.core.nth.call(null, vec__106385, 0, null);
          var f = cljs.core.nth.call(null, vec__106385, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__106394 = cljs.core.next.call(null, seq__106380__$1);
          var G__106395 = null;
          var G__106396 = 0;
          var G__106397 = 0;
          seq__106380 = G__106394;
          chunk__106381 = G__106395;
          count__106382 = G__106396;
          i__106383 = G__106397;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key)
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#<Atom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, ">")
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches)
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null)
  };
  var atom__2 = function() {
    var G__106401__delegate = function(x, p__106398) {
      var map__106400 = p__106398;
      var map__106400__$1 = cljs.core.seq_QMARK_.call(null, map__106400) ? cljs.core.apply.call(null, cljs.core.hash_map, map__106400) : map__106400;
      var validator = cljs.core.get.call(null, map__106400__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__106400__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null)
    };
    var G__106401 = function(x, var_args) {
      var p__106398 = null;
      if(arguments.length > 1) {
        p__106398 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__106401__delegate.call(this, x, p__106398)
    };
    G__106401.cljs$lang$maxFixedArity = 1;
    G__106401.cljs$lang$applyTo = function(arglist__106402) {
      var x = cljs.core.first(arglist__106402);
      var p__106398 = cljs.core.rest(arglist__106402);
      return G__106401__delegate(x, p__106398)
    };
    G__106401.cljs$core$IFn$_invoke$arity$variadic = G__106401__delegate;
    return G__106401
  }();
  atom = function(x, var_args) {
    var p__106398 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var temp__4092__auto___106403 = a.validator;
  if(cljs.core.truth_(temp__4092__auto___106403)) {
    var validate_106404 = temp__4092__auto___106403;
    if(cljs.core.truth_(validate_106404.call(null, new_value))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }else {
  }
  var old_value_106405 = a.state;
  a.state = new_value;
  cljs.core._notify_watches.call(null, a, old_value_106405, new_value);
  return new_value
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state))
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x))
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y))
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z))
  };
  var swap_BANG___6 = function() {
    var G__106406__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more))
    };
    var G__106406 = function(a, f, x, y, z, var_args) {
      var more = null;
      if(arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__106406__delegate.call(this, a, f, x, y, z, more)
    };
    G__106406.cljs$lang$maxFixedArity = 5;
    G__106406.cljs$lang$applyTo = function(arglist__106407) {
      var a = cljs.core.first(arglist__106407);
      arglist__106407 = cljs.core.next(arglist__106407);
      var f = cljs.core.first(arglist__106407);
      arglist__106407 = cljs.core.next(arglist__106407);
      var x = cljs.core.first(arglist__106407);
      arglist__106407 = cljs.core.next(arglist__106407);
      var y = cljs.core.first(arglist__106407);
      arglist__106407 = cljs.core.next(arglist__106407);
      var z = cljs.core.first(arglist__106407);
      var more = cljs.core.rest(arglist__106407);
      return G__106406__delegate(a, f, x, y, z, more)
    };
    G__106406.cljs$core$IFn$_invoke$arity$variadic = G__106406__delegate;
    return G__106406
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if(cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true
  }else {
    return false
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o)
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args)
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__106408) {
    var iref = cljs.core.first(arglist__106408);
    arglist__106408 = cljs.core.next(arglist__106408);
    var f = cljs.core.first(arglist__106408);
    var args = cljs.core.rest(arglist__106408);
    return alter_meta_BANG___delegate(iref, f, args)
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f)
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key)
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__")
  };
  var gensym__1 = function(prefix_string) {
    if(cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0)
    }else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""))
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Delay")
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state))
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__106409) {
    var map__106410 = p__106409;
    var map__106410__$1 = cljs.core.seq_QMARK_.call(null, map__106410) ? cljs.core.apply.call(null, cljs.core.hash_map, map__106410) : map__106410;
    var curr_state = map__106410__$1;
    var done = cljs.core.get.call(null, map__106410__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if(cljs.core.truth_(done)) {
      return curr_state
    }else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null)
    }
  }))
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f)
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay
};
cljs.core.force = function force(x) {
  if(cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x)
  }else {
    return x
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d)
};
cljs.core.IEncodeJS = function() {
  var obj106412 = {};
  return obj106412
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._clj__GT_js["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj->js", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._key__GT_js[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._key__GT_js["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key->js", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if(function() {
    var G__106414 = k;
    if(G__106414) {
      var bit__3911__auto__ = null;
      if(cljs.core.truth_(function() {
        var or__3285__auto__ = bit__3911__auto__;
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          return G__106414.cljs$core$IEncodeJS$
        }
      }())) {
        return true
      }else {
        if(!G__106414.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__106414)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__106414)
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k)
  }else {
    if(typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k)
    }else {
      return cljs.core.pr_str.call(null, k)
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if(x == null) {
    return null
  }else {
    if(function() {
      var G__106424 = x;
      if(G__106424) {
        var bit__3911__auto__ = null;
        if(cljs.core.truth_(function() {
          var or__3285__auto__ = bit__3911__auto__;
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return G__106424.cljs$core$IEncodeJS$
          }
        }())) {
          return true
        }else {
          if(!G__106424.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__106424)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__106424)
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x)
    }else {
      if(x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x)
      }else {
        if(x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("")
        }else {
          if(cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj106426 = {};
              return obj106426
            }();
            var seq__106427_106433 = cljs.core.seq.call(null, x);
            var chunk__106428_106434 = null;
            var count__106429_106435 = 0;
            var i__106430_106436 = 0;
            while(true) {
              if(i__106430_106436 < count__106429_106435) {
                var vec__106431_106437 = cljs.core._nth.call(null, chunk__106428_106434, i__106430_106436);
                var k_106438 = cljs.core.nth.call(null, vec__106431_106437, 0, null);
                var v_106439 = cljs.core.nth.call(null, vec__106431_106437, 1, null);
                m[cljs.core.key__GT_js.call(null, k_106438)] = clj__GT_js.call(null, v_106439);
                var G__106440 = seq__106427_106433;
                var G__106441 = chunk__106428_106434;
                var G__106442 = count__106429_106435;
                var G__106443 = i__106430_106436 + 1;
                seq__106427_106433 = G__106440;
                chunk__106428_106434 = G__106441;
                count__106429_106435 = G__106442;
                i__106430_106436 = G__106443;
                continue
              }else {
                var temp__4092__auto___106444 = cljs.core.seq.call(null, seq__106427_106433);
                if(temp__4092__auto___106444) {
                  var seq__106427_106445__$1 = temp__4092__auto___106444;
                  if(cljs.core.chunked_seq_QMARK_.call(null, seq__106427_106445__$1)) {
                    var c__4009__auto___106446 = cljs.core.chunk_first.call(null, seq__106427_106445__$1);
                    var G__106447 = cljs.core.chunk_rest.call(null, seq__106427_106445__$1);
                    var G__106448 = c__4009__auto___106446;
                    var G__106449 = cljs.core.count.call(null, c__4009__auto___106446);
                    var G__106450 = 0;
                    seq__106427_106433 = G__106447;
                    chunk__106428_106434 = G__106448;
                    count__106429_106435 = G__106449;
                    i__106430_106436 = G__106450;
                    continue
                  }else {
                    var vec__106432_106451 = cljs.core.first.call(null, seq__106427_106445__$1);
                    var k_106452 = cljs.core.nth.call(null, vec__106432_106451, 0, null);
                    var v_106453 = cljs.core.nth.call(null, vec__106432_106451, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_106452)] = clj__GT_js.call(null, v_106453);
                    var G__106454 = cljs.core.next.call(null, seq__106427_106445__$1);
                    var G__106455 = null;
                    var G__106456 = 0;
                    var G__106457 = 0;
                    seq__106427_106433 = G__106454;
                    chunk__106428_106434 = G__106455;
                    count__106429_106435 = G__106456;
                    i__106430_106436 = G__106457;
                    continue
                  }
                }else {
                }
              }
              break
            }
            return m
          }else {
            if(cljs.core.coll_QMARK_.call(null, x)) {
              return cljs.core.apply.call(null, cljs.core.array, cljs.core.map.call(null, clj__GT_js, x))
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x
              }else {
                return null
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj106459 = {};
  return obj106459
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._js__GT_clj["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js->clj", x);
        }
      }
    }().call(null, x, options)
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null))
  };
  var js__GT_clj__2 = function() {
    var G__106480__delegate = function(x, opts) {
      if(function() {
        var G__106470 = x;
        if(G__106470) {
          var bit__3911__auto__ = null;
          if(cljs.core.truth_(function() {
            var or__3285__auto__ = bit__3911__auto__;
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return G__106470.cljs$core$IEncodeClojure$
            }
          }())) {
            return true
          }else {
            if(!G__106470.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__106470)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__106470)
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts))
      }else {
        if(cljs.core.seq.call(null, opts)) {
          var map__106471 = opts;
          var map__106471__$1 = cljs.core.seq_QMARK_.call(null, map__106471) ? cljs.core.apply.call(null, cljs.core.hash_map, map__106471) : map__106471;
          var keywordize_keys = cljs.core.get.call(null, map__106471__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__106471, map__106471__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if(cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1))
              }else {
                if(cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1))
                }else {
                  if(x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1))
                  }else {
                    if(cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__3978__auto__ = function(map__106471, map__106471__$1, keywordize_keys, keyfn) {
                          return function iter__106476(s__106477) {
                            return new cljs.core.LazySeq(null, function(map__106471, map__106471__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__106477__$1 = s__106477;
                                while(true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__106477__$1);
                                  if(temp__4092__auto__) {
                                    var s__106477__$2 = temp__4092__auto__;
                                    if(cljs.core.chunked_seq_QMARK_.call(null, s__106477__$2)) {
                                      var c__3976__auto__ = cljs.core.chunk_first.call(null, s__106477__$2);
                                      var size__3977__auto__ = cljs.core.count.call(null, c__3976__auto__);
                                      var b__106479 = cljs.core.chunk_buffer.call(null, size__3977__auto__);
                                      if(function() {
                                        var i__106478 = 0;
                                        while(true) {
                                          if(i__106478 < size__3977__auto__) {
                                            var k = cljs.core._nth.call(null, c__3976__auto__, i__106478);
                                            cljs.core.chunk_append.call(null, b__106479, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__106481 = i__106478 + 1;
                                            i__106478 = G__106481;
                                            continue
                                          }else {
                                            return true
                                          }
                                          break
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__106479), iter__106476.call(null, cljs.core.chunk_rest.call(null, s__106477__$2)))
                                      }else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__106479), null)
                                      }
                                    }else {
                                      var k = cljs.core.first.call(null, s__106477__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__106476.call(null, cljs.core.rest.call(null, s__106477__$2)))
                                    }
                                  }else {
                                    return null
                                  }
                                  break
                                }
                              }
                            }(map__106471, map__106471__$1, keywordize_keys, keyfn), null, null)
                          }
                        }(map__106471, map__106471__$1, keywordize_keys, keyfn);
                        return iter__3978__auto__.call(null, cljs.core.js_keys.call(null, x__$1))
                      }())
                    }else {
                      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1
                      }else {
                        return null
                      }
                    }
                  }
                }
              }
            }
          }(map__106471, map__106471__$1, keywordize_keys, keyfn);
          return f.call(null, x)
        }else {
          return null
        }
      }
    };
    var G__106480 = function(x, var_args) {
      var opts = null;
      if(arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__106480__delegate.call(this, x, opts)
    };
    G__106480.cljs$lang$maxFixedArity = 1;
    G__106480.cljs$lang$applyTo = function(arglist__106482) {
      var x = cljs.core.first(arglist__106482);
      var opts = cljs.core.rest(arglist__106482);
      return G__106480__delegate(x, opts)
    };
    G__106480.cljs$core$IFn$_invoke$arity$variadic = G__106480__delegate;
    return G__106480
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__106483__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v
      }else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret
      }
    };
    var G__106483 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__106483__delegate.call(this, args)
    };
    G__106483.cljs$lang$maxFixedArity = 0;
    G__106483.cljs$lang$applyTo = function(arglist__106484) {
      var args = cljs.core.seq(arglist__106484);
      return G__106483__delegate(args)
    };
    G__106483.cljs$core$IFn$_invoke$arity$variadic = G__106483__delegate;
    return G__106483
  }()
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while(true) {
      var ret = f.call(null);
      if(cljs.core.fn_QMARK_.call(null, ret)) {
        var G__106485 = ret;
        f = G__106485;
        continue
      }else {
        return ret
      }
      break
    }
  };
  var trampoline__2 = function() {
    var G__106486__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args)
      })
    };
    var G__106486 = function(f, var_args) {
      var args = null;
      if(arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__106486__delegate.call(this, f, args)
    };
    G__106486.cljs$lang$maxFixedArity = 1;
    G__106486.cljs$lang$applyTo = function(arglist__106487) {
      var f = cljs.core.first(arglist__106487);
      var args = cljs.core.rest(arglist__106487);
      return G__106486__delegate(f, args)
    };
    G__106486.cljs$core$IFn$_invoke$arity$variadic = G__106486__delegate;
    return G__106486
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1)
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n)
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)))
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x))
  }, cljs.core.PersistentArrayMap.EMPTY, coll)
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null)
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if(cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null))
  }else {
  }
  return cljs.core._global_hierarchy
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args)
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args)
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__106488) {
    var f = cljs.core.first(arglist__106488);
    var args = cljs.core.rest(arglist__106488);
    return swap_global_hierarchy_BANG___delegate(f, args)
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent)
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3285__auto__ = cljs.core._EQ_.call(null, child, parent);
    if(or__3285__auto__) {
      return or__3285__auto__
    }else {
      var or__3285__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if(or__3285__auto____$1) {
        return or__3285__auto____$1
      }else {
        var and__3273__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if(and__3273__auto__) {
          var and__3273__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if(and__3273__auto____$1) {
            var and__3273__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if(and__3273__auto____$2) {
              var ret = true;
              var i = 0;
              while(true) {
                if(!ret || i === cljs.core.count.call(null, parent)) {
                  return ret
                }else {
                  var G__106489 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__106490 = i + 1;
                  ret = G__106489;
                  i = G__106490;
                  continue
                }
                break
              }
            }else {
              return and__3273__auto____$2
            }
          }else {
            return and__3273__auto____$1
          }
        }else {
          return and__3273__auto__
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if(cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null
  };
  var derive__3 = function(h, tag, parent) {
    if(cljs.core.not_EQ_.call(null, tag, parent)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not=", "not=", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))))
          }
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)))
      }
    }(tp, td, ta);
    var or__3285__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null)
    }();
    if(cljs.core.truth_(or__3285__auto__)) {
      return or__3285__auto__
    }else {
      return h
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__106491_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__106491_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__106491_SHARP_), cljs.core.second.call(null, p1__106491_SHARP_)))
      }
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if(cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__106492_SHARP_, p2__106493_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__106492_SHARP_, p2__106493_SHARP_)
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq))
    }else {
      return h
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table)
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy)
  })
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3285__auto__ = cljs.core.truth_(function() {
    var and__3273__auto__ = xprefs;
    if(cljs.core.truth_(and__3273__auto__)) {
      return xprefs.call(null, y)
    }else {
      return and__3273__auto__
    }
  }()) ? true : null;
  if(cljs.core.truth_(or__3285__auto__)) {
    return or__3285__auto__
  }else {
    var or__3285__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while(true) {
        if(cljs.core.count.call(null, ps) > 0) {
          if(cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          }else {
          }
          var G__106494 = cljs.core.rest.call(null, ps);
          ps = G__106494;
          continue
        }else {
          return null
        }
        break
      }
    }();
    if(cljs.core.truth_(or__3285__auto____$1)) {
      return or__3285__auto____$1
    }else {
      var or__3285__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while(true) {
          if(cljs.core.count.call(null, ps) > 0) {
            if(cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            }else {
            }
            var G__106495 = cljs.core.rest.call(null, ps);
            ps = G__106495;
            continue
          }else {
            return null
          }
          break
        }
      }();
      if(cljs.core.truth_(or__3285__auto____$2)) {
        return or__3285__auto____$2
      }else {
        return false
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3285__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if(cljs.core.truth_(or__3285__auto__)) {
    return or__3285__auto__
  }else {
    return cljs.core.isa_QMARK_.call(null, x, y)
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__106498) {
    var vec__106499 = p__106498;
    var k = cljs.core.nth.call(null, vec__106499, 0, null);
    var _ = cljs.core.nth.call(null, vec__106499, 1, null);
    var e = vec__106499;
    if(cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3285__auto__ = be == null;
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table)
        }
      }()) ? e : be;
      if(cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      }else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -> "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2
    }else {
      return be
    }
  }, null, cljs.core.deref.call(null, method_table));
  if(cljs.core.truth_(best_entry)) {
    if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry)
    }else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
    }
  }else {
    return null
  }
};
cljs.core.IMultiFn = function() {
  var obj106501 = {};
  return obj106501
}();
cljs.core._reset = function _reset(mf) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._reset[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._reset["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._add_method[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._add_method["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method)
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._remove_method[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._remove_method["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._prefer_method[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._prefer_method["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y)
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._get_method[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._get_method["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._methods = function _methods(mf) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._methods[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._methods["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._prefers = function _prefers(mf) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._prefers[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._prefers["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._dispatch[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._dispatch["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args)
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if(cljs.core.truth_(target_fn)) {
  }else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args)
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/MultiFn")
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null
  });
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  }else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn
  }else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if(cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn
    }else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val)
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if(cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  }else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y))
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args)
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
};
cljs.core.MultiFn.prototype.call = function() {
  var G__106502__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args)
  };
  var G__106502 = function(_, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__106502__delegate.call(this, _, args)
  };
  G__106502.cljs$lang$maxFixedArity = 1;
  G__106502.cljs$lang$applyTo = function(arglist__106503) {
    var _ = cljs.core.first(arglist__106503);
    var args = cljs.core.rest(arglist__106503);
    return G__106502__delegate(_, args)
  };
  G__106502.cljs$core$IFn$_invoke$arity$variadic = G__106502__delegate;
  return G__106502
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args)
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn)
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val)
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y)
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn)
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val)
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn)
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/UUID")
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1))
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid)
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3832__auto__, writer__3833__auto__, opts__3834__auto__) {
  return cljs.core._write.call(null, writer__3833__auto__, "cljs.core/ExceptionInfo")
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause)
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null)
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause)
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info
}();
cljs.core.ex_data = function ex_data(ex) {
  if(ex instanceof cljs.core.ExceptionInfo) {
    return ex.data
  }else {
    return null
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if(ex instanceof Error) {
    return ex.message
  }else {
    return null
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if(ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause
  }else {
    return null
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if(cljs.core.truth_(pred.call(null, x, y))) {
      return-1
    }else {
      if(cljs.core.truth_(pred.call(null, y, x))) {
        return 1
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "&", "&", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x)
};
goog.provide("cljs_uuid.core");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid.core.make_random = function make_random() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16)
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16)
  };
  return new cljs.core.UUID((new goog.string.StringBuffer(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null))).toString())
};
cljs_uuid.core.make_v4 = cljs_uuid.core.make_random;
cljs_uuid.core.make_random_string = function make_random_string() {
  return cljs_uuid.core.make_random.call(null).uuid
};
goog.provide("chaperone.crossover.user");
goog.require("cljs.core");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.user.User = function(id, firstname, lastname, password, email, photo, last_logged_in, __meta, __extmap) {
  this.id = id;
  this.firstname = firstname;
  this.lastname = lastname;
  this.password = password;
  this.email = email;
  this.photo = photo;
  this.last_logged_in = last_logged_in;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 7) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3842__auto__) {
  var self__ = this;
  var this__3842__auto____$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, this__3842__auto____$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3847__auto__, k__3848__auto__) {
  var self__ = this;
  var this__3847__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3847__auto____$1, k__3848__auto__, null)
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3849__auto__, k108677, else__3850__auto__) {
  var self__ = this;
  var this__3849__auto____$1 = this;
  if(cljs.core.keyword_identical_QMARK_.call(null, k108677, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id
  }else {
    if(cljs.core.keyword_identical_QMARK_.call(null, k108677, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229))) {
      return self__.firstname
    }else {
      if(cljs.core.keyword_identical_QMARK_.call(null, k108677, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043))) {
        return self__.lastname
      }else {
        if(cljs.core.keyword_identical_QMARK_.call(null, k108677, new cljs.core.Keyword(null, "password", "password", 2230889997))) {
          return self__.password
        }else {
          if(cljs.core.keyword_identical_QMARK_.call(null, k108677, new cljs.core.Keyword(null, "email", "email", 1110523662))) {
            return self__.email
          }else {
            if(cljs.core.keyword_identical_QMARK_.call(null, k108677, new cljs.core.Keyword(null, "photo", "photo", 1120547236))) {
              return self__.photo
            }else {
              if(cljs.core.keyword_identical_QMARK_.call(null, k108677, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907))) {
                return self__.last_logged_in
              }else {
                if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return cljs.core.get.call(null, self__.__extmap, k108677, else__3850__auto__)
                }else {
                  return null
                }
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3854__auto__, k__3855__auto__, G__108676) {
  var self__ = this;
  var this__3854__auto____$1 = this;
  var pred__108679 = cljs.core.keyword_identical_QMARK_;
  var expr__108680 = k__3855__auto__;
  if(cljs.core.truth_(pred__108679.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__108680))) {
    return new chaperone.crossover.user.User(G__108676, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
  }else {
    if(cljs.core.truth_(pred__108679.call(null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), expr__108680))) {
      return new chaperone.crossover.user.User(self__.id, G__108676, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
    }else {
      if(cljs.core.truth_(pred__108679.call(null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), expr__108680))) {
        return new chaperone.crossover.user.User(self__.id, self__.firstname, G__108676, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
      }else {
        if(cljs.core.truth_(pred__108679.call(null, new cljs.core.Keyword(null, "password", "password", 2230889997), expr__108680))) {
          return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, G__108676, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
        }else {
          if(cljs.core.truth_(pred__108679.call(null, new cljs.core.Keyword(null, "email", "email", 1110523662), expr__108680))) {
            return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, G__108676, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
          }else {
            if(cljs.core.truth_(pred__108679.call(null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), expr__108680))) {
              return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, G__108676, self__.last_logged_in, self__.__meta, self__.__extmap, null)
            }else {
              if(cljs.core.truth_(pred__108679.call(null, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), expr__108680))) {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, G__108676, self__.__meta, self__.__extmap, null)
              }else {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3855__auto__, G__108676), null)
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3861__auto__, writer__3862__auto__, opts__3863__auto__) {
  var self__ = this;
  var this__3861__auto____$1 = this;
  var pr_pair__3864__auto__ = function(keyval__3865__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3862__auto__, cljs.core.pr_writer, "", " ", "", opts__3863__auto__, keyval__3865__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3862__auto__, pr_pair__3864__auto__, "#chaperone.crossover.user.User{", ", ", "}", opts__3863__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap))
};
chaperone.crossover.user.User.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3852__auto__, entry__3853__auto__) {
  var self__ = this;
  var this__3852__auto____$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry__3853__auto__)) {
    return cljs.core._assoc.call(null, this__3852__auto____$1, cljs.core._nth.call(null, entry__3853__auto__, 0), cljs.core._nth.call(null, entry__3853__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3852__auto____$1, entry__3853__auto__)
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3859__auto__) {
  var self__ = this;
  var this__3859__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap))
};
chaperone.crossover.user.User.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3851__auto__) {
  var self__ = this;
  var this__3851__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap)
};
chaperone.crossover.user.User.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3843__auto__, other__3844__auto__) {
  var self__ = this;
  var this__3843__auto____$1 = this;
  if(cljs.core.truth_(function() {
    var and__3273__auto__ = other__3844__auto__;
    if(cljs.core.truth_(and__3273__auto__)) {
      return this__3843__auto____$1.constructor === other__3844__auto__.constructor && cljs.core.equiv_map.call(null, this__3843__auto____$1, other__3844__auto__)
    }else {
      return and__3273__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3846__auto__, G__108676) {
  var self__ = this;
  var this__3846__auto____$1 = this;
  return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, G__108676, self__.__extmap, self__.__hash)
};
chaperone.crossover.user.User.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3845__auto__) {
  var self__ = this;
  var this__3845__auto____$1 = this;
  return self__.__meta
};
chaperone.crossover.user.User.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3856__auto__, k__3857__auto__) {
  var self__ = this;
  var this__3856__auto____$1 = this;
  if(cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), null, new cljs.core.Keyword(null, "email", "email", 1110523662), null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), null, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), null, new cljs.core.Keyword(null, "password", "password", 2230889997), null], null), null), k__3857__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3856__auto____$1), self__.__meta), k__3857__auto__)
  }else {
    return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3857__auto__)), null)
  }
};
chaperone.crossover.user.User.cljs$lang$type = true;
chaperone.crossover.user.User.cljs$lang$ctorPrSeq = function(this__3881__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.user/User")
};
chaperone.crossover.user.User.cljs$lang$ctorPrWriter = function(this__3881__auto__, writer__3882__auto__) {
  return cljs.core._write.call(null, writer__3882__auto__, "chaperone.crossover.user/User")
};
chaperone.crossover.user.__GT_User = function __GT_User(id, firstname, lastname, password, email, photo, last_logged_in) {
  return new chaperone.crossover.user.User(id, firstname, lastname, password, email, photo, last_logged_in)
};
chaperone.crossover.user.map__GT_User = function map__GT_User(G__108678) {
  return new chaperone.crossover.user.User((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__108678), (new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(G__108678), (new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(G__108678), (new cljs.core.Keyword(null, "password", "password", 2230889997)).cljs$core$IFn$_invoke$arity$1(G__108678), (new cljs.core.Keyword(null, "email", 
  "email", 1110523662)).cljs$core$IFn$_invoke$arity$1(G__108678), (new cljs.core.Keyword(null, "photo", "photo", 1120547236)).cljs$core$IFn$_invoke$arity$1(G__108678), (new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)).cljs$core$IFn$_invoke$arity$1(G__108678), null, cljs.core.dissoc.call(null, G__108678, new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), new cljs.core.Keyword(null, "lastname", "lastname", 
  3850225043), new cljs.core.Keyword(null, "password", "password", 2230889997), new cljs.core.Keyword(null, "email", "email", 1110523662), new cljs.core.Keyword(null, "photo", "photo", 1120547236), new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)))
};
chaperone.crossover.user.new_user = function() {
  var new_user__delegate = function(firstname, lastname, email, password, p__108682) {
    var map__108684 = p__108682;
    var map__108684__$1 = cljs.core.seq_QMARK_.call(null, map__108684) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108684) : map__108684;
    var last_logged_in = cljs.core.get.call(null, map__108684__$1, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907));
    var photo = cljs.core.get.call(null, map__108684__$1, new cljs.core.Keyword(null, "photo", "photo", 1120547236));
    return chaperone.crossover.user.__GT_User.call(null, cljs_uuid.core.make_random_string.call(null), firstname, lastname, password, email, photo, last_logged_in)
  };
  var new_user = function(firstname, lastname, email, password, var_args) {
    var p__108682 = null;
    if(arguments.length > 4) {
      p__108682 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
    }
    return new_user__delegate.call(this, firstname, lastname, email, password, p__108682)
  };
  new_user.cljs$lang$maxFixedArity = 4;
  new_user.cljs$lang$applyTo = function(arglist__108685) {
    var firstname = cljs.core.first(arglist__108685);
    arglist__108685 = cljs.core.next(arglist__108685);
    var lastname = cljs.core.first(arglist__108685);
    arglist__108685 = cljs.core.next(arglist__108685);
    var email = cljs.core.first(arglist__108685);
    arglist__108685 = cljs.core.next(arglist__108685);
    var password = cljs.core.first(arglist__108685);
    var p__108682 = cljs.core.rest(arglist__108685);
    return new_user__delegate(firstname, lastname, email, password, p__108682)
  };
  new_user.cljs$core$IFn$_invoke$arity$variadic = new_user__delegate;
  return new_user
}();
goog.provide("purnam.common");
goog.require("cljs.core");
purnam.common.flags = function() {
  var obj108675 = {};
  return obj108675
}();
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("")
};
clojure.string.replace = function replace(s, match, replacement) {
  if(typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement)
  }else {
    if(cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      }else {
        return null
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement)
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll)
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll))
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase()
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase()
};
clojure.string.capitalize = function capitalize(s) {
  if(cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s)
  }else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("")
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while(true) {
    if(cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__108660 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__108660;
      continue
    }else {
      return v__$1
    }
    break
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if(cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v)
  }else {
    return v
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if(limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "")
  }else {
    var pred__108664 = cljs.core._EQ_;
    var expr__108665 = limit;
    if(cljs.core.truth_(pred__108664.call(null, 1, expr__108665))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null)
    }else {
      if(cljs.core.truth_(pred__108664.call(null, 2, expr__108665))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null)
      }else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c))
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0)
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while(true) {
        if(cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1)
        }else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if(cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__108667 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__108668 = limit__$1 - 1;
            var G__108669 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__108667;
            limit__$1 = G__108668;
            parts = G__108669;
            continue
          }else {
            return cljs.core.conj.call(null, parts, s__$1)
          }
        }
        break
      }
    }())
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/)
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s)
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s)
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s)
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while(true) {
    if(index === 0) {
      return""
    }else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if(cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__108670 = index - 1;
        index = G__108670;
        continue
      }else {
        return s.substring(0, index)
      }
    }
    break
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s)
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while(true) {
    if(cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString()
    }else {
      var ch = s.charAt(index);
      var temp__4090__auto___108671 = cljs.core.get.call(null, cmap, ch);
      if(cljs.core.truth_(temp__4090__auto___108671)) {
        var replacement_108672 = temp__4090__auto___108671;
        buffer.append([cljs.core.str(replacement_108672)].join(""))
      }else {
        buffer.append(ch)
      }
      var G__108673 = index + 1;
      index = G__108673;
      continue
    }
    break
  }
};
goog.provide("purnam.cljs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("purnam.common");
goog.require("purnam.common");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.cljs.nested_val = function nested_val(p__108498, val) {
  var vec__108502 = p__108498;
  var k = cljs.core.nth.call(null, vec__108502, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__108502, 1);
  if(k == null) {
    return val
  }else {
    var o = function() {
      var obj108504 = {};
      return obj108504
    }();
    o[k] = nested_val.call(null, ks, val);
    return o
  }
};
purnam.cljs.nested_delete = function nested_delete(p__108505, val) {
  var vec__108507 = p__108505;
  var k = cljs.core.nth.call(null, vec__108507, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__108507, 1);
  if(ks == null) {
    delete val[k]
  }else {
    nested_delete.call(null, ks, val)
  }
  return val
};
purnam.cljs.aset_in = function() {
  var aset_in = null;
  var aset_in__2 = function(var$, arr) {
    return aset_in.call(null, var$, arr, null)
  };
  var aset_in__3 = function(var$, arr, val) {
    var vec__108509 = arr;
    var k = cljs.core.nth.call(null, vec__108509, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__108509, 1);
    if(k == null) {
    }else {
      if(cljs.core.empty_QMARK_.call(null, ks)) {
        if(cljs.core.truth_(val)) {
          var$[k] = val
        }else {
          delete var$[k]
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var temp__4090__auto___108510 = var$[k];
          if(cljs.core.truth_(temp__4090__auto___108510)) {
            var svar_108511 = temp__4090__auto___108510;
            aset_in.call(null, svar_108511, ks, val)
          }else {
            if(cljs.core.truth_(val)) {
              var$[k] = purnam.cljs.nested_val.call(null, ks, val)
            }else {
            }
          }
        }else {
        }
      }
    }
    return var$
  };
  aset_in = function(var$, arr, val) {
    switch(arguments.length) {
      case 2:
        return aset_in__2.call(this, var$, arr);
      case 3:
        return aset_in__3.call(this, var$, arr, val)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset_in.cljs$core$IFn$_invoke$arity$2 = aset_in__2;
  aset_in.cljs$core$IFn$_invoke$arity$3 = aset_in__3;
  return aset_in
}();
purnam.cljs.aget_in = function() {
  var aget_in = null;
  var aget_in__1 = function(var$) {
    return var$
  };
  var aget_in__2 = function(var$, arr) {
    if(var$ == null) {
      return null
    }else {
      if(cljs.core.empty_QMARK_.call(null, arr)) {
        return var$
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return aget_in.call(null, var$[cljs.core.first.call(null, arr)], cljs.core.next.call(null, arr))
        }else {
          return null
        }
      }
    }
  };
  aget_in = function(var$, arr) {
    switch(arguments.length) {
      case 1:
        return aget_in__1.call(this, var$);
      case 2:
        return aget_in__2.call(this, var$, arr)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget_in.cljs$core$IFn$_invoke$arity$1 = aget_in__1;
  aget_in.cljs$core$IFn$_invoke$arity$2 = aget_in__2;
  return aget_in
}();
purnam.cljs.js_strkey = function js_strkey(x) {
  if(typeof x === "string") {
    return x
  }else {
    if(x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(x)].join("")
      }else {
        return null
      }
    }
  }
};
purnam.cljs.js_obj_name = function js_obj_name(this$) {
  var temp__4090__auto__ = cljs.core.re_find.call(null, /^function (\w+)/, [cljs.core.str(this$)].join(""));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var vec__108513 = temp__4090__auto__;
    var _ = cljs.core.nth.call(null, vec__108513, 0, null);
    var n = cljs.core.nth.call(null, vec__108513, 1, null);
    return n
  }else {
    return"Object"
  }
};
purnam.cljs.js_lookup = function() {
  var js_lookup = null;
  var js_lookup__2 = function(o, k) {
    return o[purnam.cljs.js_strkey.call(null, k)]
  };
  var js_lookup__3 = function(o, k, not_found) {
    var s = purnam.cljs.js_strkey.call(null, k);
    var temp__4090__auto__ = o[s];
    if(cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return res
    }else {
      return not_found
    }
  };
  js_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return js_lookup__2.call(this, o, k);
      case 3:
        return js_lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_lookup.cljs$core$IFn$_invoke$arity$2 = js_lookup__2;
  js_lookup.cljs$core$IFn$_invoke$arity$3 = js_lookup__3;
  return js_lookup
}();
purnam.cljs.js_assoc = function() {
  var js_assoc = null;
  var js_assoc__3 = function(o, k, v) {
    o[purnam.cljs.js_strkey.call(null, k)] = v;
    return o
  };
  var js_assoc__4 = function() {
    var G__108514__delegate = function(o, k, v, more) {
      while(true) {
        js_assoc.call(null, o, k, v);
        if(cljs.core.truth_(more)) {
          var G__108515 = o;
          var G__108516 = cljs.core.first.call(null, more);
          var G__108517 = cljs.core.second.call(null, more);
          var G__108518 = cljs.core.nnext.call(null, more);
          o = G__108515;
          k = G__108516;
          v = G__108517;
          more = G__108518;
          continue
        }else {
          return o
        }
        break
      }
    };
    var G__108514 = function(o, k, v, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__108514__delegate.call(this, o, k, v, more)
    };
    G__108514.cljs$lang$maxFixedArity = 3;
    G__108514.cljs$lang$applyTo = function(arglist__108519) {
      var o = cljs.core.first(arglist__108519);
      arglist__108519 = cljs.core.next(arglist__108519);
      var k = cljs.core.first(arglist__108519);
      arglist__108519 = cljs.core.next(arglist__108519);
      var v = cljs.core.first(arglist__108519);
      var more = cljs.core.rest(arglist__108519);
      return G__108514__delegate(o, k, v, more)
    };
    G__108514.cljs$core$IFn$_invoke$arity$variadic = G__108514__delegate;
    return G__108514
  }();
  js_assoc = function(o, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return js_assoc__3.call(this, o, k, v);
      default:
        return js_assoc__4.cljs$core$IFn$_invoke$arity$variadic(o, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_assoc.cljs$lang$maxFixedArity = 3;
  js_assoc.cljs$lang$applyTo = js_assoc__4.cljs$lang$applyTo;
  js_assoc.cljs$core$IFn$_invoke$arity$3 = js_assoc__3;
  js_assoc.cljs$core$IFn$_invoke$arity$variadic = js_assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return js_assoc
}();
purnam.cljs.js_dissoc = function() {
  var js_dissoc__delegate = function(o, k, more) {
    while(true) {
      delete o[purnam.cljs.js_strkey.call(null, k)];
      if(cljs.core.truth_(more)) {
        var G__108520 = o;
        var G__108521 = cljs.core.first.call(null, more);
        var G__108522 = cljs.core.next.call(null, more);
        o = G__108520;
        k = G__108521;
        more = G__108522;
        continue
      }else {
        return o
      }
      break
    }
  };
  var js_dissoc = function(o, k, var_args) {
    var more = null;
    if(arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return js_dissoc__delegate.call(this, o, k, more)
  };
  js_dissoc.cljs$lang$maxFixedArity = 2;
  js_dissoc.cljs$lang$applyTo = function(arglist__108523) {
    var o = cljs.core.first(arglist__108523);
    arglist__108523 = cljs.core.next(arglist__108523);
    var k = cljs.core.first(arglist__108523);
    var more = cljs.core.rest(arglist__108523);
    return js_dissoc__delegate(o, k, more)
  };
  js_dissoc.cljs$core$IFn$_invoke$arity$variadic = js_dissoc__delegate;
  return js_dissoc
}();
purnam.cljs.js_empty = function js_empty(o) {
  var G__108529_108534 = goog.typeOf(o);
  if(cljs.core._EQ_.call(null, "array", G__108529_108534)) {
    o["length"] = 0
  }else {
    if(cljs.core._EQ_.call(null, "object", G__108529_108534)) {
      var seq__108530_108535 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o));
      var chunk__108531_108536 = null;
      var count__108532_108537 = 0;
      var i__108533_108538 = 0;
      while(true) {
        if(i__108533_108538 < count__108532_108537) {
          var k_108539 = cljs.core._nth.call(null, chunk__108531_108536, i__108533_108538);
          delete o[k_108539];
          var G__108540 = seq__108530_108535;
          var G__108541 = chunk__108531_108536;
          var G__108542 = count__108532_108537;
          var G__108543 = i__108533_108538 + 1;
          seq__108530_108535 = G__108540;
          chunk__108531_108536 = G__108541;
          count__108532_108537 = G__108542;
          i__108533_108538 = G__108543;
          continue
        }else {
          var temp__4092__auto___108544 = cljs.core.seq.call(null, seq__108530_108535);
          if(temp__4092__auto___108544) {
            var seq__108530_108545__$1 = temp__4092__auto___108544;
            if(cljs.core.chunked_seq_QMARK_.call(null, seq__108530_108545__$1)) {
              var c__4009__auto___108546 = cljs.core.chunk_first.call(null, seq__108530_108545__$1);
              var G__108547 = cljs.core.chunk_rest.call(null, seq__108530_108545__$1);
              var G__108548 = c__4009__auto___108546;
              var G__108549 = cljs.core.count.call(null, c__4009__auto___108546);
              var G__108550 = 0;
              seq__108530_108535 = G__108547;
              chunk__108531_108536 = G__108548;
              count__108532_108537 = G__108549;
              i__108533_108538 = G__108550;
              continue
            }else {
              var k_108551 = cljs.core.first.call(null, seq__108530_108545__$1);
              delete o[k_108551];
              var G__108552 = cljs.core.next.call(null, seq__108530_108545__$1);
              var G__108553 = null;
              var G__108554 = 0;
              var G__108555 = 0;
              seq__108530_108535 = G__108552;
              chunk__108531_108536 = G__108553;
              count__108532_108537 = G__108554;
              i__108533_108538 = G__108555;
              continue
            }
          }else {
          }
        }
        break
      }
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(goog.typeOf(o))].join(""));
      }else {
      }
    }
  }
  return o
};
purnam.cljs.js_merge = function() {
  var js_merge = null;
  var js_merge__2 = function(o1, o2) {
    var seq__108560_108564 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__108561_108565 = null;
    var count__108562_108566 = 0;
    var i__108563_108567 = 0;
    while(true) {
      if(i__108563_108567 < count__108562_108566) {
        var k_108568 = cljs.core._nth.call(null, chunk__108561_108565, i__108563_108567);
        o1[k_108568] = o2[k_108568];
        var G__108569 = seq__108560_108564;
        var G__108570 = chunk__108561_108565;
        var G__108571 = count__108562_108566;
        var G__108572 = i__108563_108567 + 1;
        seq__108560_108564 = G__108569;
        chunk__108561_108565 = G__108570;
        count__108562_108566 = G__108571;
        i__108563_108567 = G__108572;
        continue
      }else {
        var temp__4092__auto___108573 = cljs.core.seq.call(null, seq__108560_108564);
        if(temp__4092__auto___108573) {
          var seq__108560_108574__$1 = temp__4092__auto___108573;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__108560_108574__$1)) {
            var c__4009__auto___108575 = cljs.core.chunk_first.call(null, seq__108560_108574__$1);
            var G__108576 = cljs.core.chunk_rest.call(null, seq__108560_108574__$1);
            var G__108577 = c__4009__auto___108575;
            var G__108578 = cljs.core.count.call(null, c__4009__auto___108575);
            var G__108579 = 0;
            seq__108560_108564 = G__108576;
            chunk__108561_108565 = G__108577;
            count__108562_108566 = G__108578;
            i__108563_108567 = G__108579;
            continue
          }else {
            var k_108580 = cljs.core.first.call(null, seq__108560_108574__$1);
            o1[k_108580] = o2[k_108580];
            var G__108581 = cljs.core.next.call(null, seq__108560_108574__$1);
            var G__108582 = null;
            var G__108583 = 0;
            var G__108584 = 0;
            seq__108560_108564 = G__108581;
            chunk__108561_108565 = G__108582;
            count__108562_108566 = G__108583;
            i__108563_108567 = G__108584;
            continue
          }
        }else {
        }
      }
      break
    }
    return o1
  };
  var js_merge__3 = function() {
    var G__108585__delegate = function(o1, o2, more) {
      return cljs.core.apply.call(null, js_merge, js_merge.call(null, o1, o2), more)
    };
    var G__108585 = function(o1, o2, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__108585__delegate.call(this, o1, o2, more)
    };
    G__108585.cljs$lang$maxFixedArity = 2;
    G__108585.cljs$lang$applyTo = function(arglist__108586) {
      var o1 = cljs.core.first(arglist__108586);
      arglist__108586 = cljs.core.next(arglist__108586);
      var o2 = cljs.core.first(arglist__108586);
      var more = cljs.core.rest(arglist__108586);
      return G__108585__delegate(o1, o2, more)
    };
    G__108585.cljs$core$IFn$_invoke$arity$variadic = G__108585__delegate;
    return G__108585
  }();
  js_merge = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge__2.call(this, o1, o2);
      default:
        return js_merge__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge.cljs$lang$maxFixedArity = 2;
  js_merge.cljs$lang$applyTo = js_merge__3.cljs$lang$applyTo;
  js_merge.cljs$core$IFn$_invoke$arity$2 = js_merge__2;
  js_merge.cljs$core$IFn$_invoke$arity$variadic = js_merge__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge
}();
purnam.cljs.js_merge_nil = function() {
  var js_merge_nil = null;
  var js_merge_nil__2 = function(o1, o2) {
    var seq__108591_108595 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__108592_108596 = null;
    var count__108593_108597 = 0;
    var i__108594_108598 = 0;
    while(true) {
      if(i__108594_108598 < count__108593_108597) {
        var k_108599 = cljs.core._nth.call(null, chunk__108592_108596, i__108594_108598);
        if(cljs.core.not.call(null, o1[k_108599])) {
          o1[k_108599] = o2[k_108599]
        }else {
        }
        var G__108600 = seq__108591_108595;
        var G__108601 = chunk__108592_108596;
        var G__108602 = count__108593_108597;
        var G__108603 = i__108594_108598 + 1;
        seq__108591_108595 = G__108600;
        chunk__108592_108596 = G__108601;
        count__108593_108597 = G__108602;
        i__108594_108598 = G__108603;
        continue
      }else {
        var temp__4092__auto___108604 = cljs.core.seq.call(null, seq__108591_108595);
        if(temp__4092__auto___108604) {
          var seq__108591_108605__$1 = temp__4092__auto___108604;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__108591_108605__$1)) {
            var c__4009__auto___108606 = cljs.core.chunk_first.call(null, seq__108591_108605__$1);
            var G__108607 = cljs.core.chunk_rest.call(null, seq__108591_108605__$1);
            var G__108608 = c__4009__auto___108606;
            var G__108609 = cljs.core.count.call(null, c__4009__auto___108606);
            var G__108610 = 0;
            seq__108591_108595 = G__108607;
            chunk__108592_108596 = G__108608;
            count__108593_108597 = G__108609;
            i__108594_108598 = G__108610;
            continue
          }else {
            var k_108611 = cljs.core.first.call(null, seq__108591_108605__$1);
            if(cljs.core.not.call(null, o1[k_108611])) {
              o1[k_108611] = o2[k_108611]
            }else {
            }
            var G__108612 = cljs.core.next.call(null, seq__108591_108605__$1);
            var G__108613 = null;
            var G__108614 = 0;
            var G__108615 = 0;
            seq__108591_108595 = G__108612;
            chunk__108592_108596 = G__108613;
            count__108593_108597 = G__108614;
            i__108594_108598 = G__108615;
            continue
          }
        }else {
        }
      }
      break
    }
    return o1
  };
  var js_merge_nil__3 = function() {
    var G__108616__delegate = function(o1, o2, more) {
      while(true) {
        js_merge_nil.call(null, o1, o2);
        if(cljs.core.truth_(more)) {
          var G__108617 = js_merge_nil.call(null, o1, o2);
          var G__108618 = cljs.core.first.call(null, more);
          var G__108619 = cljs.core.next.call(null, more);
          o1 = G__108617;
          o2 = G__108618;
          more = G__108619;
          continue
        }else {
          return o1
        }
        break
      }
    };
    var G__108616 = function(o1, o2, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__108616__delegate.call(this, o1, o2, more)
    };
    G__108616.cljs$lang$maxFixedArity = 2;
    G__108616.cljs$lang$applyTo = function(arglist__108620) {
      var o1 = cljs.core.first(arglist__108620);
      arglist__108620 = cljs.core.next(arglist__108620);
      var o2 = cljs.core.first(arglist__108620);
      var more = cljs.core.rest(arglist__108620);
      return G__108616__delegate(o1, o2, more)
    };
    G__108616.cljs$core$IFn$_invoke$arity$variadic = G__108616__delegate;
    return G__108616
  }();
  js_merge_nil = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge_nil__2.call(this, o1, o2);
      default:
        return js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge_nil.cljs$lang$maxFixedArity = 2;
  js_merge_nil.cljs$lang$applyTo = js_merge_nil__3.cljs$lang$applyTo;
  js_merge_nil.cljs$core$IFn$_invoke$arity$2 = js_merge_nil__2;
  js_merge_nil.cljs$core$IFn$_invoke$arity$variadic = js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge_nil
}();
purnam.cljs.js_replace = function js_replace(o1, o2) {
  purnam.cljs.js_empty.call(null, o1);
  return purnam.cljs.js_merge.call(null, o1, o2)
};
purnam.cljs.js_equals = function js_equals(v1, v2) {
  if(cljs.core._EQ_.call(null, v1, v2)) {
    return true
  }else {
    var t1 = goog.typeOf(v1);
    var t2 = goog.typeOf(v2);
    if(cljs.core._EQ_.call(null, "array", t1, t2)) {
      return goog.array.equals(v1, v2, js_equals)
    }else {
      if(cljs.core._EQ_.call(null, "object", t1, t2)) {
        var ks1 = cljs.core.js_keys.call(null, v1).sort();
        var ks2 = cljs.core.js_keys.call(null, v2).sort();
        if(cljs.core.truth_(goog.array.equals(ks1, ks2))) {
          return goog.array.every(ks1, function(k) {
            return js_equals.call(null, v1[k], v2[k])
          })
        }else {
          return false
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false
        }else {
          return null
        }
      }
    }
  }
};
purnam.cljs.js_copy = function js_copy(o) {
  return goog.object.clone(o)
};
purnam.cljs.js_initial_value = function js_initial_value(v) {
  var t = goog.typeOf(v);
  if(cljs.core._EQ_.call(null, t, "object")) {
    var obj108624 = {};
    return obj108624
  }else {
    if(cljs.core._EQ_.call(null, t, "array")) {
      return[]
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return v
      }else {
        return null
      }
    }
  }
};
purnam.cljs.js_deep_extend = function() {
  var js_deep_extend = null;
  var js_deep_extend__2 = function(to, from) {
    var visited = [from];
    var visitedlu = [to];
    js_deep_extend.call(null, to, from, visited, visitedlu);
    return to
  };
  var js_deep_extend__4 = function(to, from, visited, visitedlu) {
    var seq__108629_108633 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, from));
    var chunk__108630_108634 = null;
    var count__108631_108635 = 0;
    var i__108632_108636 = 0;
    while(true) {
      if(i__108632_108636 < count__108631_108635) {
        var k_108637 = cljs.core._nth.call(null, chunk__108630_108634, i__108632_108636);
        var v_108638 = from[k_108637];
        var vn_108639 = purnam.cljs.js_initial_value.call(null, v_108638);
        if(cljs.core.not_EQ_.call(null, v_108638, vn_108639)) {
          var i_108640 = visited.indexOf(v_108638);
          if(cljs.core._EQ_.call(null, -1, i_108640)) {
            visited.push(v_108638);
            visitedlu.push(vn_108639);
            js_deep_extend.call(null, vn_108639, v_108638, visited, visitedlu);
            to[k_108637] = vn_108639
          }else {
            to[k_108637] = visitedlu[i_108640]
          }
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            to[k_108637] = v_108638
          }else {
          }
        }
        var G__108641 = seq__108629_108633;
        var G__108642 = chunk__108630_108634;
        var G__108643 = count__108631_108635;
        var G__108644 = i__108632_108636 + 1;
        seq__108629_108633 = G__108641;
        chunk__108630_108634 = G__108642;
        count__108631_108635 = G__108643;
        i__108632_108636 = G__108644;
        continue
      }else {
        var temp__4092__auto___108645 = cljs.core.seq.call(null, seq__108629_108633);
        if(temp__4092__auto___108645) {
          var seq__108629_108646__$1 = temp__4092__auto___108645;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__108629_108646__$1)) {
            var c__4009__auto___108647 = cljs.core.chunk_first.call(null, seq__108629_108646__$1);
            var G__108648 = cljs.core.chunk_rest.call(null, seq__108629_108646__$1);
            var G__108649 = c__4009__auto___108647;
            var G__108650 = cljs.core.count.call(null, c__4009__auto___108647);
            var G__108651 = 0;
            seq__108629_108633 = G__108648;
            chunk__108630_108634 = G__108649;
            count__108631_108635 = G__108650;
            i__108632_108636 = G__108651;
            continue
          }else {
            var k_108652 = cljs.core.first.call(null, seq__108629_108646__$1);
            var v_108653 = from[k_108652];
            var vn_108654 = purnam.cljs.js_initial_value.call(null, v_108653);
            if(cljs.core.not_EQ_.call(null, v_108653, vn_108654)) {
              var i_108655 = visited.indexOf(v_108653);
              if(cljs.core._EQ_.call(null, -1, i_108655)) {
                visited.push(v_108653);
                visitedlu.push(vn_108654);
                js_deep_extend.call(null, vn_108654, v_108653, visited, visitedlu);
                to[k_108652] = vn_108654
              }else {
                to[k_108652] = visitedlu[i_108655]
              }
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                to[k_108652] = v_108653
              }else {
              }
            }
            var G__108656 = cljs.core.next.call(null, seq__108629_108646__$1);
            var G__108657 = null;
            var G__108658 = 0;
            var G__108659 = 0;
            seq__108629_108633 = G__108656;
            chunk__108630_108634 = G__108657;
            count__108631_108635 = G__108658;
            i__108632_108636 = G__108659;
            continue
          }
        }else {
        }
      }
      break
    }
    return to
  };
  js_deep_extend = function(to, from, visited, visitedlu) {
    switch(arguments.length) {
      case 2:
        return js_deep_extend__2.call(this, to, from);
      case 4:
        return js_deep_extend__4.call(this, to, from, visited, visitedlu)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_deep_extend.cljs$core$IFn$_invoke$arity$2 = js_deep_extend__2;
  js_deep_extend.cljs$core$IFn$_invoke$arity$4 = js_deep_extend__4;
  return js_deep_extend
}();
purnam.cljs.js_deep_copy = function js_deep_copy(value) {
  var vn = purnam.cljs.js_initial_value.call(null, value);
  if(cljs.core.not_EQ_.call(null, value, vn)) {
    return purnam.cljs.js_deep_extend.call(null, vn, value)
  }else {
    return value
  }
};
purnam.cljs.js_deep_replace = function js_deep_replace(o1, o2) {
  purnam.cljs.js_empty.call(null, o1);
  return purnam.cljs.js_deep_extend.call(null, o1, o2)
};
purnam.cljs.js_LT__ = function js_LT__(obj) {
  return cljs.core.clj__GT_js.call(null, obj)
};
purnam.cljs.log = function() {
  var log = null;
  var log__1 = function(x) {
    if(cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x)].join(""), x)
    }else {
      console.log([cljs.core.str(x)].join(""))
    }
    return x
  };
  var log__2 = function(x, y) {
    if(cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""), y)
    }else {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""))
    }
    return y
  };
  log = function(x, y) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, x);
      case 2:
        return log__2.call(this, x, y)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log
}();
purnam.cljs.augment_fn_string = function augment_fn_string(func) {
  if(typeof func === "string") {
    return function(x) {
      return purnam.cljs.aget_in.call(null, x, clojure.string.split.call(null, func, /\./))
    }
  }else {
    return func
  }
};
purnam.cljs.check_fn = function() {
  var check_fn = null;
  var check_fn__1 = function(chk) {
    return function(x) {
      if(cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, x)
      }else {
        return cljs.core._EQ_.call(null, x, chk)
      }
    }
  };
  var check_fn__2 = function(func, chk) {
    return function(x) {
      var res = func.call(null, x);
      if(cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, res)
      }else {
        return cljs.core._EQ_.call(null, res, chk)
      }
    }
  };
  check_fn = function(func, chk) {
    switch(arguments.length) {
      case 1:
        return check_fn__1.call(this, func);
      case 2:
        return check_fn__2.call(this, func, chk)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_fn.cljs$core$IFn$_invoke$arity$1 = check_fn__1;
  check_fn.cljs$core$IFn$_invoke$arity$2 = check_fn__2;
  return check_fn
}();
goog.provide("chaperone.ng.core");
goog.require("cljs.core");
goog.require("purnam.cljs");
goog.require("purnam.cljs");
chaperone.ng.core.chaperone_app = angular.module("chaperone.app", ["ngRoute"]);
angular.module("chaperone.app").config(["$routeProvider", function($routeProvider) {
  var G__105031 = $routeProvider;
  G__105031.when("/admin/users/add", function() {
    var G__105032 = function() {
      var obj105035 = {};
      return obj105035
    }();
    G__105032["templateUrl"] = "/public/partials/admin/user/user-form.html";
    G__105032["controller"] = "AdminUserCtrl";
    return G__105032
  }());
  G__105031.when("/admin/users/list", function() {
    var G__105036 = function() {
      var obj105039 = {};
      return obj105039
    }();
    G__105036["templateUrl"] = "/public/partials/admin/user/list.html";
    return G__105036
  }());
  G__105031.otherwise(function() {
    var G__105040 = function() {
      var obj105043 = {};
      return obj105043
    }();
    G__105040["templateUrl"] = "/public/partials/index.html";
    return G__105040
  }());
  return G__105031
}]);
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj108442 = {};
  return obj108442
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if(function() {
    var and__3273__auto__ = port;
    if(and__3273__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler)
  }else {
    var x__3888__auto__ = port == null ? null : port;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler)
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj108444 = {};
  return obj108444
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if(function() {
    var and__3273__auto__ = port;
    if(and__3273__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler)
  }else {
    var x__3888__auto__ = port == null ? null : port;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler)
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj108446 = {};
  return obj108446
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if(function() {
    var and__3273__auto__ = chan;
    if(and__3273__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan)
  }else {
    var x__3888__auto__ = chan == null ? null : chan;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan)
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj108448 = {};
  return obj108448
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if(function() {
    var and__3273__auto__ = h;
    if(and__3273__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h)
  }else {
    var x__3888__auto__ = h == null ? null : h;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h)
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if(function() {
    var and__3273__auto__ = h;
    if(and__3273__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h)
  }else {
    var x__3888__auto__ = h == null ? null : h;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h)
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj108450 = {};
  return obj108450
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if(function() {
    var and__3273__auto__ = b;
    if(and__3273__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b)
  }else {
    var x__3888__auto__ = b == null ? null : b;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b)
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if(function() {
    var and__3273__auto__ = b;
    if(and__3273__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b)
  }else {
    var x__3888__auto__ = b == null ? null : b;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b)
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if(function() {
    var and__3273__auto__ = b;
    if(and__3273__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm)
  }else {
    var x__3888__auto__ = b == null ? null : b;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm)
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o]
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx]
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724))
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if(typeof cljs.core.async.impl.ioc_helpers.t108468 !== "undefined") {
  }else {
    cljs.core.async.impl.ioc_helpers.t108468 = function(f, fn_handler, meta108469) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta108469 = meta108469;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.impl.ioc_helpers.t108468.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t108468.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t108468";
    cljs.core.async.impl.ioc_helpers.t108468.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.ioc-helpers/t108468")
    };
    cljs.core.async.impl.ioc_helpers.t108468.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t108468.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true
    };
    cljs.core.async.impl.ioc_helpers.t108468.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f
    };
    cljs.core.async.impl.ioc_helpers.t108468.prototype.cljs$core$IMeta$_meta$arity$1 = function(_108470) {
      var self__ = this;
      var _108470__$1 = this;
      return self__.meta108469
    };
    cljs.core.async.impl.ioc_helpers.t108468.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_108470, meta108469__$1) {
      var self__ = this;
      var _108470__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t108468(self__.f, self__.fn_handler, meta108469__$1)
    };
    cljs.core.async.impl.ioc_helpers.__GT_t108468 = function __GT_t108468(f__$1, fn_handler__$1, meta108469) {
      return new cljs.core.async.impl.ioc_helpers.t108468(f__$1, fn_handler__$1, meta108469)
    }
  }
  return new cljs.core.async.impl.ioc_helpers.t108468(f, fn_handler, null)
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state)
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state)
  }catch(e108472) {
    if(e108472 instanceof Object) {
      var ex = e108472;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e108472;
      }else {
        return null
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_108475_108477 = state;
    statearr_108475_108477[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_108475_108477[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
  }));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_108476_108478 = state;
    statearr_108476_108478[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_108476_108478[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
  }else {
    return null
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_108481_108483 = state;
    statearr_108481_108483[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_108481_108483[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
  }));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_108482_108484 = state;
    statearr_108482_108484[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_108482_108484[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
  }else {
    return null
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__108485) {
    var map__108490 = p__108485;
    var map__108490__$1 = cljs.core.seq_QMARK_.call(null, map__108490) ? cljs.core.apply.call(null, cljs.core.hash_map, map__108490) : map__108490;
    var opts = map__108490__$1;
    var statearr_108491_108494 = state;
    statearr_108491_108494[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_108492_108495 = state;
      statearr_108492_108495[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
    }, ports, opts);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_108493_108496 = state;
      statearr_108493_108496[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
    }else {
      return null
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__108485 = null;
    if(arguments.length > 3) {
      p__108485 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__108485)
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__108497) {
    var state = cljs.core.first(arglist__108497);
    arglist__108497 = cljs.core.next(arglist__108497);
    var cont_block = cljs.core.first(arglist__108497);
    arglist__108497 = cljs.core.next(arglist__108497);
    var ports = cljs.core.first(arglist__108497);
    var p__108485 = cljs.core.rest(arglist__108497);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__108485)
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if(value == null) {
  }else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null
    }))
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while(true) {
    if(cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__108462 = cnt + 1;
      cnt = G__108462;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.buffers/RingBuffer")
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if(self__.length === 0) {
    return null
  }else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if(self__.length + 1 === self__.arr.length) {
    this$.resize()
  }else {
  }
  return this$.unshift(x)
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if(self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr
  }else {
    if(self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr
    }else {
      if(self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr
      }else {
        return null
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4108__auto__ = self__.length;
  var x = 0;
  while(true) {
    if(x < n__4108__auto__) {
      var v_108463 = this$.pop();
      if(keep_QMARK_.call(null, v_108463)) {
        this$.unshift(v_108463)
      }else {
      }
      var G__108464 = x + 1;
      x = G__108464;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr)
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if(n > 0) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ">", ">", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n))
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.buffers/FixedBuffer")
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if(cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm)
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n)
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.buffers/DroppingBuffer")
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if(self__.buf.length === self__.n) {
    return null
  }else {
    return self__.buf.unshift(itm)
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n)
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.buffers/SlidingBuffer")
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if(self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1)
  }else {
  }
  return self__.buf.unshift(itm)
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n)
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_108451 = 0;
  while(true) {
    var m_108452 = cljs.core.async.impl.dispatch.tasks.pop();
    if(m_108452 == null) {
    }else {
      m_108452.call(null);
      if(count_108451 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__108453 = count_108451 + 1;
        count_108451 = G__108453;
        continue
      }else {
      }
    }
    break
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if(cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null)
  }else {
    return null
  }
};
if(typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null)
  }
}else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if(cljs.core.truth_(function() {
    var and__3273__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if(and__3273__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_
    }else {
      return and__3273__auto__
    }
  }())) {
    return null
  }else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if(typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0)
    }else {
      if(typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null)
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay)
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if(typeof cljs.core.async.impl.channels.t108457 !== "undefined") {
  }else {
    cljs.core.async.impl.channels.t108457 = function(val, box, meta108458) {
      this.val = val;
      this.box = box;
      this.meta108458 = meta108458;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984
    };
    cljs.core.async.impl.channels.t108457.cljs$lang$type = true;
    cljs.core.async.impl.channels.t108457.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t108457";
    cljs.core.async.impl.channels.t108457.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.channels/t108457")
    };
    cljs.core.async.impl.channels.t108457.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val
    };
    cljs.core.async.impl.channels.t108457.prototype.cljs$core$IMeta$_meta$arity$1 = function(_108459) {
      var self__ = this;
      var _108459__$1 = this;
      return self__.meta108458
    };
    cljs.core.async.impl.channels.t108457.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_108459, meta108458__$1) {
      var self__ = this;
      var _108459__$1 = this;
      return new cljs.core.async.impl.channels.t108457(self__.val, self__.box, meta108458__$1)
    };
    cljs.core.async.impl.channels.__GT_t108457 = function __GT_t108457(val__$1, box__$1, meta108458) {
      return new cljs.core.async.impl.channels.t108457(val__$1, box__$1, meta108458)
    }
  }
  return new cljs.core.async.impl.channels.t108457(val, box, null)
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3832__auto__, writer__3833__auto__, opts__3834__auto__) {
  return cljs.core._write.call(null, writer__3833__auto__, "cljs.core.async.impl.channels/PutBox")
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val)
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler)
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.channels/ManyToManyChannel")
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if(self__.closed) {
    return null
  }else {
    self__.closed = true;
    while(true) {
      var taker_108460 = self__.takes.pop();
      if(taker_108460 == null) {
      }else {
        if(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_108460)) {
          var take_cb_108461 = cljs.core.async.impl.protocols.commit.call(null, taker_108460);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_108461, taker_108460) {
            return function() {
              return take_cb_108461.call(null, null)
            }
          }(take_cb_108461, taker_108460))
        }else {
        }
        continue
      }
      break
    }
    return null
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if(!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null
  }else {
    if(!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf))
    }else {
      while(true) {
        var putter = self__.puts.pop();
        if(!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if(cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val)
          }else {
            continue
          }
        }else {
          if(self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null)
          }else {
            if(self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_)
            }else {
              self__.dirty_takes = self__.dirty_takes + 1
            }
            if(self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            }else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "<", "<", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, "takes", 
              "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null
          }
        }
        break
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if(!(val == null)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if(closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null)
  }else {
    while(true) {
      var taker = self__.takes.pop();
      if(!(taker == null)) {
        if(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val)
            }
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null)
        }else {
          continue
        }
      }else {
        if(!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null)
        }else {
          if(self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_)
          }else {
            self__.dirty_puts = self__.dirty_puts + 1
          }
          if(self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          }else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "<", "<", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null
        }
      }
      break
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed)
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null)
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0)
  };
  var random_level__1 = function(level) {
    while(true) {
      if(Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__108417 = level + 1;
        level = G__108417;
        continue
      }else {
        return level
      }
      break
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.timers/SkipListNode")
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key)
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward)
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level)
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_108418 = 0;
    while(true) {
      if(i_108418 < arr.length) {
        arr[i_108418] = null;
        var G__108419 = i_108418 + 1;
        i_108418 = G__108419;
        continue
      }else {
      }
      break
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr)
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null)
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while(true) {
      if(!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while(true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if(cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if(x_SINGLEQUOTE_.key < k) {
                var G__108420 = x_SINGLEQUOTE_;
                x__$1 = G__108420;
                continue
              }else {
                return x__$1
              }
            }else {
              return x__$1
            }
            break
          }
        }();
        if(update == null) {
        }else {
          update[level] = x__$1
        }
        var G__108421 = x__$1;
        var G__108422 = k;
        var G__108423 = level - 1;
        var G__108424 = update;
        x = G__108421;
        k = G__108422;
        level = G__108423;
        update = G__108424;
        continue
      }else {
        return x
      }
      break
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.timers/SkipList")
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if(node == null) {
        return null
      }else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]))
      }
    }, null, null)
  };
  return iter.call(null, self__.header.forward[0])
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if(!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v
  }else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if(new_level > self__.level) {
      var i_108425 = self__.level + 1;
      while(true) {
        if(i_108425 <= new_level + 1) {
          update[i_108425] = self__.header;
          var G__108426 = i_108425 + 1;
          i_108425 = G__108426;
          continue
        }else {
        }
        break
      }
      self__.level = new_level
    }else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while(true) {
      if(i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2
      }else {
        return null
      }
      break
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if(!(x__$1 == null) && x__$1.key === k) {
    var i_108427 = 0;
    while(true) {
      if(i_108427 <= self__.level) {
        var links_108428 = update[i_108427].forward;
        if(links_108428[i_108427] === x__$1) {
          links_108428[i_108427] = x__$1.forward[i_108427];
          var G__108429 = i_108427 + 1;
          i_108427 = G__108429;
          continue
        }else {
          var G__108430 = i_108427 + 1;
          i_108427 = G__108430;
          continue
        }
      }else {
      }
      break
    }
    while(true) {
      if(self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue
      }else {
        return null
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while(true) {
    if(!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while(true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if(x_SINGLEQUOTE_ == null) {
            return null
          }else {
            if(x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_
            }else {
              var G__108431 = x_SINGLEQUOTE_;
              x__$1 = G__108431;
              continue
            }
          }
          break
        }
      }();
      if(!(nx == null)) {
        var G__108432 = nx;
        var G__108433 = level__$1 - 1;
        x = G__108432;
        level__$1 = G__108433;
        continue
      }else {
        var G__108434 = x;
        var G__108435 = level__$1 - 1;
        x = G__108434;
        level__$1 = G__108435;
        continue
      }
    }else {
      if(x === self__.header) {
        return null
      }else {
        return x
      }
    }
    break
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while(true) {
    if(!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while(true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if(!(x_SINGLEQUOTE_ == null)) {
            if(x_SINGLEQUOTE_.key > k) {
              return x__$1
            }else {
              var G__108436 = x_SINGLEQUOTE_;
              x__$1 = G__108436;
              continue
            }
          }else {
            if(level__$1 === 0) {
              return x__$1
            }else {
              return null
            }
          }
          break
        }
      }();
      if(cljs.core.truth_(nx)) {
        var G__108437 = nx;
        var G__108438 = level__$1 - 1;
        x = G__108437;
        level__$1 = G__108438;
        continue
      }else {
        var G__108439 = x;
        var G__108440 = level__$1 - 1;
        x = G__108439;
        level__$1 = G__108440;
        continue
      }
    }else {
      if(x === self__.header) {
        return null
      }else {
        return x
      }
    }
    break
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level)
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0)
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3285__auto__ = cljs.core.truth_(function() {
    var and__3273__auto__ = me;
    if(cljs.core.truth_(and__3273__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS
    }else {
      return and__3273__auto__
    }
  }()) ? me.val : null;
  if(cljs.core.truth_(or__3285__auto__)) {
    return or__3285__auto__
  }else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel)
    }, msecs);
    return timeout_channel
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if(typeof cljs.core.async.t106507 !== "undefined") {
  }else {
    cljs.core.async.t106507 = function(f, fn_handler, meta106508) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta106508 = meta106508;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t106507.cljs$lang$type = true;
    cljs.core.async.t106507.cljs$lang$ctorStr = "cljs.core.async/t106507";
    cljs.core.async.t106507.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t106507")
    };
    cljs.core.async.t106507.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t106507.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true
    };
    cljs.core.async.t106507.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f
    };
    cljs.core.async.t106507.prototype.cljs$core$IMeta$_meta$arity$1 = function(_106509) {
      var self__ = this;
      var _106509__$1 = this;
      return self__.meta106508
    };
    cljs.core.async.t106507.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_106509, meta106508__$1) {
      var self__ = this;
      var _106509__$1 = this;
      return new cljs.core.async.t106507(self__.f, self__.fn_handler, meta106508__$1)
    };
    cljs.core.async.__GT_t106507 = function __GT_t106507(f__$1, fn_handler__$1, meta106508) {
      return new cljs.core.async.t106507(f__$1, fn_handler__$1, meta106508)
    }
  }
  return new cljs.core.async.t106507(f, fn_handler, null)
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n)
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n)
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n)
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null)
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1)
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs)
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if(null) {
    return null
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("<! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true)
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if(cljs.core.truth_(ret)) {
      var val_106510 = cljs.core.deref.call(null, ret);
      if(cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_106510)
      }else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_106510)
        })
      }
    }else {
    }
    return null
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_
}();
cljs.core.async.nop = function nop() {
  return null
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if(null) {
    return null
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(">! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop)
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true)
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if(cljs.core.truth_(function() {
      var and__3273__auto__ = ret;
      if(cljs.core.truth_(and__3273__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop)
      }else {
        return and__3273__auto__
      }
    }())) {
      if(cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null)
      }else {
        cljs.core.async.impl.dispatch.run.call(null, fn0)
      }
    }else {
    }
    return null
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port)
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4108__auto___106511 = n;
  var x_106512 = 0;
  while(true) {
    if(x_106512 < n__4108__auto___106511) {
      a[x_106512] = 0;
      var G__106513 = x_106512 + 1;
      x_106512 = G__106513;
      continue
    }else {
    }
    break
  }
  var i = 1;
  while(true) {
    if(cljs.core._EQ_.call(null, i, n)) {
      return a
    }else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__106514 = i + 1;
      i = G__106514;
      continue
    }
    break
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if(typeof cljs.core.async.t106518 !== "undefined") {
  }else {
    cljs.core.async.t106518 = function(flag, alt_flag, meta106519) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta106519 = meta106519;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t106518.cljs$lang$type = true;
    cljs.core.async.t106518.cljs$lang$ctorStr = "cljs.core.async/t106518";
    cljs.core.async.t106518.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t106518")
    };
    cljs.core.async.t106518.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t106518.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag)
    };
    cljs.core.async.t106518.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true
    };
    cljs.core.async.t106518.prototype.cljs$core$IMeta$_meta$arity$1 = function(_106520) {
      var self__ = this;
      var _106520__$1 = this;
      return self__.meta106519
    };
    cljs.core.async.t106518.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_106520, meta106519__$1) {
      var self__ = this;
      var _106520__$1 = this;
      return new cljs.core.async.t106518(self__.flag, self__.alt_flag, meta106519__$1)
    };
    cljs.core.async.__GT_t106518 = function __GT_t106518(flag__$1, alt_flag__$1, meta106519) {
      return new cljs.core.async.t106518(flag__$1, alt_flag__$1, meta106519)
    }
  }
  return new cljs.core.async.t106518(flag, alt_flag, null)
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if(typeof cljs.core.async.t106524 !== "undefined") {
  }else {
    cljs.core.async.t106524 = function(cb, flag, alt_handler, meta106525) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta106525 = meta106525;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t106524.cljs$lang$type = true;
    cljs.core.async.t106524.cljs$lang$ctorStr = "cljs.core.async/t106524";
    cljs.core.async.t106524.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t106524")
    };
    cljs.core.async.t106524.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t106524.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag)
    };
    cljs.core.async.t106524.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb
    };
    cljs.core.async.t106524.prototype.cljs$core$IMeta$_meta$arity$1 = function(_106526) {
      var self__ = this;
      var _106526__$1 = this;
      return self__.meta106525
    };
    cljs.core.async.t106524.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_106526, meta106525__$1) {
      var self__ = this;
      var _106526__$1 = this;
      return new cljs.core.async.t106524(self__.cb, self__.flag, self__.alt_handler, meta106525__$1)
    };
    cljs.core.async.__GT_t106524 = function __GT_t106524(cb__$1, flag__$1, alt_handler__$1, meta106525) {
      return new cljs.core.async.t106524(cb__$1, flag__$1, alt_handler__$1, meta106525)
    }
  }
  return new cljs.core.async.t106524(cb, flag, alt_handler, null)
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while(true) {
      if(i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null))
            }
          }(i, val, idx, port, wport, flag, n, idxs, priority)))
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__106527_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__106527_SHARP_, port], null))
          }
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if(cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3285__auto__ = wport;
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return port
            }
          }()], null))
        }else {
          var G__106528 = i + 1;
          i = G__106528;
          continue
        }
      }else {
        return null
      }
      break
    }
  }();
  var or__3285__auto__ = ret;
  if(cljs.core.truth_(or__3285__auto__)) {
    return or__3285__auto__
  }else {
    if(cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3273__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if(cljs.core.truth_(and__3273__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag)
        }else {
          return and__3273__auto__
        }
      }();
      if(cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null))
      }else {
        return null
      }
    }else {
      return null
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__106529) {
    var map__106531 = p__106529;
    var map__106531__$1 = cljs.core.seq_QMARK_.call(null, map__106531) ? cljs.core.apply.call(null, cljs.core.hash_map, map__106531) : map__106531;
    var opts = map__106531__$1;
    if(null) {
      return null
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__106529 = null;
    if(arguments.length > 1) {
      p__106529 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return alts_BANG___delegate.call(this, ports, p__106529)
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__106532) {
    var ports = cljs.core.first(arglist__106532);
    var p__106529 = cljs.core.rest(arglist__106532);
    return alts_BANG___delegate(ports, p__106529)
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if(typeof cljs.core.async.t106540 !== "undefined") {
  }else {
    cljs.core.async.t106540 = function(ch, f, map_LT_, meta106541) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta106541 = meta106541;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t106540.cljs$lang$type = true;
    cljs.core.async.t106540.cljs$lang$ctorStr = "cljs.core.async/t106540";
    cljs.core.async.t106540.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t106540")
    };
    cljs.core.async.t106540.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t106540.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0)
    };
    cljs.core.async.t106540.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t106540.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if(typeof cljs.core.async.t106543 !== "undefined") {
        }else {
          cljs.core.async.t106543 = function(fn1, _, meta106541, ch, f, map_LT_, meta106544) {
            this.fn1 = fn1;
            this._ = _;
            this.meta106541 = meta106541;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta106544 = meta106544;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216
          };
          cljs.core.async.t106543.cljs$lang$type = true;
          cljs.core.async.t106543.cljs$lang$ctorStr = "cljs.core.async/t106543";
          cljs.core.async.t106543.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
            return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t106543")
          };
          cljs.core.async.t106543.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t106543.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1)
          };
          cljs.core.async.t106543.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1)
          };
          cljs.core.async.t106543.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__106533_SHARP_) {
                return f1.call(null, p1__106533_SHARP_ == null ? null : self__.f.call(null, p1__106533_SHARP_))
              }
            }(f1, ___$4)
          };
          cljs.core.async.t106543.prototype.cljs$core$IMeta$_meta$arity$1 = function(_106545) {
            var self__ = this;
            var _106545__$1 = this;
            return self__.meta106544
          };
          cljs.core.async.t106543.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_106545, meta106544__$1) {
            var self__ = this;
            var _106545__$1 = this;
            return new cljs.core.async.t106543(self__.fn1, self__._, self__.meta106541, self__.ch, self__.f, self__.map_LT_, meta106544__$1)
          };
          cljs.core.async.__GT_t106543 = function __GT_t106543(fn1__$1, ___$2, meta106541__$1, ch__$2, f__$2, map_LT___$2, meta106544) {
            return new cljs.core.async.t106543(fn1__$1, ___$2, meta106541__$1, ch__$2, f__$2, map_LT___$2, meta106544)
          }
        }
        return new cljs.core.async.t106543(fn1, ___$1, self__.meta106541, self__.ch, self__.f, self__.map_LT_, null)
      }());
      if(cljs.core.truth_(function() {
        var and__3273__auto__ = ret;
        if(cljs.core.truth_(and__3273__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null)
        }else {
          return and__3273__auto__
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)))
      }else {
        return ret
      }
    };
    cljs.core.async.t106540.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t106540.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t106540.prototype.cljs$core$IMeta$_meta$arity$1 = function(_106542) {
      var self__ = this;
      var _106542__$1 = this;
      return self__.meta106541
    };
    cljs.core.async.t106540.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_106542, meta106541__$1) {
      var self__ = this;
      var _106542__$1 = this;
      return new cljs.core.async.t106540(self__.ch, self__.f, self__.map_LT_, meta106541__$1)
    };
    cljs.core.async.__GT_t106540 = function __GT_t106540(ch__$1, f__$1, map_LT___$1, meta106541) {
      return new cljs.core.async.t106540(ch__$1, f__$1, map_LT___$1, meta106541)
    }
  }
  return new cljs.core.async.t106540(ch, f, map_LT_, null)
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if(typeof cljs.core.async.t106549 !== "undefined") {
  }else {
    cljs.core.async.t106549 = function(ch, f, map_GT_, meta106550) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta106550 = meta106550;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t106549.cljs$lang$type = true;
    cljs.core.async.t106549.cljs$lang$ctorStr = "cljs.core.async/t106549";
    cljs.core.async.t106549.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t106549")
    };
    cljs.core.async.t106549.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t106549.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0)
    };
    cljs.core.async.t106549.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t106549.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1)
    };
    cljs.core.async.t106549.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t106549.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t106549.prototype.cljs$core$IMeta$_meta$arity$1 = function(_106551) {
      var self__ = this;
      var _106551__$1 = this;
      return self__.meta106550
    };
    cljs.core.async.t106549.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_106551, meta106550__$1) {
      var self__ = this;
      var _106551__$1 = this;
      return new cljs.core.async.t106549(self__.ch, self__.f, self__.map_GT_, meta106550__$1)
    };
    cljs.core.async.__GT_t106549 = function __GT_t106549(ch__$1, f__$1, map_GT___$1, meta106550) {
      return new cljs.core.async.t106549(ch__$1, f__$1, map_GT___$1, meta106550)
    }
  }
  return new cljs.core.async.t106549(ch, f, map_GT_, null)
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if(typeof cljs.core.async.t106555 !== "undefined") {
  }else {
    cljs.core.async.t106555 = function(ch, p, filter_GT_, meta106556) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta106556 = meta106556;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t106555.cljs$lang$type = true;
    cljs.core.async.t106555.cljs$lang$ctorStr = "cljs.core.async/t106555";
    cljs.core.async.t106555.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t106555")
    };
    cljs.core.async.t106555.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t106555.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if(cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0)
      }else {
        return cljs.core.async.impl.channels.box.call(null, null)
      }
    };
    cljs.core.async.t106555.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t106555.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1)
    };
    cljs.core.async.t106555.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t106555.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t106555.prototype.cljs$core$IMeta$_meta$arity$1 = function(_106557) {
      var self__ = this;
      var _106557__$1 = this;
      return self__.meta106556
    };
    cljs.core.async.t106555.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_106557, meta106556__$1) {
      var self__ = this;
      var _106557__$1 = this;
      return new cljs.core.async.t106555(self__.ch, self__.p, self__.filter_GT_, meta106556__$1)
    };
    cljs.core.async.__GT_t106555 = function __GT_t106555(ch__$1, p__$1, filter_GT___$1, meta106556) {
      return new cljs.core.async.t106555(ch__$1, p__$1, filter_GT___$1, meta106556)
    }
  }
  return new cljs.core.async.t106555(ch, p, filter_GT_, null)
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch)
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null)
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5728__auto___106632 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_106615) {
          var state_val_106616 = state_106615[1];
          if(state_val_106616 === 1) {
            var state_106615__$1 = state_106615;
            var statearr_106617_106633 = state_106615__$1;
            statearr_106617_106633[2] = null;
            statearr_106617_106633[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_106616 === 2) {
              var state_106615__$1 = state_106615;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_106615__$1, 4, ch)
            }else {
              if(state_val_106616 === 3) {
                var inst_106613 = state_106615[2];
                var state_106615__$1 = state_106615;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_106615__$1, inst_106613)
              }else {
                if(state_val_106616 === 4) {
                  var inst_106597 = state_106615[5];
                  var inst_106597__$1 = state_106615[2];
                  var inst_106598 = inst_106597__$1 == null;
                  var state_106615__$1 = function() {
                    var statearr_106618 = state_106615;
                    statearr_106618[5] = inst_106597__$1;
                    return statearr_106618
                  }();
                  if(cljs.core.truth_(inst_106598)) {
                    var statearr_106619_106634 = state_106615__$1;
                    statearr_106619_106634[1] = 5
                  }else {
                    var statearr_106620_106635 = state_106615__$1;
                    statearr_106620_106635[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_106616 === 5) {
                    var inst_106600 = cljs.core.async.close_BANG_.call(null, out);
                    var state_106615__$1 = state_106615;
                    var statearr_106621_106636 = state_106615__$1;
                    statearr_106621_106636[2] = inst_106600;
                    statearr_106621_106636[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_106616 === 6) {
                      var inst_106597 = state_106615[5];
                      var inst_106602 = p.call(null, inst_106597);
                      var state_106615__$1 = state_106615;
                      if(cljs.core.truth_(inst_106602)) {
                        var statearr_106622_106637 = state_106615__$1;
                        statearr_106622_106637[1] = 8
                      }else {
                        var statearr_106623_106638 = state_106615__$1;
                        statearr_106623_106638[1] = 9
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_106616 === 7) {
                        var inst_106611 = state_106615[2];
                        var state_106615__$1 = state_106615;
                        var statearr_106624_106639 = state_106615__$1;
                        statearr_106624_106639[2] = inst_106611;
                        statearr_106624_106639[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_106616 === 8) {
                          var inst_106597 = state_106615[5];
                          var state_106615__$1 = state_106615;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_106615__$1, 11, out, inst_106597)
                        }else {
                          if(state_val_106616 === 9) {
                            var state_106615__$1 = state_106615;
                            var statearr_106625_106640 = state_106615__$1;
                            statearr_106625_106640[2] = null;
                            statearr_106625_106640[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_106616 === 10) {
                              var inst_106608 = state_106615[2];
                              var state_106615__$1 = function() {
                                var statearr_106626 = state_106615;
                                statearr_106626[6] = inst_106608;
                                return statearr_106626
                              }();
                              var statearr_106627_106641 = state_106615__$1;
                              statearr_106627_106641[2] = null;
                              statearr_106627_106641[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_106616 === 11) {
                                var inst_106605 = state_106615[2];
                                var state_106615__$1 = state_106615;
                                var statearr_106628_106642 = state_106615__$1;
                                statearr_106628_106642[2] = inst_106605;
                                statearr_106628_106642[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_106630 = new Array(7);
              statearr_106630[0] = state_machine__5679__auto__;
              statearr_106630[1] = 1;
              return statearr_106630
            };
            var state_machine__5679__auto____1 = function(state_106615) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_106615);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_106615) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_106615)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_106631 = f__5729__auto__.call(null);
        statearr_106631[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___106632;
        return statearr_106631
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return out
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null)
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n)
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5728__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5729__auto__ = function() {
      var switch__5678__auto__ = function(state_106790) {
        var state_val_106791 = state_106790[1];
        if(state_val_106791 === 1) {
          var state_106790__$1 = state_106790;
          var statearr_106792_106825 = state_106790__$1;
          statearr_106792_106825[2] = null;
          statearr_106792_106825[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_106791 === 2) {
            var state_106790__$1 = state_106790;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_106790__$1, 4, in$)
          }else {
            if(state_val_106791 === 3) {
              var inst_106788 = state_106790[2];
              var state_106790__$1 = state_106790;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_106790__$1, inst_106788)
            }else {
              if(state_val_106791 === 4) {
                var inst_106736 = state_106790[5];
                var inst_106736__$1 = state_106790[2];
                var inst_106737 = inst_106736__$1 == null;
                var state_106790__$1 = function() {
                  var statearr_106793 = state_106790;
                  statearr_106793[5] = inst_106736__$1;
                  return statearr_106793
                }();
                if(cljs.core.truth_(inst_106737)) {
                  var statearr_106794_106826 = state_106790__$1;
                  statearr_106794_106826[1] = 5
                }else {
                  var statearr_106795_106827 = state_106790__$1;
                  statearr_106795_106827[1] = 6
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_106791 === 5) {
                  var inst_106739 = cljs.core.async.close_BANG_.call(null, out);
                  var state_106790__$1 = state_106790;
                  var statearr_106796_106828 = state_106790__$1;
                  statearr_106796_106828[2] = inst_106739;
                  statearr_106796_106828[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_106791 === 6) {
                    var inst_106736 = state_106790[5];
                    var inst_106741 = f.call(null, inst_106736);
                    var inst_106746 = cljs.core.seq.call(null, inst_106741);
                    var inst_106747 = inst_106746;
                    var inst_106748 = null;
                    var inst_106749 = 0;
                    var inst_106750 = 0;
                    var state_106790__$1 = function() {
                      var statearr_106797 = state_106790;
                      statearr_106797[6] = inst_106747;
                      statearr_106797[7] = inst_106748;
                      statearr_106797[8] = inst_106749;
                      statearr_106797[9] = inst_106750;
                      return statearr_106797
                    }();
                    var statearr_106798_106829 = state_106790__$1;
                    statearr_106798_106829[2] = null;
                    statearr_106798_106829[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_106791 === 7) {
                      var inst_106786 = state_106790[2];
                      var state_106790__$1 = state_106790;
                      var statearr_106799_106830 = state_106790__$1;
                      statearr_106799_106830[2] = inst_106786;
                      statearr_106799_106830[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_106791 === 8) {
                        var inst_106749 = state_106790[8];
                        var inst_106750 = state_106790[9];
                        var inst_106752 = inst_106750 < inst_106749;
                        var inst_106753 = inst_106752;
                        var state_106790__$1 = state_106790;
                        if(cljs.core.truth_(inst_106753)) {
                          var statearr_106800_106831 = state_106790__$1;
                          statearr_106800_106831[1] = 10
                        }else {
                          var statearr_106801_106832 = state_106790__$1;
                          statearr_106801_106832[1] = 11
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_106791 === 9) {
                          var inst_106783 = state_106790[2];
                          var state_106790__$1 = function() {
                            var statearr_106802 = state_106790;
                            statearr_106802[10] = inst_106783;
                            return statearr_106802
                          }();
                          var statearr_106803_106833 = state_106790__$1;
                          statearr_106803_106833[2] = null;
                          statearr_106803_106833[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_106791 === 10) {
                            var inst_106748 = state_106790[7];
                            var inst_106750 = state_106790[9];
                            var inst_106755 = cljs.core._nth.call(null, inst_106748, inst_106750);
                            var state_106790__$1 = state_106790;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_106790__$1, 13, out, inst_106755)
                          }else {
                            if(state_val_106791 === 11) {
                              var inst_106761 = state_106790[11];
                              var inst_106747 = state_106790[6];
                              var inst_106761__$1 = cljs.core.seq.call(null, inst_106747);
                              var state_106790__$1 = function() {
                                var statearr_106807 = state_106790;
                                statearr_106807[11] = inst_106761__$1;
                                return statearr_106807
                              }();
                              if(inst_106761__$1) {
                                var statearr_106808_106834 = state_106790__$1;
                                statearr_106808_106834[1] = 14
                              }else {
                                var statearr_106809_106835 = state_106790__$1;
                                statearr_106809_106835[1] = 15
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_106791 === 12) {
                                var inst_106781 = state_106790[2];
                                var state_106790__$1 = state_106790;
                                var statearr_106810_106836 = state_106790__$1;
                                statearr_106810_106836[2] = inst_106781;
                                statearr_106810_106836[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_106791 === 13) {
                                  var inst_106747 = state_106790[6];
                                  var inst_106748 = state_106790[7];
                                  var inst_106749 = state_106790[8];
                                  var inst_106750 = state_106790[9];
                                  var inst_106757 = state_106790[2];
                                  var inst_106758 = inst_106750 + 1;
                                  var tmp106804 = inst_106747;
                                  var tmp106805 = inst_106748;
                                  var tmp106806 = inst_106749;
                                  var inst_106747__$1 = tmp106804;
                                  var inst_106748__$1 = tmp106805;
                                  var inst_106749__$1 = tmp106806;
                                  var inst_106750__$1 = inst_106758;
                                  var state_106790__$1 = function() {
                                    var statearr_106811 = state_106790;
                                    statearr_106811[6] = inst_106747__$1;
                                    statearr_106811[12] = inst_106757;
                                    statearr_106811[7] = inst_106748__$1;
                                    statearr_106811[8] = inst_106749__$1;
                                    statearr_106811[9] = inst_106750__$1;
                                    return statearr_106811
                                  }();
                                  var statearr_106812_106837 = state_106790__$1;
                                  statearr_106812_106837[2] = null;
                                  statearr_106812_106837[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_106791 === 14) {
                                    var inst_106761 = state_106790[11];
                                    var inst_106763 = cljs.core.chunked_seq_QMARK_.call(null, inst_106761);
                                    var state_106790__$1 = state_106790;
                                    if(inst_106763) {
                                      var statearr_106813_106838 = state_106790__$1;
                                      statearr_106813_106838[1] = 17
                                    }else {
                                      var statearr_106814_106839 = state_106790__$1;
                                      statearr_106814_106839[1] = 18
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_106791 === 15) {
                                      var state_106790__$1 = state_106790;
                                      var statearr_106815_106840 = state_106790__$1;
                                      statearr_106815_106840[2] = null;
                                      statearr_106815_106840[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_106791 === 16) {
                                        var inst_106779 = state_106790[2];
                                        var state_106790__$1 = state_106790;
                                        var statearr_106816_106841 = state_106790__$1;
                                        statearr_106816_106841[2] = inst_106779;
                                        statearr_106816_106841[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_106791 === 17) {
                                          var inst_106761 = state_106790[11];
                                          var inst_106765 = cljs.core.chunk_first.call(null, inst_106761);
                                          var inst_106766 = cljs.core.chunk_rest.call(null, inst_106761);
                                          var inst_106767 = cljs.core.count.call(null, inst_106765);
                                          var inst_106747 = inst_106766;
                                          var inst_106748 = inst_106765;
                                          var inst_106749 = inst_106767;
                                          var inst_106750 = 0;
                                          var state_106790__$1 = function() {
                                            var statearr_106817 = state_106790;
                                            statearr_106817[6] = inst_106747;
                                            statearr_106817[7] = inst_106748;
                                            statearr_106817[8] = inst_106749;
                                            statearr_106817[9] = inst_106750;
                                            return statearr_106817
                                          }();
                                          var statearr_106818_106842 = state_106790__$1;
                                          statearr_106818_106842[2] = null;
                                          statearr_106818_106842[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_106791 === 18) {
                                            var inst_106761 = state_106790[11];
                                            var inst_106770 = cljs.core.first.call(null, inst_106761);
                                            var state_106790__$1 = state_106790;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_106790__$1, 20, out, inst_106770)
                                          }else {
                                            if(state_val_106791 === 19) {
                                              var inst_106776 = state_106790[2];
                                              var state_106790__$1 = state_106790;
                                              var statearr_106819_106843 = state_106790__$1;
                                              statearr_106819_106843[2] = inst_106776;
                                              statearr_106819_106843[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_106791 === 20) {
                                                var inst_106761 = state_106790[11];
                                                var inst_106772 = state_106790[2];
                                                var inst_106773 = cljs.core.next.call(null, inst_106761);
                                                var inst_106747 = inst_106773;
                                                var inst_106748 = null;
                                                var inst_106749 = 0;
                                                var inst_106750 = 0;
                                                var state_106790__$1 = function() {
                                                  var statearr_106820 = state_106790;
                                                  statearr_106820[13] = inst_106772;
                                                  statearr_106820[6] = inst_106747;
                                                  statearr_106820[7] = inst_106748;
                                                  statearr_106820[8] = inst_106749;
                                                  statearr_106820[9] = inst_106750;
                                                  return statearr_106820
                                                }();
                                                var statearr_106821_106844 = state_106790__$1;
                                                statearr_106821_106844[2] = null;
                                                statearr_106821_106844[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                return null
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5678__auto__) {
        return function() {
          var state_machine__5679__auto__ = null;
          var state_machine__5679__auto____0 = function() {
            var statearr_106823 = new Array(14);
            statearr_106823[0] = state_machine__5679__auto__;
            statearr_106823[1] = 1;
            return statearr_106823
          };
          var state_machine__5679__auto____1 = function(state_106790) {
            while(true) {
              var result__5680__auto__ = switch__5678__auto__.call(null, state_106790);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5680__auto__
              }
              break
            }
          };
          state_machine__5679__auto__ = function(state_106790) {
            switch(arguments.length) {
              case 0:
                return state_machine__5679__auto____0.call(this);
              case 1:
                return state_machine__5679__auto____1.call(this, state_106790)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
          return state_machine__5679__auto__
        }()
      }(switch__5678__auto__)
    }();
    var state__5730__auto__ = function() {
      var statearr_106824 = f__5729__auto__.call(null);
      statearr_106824[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto__;
      return statearr_106824
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
  });
  return c__5728__auto__
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null)
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null)
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true)
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5728__auto___106917 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_106900) {
          var state_val_106901 = state_106900[1];
          if(state_val_106901 === 1) {
            var state_106900__$1 = state_106900;
            var statearr_106902_106918 = state_106900__$1;
            statearr_106902_106918[2] = null;
            statearr_106902_106918[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_106901 === 2) {
              var state_106900__$1 = state_106900;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_106900__$1, 4, from)
            }else {
              if(state_val_106901 === 3) {
                var inst_106898 = state_106900[2];
                var state_106900__$1 = state_106900;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_106900__$1, inst_106898)
              }else {
                if(state_val_106901 === 4) {
                  var inst_106883 = state_106900[5];
                  var inst_106883__$1 = state_106900[2];
                  var inst_106884 = inst_106883__$1 == null;
                  var state_106900__$1 = function() {
                    var statearr_106903 = state_106900;
                    statearr_106903[5] = inst_106883__$1;
                    return statearr_106903
                  }();
                  if(cljs.core.truth_(inst_106884)) {
                    var statearr_106904_106919 = state_106900__$1;
                    statearr_106904_106919[1] = 5
                  }else {
                    var statearr_106905_106920 = state_106900__$1;
                    statearr_106905_106920[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_106901 === 5) {
                    var state_106900__$1 = state_106900;
                    if(cljs.core.truth_(close_QMARK_)) {
                      var statearr_106906_106921 = state_106900__$1;
                      statearr_106906_106921[1] = 8
                    }else {
                      var statearr_106907_106922 = state_106900__$1;
                      statearr_106907_106922[1] = 9
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_106901 === 6) {
                      var inst_106883 = state_106900[5];
                      var state_106900__$1 = state_106900;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_106900__$1, 11, to, inst_106883)
                    }else {
                      if(state_val_106901 === 7) {
                        var inst_106896 = state_106900[2];
                        var state_106900__$1 = state_106900;
                        var statearr_106908_106923 = state_106900__$1;
                        statearr_106908_106923[2] = inst_106896;
                        statearr_106908_106923[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_106901 === 8) {
                          var inst_106887 = cljs.core.async.close_BANG_.call(null, to);
                          var state_106900__$1 = state_106900;
                          var statearr_106909_106924 = state_106900__$1;
                          statearr_106909_106924[2] = inst_106887;
                          statearr_106909_106924[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_106901 === 9) {
                            var state_106900__$1 = state_106900;
                            var statearr_106910_106925 = state_106900__$1;
                            statearr_106910_106925[2] = null;
                            statearr_106910_106925[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_106901 === 10) {
                              var inst_106890 = state_106900[2];
                              var state_106900__$1 = state_106900;
                              var statearr_106911_106926 = state_106900__$1;
                              statearr_106911_106926[2] = inst_106890;
                              statearr_106911_106926[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_106901 === 11) {
                                var inst_106893 = state_106900[2];
                                var state_106900__$1 = function() {
                                  var statearr_106912 = state_106900;
                                  statearr_106912[6] = inst_106893;
                                  return statearr_106912
                                }();
                                var statearr_106913_106927 = state_106900__$1;
                                statearr_106913_106927[2] = null;
                                statearr_106913_106927[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_106915 = new Array(7);
              statearr_106915[0] = state_machine__5679__auto__;
              statearr_106915[1] = 1;
              return statearr_106915
            };
            var state_machine__5679__auto____1 = function(state_106900) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_106900);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_106900) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_106900)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_106916 = f__5729__auto__.call(null);
        statearr_106916[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___106917;
        return statearr_106916
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return to
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null)
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5728__auto___107006 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_106988) {
          var state_val_106989 = state_106988[1];
          if(state_val_106989 === 1) {
            var state_106988__$1 = state_106988;
            var statearr_106990_107007 = state_106988__$1;
            statearr_106990_107007[2] = null;
            statearr_106990_107007[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_106989 === 2) {
              var state_106988__$1 = state_106988;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_106988__$1, 4, ch)
            }else {
              if(state_val_106989 === 3) {
                var inst_106986 = state_106988[2];
                var state_106988__$1 = state_106988;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_106988__$1, inst_106986)
              }else {
                if(state_val_106989 === 4) {
                  var inst_106969 = state_106988[5];
                  var inst_106969__$1 = state_106988[2];
                  var inst_106970 = inst_106969__$1 == null;
                  var state_106988__$1 = function() {
                    var statearr_106991 = state_106988;
                    statearr_106991[5] = inst_106969__$1;
                    return statearr_106991
                  }();
                  if(cljs.core.truth_(inst_106970)) {
                    var statearr_106992_107008 = state_106988__$1;
                    statearr_106992_107008[1] = 5
                  }else {
                    var statearr_106993_107009 = state_106988__$1;
                    statearr_106993_107009[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_106989 === 5) {
                    var inst_106972 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_106973 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_106988__$1 = function() {
                      var statearr_106994 = state_106988;
                      statearr_106994[6] = inst_106972;
                      return statearr_106994
                    }();
                    var statearr_106995_107010 = state_106988__$1;
                    statearr_106995_107010[2] = inst_106973;
                    statearr_106995_107010[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_106989 === 6) {
                      var inst_106969 = state_106988[5];
                      var inst_106975 = p.call(null, inst_106969);
                      var state_106988__$1 = state_106988;
                      if(cljs.core.truth_(inst_106975)) {
                        var statearr_106996_107011 = state_106988__$1;
                        statearr_106996_107011[1] = 9
                      }else {
                        var statearr_106997_107012 = state_106988__$1;
                        statearr_106997_107012[1] = 10
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_106989 === 7) {
                        var inst_106984 = state_106988[2];
                        var state_106988__$1 = state_106988;
                        var statearr_106998_107013 = state_106988__$1;
                        statearr_106998_107013[2] = inst_106984;
                        statearr_106998_107013[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_106989 === 8) {
                          var inst_106981 = state_106988[2];
                          var state_106988__$1 = function() {
                            var statearr_106999 = state_106988;
                            statearr_106999[7] = inst_106981;
                            return statearr_106999
                          }();
                          var statearr_107000_107014 = state_106988__$1;
                          statearr_107000_107014[2] = null;
                          statearr_107000_107014[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_106989 === 9) {
                            var state_106988__$1 = state_106988;
                            var statearr_107001_107015 = state_106988__$1;
                            statearr_107001_107015[2] = tc;
                            statearr_107001_107015[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_106989 === 10) {
                              var state_106988__$1 = state_106988;
                              var statearr_107002_107016 = state_106988__$1;
                              statearr_107002_107016[2] = fc;
                              statearr_107002_107016[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_106989 === 11) {
                                var inst_106969 = state_106988[5];
                                var inst_106979 = state_106988[2];
                                var state_106988__$1 = state_106988;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_106988__$1, 8, inst_106979, inst_106969)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_107004 = new Array(8);
              statearr_107004[0] = state_machine__5679__auto__;
              statearr_107004[1] = 1;
              return statearr_107004
            };
            var state_machine__5679__auto____1 = function(state_106988) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_106988);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_106988) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_106988)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_107005 = f__5729__auto__.call(null);
        statearr_107005[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___107006;
        return statearr_107005
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null)
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5728__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5729__auto__ = function() {
      var switch__5678__auto__ = function(state_107059) {
        var state_val_107060 = state_107059[1];
        if(state_val_107060 === 7) {
          var inst_107055 = state_107059[2];
          var state_107059__$1 = state_107059;
          var statearr_107061_107073 = state_107059__$1;
          statearr_107061_107073[2] = inst_107055;
          statearr_107061_107073[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_107060 === 6) {
            var inst_107048 = state_107059[5];
            var inst_107045 = state_107059[6];
            var inst_107052 = f.call(null, inst_107045, inst_107048);
            var inst_107045__$1 = inst_107052;
            var state_107059__$1 = function() {
              var statearr_107062 = state_107059;
              statearr_107062[6] = inst_107045__$1;
              return statearr_107062
            }();
            var statearr_107063_107074 = state_107059__$1;
            statearr_107063_107074[2] = null;
            statearr_107063_107074[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_107060 === 5) {
              var inst_107045 = state_107059[6];
              var state_107059__$1 = state_107059;
              var statearr_107064_107075 = state_107059__$1;
              statearr_107064_107075[2] = inst_107045;
              statearr_107064_107075[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_107060 === 4) {
                var inst_107048 = state_107059[5];
                var inst_107048__$1 = state_107059[2];
                var inst_107049 = inst_107048__$1 == null;
                var state_107059__$1 = function() {
                  var statearr_107065 = state_107059;
                  statearr_107065[5] = inst_107048__$1;
                  return statearr_107065
                }();
                if(cljs.core.truth_(inst_107049)) {
                  var statearr_107066_107076 = state_107059__$1;
                  statearr_107066_107076[1] = 5
                }else {
                  var statearr_107067_107077 = state_107059__$1;
                  statearr_107067_107077[1] = 6
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_107060 === 3) {
                  var inst_107057 = state_107059[2];
                  var state_107059__$1 = state_107059;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_107059__$1, inst_107057)
                }else {
                  if(state_val_107060 === 2) {
                    var state_107059__$1 = state_107059;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_107059__$1, 4, ch)
                  }else {
                    if(state_val_107060 === 1) {
                      var inst_107045 = init;
                      var state_107059__$1 = function() {
                        var statearr_107068 = state_107059;
                        statearr_107068[6] = inst_107045;
                        return statearr_107068
                      }();
                      var statearr_107069_107078 = state_107059__$1;
                      statearr_107069_107078[2] = null;
                      statearr_107069_107078[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      return null
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5678__auto__) {
        return function() {
          var state_machine__5679__auto__ = null;
          var state_machine__5679__auto____0 = function() {
            var statearr_107071 = new Array(7);
            statearr_107071[0] = state_machine__5679__auto__;
            statearr_107071[1] = 1;
            return statearr_107071
          };
          var state_machine__5679__auto____1 = function(state_107059) {
            while(true) {
              var result__5680__auto__ = switch__5678__auto__.call(null, state_107059);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5680__auto__
              }
              break
            }
          };
          state_machine__5679__auto__ = function(state_107059) {
            switch(arguments.length) {
              case 0:
                return state_machine__5679__auto____0.call(this);
              case 1:
                return state_machine__5679__auto____1.call(this, state_107059)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
          return state_machine__5679__auto__
        }()
      }(switch__5678__auto__)
    }();
    var state__5730__auto__ = function() {
      var statearr_107072 = f__5729__auto__.call(null);
      statearr_107072[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto__;
      return statearr_107072
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
  });
  return c__5728__auto__
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true)
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5728__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_107136) {
          var state_val_107137 = state_107136[1];
          if(state_val_107137 === 1) {
            var inst_107116 = cljs.core.seq.call(null, coll);
            var inst_107117 = inst_107116;
            var state_107136__$1 = function() {
              var statearr_107138 = state_107136;
              statearr_107138[5] = inst_107117;
              return statearr_107138
            }();
            var statearr_107139_107153 = state_107136__$1;
            statearr_107139_107153[2] = null;
            statearr_107139_107153[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_107137 === 2) {
              var inst_107117 = state_107136[5];
              var state_107136__$1 = state_107136;
              if(cljs.core.truth_(inst_107117)) {
                var statearr_107140_107154 = state_107136__$1;
                statearr_107140_107154[1] = 4
              }else {
                var statearr_107141_107155 = state_107136__$1;
                statearr_107141_107155[1] = 5
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_107137 === 3) {
                var inst_107134 = state_107136[2];
                var state_107136__$1 = state_107136;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_107136__$1, inst_107134)
              }else {
                if(state_val_107137 === 4) {
                  var inst_107117 = state_107136[5];
                  var inst_107120 = cljs.core.first.call(null, inst_107117);
                  var state_107136__$1 = state_107136;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_107136__$1, 7, ch, inst_107120)
                }else {
                  if(state_val_107137 === 5) {
                    var state_107136__$1 = state_107136;
                    if(cljs.core.truth_(close_QMARK_)) {
                      var statearr_107142_107156 = state_107136__$1;
                      statearr_107142_107156[1] = 8
                    }else {
                      var statearr_107143_107157 = state_107136__$1;
                      statearr_107143_107157[1] = 9
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_107137 === 6) {
                      var inst_107132 = state_107136[2];
                      var state_107136__$1 = state_107136;
                      var statearr_107144_107158 = state_107136__$1;
                      statearr_107144_107158[2] = inst_107132;
                      statearr_107144_107158[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_107137 === 7) {
                        var inst_107117 = state_107136[5];
                        var inst_107122 = state_107136[2];
                        var inst_107123 = cljs.core.next.call(null, inst_107117);
                        var inst_107117__$1 = inst_107123;
                        var state_107136__$1 = function() {
                          var statearr_107145 = state_107136;
                          statearr_107145[6] = inst_107122;
                          statearr_107145[5] = inst_107117__$1;
                          return statearr_107145
                        }();
                        var statearr_107146_107159 = state_107136__$1;
                        statearr_107146_107159[2] = null;
                        statearr_107146_107159[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_107137 === 8) {
                          var inst_107127 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_107136__$1 = state_107136;
                          var statearr_107147_107160 = state_107136__$1;
                          statearr_107147_107160[2] = inst_107127;
                          statearr_107147_107160[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_107137 === 9) {
                            var state_107136__$1 = state_107136;
                            var statearr_107148_107161 = state_107136__$1;
                            statearr_107148_107161[2] = null;
                            statearr_107148_107161[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_107137 === 10) {
                              var inst_107130 = state_107136[2];
                              var state_107136__$1 = state_107136;
                              var statearr_107149_107162 = state_107136__$1;
                              statearr_107149_107162[2] = inst_107130;
                              statearr_107149_107162[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              return null
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_107151 = new Array(7);
              statearr_107151[0] = state_machine__5679__auto__;
              statearr_107151[1] = 1;
              return statearr_107151
            };
            var state_machine__5679__auto____1 = function(state_107136) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_107136);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_107136) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_107136)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_107152 = f__5729__auto__.call(null);
        statearr_107152[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto__;
        return statearr_107152
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return c__5728__auto__
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch
};
cljs.core.async.Mux = function() {
  var obj107164 = {};
  return obj107164
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if(function() {
    var and__3273__auto__ = _;
    if(and__3273__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_)
  }else {
    var x__3888__auto__ = _ == null ? null : _;
    return function() {
      var or__3285__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _)
  }
};
cljs.core.async.Mult = function() {
  var obj107166 = {};
  return obj107166
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_)
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m)
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if(typeof cljs.core.async.t107379 !== "undefined") {
    }else {
      cljs.core.async.t107379 = function(cs, ch, mult, meta107380) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta107380 = meta107380;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216
      };
      cljs.core.async.t107379.cljs$lang$type = true;
      cljs.core.async.t107379.cljs$lang$ctorStr = "cljs.core.async/t107379";
      cljs.core.async.t107379.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
          return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t107379")
        }
      }(cs);
      cljs.core.async.t107379.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t107379.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null
        }
      }(cs);
      cljs.core.async.t107379.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null
        }
      }(cs);
      cljs.core.async.t107379.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null
        }
      }(cs);
      cljs.core.async.t107379.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t107379.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch
        }
      }(cs);
      cljs.core.async.t107379.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_107381) {
          var self__ = this;
          var _107381__$1 = this;
          return self__.meta107380
        }
      }(cs);
      cljs.core.async.t107379.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_107381, meta107380__$1) {
          var self__ = this;
          var _107381__$1 = this;
          return new cljs.core.async.t107379(self__.cs, self__.ch, self__.mult, meta107380__$1)
        }
      }(cs);
      cljs.core.async.__GT_t107379 = function(cs) {
        return function __GT_t107379(cs__$1, ch__$1, mult__$1, meta107380) {
          return new cljs.core.async.t107379(cs__$1, ch__$1, mult__$1, meta107380)
        }
      }(cs)
    }
    return new cljs.core.async.t107379(cs, ch, mult, null)
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if(cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true)
      }else {
        return null
      }
    }
  }(cs, m, dchan, dctr);
  var c__5728__auto___107591 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5729__auto__ = function() {
      var switch__5678__auto__ = function(state_107509) {
        var state_val_107510 = state_107509[1];
        if(state_val_107510 === 32) {
          try {
            var inst_107384 = state_107509[5];
            var inst_107460 = state_107509[6];
            var inst_107466 = cljs.core.async.put_BANG_.call(null, inst_107460, inst_107384, done);
            var state_107509__$1 = state_107509;
            var statearr_107513_107592 = state_107509__$1;
            statearr_107513_107592[2] = inst_107466;
            statearr_107513_107592[1] = 30;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }catch(e107511) {
            if(e107511 instanceof Object) {
              var ex__5672__auto__ = e107511;
              var statearr_107512_107593 = state_107509;
              statearr_107512_107593[1] = 31;
              statearr_107512_107593[2] = ex__5672__auto__;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e107511;
              }else {
                return null
              }
            }
          }
        }else {
          if(state_val_107510 === 1) {
            var state_107509__$1 = state_107509;
            var statearr_107514_107594 = state_107509__$1;
            statearr_107514_107594[2] = null;
            statearr_107514_107594[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_107510 === 33) {
              var inst_107472 = state_107509[7];
              var inst_107474 = cljs.core.chunked_seq_QMARK_.call(null, inst_107472);
              var state_107509__$1 = state_107509;
              if(inst_107474) {
                var statearr_107515_107595 = state_107509__$1;
                statearr_107515_107595[1] = 36
              }else {
                var statearr_107516_107596 = state_107509__$1;
                statearr_107516_107596[1] = 37
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_107510 === 2) {
                var state_107509__$1 = state_107509;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_107509__$1, 4, ch)
              }else {
                if(state_val_107510 === 34) {
                  var state_107509__$1 = state_107509;
                  var statearr_107517_107597 = state_107509__$1;
                  statearr_107517_107597[2] = null;
                  statearr_107517_107597[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_107510 === 3) {
                    var inst_107507 = state_107509[2];
                    var state_107509__$1 = state_107509;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_107509__$1, inst_107507)
                  }else {
                    if(state_val_107510 === 35) {
                      var inst_107496 = state_107509[2];
                      var state_107509__$1 = state_107509;
                      var statearr_107518_107598 = state_107509__$1;
                      statearr_107518_107598[2] = inst_107496;
                      statearr_107518_107598[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_107510 === 4) {
                        var inst_107384 = state_107509[5];
                        var inst_107384__$1 = state_107509[2];
                        var inst_107385 = inst_107384__$1 == null;
                        var state_107509__$1 = function() {
                          var statearr_107519 = state_107509;
                          statearr_107519[5] = inst_107384__$1;
                          return statearr_107519
                        }();
                        if(cljs.core.truth_(inst_107385)) {
                          var statearr_107520_107599 = state_107509__$1;
                          statearr_107520_107599[1] = 5
                        }else {
                          var statearr_107521_107600 = state_107509__$1;
                          statearr_107521_107600[1] = 6
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_107510 === 36) {
                          var inst_107472 = state_107509[7];
                          var inst_107476 = cljs.core.chunk_first.call(null, inst_107472);
                          var inst_107477 = cljs.core.chunk_rest.call(null, inst_107472);
                          var inst_107478 = cljs.core.count.call(null, inst_107476);
                          var inst_107452 = inst_107477;
                          var inst_107453 = inst_107476;
                          var inst_107454 = inst_107478;
                          var inst_107455 = 0;
                          var state_107509__$1 = function() {
                            var statearr_107522 = state_107509;
                            statearr_107522[8] = inst_107454;
                            statearr_107522[9] = inst_107455;
                            statearr_107522[10] = inst_107453;
                            statearr_107522[11] = inst_107452;
                            return statearr_107522
                          }();
                          var statearr_107523_107601 = state_107509__$1;
                          statearr_107523_107601[2] = null;
                          statearr_107523_107601[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_107510 === 5) {
                            var inst_107391 = cljs.core.deref.call(null, cs);
                            var inst_107392 = cljs.core.seq.call(null, inst_107391);
                            var inst_107393 = inst_107392;
                            var inst_107394 = null;
                            var inst_107395 = 0;
                            var inst_107396 = 0;
                            var state_107509__$1 = function() {
                              var statearr_107524 = state_107509;
                              statearr_107524[12] = inst_107393;
                              statearr_107524[13] = inst_107394;
                              statearr_107524[14] = inst_107396;
                              statearr_107524[15] = inst_107395;
                              return statearr_107524
                            }();
                            var statearr_107525_107602 = state_107509__$1;
                            statearr_107525_107602[2] = null;
                            statearr_107525_107602[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_107510 === 37) {
                              var inst_107472 = state_107509[7];
                              var inst_107481 = cljs.core.first.call(null, inst_107472);
                              var state_107509__$1 = function() {
                                var statearr_107526 = state_107509;
                                statearr_107526[16] = inst_107481;
                                return statearr_107526
                              }();
                              var statearr_107527_107603 = state_107509__$1;
                              statearr_107527_107603[2] = null;
                              statearr_107527_107603[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_107510 === 6) {
                                var inst_107443 = cljs.core.deref.call(null, cs);
                                var inst_107444 = cljs.core.keys.call(null, inst_107443);
                                var inst_107445 = cljs.core.count.call(null, inst_107444);
                                var inst_107446 = cljs.core.reset_BANG_.call(null, dctr, inst_107445);
                                var inst_107451 = cljs.core.seq.call(null, inst_107444);
                                var inst_107452 = inst_107451;
                                var inst_107453 = null;
                                var inst_107454 = 0;
                                var inst_107455 = 0;
                                var state_107509__$1 = function() {
                                  var statearr_107528 = state_107509;
                                  statearr_107528[8] = inst_107454;
                                  statearr_107528[9] = inst_107455;
                                  statearr_107528[10] = inst_107453;
                                  statearr_107528[11] = inst_107452;
                                  statearr_107528[17] = inst_107446;
                                  return statearr_107528
                                }();
                                var statearr_107529_107604 = state_107509__$1;
                                statearr_107529_107604[2] = null;
                                statearr_107529_107604[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_107510 === 38) {
                                  var inst_107493 = state_107509[2];
                                  var state_107509__$1 = state_107509;
                                  var statearr_107530_107605 = state_107509__$1;
                                  statearr_107530_107605[2] = inst_107493;
                                  statearr_107530_107605[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_107510 === 7) {
                                    var inst_107505 = state_107509[2];
                                    var state_107509__$1 = state_107509;
                                    var statearr_107531_107606 = state_107509__$1;
                                    statearr_107531_107606[2] = inst_107505;
                                    statearr_107531_107606[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_107510 === 39) {
                                      var inst_107472 = state_107509[7];
                                      var inst_107489 = state_107509[2];
                                      var inst_107490 = cljs.core.next.call(null, inst_107472);
                                      var inst_107452 = inst_107490;
                                      var inst_107453 = null;
                                      var inst_107454 = 0;
                                      var inst_107455 = 0;
                                      var state_107509__$1 = function() {
                                        var statearr_107532 = state_107509;
                                        statearr_107532[8] = inst_107454;
                                        statearr_107532[9] = inst_107455;
                                        statearr_107532[10] = inst_107453;
                                        statearr_107532[11] = inst_107452;
                                        statearr_107532[18] = inst_107489;
                                        return statearr_107532
                                      }();
                                      var statearr_107533_107607 = state_107509__$1;
                                      statearr_107533_107607[2] = null;
                                      statearr_107533_107607[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_107510 === 8) {
                                        var inst_107396 = state_107509[14];
                                        var inst_107395 = state_107509[15];
                                        var inst_107398 = inst_107396 < inst_107395;
                                        var inst_107399 = inst_107398;
                                        var state_107509__$1 = state_107509;
                                        if(cljs.core.truth_(inst_107399)) {
                                          var statearr_107534_107608 = state_107509__$1;
                                          statearr_107534_107608[1] = 10
                                        }else {
                                          var statearr_107535_107609 = state_107509__$1;
                                          statearr_107535_107609[1] = 11
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_107510 === 40) {
                                          var inst_107481 = state_107509[16];
                                          var inst_107482 = state_107509[2];
                                          var inst_107483 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_107484 = cljs.core.async.untap_STAR_.call(null, m, inst_107481);
                                          var state_107509__$1 = function() {
                                            var statearr_107536 = state_107509;
                                            statearr_107536[19] = inst_107482;
                                            statearr_107536[20] = inst_107483;
                                            return statearr_107536
                                          }();
                                          var statearr_107537_107610 = state_107509__$1;
                                          statearr_107537_107610[2] = inst_107484;
                                          statearr_107537_107610[1] = 39;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_107510 === 9) {
                                            var inst_107441 = state_107509[2];
                                            var state_107509__$1 = state_107509;
                                            var statearr_107538_107611 = state_107509__$1;
                                            statearr_107538_107611[2] = inst_107441;
                                            statearr_107538_107611[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_107510 === 41) {
                                              try {
                                                var inst_107481 = state_107509[16];
                                                var inst_107384 = state_107509[5];
                                                var inst_107487 = cljs.core.async.put_BANG_.call(null, inst_107481, inst_107384, done);
                                                var state_107509__$1 = state_107509;
                                                var statearr_107541_107612 = state_107509__$1;
                                                statearr_107541_107612[2] = inst_107487;
                                                statearr_107541_107612[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }catch(e107539) {
                                                if(e107539 instanceof Object) {
                                                  var ex__5672__auto__ = e107539;
                                                  var statearr_107540_107613 = state_107509;
                                                  statearr_107540_107613[1] = 40;
                                                  statearr_107540_107613[2] = ex__5672__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                    throw e107539;
                                                  }else {
                                                    return null
                                                  }
                                                }
                                              }
                                            }else {
                                              if(state_val_107510 === 10) {
                                                var inst_107394 = state_107509[13];
                                                var inst_107396 = state_107509[14];
                                                var inst_107402 = cljs.core._nth.call(null, inst_107394, inst_107396);
                                                var inst_107403 = cljs.core.nth.call(null, inst_107402, 0, null);
                                                var inst_107404 = cljs.core.nth.call(null, inst_107402, 1, null);
                                                var state_107509__$1 = function() {
                                                  var statearr_107542 = state_107509;
                                                  statearr_107542[21] = inst_107403;
                                                  return statearr_107542
                                                }();
                                                if(cljs.core.truth_(inst_107404)) {
                                                  var statearr_107543_107614 = state_107509__$1;
                                                  statearr_107543_107614[1] = 13
                                                }else {
                                                  var statearr_107544_107615 = state_107509__$1;
                                                  statearr_107544_107615[1] = 14
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                if(state_val_107510 === 42) {
                                                  var inst_107502 = state_107509[2];
                                                  var state_107509__$1 = function() {
                                                    var statearr_107545 = state_107509;
                                                    statearr_107545[22] = inst_107502;
                                                    return statearr_107545
                                                  }();
                                                  var statearr_107546_107616 = state_107509__$1;
                                                  statearr_107546_107616[2] = null;
                                                  statearr_107546_107616[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_107510 === 11) {
                                                    var inst_107413 = state_107509[23];
                                                    var inst_107393 = state_107509[12];
                                                    var inst_107413__$1 = cljs.core.seq.call(null, inst_107393);
                                                    var state_107509__$1 = function() {
                                                      var statearr_107547 = state_107509;
                                                      statearr_107547[23] = inst_107413__$1;
                                                      return statearr_107547
                                                    }();
                                                    if(inst_107413__$1) {
                                                      var statearr_107548_107617 = state_107509__$1;
                                                      statearr_107548_107617[1] = 16
                                                    }else {
                                                      var statearr_107549_107618 = state_107509__$1;
                                                      statearr_107549_107618[1] = 17
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_107510 === 12) {
                                                      var inst_107439 = state_107509[2];
                                                      var state_107509__$1 = state_107509;
                                                      var statearr_107550_107619 = state_107509__$1;
                                                      statearr_107550_107619[2] = inst_107439;
                                                      statearr_107550_107619[1] = 9;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      if(state_val_107510 === 13) {
                                                        var inst_107403 = state_107509[21];
                                                        var inst_107406 = cljs.core.async.close_BANG_.call(null, inst_107403);
                                                        var state_107509__$1 = state_107509;
                                                        var statearr_107554_107620 = state_107509__$1;
                                                        statearr_107554_107620[2] = inst_107406;
                                                        statearr_107554_107620[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                      }else {
                                                        if(state_val_107510 === 14) {
                                                          var state_107509__$1 = state_107509;
                                                          var statearr_107555_107621 = state_107509__$1;
                                                          statearr_107555_107621[2] = null;
                                                          statearr_107555_107621[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                        }else {
                                                          if(state_val_107510 === 15) {
                                                            var inst_107393 = state_107509[12];
                                                            var inst_107394 = state_107509[13];
                                                            var inst_107396 = state_107509[14];
                                                            var inst_107395 = state_107509[15];
                                                            var inst_107409 = state_107509[2];
                                                            var inst_107410 = inst_107396 + 1;
                                                            var tmp107551 = inst_107393;
                                                            var tmp107552 = inst_107394;
                                                            var tmp107553 = inst_107395;
                                                            var inst_107393__$1 = tmp107551;
                                                            var inst_107394__$1 = tmp107552;
                                                            var inst_107395__$1 = tmp107553;
                                                            var inst_107396__$1 = inst_107410;
                                                            var state_107509__$1 = function() {
                                                              var statearr_107556 = state_107509;
                                                              statearr_107556[12] = inst_107393__$1;
                                                              statearr_107556[13] = inst_107394__$1;
                                                              statearr_107556[24] = inst_107409;
                                                              statearr_107556[14] = inst_107396__$1;
                                                              statearr_107556[15] = inst_107395__$1;
                                                              return statearr_107556
                                                            }();
                                                            var statearr_107557_107622 = state_107509__$1;
                                                            statearr_107557_107622[2] = null;
                                                            statearr_107557_107622[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                          }else {
                                                            if(state_val_107510 === 16) {
                                                              var inst_107413 = state_107509[23];
                                                              var inst_107415 = cljs.core.chunked_seq_QMARK_.call(null, inst_107413);
                                                              var state_107509__$1 = state_107509;
                                                              if(inst_107415) {
                                                                var statearr_107558_107623 = state_107509__$1;
                                                                statearr_107558_107623[1] = 19
                                                              }else {
                                                                var statearr_107559_107624 = state_107509__$1;
                                                                statearr_107559_107624[1] = 20
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }else {
                                                              if(state_val_107510 === 17) {
                                                                var state_107509__$1 = state_107509;
                                                                var statearr_107560_107625 = state_107509__$1;
                                                                statearr_107560_107625[2] = null;
                                                                statearr_107560_107625[1] = 18;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                              }else {
                                                                if(state_val_107510 === 18) {
                                                                  var inst_107437 = state_107509[2];
                                                                  var state_107509__$1 = state_107509;
                                                                  var statearr_107561_107626 = state_107509__$1;
                                                                  statearr_107561_107626[2] = inst_107437;
                                                                  statearr_107561_107626[1] = 12;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                }else {
                                                                  if(state_val_107510 === 19) {
                                                                    var inst_107413 = state_107509[23];
                                                                    var inst_107417 = cljs.core.chunk_first.call(null, inst_107413);
                                                                    var inst_107418 = cljs.core.chunk_rest.call(null, inst_107413);
                                                                    var inst_107419 = cljs.core.count.call(null, inst_107417);
                                                                    var inst_107393 = inst_107418;
                                                                    var inst_107394 = inst_107417;
                                                                    var inst_107395 = inst_107419;
                                                                    var inst_107396 = 0;
                                                                    var state_107509__$1 = function() {
                                                                      var statearr_107562 = state_107509;
                                                                      statearr_107562[12] = inst_107393;
                                                                      statearr_107562[13] = inst_107394;
                                                                      statearr_107562[14] = inst_107396;
                                                                      statearr_107562[15] = inst_107395;
                                                                      return statearr_107562
                                                                    }();
                                                                    var statearr_107563_107627 = state_107509__$1;
                                                                    statearr_107563_107627[2] = null;
                                                                    statearr_107563_107627[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                  }else {
                                                                    if(state_val_107510 === 20) {
                                                                      var inst_107413 = state_107509[23];
                                                                      var inst_107423 = cljs.core.first.call(null, inst_107413);
                                                                      var inst_107424 = cljs.core.nth.call(null, inst_107423, 0, null);
                                                                      var inst_107425 = cljs.core.nth.call(null, inst_107423, 1, null);
                                                                      var state_107509__$1 = function() {
                                                                        var statearr_107564 = state_107509;
                                                                        statearr_107564[25] = inst_107424;
                                                                        return statearr_107564
                                                                      }();
                                                                      if(cljs.core.truth_(inst_107425)) {
                                                                        var statearr_107565_107628 = state_107509__$1;
                                                                        statearr_107565_107628[1] = 22
                                                                      }else {
                                                                        var statearr_107566_107629 = state_107509__$1;
                                                                        statearr_107566_107629[1] = 23
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                    }else {
                                                                      if(state_val_107510 === 21) {
                                                                        var inst_107434 = state_107509[2];
                                                                        var state_107509__$1 = state_107509;
                                                                        var statearr_107567_107630 = state_107509__$1;
                                                                        statearr_107567_107630[2] = inst_107434;
                                                                        statearr_107567_107630[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                      }else {
                                                                        if(state_val_107510 === 22) {
                                                                          var inst_107424 = state_107509[25];
                                                                          var inst_107427 = cljs.core.async.close_BANG_.call(null, inst_107424);
                                                                          var state_107509__$1 = state_107509;
                                                                          var statearr_107568_107631 = state_107509__$1;
                                                                          statearr_107568_107631[2] = inst_107427;
                                                                          statearr_107568_107631[1] = 24;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                        }else {
                                                                          if(state_val_107510 === 23) {
                                                                            var state_107509__$1 = state_107509;
                                                                            var statearr_107569_107632 = state_107509__$1;
                                                                            statearr_107569_107632[2] = null;
                                                                            statearr_107569_107632[1] = 24;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                          }else {
                                                                            if(state_val_107510 === 24) {
                                                                              var inst_107413 = state_107509[23];
                                                                              var inst_107430 = state_107509[2];
                                                                              var inst_107431 = cljs.core.next.call(null, inst_107413);
                                                                              var inst_107393 = inst_107431;
                                                                              var inst_107394 = null;
                                                                              var inst_107395 = 0;
                                                                              var inst_107396 = 0;
                                                                              var state_107509__$1 = function() {
                                                                                var statearr_107570 = state_107509;
                                                                                statearr_107570[12] = inst_107393;
                                                                                statearr_107570[13] = inst_107394;
                                                                                statearr_107570[14] = inst_107396;
                                                                                statearr_107570[15] = inst_107395;
                                                                                statearr_107570[26] = inst_107430;
                                                                                return statearr_107570
                                                                              }();
                                                                              var statearr_107571_107633 = state_107509__$1;
                                                                              statearr_107571_107633[2] = null;
                                                                              statearr_107571_107633[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                            }else {
                                                                              if(state_val_107510 === 25) {
                                                                                var inst_107454 = state_107509[8];
                                                                                var inst_107455 = state_107509[9];
                                                                                var inst_107457 = inst_107455 < inst_107454;
                                                                                var inst_107458 = inst_107457;
                                                                                var state_107509__$1 = state_107509;
                                                                                if(cljs.core.truth_(inst_107458)) {
                                                                                  var statearr_107572_107634 = state_107509__$1;
                                                                                  statearr_107572_107634[1] = 27
                                                                                }else {
                                                                                  var statearr_107573_107635 = state_107509__$1;
                                                                                  statearr_107573_107635[1] = 28
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                              }else {
                                                                                if(state_val_107510 === 26) {
                                                                                  var inst_107500 = state_107509[2];
                                                                                  var state_107509__$1 = function() {
                                                                                    var statearr_107574 = state_107509;
                                                                                    statearr_107574[27] = inst_107500;
                                                                                    return statearr_107574
                                                                                  }();
                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_107509__$1, 42, dchan)
                                                                                }else {
                                                                                  if(state_val_107510 === 27) {
                                                                                    var inst_107455 = state_107509[9];
                                                                                    var inst_107453 = state_107509[10];
                                                                                    var inst_107460 = cljs.core._nth.call(null, inst_107453, inst_107455);
                                                                                    var state_107509__$1 = function() {
                                                                                      var statearr_107575 = state_107509;
                                                                                      statearr_107575[6] = inst_107460;
                                                                                      return statearr_107575
                                                                                    }();
                                                                                    var statearr_107576_107636 = state_107509__$1;
                                                                                    statearr_107576_107636[2] = null;
                                                                                    statearr_107576_107636[1] = 32;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                  }else {
                                                                                    if(state_val_107510 === 28) {
                                                                                      var inst_107452 = state_107509[11];
                                                                                      var inst_107472 = state_107509[7];
                                                                                      var inst_107472__$1 = cljs.core.seq.call(null, inst_107452);
                                                                                      var state_107509__$1 = function() {
                                                                                        var statearr_107580 = state_107509;
                                                                                        statearr_107580[7] = inst_107472__$1;
                                                                                        return statearr_107580
                                                                                      }();
                                                                                      if(inst_107472__$1) {
                                                                                        var statearr_107581_107637 = state_107509__$1;
                                                                                        statearr_107581_107637[1] = 33
                                                                                      }else {
                                                                                        var statearr_107582_107638 = state_107509__$1;
                                                                                        statearr_107582_107638[1] = 34
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                    }else {
                                                                                      if(state_val_107510 === 29) {
                                                                                        var inst_107498 = state_107509[2];
                                                                                        var state_107509__$1 = state_107509;
                                                                                        var statearr_107583_107639 = state_107509__$1;
                                                                                        statearr_107583_107639[2] = inst_107498;
                                                                                        statearr_107583_107639[1] = 26;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                      }else {
                                                                                        if(state_val_107510 === 30) {
                                                                                          var inst_107454 = state_107509[8];
                                                                                          var inst_107455 = state_107509[9];
                                                                                          var inst_107453 = state_107509[10];
                                                                                          var inst_107452 = state_107509[11];
                                                                                          var inst_107468 = state_107509[2];
                                                                                          var inst_107469 = inst_107455 + 1;
                                                                                          var tmp107577 = inst_107454;
                                                                                          var tmp107578 = inst_107453;
                                                                                          var tmp107579 = inst_107452;
                                                                                          var inst_107452__$1 = tmp107579;
                                                                                          var inst_107453__$1 = tmp107578;
                                                                                          var inst_107454__$1 = tmp107577;
                                                                                          var inst_107455__$1 = inst_107469;
                                                                                          var state_107509__$1 = function() {
                                                                                            var statearr_107584 = state_107509;
                                                                                            statearr_107584[8] = inst_107454__$1;
                                                                                            statearr_107584[9] = inst_107455__$1;
                                                                                            statearr_107584[10] = inst_107453__$1;
                                                                                            statearr_107584[11] = inst_107452__$1;
                                                                                            statearr_107584[28] = inst_107468;
                                                                                            return statearr_107584
                                                                                          }();
                                                                                          var statearr_107585_107640 = state_107509__$1;
                                                                                          statearr_107585_107640[2] = null;
                                                                                          statearr_107585_107640[1] = 25;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                        }else {
                                                                                          if(state_val_107510 === 31) {
                                                                                            var inst_107460 = state_107509[6];
                                                                                            var inst_107461 = state_107509[2];
                                                                                            var inst_107462 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                            var inst_107463 = cljs.core.async.untap_STAR_.call(null, m, inst_107460);
                                                                                            var state_107509__$1 = function() {
                                                                                              var statearr_107586 = state_107509;
                                                                                              statearr_107586[29] = inst_107462;
                                                                                              statearr_107586[30] = inst_107461;
                                                                                              return statearr_107586
                                                                                            }();
                                                                                            var statearr_107587_107641 = state_107509__$1;
                                                                                            statearr_107587_107641[2] = inst_107463;
                                                                                            statearr_107587_107641[1] = 30;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                          }else {
                                                                                            return null
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5678__auto__) {
        return function() {
          var state_machine__5679__auto__ = null;
          var state_machine__5679__auto____0 = function() {
            var statearr_107589 = new Array(31);
            statearr_107589[0] = state_machine__5679__auto__;
            statearr_107589[1] = 1;
            return statearr_107589
          };
          var state_machine__5679__auto____1 = function(state_107509) {
            while(true) {
              var result__5680__auto__ = switch__5678__auto__.call(null, state_107509);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5680__auto__
              }
              break
            }
          };
          state_machine__5679__auto__ = function(state_107509) {
            switch(arguments.length) {
              case 0:
                return state_machine__5679__auto____0.call(this);
              case 1:
                return state_machine__5679__auto____1.call(this, state_107509)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
          return state_machine__5679__auto__
        }()
      }(switch__5678__auto__)
    }();
    var state__5730__auto__ = function() {
      var statearr_107590 = f__5729__auto__.call(null);
      statearr_107590[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___107591;
      return statearr_107590
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
  });
  return m
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true)
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch)
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult)
};
cljs.core.async.Mix = function() {
  var obj107643 = {};
  return obj107643
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m)
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map)
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode)
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true)
    }
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if(cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c)
          }else {
            return ret
          }
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs)
    }
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null)
    }
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if(typeof cljs.core.async.t107749 !== "undefined") {
    }else {
      cljs.core.async.t107749 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta107750) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta107750 = meta107750;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216
      };
      cljs.core.async.t107749.cljs$lang$type = true;
      cljs.core.async.t107749.cljs$lang$ctorStr = "cljs.core.async/t107749";
      cljs.core.async.t107749.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
          return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t107749")
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t107749.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t107749.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t107749.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t107749.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t107749.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t107749.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if(cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          }else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t107749.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t107749.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t107749.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_107751) {
          var self__ = this;
          var _107751__$1 = this;
          return self__.meta107750
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t107749.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_107751, meta107750__$1) {
          var self__ = this;
          var _107751__$1 = this;
          return new cljs.core.async.t107749(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta107750__$1)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t107749 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t107749(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta107750) {
          return new cljs.core.async.t107749(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta107750)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state)
    }
    return new cljs.core.async.t107749(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null)
  }();
  var c__5728__auto___107854 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5729__auto__ = function() {
      var switch__5678__auto__ = function(state_107816) {
        var state_val_107817 = state_107816[1];
        if(state_val_107817 === 1) {
          var inst_107755 = state_107816[5];
          var inst_107755__$1 = calc_state.call(null);
          var inst_107756 = cljs.core.seq_QMARK_.call(null, inst_107755__$1);
          var state_107816__$1 = function() {
            var statearr_107818 = state_107816;
            statearr_107818[5] = inst_107755__$1;
            return statearr_107818
          }();
          if(inst_107756) {
            var statearr_107819_107855 = state_107816__$1;
            statearr_107819_107855[1] = 2
          }else {
            var statearr_107820_107856 = state_107816__$1;
            statearr_107820_107856[1] = 3
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_107817 === 2) {
            var inst_107755 = state_107816[5];
            var inst_107758 = cljs.core.apply.call(null, cljs.core.hash_map, inst_107755);
            var state_107816__$1 = state_107816;
            var statearr_107821_107857 = state_107816__$1;
            statearr_107821_107857[2] = inst_107758;
            statearr_107821_107857[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_107817 === 3) {
              var inst_107755 = state_107816[5];
              var state_107816__$1 = state_107816;
              var statearr_107822_107858 = state_107816__$1;
              statearr_107822_107858[2] = inst_107755;
              statearr_107822_107858[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_107817 === 4) {
                var inst_107755 = state_107816[5];
                var inst_107761 = state_107816[2];
                var inst_107762 = cljs.core.get.call(null, inst_107761, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_107763 = cljs.core.get.call(null, inst_107761, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_107764 = cljs.core.get.call(null, inst_107761, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_107765 = inst_107755;
                var state_107816__$1 = function() {
                  var statearr_107823 = state_107816;
                  statearr_107823[6] = inst_107764;
                  statearr_107823[7] = inst_107765;
                  statearr_107823[8] = inst_107762;
                  statearr_107823[9] = inst_107763;
                  return statearr_107823
                }();
                var statearr_107824_107859 = state_107816__$1;
                statearr_107824_107859[2] = null;
                statearr_107824_107859[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_107817 === 5) {
                  var inst_107765 = state_107816[7];
                  var inst_107768 = cljs.core.seq_QMARK_.call(null, inst_107765);
                  var state_107816__$1 = state_107816;
                  if(inst_107768) {
                    var statearr_107825_107860 = state_107816__$1;
                    statearr_107825_107860[1] = 7
                  }else {
                    var statearr_107826_107861 = state_107816__$1;
                    statearr_107826_107861[1] = 8
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_107817 === 6) {
                    var inst_107814 = state_107816[2];
                    var state_107816__$1 = state_107816;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_107816__$1, inst_107814)
                  }else {
                    if(state_val_107817 === 7) {
                      var inst_107765 = state_107816[7];
                      var inst_107770 = cljs.core.apply.call(null, cljs.core.hash_map, inst_107765);
                      var state_107816__$1 = state_107816;
                      var statearr_107827_107862 = state_107816__$1;
                      statearr_107827_107862[2] = inst_107770;
                      statearr_107827_107862[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_107817 === 8) {
                        var inst_107765 = state_107816[7];
                        var state_107816__$1 = state_107816;
                        var statearr_107828_107863 = state_107816__$1;
                        statearr_107828_107863[2] = inst_107765;
                        statearr_107828_107863[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_107817 === 9) {
                          var inst_107773 = state_107816[10];
                          var inst_107773__$1 = state_107816[2];
                          var inst_107774 = cljs.core.get.call(null, inst_107773__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_107775 = cljs.core.get.call(null, inst_107773__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_107776 = cljs.core.get.call(null, inst_107773__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_107816__$1 = function() {
                            var statearr_107829 = state_107816;
                            statearr_107829[11] = inst_107775;
                            statearr_107829[12] = inst_107776;
                            statearr_107829[10] = inst_107773__$1;
                            return statearr_107829
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_107816__$1, 10, inst_107774)
                        }else {
                          if(state_val_107817 === 10) {
                            var inst_107781 = state_107816[13];
                            var inst_107780 = state_107816[14];
                            var inst_107779 = state_107816[2];
                            var inst_107780__$1 = cljs.core.nth.call(null, inst_107779, 0, null);
                            var inst_107781__$1 = cljs.core.nth.call(null, inst_107779, 1, null);
                            var inst_107782 = inst_107780__$1 == null;
                            var inst_107783 = cljs.core._EQ_.call(null, inst_107781__$1, change);
                            var inst_107784 = inst_107782 || inst_107783;
                            var state_107816__$1 = function() {
                              var statearr_107830 = state_107816;
                              statearr_107830[13] = inst_107781__$1;
                              statearr_107830[14] = inst_107780__$1;
                              return statearr_107830
                            }();
                            if(cljs.core.truth_(inst_107784)) {
                              var statearr_107831_107864 = state_107816__$1;
                              statearr_107831_107864[1] = 11
                            }else {
                              var statearr_107832_107865 = state_107816__$1;
                              statearr_107832_107865[1] = 12
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_107817 === 11) {
                              var inst_107780 = state_107816[14];
                              var inst_107786 = inst_107780 == null;
                              var state_107816__$1 = state_107816;
                              if(cljs.core.truth_(inst_107786)) {
                                var statearr_107833_107866 = state_107816__$1;
                                statearr_107833_107866[1] = 14
                              }else {
                                var statearr_107834_107867 = state_107816__$1;
                                statearr_107834_107867[1] = 15
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_107817 === 12) {
                                var inst_107776 = state_107816[12];
                                var inst_107781 = state_107816[13];
                                var inst_107795 = state_107816[15];
                                var inst_107795__$1 = inst_107776.call(null, inst_107781);
                                var state_107816__$1 = function() {
                                  var statearr_107835 = state_107816;
                                  statearr_107835[15] = inst_107795__$1;
                                  return statearr_107835
                                }();
                                if(cljs.core.truth_(inst_107795__$1)) {
                                  var statearr_107836_107868 = state_107816__$1;
                                  statearr_107836_107868[1] = 17
                                }else {
                                  var statearr_107837_107869 = state_107816__$1;
                                  statearr_107837_107869[1] = 18
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_107817 === 13) {
                                  var inst_107812 = state_107816[2];
                                  var state_107816__$1 = state_107816;
                                  var statearr_107838_107870 = state_107816__$1;
                                  statearr_107838_107870[2] = inst_107812;
                                  statearr_107838_107870[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_107817 === 14) {
                                    var inst_107781 = state_107816[13];
                                    var inst_107788 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_107781);
                                    var state_107816__$1 = state_107816;
                                    var statearr_107839_107871 = state_107816__$1;
                                    statearr_107839_107871[2] = inst_107788;
                                    statearr_107839_107871[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_107817 === 15) {
                                      var state_107816__$1 = state_107816;
                                      var statearr_107840_107872 = state_107816__$1;
                                      statearr_107840_107872[2] = null;
                                      statearr_107840_107872[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_107817 === 16) {
                                        var inst_107791 = state_107816[2];
                                        var inst_107792 = calc_state.call(null);
                                        var inst_107765 = inst_107792;
                                        var state_107816__$1 = function() {
                                          var statearr_107841 = state_107816;
                                          statearr_107841[16] = inst_107791;
                                          statearr_107841[7] = inst_107765;
                                          return statearr_107841
                                        }();
                                        var statearr_107842_107873 = state_107816__$1;
                                        statearr_107842_107873[2] = null;
                                        statearr_107842_107873[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_107817 === 17) {
                                          var inst_107795 = state_107816[15];
                                          var state_107816__$1 = state_107816;
                                          var statearr_107843_107874 = state_107816__$1;
                                          statearr_107843_107874[2] = inst_107795;
                                          statearr_107843_107874[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_107817 === 18) {
                                            var inst_107775 = state_107816[11];
                                            var inst_107776 = state_107816[12];
                                            var inst_107781 = state_107816[13];
                                            var inst_107798 = cljs.core.empty_QMARK_.call(null, inst_107776);
                                            var inst_107799 = inst_107775.call(null, inst_107781);
                                            var inst_107800 = cljs.core.not.call(null, inst_107799);
                                            var inst_107801 = inst_107798 && inst_107800;
                                            var state_107816__$1 = state_107816;
                                            var statearr_107844_107875 = state_107816__$1;
                                            statearr_107844_107875[2] = inst_107801;
                                            statearr_107844_107875[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_107817 === 19) {
                                              var inst_107803 = state_107816[2];
                                              var state_107816__$1 = state_107816;
                                              if(cljs.core.truth_(inst_107803)) {
                                                var statearr_107845_107876 = state_107816__$1;
                                                statearr_107845_107876[1] = 20
                                              }else {
                                                var statearr_107846_107877 = state_107816__$1;
                                                statearr_107846_107877[1] = 21
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_107817 === 20) {
                                                var inst_107780 = state_107816[14];
                                                var state_107816__$1 = state_107816;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_107816__$1, 23, out, inst_107780)
                                              }else {
                                                if(state_val_107817 === 21) {
                                                  var state_107816__$1 = state_107816;
                                                  var statearr_107847_107878 = state_107816__$1;
                                                  statearr_107847_107878[2] = null;
                                                  statearr_107847_107878[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_107817 === 22) {
                                                    var inst_107773 = state_107816[10];
                                                    var inst_107809 = state_107816[2];
                                                    var inst_107765 = inst_107773;
                                                    var state_107816__$1 = function() {
                                                      var statearr_107848 = state_107816;
                                                      statearr_107848[17] = inst_107809;
                                                      statearr_107848[7] = inst_107765;
                                                      return statearr_107848
                                                    }();
                                                    var statearr_107849_107879 = state_107816__$1;
                                                    statearr_107849_107879[2] = null;
                                                    statearr_107849_107879[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_107817 === 23) {
                                                      var inst_107806 = state_107816[2];
                                                      var state_107816__$1 = state_107816;
                                                      var statearr_107850_107880 = state_107816__$1;
                                                      statearr_107850_107880[2] = inst_107806;
                                                      statearr_107850_107880[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      return null
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5678__auto__) {
        return function() {
          var state_machine__5679__auto__ = null;
          var state_machine__5679__auto____0 = function() {
            var statearr_107852 = new Array(18);
            statearr_107852[0] = state_machine__5679__auto__;
            statearr_107852[1] = 1;
            return statearr_107852
          };
          var state_machine__5679__auto____1 = function(state_107816) {
            while(true) {
              var result__5680__auto__ = switch__5678__auto__.call(null, state_107816);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5680__auto__
              }
              break
            }
          };
          state_machine__5679__auto__ = function(state_107816) {
            switch(arguments.length) {
              case 0:
                return state_machine__5679__auto____0.call(this);
              case 1:
                return state_machine__5679__auto____1.call(this, state_107816)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
          return state_machine__5679__auto__
        }()
      }(switch__5678__auto__)
    }();
    var state__5730__auto__ = function() {
      var statearr_107853 = f__5729__auto__.call(null);
      statearr_107853[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___107854;
      return statearr_107853
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
  });
  return m
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch)
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch)
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix)
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map)
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode)
};
cljs.core.async.Pub = function() {
  var obj107882 = {};
  return obj107882
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if(function() {
    var and__3273__auto__ = p;
    if(and__3273__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4
    }else {
      return and__3273__auto__
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_)
  }else {
    var x__3888__auto__ = p == null ? null : p;
    return function() {
      var or__3285__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_)
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if(function() {
    var and__3273__auto__ = p;
    if(and__3273__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch)
  }else {
    var x__3888__auto__ = p == null ? null : p;
    return function() {
      var or__3285__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch)
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if(function() {
      var and__3273__auto__ = p;
      if(and__3273__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1
      }else {
        return and__3273__auto__
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p)
    }else {
      var x__3888__auto__ = p == null ? null : p;
      return function() {
        var or__3285__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p)
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if(function() {
      var and__3273__auto__ = p;
      if(and__3273__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v)
    }else {
      var x__3888__auto__ = p == null ? null : p;
      return function() {
        var or__3285__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v)
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null))
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3285__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3285__auto__, mults) {
            return function(p1__107883_SHARP_) {
              if(cljs.core.truth_(p1__107883_SHARP_.call(null, topic))) {
                return p1__107883_SHARP_
              }else {
                return cljs.core.assoc.call(null, p1__107883_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))))
              }
            }
          }(or__3285__auto__, mults)), topic)
        }
      }
    }(mults);
    var p = function() {
      if(typeof cljs.core.async.t108007 !== "undefined") {
      }else {
        cljs.core.async.t108007 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta108008) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta108008 = meta108008;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216
        };
        cljs.core.async.t108007.cljs$lang$type = true;
        cljs.core.async.t108007.cljs$lang$ctorStr = "cljs.core.async/t108007";
        cljs.core.async.t108007.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
            return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t108007")
          }
        }(mults, ensure_mult);
        cljs.core.async.t108007.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t108007.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_)
          }
        }(mults, ensure_mult);
        cljs.core.async.t108007.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if(cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2)
            }else {
              return null
            }
          }
        }(mults, ensure_mult);
        cljs.core.async.t108007.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY)
          }
        }(mults, ensure_mult);
        cljs.core.async.t108007.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic)
          }
        }(mults, ensure_mult);
        cljs.core.async.t108007.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t108007.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch
          }
        }(mults, ensure_mult);
        cljs.core.async.t108007.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_108009) {
            var self__ = this;
            var _108009__$1 = this;
            return self__.meta108008
          }
        }(mults, ensure_mult);
        cljs.core.async.t108007.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_108009, meta108008__$1) {
            var self__ = this;
            var _108009__$1 = this;
            return new cljs.core.async.t108007(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta108008__$1)
          }
        }(mults, ensure_mult);
        cljs.core.async.__GT_t108007 = function(mults, ensure_mult) {
          return function __GT_t108007(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta108008) {
            return new cljs.core.async.t108007(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta108008)
          }
        }(mults, ensure_mult)
      }
      return new cljs.core.async.t108007(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null)
    }();
    var c__5728__auto___108130 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_108082) {
          var state_val_108083 = state_108082[1];
          if(state_val_108083 === 1) {
            var state_108082__$1 = state_108082;
            var statearr_108084_108131 = state_108082__$1;
            statearr_108084_108131[2] = null;
            statearr_108084_108131[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_108083 === 2) {
              var state_108082__$1 = state_108082;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_108082__$1, 4, ch)
            }else {
              if(state_val_108083 === 3) {
                var inst_108080 = state_108082[2];
                var state_108082__$1 = state_108082;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_108082__$1, inst_108080)
              }else {
                if(state_val_108083 === 4) {
                  var inst_108012 = state_108082[5];
                  var inst_108012__$1 = state_108082[2];
                  var inst_108013 = inst_108012__$1 == null;
                  var state_108082__$1 = function() {
                    var statearr_108085 = state_108082;
                    statearr_108085[5] = inst_108012__$1;
                    return statearr_108085
                  }();
                  if(cljs.core.truth_(inst_108013)) {
                    var statearr_108086_108132 = state_108082__$1;
                    statearr_108086_108132[1] = 5
                  }else {
                    var statearr_108087_108133 = state_108082__$1;
                    statearr_108087_108133[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_108083 === 5) {
                    var inst_108019 = cljs.core.deref.call(null, mults);
                    var inst_108020 = cljs.core.vals.call(null, inst_108019);
                    var inst_108021 = cljs.core.seq.call(null, inst_108020);
                    var inst_108022 = inst_108021;
                    var inst_108023 = null;
                    var inst_108024 = 0;
                    var inst_108025 = 0;
                    var state_108082__$1 = function() {
                      var statearr_108088 = state_108082;
                      statearr_108088[6] = inst_108023;
                      statearr_108088[7] = inst_108022;
                      statearr_108088[8] = inst_108025;
                      statearr_108088[9] = inst_108024;
                      return statearr_108088
                    }();
                    var statearr_108089_108134 = state_108082__$1;
                    statearr_108089_108134[2] = null;
                    statearr_108089_108134[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_108083 === 6) {
                      var inst_108062 = state_108082[10];
                      var inst_108060 = state_108082[11];
                      var inst_108012 = state_108082[5];
                      var inst_108060__$1 = topic_fn.call(null, inst_108012);
                      var inst_108061 = cljs.core.deref.call(null, mults);
                      var inst_108062__$1 = cljs.core.get.call(null, inst_108061, inst_108060__$1);
                      var state_108082__$1 = function() {
                        var statearr_108090 = state_108082;
                        statearr_108090[10] = inst_108062__$1;
                        statearr_108090[11] = inst_108060__$1;
                        return statearr_108090
                      }();
                      if(cljs.core.truth_(inst_108062__$1)) {
                        var statearr_108091_108135 = state_108082__$1;
                        statearr_108091_108135[1] = 19
                      }else {
                        var statearr_108092_108136 = state_108082__$1;
                        statearr_108092_108136[1] = 20
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_108083 === 7) {
                        var inst_108078 = state_108082[2];
                        var state_108082__$1 = state_108082;
                        var statearr_108093_108137 = state_108082__$1;
                        statearr_108093_108137[2] = inst_108078;
                        statearr_108093_108137[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_108083 === 8) {
                          var inst_108025 = state_108082[8];
                          var inst_108024 = state_108082[9];
                          var inst_108027 = inst_108025 < inst_108024;
                          var inst_108028 = inst_108027;
                          var state_108082__$1 = state_108082;
                          if(cljs.core.truth_(inst_108028)) {
                            var statearr_108097_108138 = state_108082__$1;
                            statearr_108097_108138[1] = 10
                          }else {
                            var statearr_108098_108139 = state_108082__$1;
                            statearr_108098_108139[1] = 11
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_108083 === 9) {
                            var inst_108058 = state_108082[2];
                            var state_108082__$1 = state_108082;
                            var statearr_108099_108140 = state_108082__$1;
                            statearr_108099_108140[2] = inst_108058;
                            statearr_108099_108140[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_108083 === 10) {
                              var inst_108023 = state_108082[6];
                              var inst_108022 = state_108082[7];
                              var inst_108025 = state_108082[8];
                              var inst_108024 = state_108082[9];
                              var inst_108030 = cljs.core._nth.call(null, inst_108023, inst_108025);
                              var inst_108031 = cljs.core.async.muxch_STAR_.call(null, inst_108030);
                              var inst_108032 = cljs.core.async.close_BANG_.call(null, inst_108031);
                              var inst_108033 = inst_108025 + 1;
                              var tmp108094 = inst_108023;
                              var tmp108095 = inst_108022;
                              var tmp108096 = inst_108024;
                              var inst_108022__$1 = tmp108095;
                              var inst_108023__$1 = tmp108094;
                              var inst_108024__$1 = tmp108096;
                              var inst_108025__$1 = inst_108033;
                              var state_108082__$1 = function() {
                                var statearr_108100 = state_108082;
                                statearr_108100[6] = inst_108023__$1;
                                statearr_108100[7] = inst_108022__$1;
                                statearr_108100[8] = inst_108025__$1;
                                statearr_108100[9] = inst_108024__$1;
                                statearr_108100[12] = inst_108032;
                                return statearr_108100
                              }();
                              var statearr_108101_108141 = state_108082__$1;
                              statearr_108101_108141[2] = null;
                              statearr_108101_108141[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_108083 === 11) {
                                var inst_108022 = state_108082[7];
                                var inst_108036 = state_108082[13];
                                var inst_108036__$1 = cljs.core.seq.call(null, inst_108022);
                                var state_108082__$1 = function() {
                                  var statearr_108102 = state_108082;
                                  statearr_108102[13] = inst_108036__$1;
                                  return statearr_108102
                                }();
                                if(inst_108036__$1) {
                                  var statearr_108103_108142 = state_108082__$1;
                                  statearr_108103_108142[1] = 13
                                }else {
                                  var statearr_108104_108143 = state_108082__$1;
                                  statearr_108104_108143[1] = 14
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_108083 === 12) {
                                  var inst_108056 = state_108082[2];
                                  var state_108082__$1 = state_108082;
                                  var statearr_108105_108144 = state_108082__$1;
                                  statearr_108105_108144[2] = inst_108056;
                                  statearr_108105_108144[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_108083 === 13) {
                                    var inst_108036 = state_108082[13];
                                    var inst_108038 = cljs.core.chunked_seq_QMARK_.call(null, inst_108036);
                                    var state_108082__$1 = state_108082;
                                    if(inst_108038) {
                                      var statearr_108106_108145 = state_108082__$1;
                                      statearr_108106_108145[1] = 16
                                    }else {
                                      var statearr_108107_108146 = state_108082__$1;
                                      statearr_108107_108146[1] = 17
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_108083 === 14) {
                                      var state_108082__$1 = state_108082;
                                      var statearr_108108_108147 = state_108082__$1;
                                      statearr_108108_108147[2] = null;
                                      statearr_108108_108147[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_108083 === 15) {
                                        var inst_108054 = state_108082[2];
                                        var state_108082__$1 = state_108082;
                                        var statearr_108109_108148 = state_108082__$1;
                                        statearr_108109_108148[2] = inst_108054;
                                        statearr_108109_108148[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_108083 === 16) {
                                          var inst_108036 = state_108082[13];
                                          var inst_108040 = cljs.core.chunk_first.call(null, inst_108036);
                                          var inst_108041 = cljs.core.chunk_rest.call(null, inst_108036);
                                          var inst_108042 = cljs.core.count.call(null, inst_108040);
                                          var inst_108022 = inst_108041;
                                          var inst_108023 = inst_108040;
                                          var inst_108024 = inst_108042;
                                          var inst_108025 = 0;
                                          var state_108082__$1 = function() {
                                            var statearr_108110 = state_108082;
                                            statearr_108110[6] = inst_108023;
                                            statearr_108110[7] = inst_108022;
                                            statearr_108110[8] = inst_108025;
                                            statearr_108110[9] = inst_108024;
                                            return statearr_108110
                                          }();
                                          var statearr_108111_108149 = state_108082__$1;
                                          statearr_108111_108149[2] = null;
                                          statearr_108111_108149[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_108083 === 17) {
                                            var inst_108036 = state_108082[13];
                                            var inst_108045 = cljs.core.first.call(null, inst_108036);
                                            var inst_108046 = cljs.core.async.muxch_STAR_.call(null, inst_108045);
                                            var inst_108047 = cljs.core.async.close_BANG_.call(null, inst_108046);
                                            var inst_108048 = cljs.core.next.call(null, inst_108036);
                                            var inst_108022 = inst_108048;
                                            var inst_108023 = null;
                                            var inst_108024 = 0;
                                            var inst_108025 = 0;
                                            var state_108082__$1 = function() {
                                              var statearr_108112 = state_108082;
                                              statearr_108112[6] = inst_108023;
                                              statearr_108112[7] = inst_108022;
                                              statearr_108112[8] = inst_108025;
                                              statearr_108112[9] = inst_108024;
                                              statearr_108112[14] = inst_108047;
                                              return statearr_108112
                                            }();
                                            var statearr_108113_108150 = state_108082__$1;
                                            statearr_108113_108150[2] = null;
                                            statearr_108113_108150[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_108083 === 18) {
                                              var inst_108051 = state_108082[2];
                                              var state_108082__$1 = state_108082;
                                              var statearr_108114_108151 = state_108082__$1;
                                              statearr_108114_108151[2] = inst_108051;
                                              statearr_108114_108151[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_108083 === 19) {
                                                var state_108082__$1 = state_108082;
                                                var statearr_108115_108152 = state_108082__$1;
                                                statearr_108115_108152[2] = null;
                                                statearr_108115_108152[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                if(state_val_108083 === 20) {
                                                  var state_108082__$1 = state_108082;
                                                  var statearr_108116_108153 = state_108082__$1;
                                                  statearr_108116_108153[2] = null;
                                                  statearr_108116_108153[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_108083 === 21) {
                                                    var inst_108075 = state_108082[2];
                                                    var state_108082__$1 = function() {
                                                      var statearr_108117 = state_108082;
                                                      statearr_108117[15] = inst_108075;
                                                      return statearr_108117
                                                    }();
                                                    var statearr_108118_108154 = state_108082__$1;
                                                    statearr_108118_108154[2] = null;
                                                    statearr_108118_108154[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_108083 === 22) {
                                                      var inst_108072 = state_108082[2];
                                                      var state_108082__$1 = state_108082;
                                                      var statearr_108119_108155 = state_108082__$1;
                                                      statearr_108119_108155[2] = inst_108072;
                                                      statearr_108119_108155[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      if(state_val_108083 === 23) {
                                                        var inst_108060 = state_108082[11];
                                                        var inst_108064 = state_108082[2];
                                                        var inst_108065 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_108060);
                                                        var state_108082__$1 = function() {
                                                          var statearr_108120 = state_108082;
                                                          statearr_108120[16] = inst_108064;
                                                          return statearr_108120
                                                        }();
                                                        var statearr_108121_108156 = state_108082__$1;
                                                        statearr_108121_108156[2] = inst_108065;
                                                        statearr_108121_108156[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                      }else {
                                                        if(state_val_108083 === 24) {
                                                          try {
                                                            var inst_108062 = state_108082[10];
                                                            var inst_108012 = state_108082[5];
                                                            var inst_108068 = cljs.core.async.muxch_STAR_.call(null, inst_108062);
                                                            var state_108082__$1 = state_108082;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_108082__$1, 25, inst_108068, inst_108012)
                                                          }catch(e108122) {
                                                            if(e108122 instanceof Object) {
                                                              var ex__5672__auto__ = e108122;
                                                              var statearr_108123_108157 = state_108082;
                                                              statearr_108123_108157[1] = 23;
                                                              statearr_108123_108157[2] = ex__5672__auto__;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }else {
                                                              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                throw e108122;
                                                              }else {
                                                                return null
                                                              }
                                                            }
                                                          }
                                                        }else {
                                                          if(state_val_108083 === 25) {
                                                            try {
                                                              var inst_108070 = state_108082[2];
                                                              var state_108082__$1 = state_108082;
                                                              var statearr_108126_108158 = state_108082__$1;
                                                              statearr_108126_108158[2] = inst_108070;
                                                              statearr_108126_108158[1] = 22;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }catch(e108124) {
                                                              if(e108124 instanceof Object) {
                                                                var ex__5672__auto__ = e108124;
                                                                var statearr_108125_108159 = state_108082;
                                                                statearr_108125_108159[1] = 23;
                                                                statearr_108125_108159[2] = ex__5672__auto__;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                              }else {
                                                                if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                  throw e108124;
                                                                }else {
                                                                  return null
                                                                }
                                                              }
                                                            }
                                                          }else {
                                                            return null
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_108128 = new Array(17);
              statearr_108128[0] = state_machine__5679__auto__;
              statearr_108128[1] = 1;
              return statearr_108128
            };
            var state_machine__5679__auto____1 = function(state_108082) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_108082);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_108082) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_108082)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_108129 = f__5729__auto__.call(null);
        statearr_108129[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___108130;
        return statearr_108129
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return p
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true)
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_)
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch)
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p)
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic)
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null)
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if(cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt))
            }else {
              return null
            }
          }
        }(chs__$1, out, cnt, rets, dchan, dctr)
      }
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5728__auto___108290 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_108262) {
          var state_val_108263 = state_108262[1];
          if(state_val_108263 === 1) {
            var state_108262__$1 = state_108262;
            var statearr_108264_108291 = state_108262__$1;
            statearr_108264_108291[2] = null;
            statearr_108264_108291[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_108263 === 2) {
              var inst_108226 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_108227 = 0;
              var state_108262__$1 = function() {
                var statearr_108265 = state_108262;
                statearr_108265[5] = inst_108226;
                statearr_108265[6] = inst_108227;
                return statearr_108265
              }();
              var statearr_108266_108292 = state_108262__$1;
              statearr_108266_108292[2] = null;
              statearr_108266_108292[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_108263 === 3) {
                var inst_108260 = state_108262[2];
                var state_108262__$1 = state_108262;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_108262__$1, inst_108260)
              }else {
                if(state_val_108263 === 4) {
                  var inst_108227 = state_108262[6];
                  var inst_108229 = inst_108227 < cnt;
                  var state_108262__$1 = state_108262;
                  if(cljs.core.truth_(inst_108229)) {
                    var statearr_108267_108293 = state_108262__$1;
                    statearr_108267_108293[1] = 6
                  }else {
                    var statearr_108268_108294 = state_108262__$1;
                    statearr_108268_108294[1] = 7
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_108263 === 5) {
                    var inst_108246 = state_108262[2];
                    var state_108262__$1 = function() {
                      var statearr_108269 = state_108262;
                      statearr_108269[7] = inst_108246;
                      return statearr_108269
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_108262__$1, 12, dchan)
                  }else {
                    if(state_val_108263 === 6) {
                      var state_108262__$1 = state_108262;
                      var statearr_108270_108295 = state_108262__$1;
                      statearr_108270_108295[2] = null;
                      statearr_108270_108295[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_108263 === 7) {
                        var state_108262__$1 = state_108262;
                        var statearr_108271_108296 = state_108262__$1;
                        statearr_108271_108296[2] = null;
                        statearr_108271_108296[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_108263 === 8) {
                          var inst_108244 = state_108262[2];
                          var state_108262__$1 = state_108262;
                          var statearr_108272_108297 = state_108262__$1;
                          statearr_108272_108297[2] = inst_108244;
                          statearr_108272_108297[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_108263 === 9) {
                            var inst_108227 = state_108262[6];
                            var inst_108239 = state_108262[2];
                            var inst_108240 = inst_108227 + 1;
                            var inst_108227__$1 = inst_108240;
                            var state_108262__$1 = function() {
                              var statearr_108273 = state_108262;
                              statearr_108273[6] = inst_108227__$1;
                              statearr_108273[8] = inst_108239;
                              return statearr_108273
                            }();
                            var statearr_108274_108298 = state_108262__$1;
                            statearr_108274_108298[2] = null;
                            statearr_108274_108298[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_108263 === 10) {
                              var inst_108231 = state_108262[2];
                              var inst_108232 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_108262__$1 = function() {
                                var statearr_108275 = state_108262;
                                statearr_108275[9] = inst_108231;
                                return statearr_108275
                              }();
                              var statearr_108276_108299 = state_108262__$1;
                              statearr_108276_108299[2] = inst_108232;
                              statearr_108276_108299[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_108263 === 11) {
                                try {
                                  var inst_108227 = state_108262[6];
                                  var inst_108235 = chs__$1.call(null, inst_108227);
                                  var inst_108236 = done.call(null, inst_108227);
                                  var inst_108237 = cljs.core.async.take_BANG_.call(null, inst_108235, inst_108236);
                                  var state_108262__$1 = state_108262;
                                  var statearr_108279_108300 = state_108262__$1;
                                  statearr_108279_108300[2] = inst_108237;
                                  statearr_108279_108300[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }catch(e108277) {
                                  if(e108277 instanceof Object) {
                                    var ex__5672__auto__ = e108277;
                                    var statearr_108278_108301 = state_108262;
                                    statearr_108278_108301[1] = 10;
                                    statearr_108278_108301[2] = ex__5672__auto__;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                      throw e108277;
                                    }else {
                                      return null
                                    }
                                  }
                                }
                              }else {
                                if(state_val_108263 === 12) {
                                  var inst_108248 = state_108262[10];
                                  var inst_108248__$1 = state_108262[2];
                                  var inst_108249 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_108248__$1);
                                  var state_108262__$1 = function() {
                                    var statearr_108280 = state_108262;
                                    statearr_108280[10] = inst_108248__$1;
                                    return statearr_108280
                                  }();
                                  if(cljs.core.truth_(inst_108249)) {
                                    var statearr_108281_108302 = state_108262__$1;
                                    statearr_108281_108302[1] = 13
                                  }else {
                                    var statearr_108282_108303 = state_108262__$1;
                                    statearr_108282_108303[1] = 14
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_108263 === 13) {
                                    var inst_108251 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_108262__$1 = state_108262;
                                    var statearr_108283_108304 = state_108262__$1;
                                    statearr_108283_108304[2] = inst_108251;
                                    statearr_108283_108304[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_108263 === 14) {
                                      var inst_108248 = state_108262[10];
                                      var inst_108253 = cljs.core.apply.call(null, f, inst_108248);
                                      var state_108262__$1 = state_108262;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_108262__$1, 16, out, inst_108253)
                                    }else {
                                      if(state_val_108263 === 15) {
                                        var inst_108258 = state_108262[2];
                                        var state_108262__$1 = state_108262;
                                        var statearr_108284_108305 = state_108262__$1;
                                        statearr_108284_108305[2] = inst_108258;
                                        statearr_108284_108305[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_108263 === 16) {
                                          var inst_108255 = state_108262[2];
                                          var state_108262__$1 = function() {
                                            var statearr_108285 = state_108262;
                                            statearr_108285[11] = inst_108255;
                                            return statearr_108285
                                          }();
                                          var statearr_108286_108306 = state_108262__$1;
                                          statearr_108286_108306[2] = null;
                                          statearr_108286_108306[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          return null
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_108288 = new Array(12);
              statearr_108288[0] = state_machine__5679__auto__;
              statearr_108288[1] = 1;
              return statearr_108288
            };
            var state_machine__5679__auto____1 = function(state_108262) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_108262);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_108262) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_108262)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_108289 = f__5729__auto__.call(null);
        statearr_108289[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___108290;
        return statearr_108289
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return out
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null)
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5728__auto___108406 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_108386) {
          var state_val_108387 = state_108386[1];
          if(state_val_108387 === 1) {
            var inst_108357 = cljs.core.vec.call(null, chs);
            var inst_108358 = inst_108357;
            var state_108386__$1 = function() {
              var statearr_108388 = state_108386;
              statearr_108388[5] = inst_108358;
              return statearr_108388
            }();
            var statearr_108389_108407 = state_108386__$1;
            statearr_108389_108407[2] = null;
            statearr_108389_108407[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_108387 === 2) {
              var inst_108358 = state_108386[5];
              var inst_108360 = cljs.core.count.call(null, inst_108358);
              var inst_108361 = inst_108360 > 0;
              var state_108386__$1 = state_108386;
              if(cljs.core.truth_(inst_108361)) {
                var statearr_108390_108408 = state_108386__$1;
                statearr_108390_108408[1] = 4
              }else {
                var statearr_108391_108409 = state_108386__$1;
                statearr_108391_108409[1] = 5
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_108387 === 3) {
                var inst_108384 = state_108386[2];
                var state_108386__$1 = state_108386;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_108386__$1, inst_108384)
              }else {
                if(state_val_108387 === 4) {
                  var inst_108358 = state_108386[5];
                  var state_108386__$1 = state_108386;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_108386__$1, 7, inst_108358)
                }else {
                  if(state_val_108387 === 5) {
                    var inst_108380 = cljs.core.async.close_BANG_.call(null, out);
                    var state_108386__$1 = state_108386;
                    var statearr_108392_108410 = state_108386__$1;
                    statearr_108392_108410[2] = inst_108380;
                    statearr_108392_108410[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_108387 === 6) {
                      var inst_108382 = state_108386[2];
                      var state_108386__$1 = state_108386;
                      var statearr_108393_108411 = state_108386__$1;
                      statearr_108393_108411[2] = inst_108382;
                      statearr_108393_108411[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_108387 === 7) {
                        var inst_108366 = state_108386[6];
                        var inst_108365 = state_108386[7];
                        var inst_108365__$1 = state_108386[2];
                        var inst_108366__$1 = cljs.core.nth.call(null, inst_108365__$1, 0, null);
                        var inst_108367 = cljs.core.nth.call(null, inst_108365__$1, 1, null);
                        var inst_108368 = inst_108366__$1 == null;
                        var state_108386__$1 = function() {
                          var statearr_108394 = state_108386;
                          statearr_108394[8] = inst_108367;
                          statearr_108394[6] = inst_108366__$1;
                          statearr_108394[7] = inst_108365__$1;
                          return statearr_108394
                        }();
                        if(cljs.core.truth_(inst_108368)) {
                          var statearr_108395_108412 = state_108386__$1;
                          statearr_108395_108412[1] = 8
                        }else {
                          var statearr_108396_108413 = state_108386__$1;
                          statearr_108396_108413[1] = 9
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_108387 === 8) {
                          var inst_108358 = state_108386[5];
                          var inst_108367 = state_108386[8];
                          var inst_108366 = state_108386[6];
                          var inst_108365 = state_108386[7];
                          var inst_108370 = function() {
                            var c = inst_108367;
                            var v = inst_108366;
                            var vec__108363 = inst_108365;
                            var cs = inst_108358;
                            return function(c, v, vec__108363, cs, inst_108358, inst_108367, inst_108366, inst_108365, state_val_108387) {
                              return function(p1__108307_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__108307_SHARP_)
                              }
                            }(c, v, vec__108363, cs, inst_108358, inst_108367, inst_108366, inst_108365, state_val_108387)
                          }();
                          var inst_108371 = cljs.core.filterv.call(null, inst_108370, inst_108358);
                          var inst_108358__$1 = inst_108371;
                          var state_108386__$1 = function() {
                            var statearr_108397 = state_108386;
                            statearr_108397[5] = inst_108358__$1;
                            return statearr_108397
                          }();
                          var statearr_108398_108414 = state_108386__$1;
                          statearr_108398_108414[2] = null;
                          statearr_108398_108414[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_108387 === 9) {
                            var inst_108366 = state_108386[6];
                            var state_108386__$1 = state_108386;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_108386__$1, 11, out, inst_108366)
                          }else {
                            if(state_val_108387 === 10) {
                              var inst_108378 = state_108386[2];
                              var state_108386__$1 = state_108386;
                              var statearr_108400_108415 = state_108386__$1;
                              statearr_108400_108415[2] = inst_108378;
                              statearr_108400_108415[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_108387 === 11) {
                                var inst_108358 = state_108386[5];
                                var inst_108375 = state_108386[2];
                                var tmp108399 = inst_108358;
                                var inst_108358__$1 = tmp108399;
                                var state_108386__$1 = function() {
                                  var statearr_108401 = state_108386;
                                  statearr_108401[5] = inst_108358__$1;
                                  statearr_108401[9] = inst_108375;
                                  return statearr_108401
                                }();
                                var statearr_108402_108416 = state_108386__$1;
                                statearr_108402_108416[2] = null;
                                statearr_108402_108416[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_108404 = new Array(10);
              statearr_108404[0] = state_machine__5679__auto__;
              statearr_108404[1] = 1;
              return statearr_108404
            };
            var state_machine__5679__auto____1 = function(state_108386) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_108386);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_108386) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_108386)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_108405 = f__5729__auto__.call(null);
        statearr_108405[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___108406;
        return statearr_108405
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return out
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch)
};
goog.provide("chaperone.user");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.user.User");
goog.require("cljs.core.async");
chaperone.user.save_user = function save_user(user) {
  return cljs.core.async.chan.call(null)
};
goog.provide("chaperone.ng.admin.user");
goog.require("cljs.core");
goog.require("purnam.cljs");
goog.require("cljs.core.async");
goog.require("purnam.cljs");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("chaperone.user");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.core");
chaperone.ng.admin.user.chaperone_app_AdminUserCtrl = ["$scope", "$location", function($scope, $location) {
  purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["init"], null), function() {
    return purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["title"], null), "Add")
  });
  purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["load-user"], null), function() {
    var user = chaperone.crossover.user.new_user.call(null, "", "", "", "");
    return purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user))
  });
  return purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["save-user"], null), function() {
    var user = chaperone.crossover.user.map__GT_User.call(null, cljs.core.js__GT_clj.call(null, purnam.cljs.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null))));
    var chan = chaperone.user.save_user.call(null, user);
    var c__5728__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_105087) {
          var state_val_105088 = state_105087[1];
          if(state_val_105088 === 2) {
            var inst_105072 = state_105087[2];
            var inst_105073 = ["alert"];
            var inst_105074 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_105073, null);
            var inst_105079 = {};
            var inst_105080 = inst_105079["message"] = "User has been saved successfully";
            var inst_105081 = inst_105079["category"] = "success";
            var inst_105082 = purnam.cljs.aset_in.call(null, $scope, inst_105074, inst_105079);
            var inst_105083 = purnam.cljs.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
            var inst_105084 = inst_105083["path"];
            var inst_105085 = inst_105084.call(inst_105083, "/admin/users/list");
            var state_105087__$1 = function() {
              var statearr_105089 = state_105087;
              statearr_105089[5] = inst_105081;
              statearr_105089[6] = inst_105080;
              statearr_105089[7] = inst_105082;
              statearr_105089[8] = inst_105072;
              return statearr_105089
            }();
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_105087__$1, inst_105085)
          }else {
            if(state_val_105088 === 1) {
              var state_105087__$1 = state_105087;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_105087__$1, 2, chan)
            }else {
              return null
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_105091 = new Array(9);
              statearr_105091[0] = state_machine__5679__auto__;
              statearr_105091[1] = 1;
              return statearr_105091
            };
            var state_machine__5679__auto____1 = function(state_105087) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_105087);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_105087) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_105087)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_105092 = f__5729__auto__.call(null);
        statearr_105092[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto__;
        return statearr_105092
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return c__5728__auto__
  })
}];
angular.module("chaperone.app").controller("AdminUserCtrl", chaperone.ng.admin.user.chaperone_app_AdminUserCtrl);
goog.provide("chaperone.ng.admin.user_test.cljs");
goog.require("cljs.core");
goog.require("purnam.cljs");
goog.require("purnam.cljs");
goog.require("chaperone.ng.admin.user");
goog.require("chaperone.ng.admin.user");
beforeEach(function() {
  var obj_SHARP_ = purnam.cljs.aget_in.call(null, this, cljs.core.PersistentVector.EMPTY);
  var fn_SHARP_ = obj_SHARP_["addMatchers"];
  return fn_SHARP_.call(obj_SHARP_, function() {
    var G__105093 = function() {
      var obj105096 = {};
      return obj105096
    }();
    G__105093["toSatisfy"] = function(expected, tactual, texpected) {
      var actual = purnam.cljs.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["actual"], null));
      var actualText = [cljs.core.str(actual)].join("");
      var actualText__$1 = cljs.core._EQ_.call(null, actualText, "[object Object]") ? function() {
        var ks = function() {
          var obj_SHARP___$1 = purnam.cljs.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
          var fn_SHARP___$1 = obj_SHARP___$1["getKeys"];
          return fn_SHARP___$1.call(obj_SHARP___$1, actual)
        }();
        var vs = function() {
          var obj_SHARP___$1 = purnam.cljs.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
          var fn_SHARP___$1 = obj_SHARP___$1["getValues"];
          return fn_SHARP___$1.call(obj_SHARP___$1, actual)
        }();
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(ks, vs, actual, actualText) {
          return function(x, y) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null)
          }
        }(ks, vs, actual, actualText), ks, vs))
      }() : actualText;
      var notText = cljs.core.truth_(purnam.cljs.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["isNot"], null))) ? "Not " : "";
      this["message"] = function() {
        return[cljs.core.str("Expression: "), cljs.core.str(tactual), cljs.core.str("\n  Expected: "), cljs.core.str(notText), cljs.core.str(texpected), cljs.core.str("\n  Actual: "), cljs.core.str(actualText__$1)].join("")
      };
      if(cljs.core._EQ_.call(null, function() {
        var obj_SHARP___$1 = purnam.cljs.aget_in.call(null, goog, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP___$1 = obj_SHARP___$1["typeOf"];
        return fn_SHARP___$1.call(obj_SHARP___$1, expected)
      }(), "array")) {
        return purnam.cljs.js_equals.call(null, expected, actual)
      }else {
        if(cljs.core.fn_QMARK_.call(null, expected)) {
          return expected.call(null, actual)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var or__3285__auto__ = cljs.core._EQ_.call(null, expected, actual);
            if(or__3285__auto__) {
              return or__3285__auto__
            }else {
              return purnam.cljs.js_equals.call(null, expected, actual)
            }
          }else {
            return null
          }
        }
      }
    };
    return G__105093
  }())
});
var spec_105103 = function() {
  var obj105098 = {};
  return obj105098
}();
describe("Testing AdminUserCtrl", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$controller", "$rootScope", function($controller, $rootScope) {
    return spec_105103["$scope"] = function() {
      var scp_SHARP_ = function() {
        var obj_SHARP_ = purnam.cljs.aget_in.call(null, $rootScope, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP_ = obj_SHARP_["$new"];
        return fn_SHARP_.call(obj_SHARP_)
      }();
      $controller.call(null, "AdminUserCtrl", function() {
        var G__105099 = function() {
          var obj105102 = {};
          return obj105102
        }();
        G__105099["$scope"] = scp_SHARP_;
        return G__105099
      }());
      return scp_SHARP_
    }()
  }]));
  it("Should have a title in the scope", function() {
    var obj_SHARP__105104 = purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__105105 = obj_SHARP__105104["init"];
    fn_SHARP__105105.call(obj_SHARP__105104);
    return expect(purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "title"], null))).toSatisfy("Add", '(purnam.cljs/aget-in spec ["$scope" "title"])', "Add")
  });
  it("Should create a new user into scope, when a non existent usersid is used", function() {
    var obj_SHARP__105106 = purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__105107 = obj_SHARP__105106["load-user"];
    fn_SHARP__105107.call(obj_SHARP__105106);
    expect(purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null))).toSatisfy("", '(purnam.cljs/aget-in spec ["$scope" "user" "firstname"])', "");
    expect(purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null))).toSatisfy("", '(purnam.cljs/aget-in spec ["$scope" "user" "lastname"])', "");
    expect(purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null))).toSatisfy("", '(purnam.cljs/aget-in spec ["$scope" "user" "email"])', "");
    return expect(purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null))).toSatisfy("", '(purnam.cljs/aget-in spec ["$scope" "user" "password"])', "")
  });
  it("Should show a message and change the location when a user is saved", function() {
    var obj_SHARP__105108 = purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__105109 = obj_SHARP__105108["load-user"];
    fn_SHARP__105109.call(obj_SHARP__105108);
    purnam.cljs.aset_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null), "John");
    purnam.cljs.aset_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null), "Doe");
    purnam.cljs.aset_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null), "email@email.com");
    purnam.cljs.aset_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null), "password");
    var obj_SHARP_ = purnam.cljs.aget_in.call(null, spec_105103, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP_ = obj_SHARP_["save-user"];
    return fn_SHARP_.call(obj_SHARP_)
  });
  return null
});

//# sourceMappingURL=main.js.map