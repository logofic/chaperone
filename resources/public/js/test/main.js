var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while(namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if(goog.getObjectByName(namespace)) {
        break
      }
      goog.implicitNamespaces_[namespace] = true
    }
  }
  goog.exportPath_(name)
};
goog.setTestOnly = function(opt_message) {
  if(COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if(!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name)
  };
  goog.implicitNamespaces_ = {}
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if(!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0])
  }
  for(var part;parts.length && (part = parts.shift());) {
    if(!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object
    }else {
      if(cur[part]) {
        cur = cur[part]
      }else {
        cur = cur[part] = {}
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for(var part;part = parts.shift();) {
    if(goog.isDefAndNotNull(cur[part])) {
      cur = cur[part]
    }else {
      return null
    }
  }
  return cur
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for(var x in obj) {
    global[x] = obj[x]
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if(!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for(var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if(!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {}
      }
      deps.pathToNames[path][provide] = true
    }
    for(var j = 0;require = requires[j];j++) {
      if(!(path in deps.requires)) {
        deps.requires[path] = {}
      }
      deps.requires[path][require] = true
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      return
    }
    if(goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if(path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if(goog.global.console) {
      goog.global.console["error"](errorMessage)
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if(ctor.instance_) {
      return ctor.instance_
    }
    if(goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor
    }
    return ctor.instance_ = new ctor
  }
};
goog.instantiatedSingletons_ = [];
if(!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc
  };
  goog.findBasePath_ = function() {
    if(goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return
    }else {
      if(!goog.inHtmlDocument_()) {
        return
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for(var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if(src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if(!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true
    }
  };
  goog.writeScriptTag_ = function(src) {
    if(goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if(doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if(isDeps) {
          return false
        }else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true
    }else {
      return false
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if(path in deps.written) {
        return
      }
      if(path in deps.visited) {
        if(!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path)
        }
        return
      }
      deps.visited[path] = true;
      if(path in deps.requires) {
        for(var requireName in deps.requires[path]) {
          if(!goog.isProvided_(requireName)) {
            if(requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName])
            }else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if(!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path)
      }
    }
    for(var path in goog.included_) {
      if(!deps.written[path]) {
        visitNode(path)
      }
    }
    for(var i = 0;i < scripts.length;i++) {
      if(scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i])
      }else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if(rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule]
    }else {
      return null
    }
  };
  goog.findBasePath_();
  if(!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js")
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if(s == "object") {
    if(value) {
      if(value instanceof Array) {
        return"array"
      }else {
        if(value instanceof Object) {
          return s
        }
      }
      var className = Object.prototype.toString.call(value);
      if(className == "[object Window]") {
        return"object"
      }
      if(className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return"array"
      }
      if(className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if(s == "function" && typeof value.call == "undefined") {
      return"object"
    }
  }
  return s
};
goog.isDef = function(val) {
  return val !== undefined
};
goog.isNull = function(val) {
  return val === null
};
goog.isDefAndNotNull = function(val) {
  return val != null
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array"
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number"
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function"
};
goog.isString = function(val) {
  return typeof val == "string"
};
goog.isBoolean = function(val) {
  return typeof val == "boolean"
};
goog.isNumber = function(val) {
  return typeof val == "number"
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function"
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function"
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(obj) {
  if("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_)
  }
  try {
    delete obj[goog.UID_PROPERTY_]
  }catch(ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.cloneObject(obj[key])
    }
    return clone
  }
  return obj
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return fn.call.apply(fn.bind, arguments)
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if(!fn) {
    throw new Error;
  }
  if(arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs)
    }
  }else {
    return function() {
      return fn.apply(selfObj, arguments)
    }
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if(Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_
  }else {
    goog.bind = goog.bindJs_
  }
  return goog.bind.apply(null, arguments)
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs)
  }
};
goog.mixin = function(target, source) {
  for(var x in source) {
    target[x] = source[x]
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date
};
goog.globalEval = function(script) {
  if(goog.global.execScript) {
    goog.global.execScript(script, "JavaScript")
  }else {
    if(goog.global.eval) {
      if(goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if(typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true
        }else {
          goog.evalWorksForGlobals_ = false
        }
      }
      if(goog.evalWorksForGlobals_) {
        goog.global.eval(script)
      }else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt)
      }
    }else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for(var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]))
    }
    return mapped.join("-")
  };
  var rename;
  if(goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts
  }else {
    rename = function(a) {
      return a
    }
  }
  if(opt_modifier) {
    return className + "-" + rename(opt_modifier)
  }else {
    return rename(className)
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if(!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for(var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value)
  }
  return str
};
goog.getMsgWithFallback = function(a, b) {
  return a
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo)
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if(caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1))
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for(var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if(ctor.prototype[opt_methodName] === caller) {
      foundCaller = true
    }else {
      if(foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args)
      }
    }
  }
  if(me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args)
  }else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global)
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0
};
goog.string.subs = function(str, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement)
  }
  return str
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "")
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str)
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str))
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str)
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str)
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str)
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str)
};
goog.string.isSpace = function(ch) {
  return ch == " "
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd"
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ")
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n")
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ")
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ")
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "")
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "")
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "")
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "")
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if(test1 < test2) {
    return-1
  }else {
    if(test1 == test2) {
      return 0
    }else {
      return 1
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if(str1 == str2) {
    return 0
  }
  if(!str1) {
    return-1
  }
  if(!str2) {
    return 1
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for(var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if(a != b) {
      var num1 = parseInt(a, 10);
      if(!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if(!isNaN(num2) && num1 - num2) {
          return num1 - num2
        }
      }
      return a < b ? -1 : 1
    }
  }
  if(tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length
  }
  return str1 < str2 ? -1 : 1
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str))
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "))
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "<br />" : "<br>")
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if(opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "&amp;").replace(goog.string.ltRe_, "&lt;").replace(goog.string.gtRe_, "&gt;").replace(goog.string.quotRe_, "&quot;")
  }else {
    if(!goog.string.allRe_.test(str)) {
      return str
    }
    if(str.indexOf("&") != -1) {
      str = str.replace(goog.string.amperRe_, "&amp;")
    }
    if(str.indexOf("<") != -1) {
      str = str.replace(goog.string.ltRe_, "&lt;")
    }
    if(str.indexOf(">") != -1) {
      str = str.replace(goog.string.gtRe_, "&gt;")
    }
    if(str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "&quot;")
    }
    return str
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if(goog.string.contains(str, "&")) {
    if("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str)
    }else {
      return goog.string.unescapePureXmlEntities_(str)
    }
  }
  return str
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"&amp;":"&", "&lt;":"<", "&gt;":">", "&quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if(value) {
      return value
    }
    if(entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if(!isNaN(n)) {
        value = String.fromCharCode(n)
      }
    }
    if(!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1)
    }
    return seen[s] = value
  })
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return"&";
      case "lt":
        return"<";
      case "gt":
        return">";
      case "quot":
        return'"';
      default:
        if(entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if(!isNaN(n)) {
            return String.fromCharCode(n)
          }
        }
        return s
    }
  })
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " &#160;"), opt_xml)
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for(var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if(str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1)
    }
  }
  return str
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(str.length > chars) {
    str = str.substring(0, chars - 3) + "..."
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(opt_trailingChars && str.length > chars) {
    if(opt_trailingChars > chars) {
      opt_trailingChars = chars
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint)
  }else {
    if(str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos)
    }
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\u0008":"\\b", "\u000c":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\u000b":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if(s.quote) {
    return s.quote()
  }else {
    var sb = ['"'];
    for(var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch))
    }
    sb.push('"');
    return sb.join("")
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for(var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i))
  }
  return sb.join("")
};
goog.string.escapeChar = function(c) {
  if(c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c]
  }
  if(c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c]
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if(cc > 31 && cc < 127) {
    rv = c
  }else {
    if(cc < 256) {
      rv = "\\x";
      if(cc < 16 || cc > 256) {
        rv += "0"
      }
    }else {
      rv = "\\u";
      if(cc < 4096) {
        rv += "0"
      }
    }
    rv += cc.toString(16).toUpperCase()
  }
  return goog.string.jsEscapeCache_[c] = rv
};
goog.string.toMap = function(s) {
  var rv = {};
  for(var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true
  }
  return rv
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if(index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength)
  }
  return resultStr
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "")
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "")
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string)
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if(index == -1) {
    index = s.length
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj)
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "")
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36)
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for(var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if(v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2])
    }while(order == 0)
  }
  return order
};
goog.string.compareElements_ = function(left, right) {
  if(left < right) {
    return-1
  }else {
    if(left > right) {
      return 1
    }
  }
  return 0
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for(var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_
  }
  return result
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return"goog_" + goog.string.uniqueStringCounter_++
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if(num == 0 && goog.string.isEmpty(str)) {
    return NaN
  }
  return num
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  })
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase()
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase()
  })
};
goog.string.parseInt = function(value) {
  if(isFinite(value)) {
    value = String(value)
  }
  if(goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10)
  }
  return NaN
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if(Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error)
  }else {
    this.stack = (new Error).stack || ""
  }
  if(opt_msg) {
    this.message = String(opt_msg)
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if(givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs
  }else {
    if(defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return condition
};
goog.asserts.fail = function(opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3))
  }
  return value
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1]
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.indexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i < arr.length;i++) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if(fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex)
  }
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.lastIndexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i >= 0;i--) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;--i) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      var val = arr2[i];
      if(f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val
      }
    }
  }
  return res
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr)
    }
  }
  return res
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if(arr.reduce) {
    if(opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduce(f, val)
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if(arr.reduceRight) {
    if(opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduceRight(f, val)
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true
    }
  }
  return false
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false
    }
  }
  return true
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if(f.call(opt_obj, element, index, arr)) {
      ++count
    }
  }, opt_obj);
  return count
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;i--) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0
};
goog.array.clear = function(arr) {
  if(!goog.isArray(arr)) {
    for(var i = arr.length - 1;i >= 0;i--) {
      delete arr[i]
    }
  }
  arr.length = 0
};
goog.array.insert = function(arr, obj) {
  if(!goog.array.contains(arr, obj)) {
    arr.push(obj)
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj)
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if(arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj)
  }else {
    goog.array.insertAt(arr, obj, i)
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if(rv = i >= 0) {
    goog.array.removeAt(arr, i)
  }
  return rv
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if(i >= 0) {
    goog.array.removeAt(arr, i);
    return true
  }
  return false
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments)
};
goog.array.toArray = function(object) {
  var length = object.length;
  if(length > 0) {
    var rv = new Array(length);
    for(var i = 0;i < length;i++) {
      rv[i] = object[i]
    }
    return rv
  }
  return[]
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if(goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2)
    }else {
      if(isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for(var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j]
        }
      }else {
        arr1.push(arr2)
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1))
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if(arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start)
  }else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end)
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while(cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if(!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current
    }
  }
  returnArray.length = cursorInsert
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target)
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj)
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while(left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if(isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr)
    }else {
      compareResult = compareFn(opt_target, arr[middle])
    }
    if(compareResult > 0) {
      left = middle + 1
    }else {
      right = middle;
      found = !compareResult
    }
  }
  return found ? left : ~left
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare)
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for(var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]}
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
  }
  goog.array.sort(arr, stableCompareFn);
  for(var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key])
  })
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for(var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if(compareResult > 0 || compareResult == 0 && opt_strict) {
      return false
    }
  }
  return true
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if(!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for(var i = 0;i < l;i++) {
    if(!equalsFn(arr1[i], arr2[i])) {
      return false
    }
  }
  return true
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn)
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for(var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if(result != 0) {
      return result
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length)
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if(index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true
  }
  return false
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for(var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if(goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value)
    }
  }
  return buckets
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element
  });
  return ret
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if(opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end
  }
  if(step * (end - start) < 0) {
    return[]
  }
  if(step > 0) {
    for(var i = start;i < end;i += step) {
      array.push(i)
    }
  }else {
    for(var i = start;i > end;i += step) {
      array.push(i)
    }
  }
  return array
};
goog.array.repeat = function(value, n) {
  var array = [];
  for(var i = 0;i < n;i++) {
    array[i] = value
  }
  return array
};
goog.array.flatten = function(var_args) {
  var result = [];
  for(var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if(goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element))
    }else {
      result.push(element)
    }
  }
  return result
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if(array.length) {
    n %= array.length;
    if(n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n))
    }else {
      if(n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n))
      }
    }
  }
  return array
};
goog.array.zip = function(var_args) {
  if(!arguments.length) {
    return[]
  }
  var result = [];
  for(var i = 0;true;i++) {
    var value = [];
    for(var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if(i >= arr.length) {
        return result
      }
      value.push(arr[i])
    }
    result.push(value)
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for(var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for(var key in obj) {
    f.call(opt_obj, obj[key], key, obj)
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key]
    }
  }
  return res
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj)
  }
  return res
};
goog.object.some = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      return true
    }
  }
  return false
};
goog.object.every = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(!f.call(opt_obj, obj[key], key, obj)) {
      return false
    }
  }
  return true
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for(var key in obj) {
    rv++
  }
  return rv
};
goog.object.getAnyKey = function(obj) {
  for(var key in obj) {
    return key
  }
};
goog.object.getAnyValue = function(obj) {
  for(var key in obj) {
    return obj[key]
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val)
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = obj[key]
  }
  return res
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = key
  }
  return res
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for(var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if(!goog.isDef(obj)) {
      break
    }
  }
  return obj
};
goog.object.containsKey = function(obj, key) {
  return key in obj
};
goog.object.containsValue = function(obj, val) {
  for(var key in obj) {
    if(obj[key] == val) {
      return true
    }
  }
  return false
};
goog.object.findKey = function(obj, f, opt_this) {
  for(var key in obj) {
    if(f.call(opt_this, obj[key], key, obj)) {
      return key
    }
  }
  return undefined
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key]
};
goog.object.isEmpty = function(obj) {
  for(var key in obj) {
    return false
  }
  return true
};
goog.object.clear = function(obj) {
  for(var i in obj) {
    delete obj[i]
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if(rv = key in obj) {
    delete obj[key]
  }
  return rv
};
goog.object.add = function(obj, key, val) {
  if(key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val)
};
goog.object.get = function(obj, key, opt_val) {
  if(key in obj) {
    return obj[key]
  }
  return opt_val
};
goog.object.set = function(obj, key, value) {
  obj[key] = value
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value
};
goog.object.clone = function(obj) {
  var res = {};
  for(var key in obj) {
    res[key] = obj[key]
  }
  return res
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key])
    }
    return clone
  }
  return obj
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for(var key in obj) {
    transposed[obj[key]] = key
  }
  return transposed
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for(var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for(key in source) {
      target[key] = source[key]
    }
    for(var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if(Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key]
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0])
  }
  if(argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for(var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1]
  }
  return rv
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0])
  }
  var rv = {};
  for(var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true
  }
  return rv
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if(Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result)
  }
  return result
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj)
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if(opt_a1 != null) {
    this.append.apply(this, arguments)
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if(opt_a2 != null) {
    for(var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i]
    }
  }
  return this
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = ""
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2080";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null)
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__729925__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args))
    };
    var G__729925 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__729925__delegate.call(this, args)
    };
    G__729925.cljs$lang$maxFixedArity = 0;
    G__729925.cljs$lang$applyTo = function(arglist__729926) {
      var args = cljs.core.seq(arglist__729926);
      return G__729925__delegate(args)
    };
    G__729925.cljs$core$IFn$_invoke$arity$variadic = G__729925__delegate;
    return G__729925
  }()
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number"
};
cljs.core.not = function not(x) {
  if(cljs.core.truth_(x)) {
    return false
  }else {
    return true
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x)
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if(p[goog.typeOf(x__$1)]) {
    return true
  }else {
    if(p["_"]) {
      return true
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false
      }else {
        return null
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if(x == null) {
    return null
  }else {
    return x.constructor
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3273__auto__ = ty;
    if(cljs.core.truth_(and__3273__auto__)) {
      return ty.cljs$lang$type
    }else {
      return and__3273__auto__
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""))
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if(cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s
  }else {
    return[cljs.core.str(ty)].join("")
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size)
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size)
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4108__auto___729927 = len;
  var i_729928 = 0;
  while(true) {
    if(i_729928 < n__4108__auto___729927) {
      new_arr[i_729928] = arr[i_729928];
      var G__729929 = i_729928 + 1;
      i_729928 = G__729929;
      continue
    }else {
    }
    break
  }
  return new_arr
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments)
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i]
  };
  var aget__3 = function() {
    var G__729930__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs)
    };
    var G__729930 = function(array, i, var_args) {
      var idxs = null;
      if(arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__729930__delegate.call(this, array, i, idxs)
    };
    G__729930.cljs$lang$maxFixedArity = 2;
    G__729930.cljs$lang$applyTo = function(arglist__729931) {
      var array = cljs.core.first(arglist__729931);
      arglist__729931 = cljs.core.next(arglist__729931);
      var i = cljs.core.first(arglist__729931);
      var idxs = cljs.core.rest(arglist__729931);
      return G__729930__delegate(array, i, idxs)
    };
    G__729930.cljs$core$IFn$_invoke$arity$variadic = G__729930__delegate;
    return G__729930
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val
  };
  var aset__4 = function() {
    var G__729932__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv)
    };
    var G__729932 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if(arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__729932__delegate.call(this, array, idx, idx2, idxv)
    };
    G__729932.cljs$lang$maxFixedArity = 3;
    G__729932.cljs$lang$applyTo = function(arglist__729933) {
      var array = cljs.core.first(arglist__729933);
      arglist__729933 = cljs.core.next(arglist__729933);
      var idx = cljs.core.first(arglist__729933);
      arglist__729933 = cljs.core.next(arglist__729933);
      var idx2 = cljs.core.first(arglist__729933);
      var idxv = cljs.core.rest(arglist__729933);
      return G__729932__delegate(array, idx, idx2, idxv)
    };
    G__729932.cljs$core$IFn$_invoke$arity$variadic = G__729932__delegate;
    return G__729932
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset
}();
cljs.core.alength = function alength(array) {
  return array.length
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq)
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a
    }, [], aseq)
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array
}();
cljs.core.Fn = function() {
  var obj729935 = {};
  return obj729935
}();
cljs.core.IFn = function() {
  var obj729937 = {};
  return obj729937
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$)
    }
  };
  var _invoke__2 = function(this$, a) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a)
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b)
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c)
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d)
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e)
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f)
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g)
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h)
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i)
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j)
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k)
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if(function() {
      var and__3273__auto__ = this$;
      if(and__3273__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21
      }else {
        return and__3273__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }else {
      var x__3888__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3285__auto__ = cljs.core._invoke[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._invoke["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke
}();
cljs.core.ICounted = function() {
  var obj729939 = {};
  return obj729939
}();
cljs.core._count = function _count(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._count[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._count["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj729941 = {};
  return obj729941
}();
cljs.core._empty = function _empty(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._empty[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._empty["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ICollection = function() {
  var obj729943 = {};
  return obj729943
}();
cljs.core._conj = function _conj(coll, o) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._conj[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._conj["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o)
  }
};
cljs.core.IIndexed = function() {
  var obj729945 = {};
  return obj729945
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if(function() {
      var and__3273__auto__ = coll;
      if(and__3273__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
    }else {
      var x__3888__auto__ = coll == null ? null : coll;
      return function() {
        var or__3285__auto__ = cljs.core._nth[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._nth["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n)
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if(function() {
      var and__3273__auto__ = coll;
      if(and__3273__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3
      }else {
        return and__3273__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found)
    }else {
      var x__3888__auto__ = coll == null ? null : coll;
      return function() {
        var or__3285__auto__ = cljs.core._nth[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._nth["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found)
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth
}();
cljs.core.ASeq = function() {
  var obj729947 = {};
  return obj729947
}();
cljs.core.ISeq = function() {
  var obj729949 = {};
  return obj729949
}();
cljs.core._first = function _first(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._first[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._first["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._rest = function _rest(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._rest[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._rest["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INext = function() {
  var obj729951 = {};
  return obj729951
}();
cljs.core._next = function _next(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$INext$_next$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._next[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._next["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ILookup = function() {
  var obj729953 = {};
  return obj729953
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if(function() {
      var and__3273__auto__ = o;
      if(and__3273__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k)
    }else {
      var x__3888__auto__ = o == null ? null : o;
      return function() {
        var or__3285__auto__ = cljs.core._lookup[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._lookup["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k)
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if(function() {
      var and__3273__auto__ = o;
      if(and__3273__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3
      }else {
        return and__3273__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found)
    }else {
      var x__3888__auto__ = o == null ? null : o;
      return function() {
        var or__3285__auto__ = cljs.core._lookup[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._lookup["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found)
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup
}();
cljs.core.IAssociative = function() {
  var obj729955 = {};
  return obj729955
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._assoc[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._assoc["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v)
  }
};
cljs.core.IMap = function() {
  var obj729957 = {};
  return obj729957
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._dissoc[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._dissoc["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core.IMapEntry = function() {
  var obj729959 = {};
  return obj729959
}();
cljs.core._key = function _key(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._key[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._key["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._val = function _val(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._val[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._val["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISet = function() {
  var obj729961 = {};
  return obj729961
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._disjoin[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._disjoin["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v)
  }
};
cljs.core.IStack = function() {
  var obj729963 = {};
  return obj729963
}();
cljs.core._peek = function _peek(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._peek[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._peek["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._pop = function _pop(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._pop[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._pop["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IVector = function() {
  var obj729965 = {};
  return obj729965
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._assoc_n[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._assoc_n["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val)
  }
};
cljs.core.IDeref = function() {
  var obj729967 = {};
  return obj729967
}();
cljs.core._deref = function _deref(o) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._deref[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._deref["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj729969 = {};
  return obj729969
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._deref_with_timeout["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val)
  }
};
cljs.core.IMeta = function() {
  var obj729971 = {};
  return obj729971
}();
cljs.core._meta = function _meta(o) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._meta[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._meta["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IWithMeta = function() {
  var obj729973 = {};
  return obj729973
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._with_meta[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._with_meta["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta)
  }
};
cljs.core.IReduce = function() {
  var obj729975 = {};
  return obj729975
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if(function() {
      var and__3273__auto__ = coll;
      if(and__3273__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f)
    }else {
      var x__3888__auto__ = coll == null ? null : coll;
      return function() {
        var or__3285__auto__ = cljs.core._reduce[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._reduce["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f)
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if(function() {
      var and__3273__auto__ = coll;
      if(and__3273__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3
      }else {
        return and__3273__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start)
    }else {
      var x__3888__auto__ = coll == null ? null : coll;
      return function() {
        var or__3285__auto__ = cljs.core._reduce[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core._reduce["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start)
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce
}();
cljs.core.IKVReduce = function() {
  var obj729977 = {};
  return obj729977
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._kv_reduce[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._kv_reduce["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init)
  }
};
cljs.core.IEquiv = function() {
  var obj729979 = {};
  return obj729979
}();
cljs.core._equiv = function _equiv(o, other) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._equiv[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._equiv["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other)
  }
};
cljs.core.IHash = function() {
  var obj729981 = {};
  return obj729981
}();
cljs.core._hash = function _hash(o) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IHash$_hash$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._hash[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._hash["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISeqable = function() {
  var obj729983 = {};
  return obj729983
}();
cljs.core._seq = function _seq(o) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._seq[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._seq["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISequential = function() {
  var obj729985 = {};
  return obj729985
}();
cljs.core.IList = function() {
  var obj729987 = {};
  return obj729987
}();
cljs.core.IRecord = function() {
  var obj729989 = {};
  return obj729989
}();
cljs.core.IReversible = function() {
  var obj729991 = {};
  return obj729991
}();
cljs.core._rseq = function _rseq(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._rseq[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._rseq["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISorted = function() {
  var obj729993 = {};
  return obj729993
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._sorted_seq[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._sorted_seq["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_)
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._sorted_seq_from["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_)
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._entry_key[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._entry_key["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry)
  }
};
cljs.core._comparator = function _comparator(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._comparator[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._comparator["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IWriter = function() {
  var obj729995 = {};
  return obj729995
}();
cljs.core._write = function _write(writer, s) {
  if(function() {
    var and__3273__auto__ = writer;
    if(and__3273__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s)
  }else {
    var x__3888__auto__ = writer == null ? null : writer;
    return function() {
      var or__3285__auto__ = cljs.core._write[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._write["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s)
  }
};
cljs.core._flush = function _flush(writer) {
  if(function() {
    var and__3273__auto__ = writer;
    if(and__3273__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer)
  }else {
    var x__3888__auto__ = writer == null ? null : writer;
    return function() {
      var or__3285__auto__ = cljs.core._flush[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._flush["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer)
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj729997 = {};
  return obj729997
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if(function() {
    var and__3273__auto__ = o;
    if(and__3273__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts)
  }else {
    var x__3888__auto__ = o == null ? null : o;
    return function() {
      var or__3285__auto__ = cljs.core._pr_writer[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._pr_writer["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts)
  }
};
cljs.core.IPending = function() {
  var obj729999 = {};
  return obj729999
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if(function() {
    var and__3273__auto__ = d;
    if(and__3273__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d)
  }else {
    var x__3888__auto__ = d == null ? null : d;
    return function() {
      var or__3285__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._realized_QMARK_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d)
  }
};
cljs.core.IWatchable = function() {
  var obj730001 = {};
  return obj730001
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if(function() {
    var and__3273__auto__ = this$;
    if(and__3273__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval)
  }else {
    var x__3888__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3285__auto__ = cljs.core._notify_watches[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._notify_watches["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval)
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if(function() {
    var and__3273__auto__ = this$;
    if(and__3273__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f)
  }else {
    var x__3888__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3285__auto__ = cljs.core._add_watch[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._add_watch["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f)
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if(function() {
    var and__3273__auto__ = this$;
    if(and__3273__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key)
  }else {
    var x__3888__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3285__auto__ = cljs.core._remove_watch[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._remove_watch["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key)
  }
};
cljs.core.IEditableCollection = function() {
  var obj730003 = {};
  return obj730003
}();
cljs.core._as_transient = function _as_transient(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._as_transient[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._as_transient["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ITransientCollection = function() {
  var obj730005 = {};
  return obj730005
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._conj_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val)
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._persistent_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientAssociative = function() {
  var obj730007 = {};
  return obj730007
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._assoc_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val)
  }
};
cljs.core.ITransientMap = function() {
  var obj730009 = {};
  return obj730009
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key)
  }
};
cljs.core.ITransientVector = function() {
  var obj730011 = {};
  return obj730011
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val)
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._pop_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientSet = function() {
  var obj730013 = {};
  return obj730013
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if(function() {
    var and__3273__auto__ = tcoll;
    if(and__3273__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v)
  }else {
    var x__3888__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3285__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v)
  }
};
cljs.core.IComparable = function() {
  var obj730015 = {};
  return obj730015
}();
cljs.core._compare = function _compare(x, y) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._compare[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._compare["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y)
  }
};
cljs.core.IChunk = function() {
  var obj730017 = {};
  return obj730017
}();
cljs.core._drop_first = function _drop_first(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._drop_first[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._drop_first["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedSeq = function() {
  var obj730019 = {};
  return obj730019
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._chunked_first[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._chunked_first["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._chunked_rest[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._chunked_rest["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedNext = function() {
  var obj730021 = {};
  return obj730021
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if(function() {
    var and__3273__auto__ = coll;
    if(and__3273__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }else {
    var x__3888__auto__ = coll == null ? null : coll;
    return function() {
      var or__3285__auto__ = cljs.core._chunked_next[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._chunked_next["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INamed = function() {
  var obj730023 = {};
  return obj730023
}();
cljs.core._name = function _name(x) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$INamed$_name$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._name[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._name["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._namespace = function _namespace(x) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._namespace[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._namespace["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s)
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb)
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("")
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name))
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if(cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0
  }else {
    if(cljs.core.truth_(function() {
      var and__3273__auto__ = cljs.core.not.call(null, a.ns);
      if(and__3273__auto__) {
        return b.ns
      }else {
        return and__3273__auto__
      }
    }())) {
      return-1
    }else {
      if(cljs.core.truth_(a.ns)) {
        if(cljs.core.not.call(null, b.ns)) {
          return 1
        }else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if(nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name)
          }else {
            return nsc
          }
        }
      }else {
        if(new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Symbol")
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str)
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3696__auto__ = self__._hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta)
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta
};
cljs.core.Symbol.prototype.call = function() {
  var G__730025 = null;
  var G__730025__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null)
  };
  var G__730025__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found)
  };
  G__730025 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730025__2.call(this, self__, coll);
      case 3:
        return G__730025__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730025
}();
cljs.core.Symbol.prototype.apply = function(self__, args730024) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730024)))
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null)
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found)
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if(other instanceof cljs.core.Symbol) {
    return self__.str === other.str
  }else {
    return false
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta)
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if(name instanceof cljs.core.Symbol) {
      return name
    }else {
      return symbol.call(null, null, name)
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null)
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol
}();
cljs.core.seq = function seq(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__730027 = coll;
      if(G__730027) {
        var bit__3904__auto__ = G__730027.cljs$lang$protocol_mask$partition0$ & 8388608;
        if(bit__3904__auto__ || G__730027.cljs$core$ISeqable$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._seq.call(null, coll)
    }else {
      if(coll instanceof Array) {
        if(coll.length === 0) {
          return null
        }else {
          return new cljs.core.IndexedSeq(coll, 0)
        }
      }else {
        if(typeof coll === "string") {
          if(coll.length === 0) {
            return null
          }else {
            return new cljs.core.IndexedSeq(coll, 0)
          }
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__730029 = coll;
      if(G__730029) {
        var bit__3904__auto__ = G__730029.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__3904__auto__ || G__730029.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._first.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s == null) {
        return null
      }else {
        return cljs.core._first.call(null, s)
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__730031 = coll;
      if(G__730031) {
        var bit__3904__auto__ = G__730031.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__3904__auto__ || G__730031.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._rest.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s) {
        return cljs.core._rest.call(null, s)
      }else {
        return cljs.core.List.EMPTY
      }
    }
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.next = function next(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__730033 = coll;
      if(G__730033) {
        var bit__3904__auto__ = G__730033.cljs$lang$protocol_mask$partition0$ & 128;
        if(bit__3904__auto__ || G__730033.cljs$core$INext$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._next.call(null, coll)
    }else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll))
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true
  };
  var _EQ___2 = function(x, y) {
    return x === y || cljs.core._equiv.call(null, x, y)
  };
  var _EQ___3 = function() {
    var G__730034__delegate = function(x, y, more) {
      while(true) {
        if(_EQ_.call(null, x, y)) {
          if(cljs.core.next.call(null, more)) {
            var G__730035 = y;
            var G__730036 = cljs.core.first.call(null, more);
            var G__730037 = cljs.core.next.call(null, more);
            x = G__730035;
            y = G__730036;
            more = G__730037;
            continue
          }else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__730034 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730034__delegate.call(this, x, y, more)
    };
    G__730034.cljs$lang$maxFixedArity = 2;
    G__730034.cljs$lang$applyTo = function(arglist__730038) {
      var x = cljs.core.first(arglist__730038);
      arglist__730038 = cljs.core.next(arglist__730038);
      var y = cljs.core.first(arglist__730038);
      var more = cljs.core.rest(arglist__730038);
      return G__730034__delegate(x, y, more)
    };
    G__730034.cljs$core$IFn$_invoke$arity$variadic = G__730034__delegate;
    return G__730034
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_
}();
cljs.core.IHash["null"] = true;
cljs.core._hash["null"] = function(o) {
  return 0
};
cljs.core.INext["null"] = true;
cljs.core._next["null"] = function(_) {
  return null
};
cljs.core.IKVReduce["null"] = true;
cljs.core._kv_reduce["null"] = function(_, f, init) {
  return init
};
cljs.core.ISet["null"] = true;
cljs.core._disjoin["null"] = function(_, v) {
  return null
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0
};
cljs.core.IStack["null"] = true;
cljs.core._peek["null"] = function(_) {
  return null
};
cljs.core._pop["null"] = function(_) {
  return null
};
cljs.core.IEquiv["null"] = true;
cljs.core._equiv["null"] = function(_, o) {
  return o == null
};
cljs.core.IWithMeta["null"] = true;
cljs.core._with_meta["null"] = function(_, meta) {
  return null
};
cljs.core.IMeta["null"] = true;
cljs.core._meta["null"] = function(_) {
  return null
};
cljs.core.IEmptyableCollection["null"] = true;
cljs.core._empty["null"] = function(_) {
  return null
};
cljs.core.IMap["null"] = true;
cljs.core._dissoc["null"] = function(_, k) {
  return null
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString()
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o)
};
cljs.core.inc = function inc(x) {
  return x + 1
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Reduced")
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val)
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x)
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if(cnt === 0) {
      return f.call(null)
    }else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__730039 = nval;
            var G__730040 = n + 1;
            val = G__730039;
            n = G__730040;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__730041 = nval;
          var G__730042 = n + 1;
          val__$1 = G__730041;
          n = G__730042;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__730043 = nval;
          var G__730044 = n + 1;
          val__$1 = G__730043;
          n = G__730044;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if(arr.length === 0) {
      return f.call(null)
    }else {
      var val = arr[0];
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__730045 = nval;
            var G__730046 = n + 1;
            val = G__730045;
            n = G__730046;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__730047 = nval;
          var G__730048 = n + 1;
          val__$1 = G__730047;
          n = G__730048;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__730049 = nval;
          var G__730050 = n + 1;
          val__$1 = G__730049;
          n = G__730050;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__730052 = x;
  if(G__730052) {
    var bit__3911__auto__ = G__730052.cljs$lang$protocol_mask$partition0$ & 2;
    if(bit__3911__auto__ || G__730052.cljs$core$ICounted$) {
      return true
    }else {
      if(!G__730052.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__730052)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__730052)
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__730054 = x;
  if(G__730054) {
    var bit__3911__auto__ = G__730054.cljs$lang$protocol_mask$partition0$ & 16;
    if(bit__3911__auto__ || G__730054.cljs$core$IIndexed$) {
      return true
    }else {
      if(!G__730054.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__730054)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__730054)
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if(c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i)
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i]
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.arr.length) {
    return self__.arr[i__$1]
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.arr.length) {
    return self__.arr[i__$1]
  }else {
    return not_found
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i)
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0)
  };
  var prim_seq__2 = function(prim, i) {
    if(i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i)
    }else {
      return null
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0)
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i)
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/RSeq")
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1)
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1)
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i)
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null)
  }else {
    return null
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta)
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta)
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll))
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll))
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll))
};
cljs.core.last = function last(s) {
  while(true) {
    var sn = cljs.core.next.call(null, s);
    if(!(sn == null)) {
      var G__730055 = sn;
      s = G__730055;
      continue
    }else {
      return cljs.core.first.call(null, s)
    }
    break
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if(!(coll == null)) {
      return cljs.core._conj.call(null, coll, x)
    }else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x)
    }
  };
  var conj__3 = function() {
    var G__730056__delegate = function(coll, x, xs) {
      while(true) {
        if(cljs.core.truth_(xs)) {
          var G__730057 = conj.call(null, coll, x);
          var G__730058 = cljs.core.first.call(null, xs);
          var G__730059 = cljs.core.next.call(null, xs);
          coll = G__730057;
          x = G__730058;
          xs = G__730059;
          continue
        }else {
          return conj.call(null, coll, x)
        }
        break
      }
    };
    var G__730056 = function(coll, x, var_args) {
      var xs = null;
      if(arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730056__delegate.call(this, coll, x, xs)
    };
    G__730056.cljs$lang$maxFixedArity = 2;
    G__730056.cljs$lang$applyTo = function(arglist__730060) {
      var coll = cljs.core.first(arglist__730060);
      arglist__730060 = cljs.core.next(arglist__730060);
      var x = cljs.core.first(arglist__730060);
      var xs = cljs.core.rest(arglist__730060);
      return G__730056__delegate(coll, x, xs)
    };
    G__730056.cljs$core$IFn$_invoke$arity$variadic = G__730056__delegate;
    return G__730056
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj
}();
cljs.core.empty = function empty(coll) {
  return cljs.core._empty.call(null, coll)
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while(true) {
    if(cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s)
    }else {
      var G__730061 = cljs.core.next.call(null, s);
      var G__730062 = acc + 1;
      s = G__730061;
      acc = G__730062;
      continue
    }
    break
  }
};
cljs.core.count = function count(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__730064 = coll;
      if(G__730064) {
        var bit__3904__auto__ = G__730064.cljs$lang$protocol_mask$partition0$ & 2;
        if(bit__3904__auto__ || G__730064.cljs$core$ICounted$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._count.call(null, coll)
    }else {
      if(coll instanceof Array) {
        return coll.length
      }else {
        if(typeof coll === "string") {
          return coll.length
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  }else {
    return 0
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while(true) {
      if(coll == null) {
        throw new Error("Index out of bounds");
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            throw new Error("Index out of bounds");
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__730065 = cljs.core.next.call(null, coll);
              var G__730066 = n - 1;
              coll = G__730065;
              n = G__730066;
              continue
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while(true) {
      if(coll == null) {
        return not_found
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            return not_found
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__730067 = cljs.core.next.call(null, coll);
              var G__730068 = n - 1;
              var G__730069 = not_found;
              coll = G__730067;
              n = G__730068;
              not_found = G__730069;
              continue
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if(coll == null) {
      return null
    }else {
      if(function() {
        var G__730074 = coll;
        if(G__730074) {
          var bit__3904__auto__ = G__730074.cljs$lang$protocol_mask$partition0$ & 16;
          if(bit__3904__auto__ || G__730074.cljs$core$IIndexed$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._nth.call(null, coll, n)
      }else {
        if(coll instanceof Array) {
          if(n < coll.length) {
            return coll[n]
          }else {
            return null
          }
        }else {
          if(typeof coll === "string") {
            if(n < coll.length) {
              return coll[n]
            }else {
              return null
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if(function() {
                  var G__730075 = coll;
                  if(G__730075) {
                    var bit__3911__auto__ = G__730075.cljs$lang$protocol_mask$partition0$ & 64;
                    if(bit__3911__auto__ || G__730075.cljs$core$ISeq$) {
                      return true
                    }else {
                      if(!G__730075.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__730075)
                      }else {
                        return false
                      }
                    }
                  }else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__730075)
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n)
                }else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }else {
                return null
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if(!(coll == null)) {
      if(function() {
        var G__730076 = coll;
        if(G__730076) {
          var bit__3904__auto__ = G__730076.cljs$lang$protocol_mask$partition0$ & 16;
          if(bit__3904__auto__ || G__730076.cljs$core$IIndexed$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found)
      }else {
        if(coll instanceof Array) {
          if(n < coll.length) {
            return coll[n]
          }else {
            return not_found
          }
        }else {
          if(typeof coll === "string") {
            if(n < coll.length) {
              return coll[n]
            }else {
              return not_found
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if(function() {
                  var G__730077 = coll;
                  if(G__730077) {
                    var bit__3911__auto__ = G__730077.cljs$lang$protocol_mask$partition0$ & 64;
                    if(bit__3911__auto__ || G__730077.cljs$core$ISeq$) {
                      return true
                    }else {
                      if(!G__730077.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__730077)
                      }else {
                        return false
                      }
                    }
                  }else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__730077)
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found)
                }else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }else {
                return null
              }
            }
          }
        }
      }
    }else {
      return not_found
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if(o == null) {
      return null
    }else {
      if(function() {
        var G__730080 = o;
        if(G__730080) {
          var bit__3904__auto__ = G__730080.cljs$lang$protocol_mask$partition0$ & 256;
          if(bit__3904__auto__ || G__730080.cljs$core$ILookup$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._lookup.call(null, o, k)
      }else {
        if(o instanceof Array) {
          if(k < o.length) {
            return o[k]
          }else {
            return null
          }
        }else {
          if(typeof o === "string") {
            if(k < o.length) {
              return o[k]
            }else {
              return null
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null
              }else {
                return null
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if(!(o == null)) {
      if(function() {
        var G__730081 = o;
        if(G__730081) {
          var bit__3904__auto__ = G__730081.cljs$lang$protocol_mask$partition0$ & 256;
          if(bit__3904__auto__ || G__730081.cljs$core$ILookup$) {
            return true
          }else {
            return false
          }
        }else {
          return false
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found)
      }else {
        if(o instanceof Array) {
          if(k < o.length) {
            return o[k]
          }else {
            return not_found
          }
        }else {
          if(typeof o === "string") {
            if(k < o.length) {
              return o[k]
            }else {
              return not_found
            }
          }else {
            if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
    }else {
      return not_found
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if(!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v)
    }else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v])
    }
  };
  var assoc__4 = function() {
    var G__730082__delegate = function(coll, k, v, kvs) {
      while(true) {
        var ret = assoc.call(null, coll, k, v);
        if(cljs.core.truth_(kvs)) {
          var G__730083 = ret;
          var G__730084 = cljs.core.first.call(null, kvs);
          var G__730085 = cljs.core.second.call(null, kvs);
          var G__730086 = cljs.core.nnext.call(null, kvs);
          coll = G__730083;
          k = G__730084;
          v = G__730085;
          kvs = G__730086;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__730082 = function(coll, k, v, var_args) {
      var kvs = null;
      if(arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__730082__delegate.call(this, coll, k, v, kvs)
    };
    G__730082.cljs$lang$maxFixedArity = 3;
    G__730082.cljs$lang$applyTo = function(arglist__730087) {
      var coll = cljs.core.first(arglist__730087);
      arglist__730087 = cljs.core.next(arglist__730087);
      var k = cljs.core.first(arglist__730087);
      arglist__730087 = cljs.core.next(arglist__730087);
      var v = cljs.core.first(arglist__730087);
      var kvs = cljs.core.rest(arglist__730087);
      return G__730082__delegate(coll, k, v, kvs)
    };
    G__730082.cljs$core$IFn$_invoke$arity$variadic = G__730082__delegate;
    return G__730082
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll
  };
  var dissoc__2 = function(coll, k) {
    return cljs.core._dissoc.call(null, coll, k)
  };
  var dissoc__3 = function() {
    var G__730088__delegate = function(coll, k, ks) {
      while(true) {
        var ret = dissoc.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__730089 = ret;
          var G__730090 = cljs.core.first.call(null, ks);
          var G__730091 = cljs.core.next.call(null, ks);
          coll = G__730089;
          k = G__730090;
          ks = G__730091;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__730088 = function(coll, k, var_args) {
      var ks = null;
      if(arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730088__delegate.call(this, coll, k, ks)
    };
    G__730088.cljs$lang$maxFixedArity = 2;
    G__730088.cljs$lang$applyTo = function(arglist__730092) {
      var coll = cljs.core.first(arglist__730092);
      arglist__730092 = cljs.core.next(arglist__730092);
      var k = cljs.core.first(arglist__730092);
      var ks = cljs.core.rest(arglist__730092);
      return G__730088__delegate(coll, k, ks)
    };
    G__730088.cljs$core$IFn$_invoke$arity$variadic = G__730088__delegate;
    return G__730088
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3285__auto__ = goog.isFunction(f);
  if(or__3285__auto__) {
    return or__3285__auto__
  }else {
    var G__730096 = f;
    if(G__730096) {
      var bit__3911__auto__ = null;
      if(cljs.core.truth_(function() {
        var or__3285__auto____$1 = bit__3911__auto__;
        if(cljs.core.truth_(or__3285__auto____$1)) {
          return or__3285__auto____$1
        }else {
          return G__730096.cljs$core$Fn$
        }
      }())) {
        return true
      }else {
        if(!G__730096.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__730096)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__730096)
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if(cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__730104 = o;
    if(G__730104) {
      var bit__3911__auto__ = G__730104.cljs$lang$protocol_mask$partition0$ & 262144;
      if(bit__3911__auto__ || G__730104.cljs$core$IWithMeta$) {
        return true
      }else {
        if(!G__730104.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__730104)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__730104)
    }
  }()) {
    return with_meta.call(null, function() {
      if(typeof cljs.core.t730105 !== "undefined") {
      }else {
        cljs.core.t730105 = function(meta, o, with_meta, meta730106) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta730106 = meta730106;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217
        };
        cljs.core.t730105.cljs$lang$type = true;
        cljs.core.t730105.cljs$lang$ctorStr = "cljs.core/t730105";
        cljs.core.t730105.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
          return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/t730105")
        };
        cljs.core.t730105.prototype.call = function() {
          var G__730109__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args)
          };
          var G__730109 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if(arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
            }
            return G__730109__delegate.call(this, self__, args)
          };
          G__730109.cljs$lang$maxFixedArity = 1;
          G__730109.cljs$lang$applyTo = function(arglist__730110) {
            var self__ = cljs.core.first(arglist__730110);
            var args = cljs.core.rest(arglist__730110);
            return G__730109__delegate(self__, args)
          };
          G__730109.cljs$core$IFn$_invoke$arity$variadic = G__730109__delegate;
          return G__730109
        }();
        cljs.core.t730105.prototype.apply = function(self__, args730108) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730108)))
        };
        cljs.core.t730105.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__730111__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args)
          };
          var G__730111 = function(var_args) {
            var self__ = this;
            var args = null;
            if(arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
            }
            return G__730111__delegate.call(this, args)
          };
          G__730111.cljs$lang$maxFixedArity = 0;
          G__730111.cljs$lang$applyTo = function(arglist__730112) {
            var args = cljs.core.seq(arglist__730112);
            return G__730111__delegate(args)
          };
          G__730111.cljs$core$IFn$_invoke$arity$variadic = G__730111__delegate;
          return G__730111
        }();
        cljs.core.t730105.prototype.cljs$core$Fn$ = true;
        cljs.core.t730105.prototype.cljs$core$IMeta$_meta$arity$1 = function(_730107) {
          var self__ = this;
          var _730107__$1 = this;
          return self__.meta730106
        };
        cljs.core.t730105.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_730107, meta730106__$1) {
          var self__ = this;
          var _730107__$1 = this;
          return new cljs.core.t730105(self__.meta, self__.o, self__.with_meta, meta730106__$1)
        };
        cljs.core.__GT_t730105 = function __GT_t730105(meta__$1, o__$1, with_meta__$1, meta730106) {
          return new cljs.core.t730105(meta__$1, o__$1, with_meta__$1, meta730106)
        }
      }
      return new cljs.core.t730105(meta, o, with_meta, null)
    }(), meta)
  }else {
    return cljs.core._with_meta.call(null, o, meta)
  }
};
cljs.core.meta = function meta(o) {
  if(function() {
    var G__730114 = o;
    if(G__730114) {
      var bit__3911__auto__ = G__730114.cljs$lang$protocol_mask$partition0$ & 131072;
      if(bit__3911__auto__ || G__730114.cljs$core$IMeta$) {
        return true
      }else {
        if(!G__730114.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__730114)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__730114)
    }
  }()) {
    return cljs.core._meta.call(null, o)
  }else {
    return null
  }
};
cljs.core.peek = function peek(coll) {
  return cljs.core._peek.call(null, coll)
};
cljs.core.pop = function pop(coll) {
  return cljs.core._pop.call(null, coll)
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll
  };
  var disj__2 = function(coll, k) {
    return cljs.core._disjoin.call(null, coll, k)
  };
  var disj__3 = function() {
    var G__730115__delegate = function(coll, k, ks) {
      while(true) {
        var ret = disj.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__730116 = ret;
          var G__730117 = cljs.core.first.call(null, ks);
          var G__730118 = cljs.core.next.call(null, ks);
          coll = G__730116;
          k = G__730117;
          ks = G__730118;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__730115 = function(coll, k, var_args) {
      var ks = null;
      if(arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730115__delegate.call(this, coll, k, ks)
    };
    G__730115.cljs$lang$maxFixedArity = 2;
    G__730115.cljs$lang$applyTo = function(arglist__730119) {
      var coll = cljs.core.first(arglist__730119);
      arglist__730119 = cljs.core.next(arglist__730119);
      var k = cljs.core.first(arglist__730119);
      var ks = cljs.core.rest(arglist__730119);
      return G__730115__delegate(coll, k, ks)
    };
    G__730115.cljs$core$IFn$_invoke$arity$variadic = G__730115__delegate;
    return G__730115
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj
}();
cljs.core.string_hash_cache = function() {
  var obj730121 = {};
  return obj730121
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if(cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj730125 = {};
      return obj730125
    }();
    cljs.core.string_hash_cache_count = 0
  }else {
  }
  var h = cljs.core.string_hash_cache[k];
  if(typeof h === "number") {
    return h
  }else {
    return cljs.core.add_to_string_hash_cache.call(null, k)
  }
};
cljs.core.hash = function hash(o) {
  if(function() {
    var G__730127 = o;
    if(G__730127) {
      var bit__3904__auto__ = G__730127.cljs$lang$protocol_mask$partition0$ & 4194304;
      if(bit__3904__auto__ || G__730127.cljs$core$IHash$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._hash.call(null, o)
  }else {
    if(typeof o === "number") {
      return Math.floor(o) % 2147483647
    }else {
      if(o === true) {
        return 1
      }else {
        if(o === false) {
          return 0
        }else {
          if(typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core._hash.call(null, o)
            }else {
              return null
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__730129 = x;
    if(G__730129) {
      var bit__3911__auto__ = G__730129.cljs$lang$protocol_mask$partition0$ & 8;
      if(bit__3911__auto__ || G__730129.cljs$core$ICollection$) {
        return true
      }else {
        if(!G__730129.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__730129)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__730129)
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__730131 = x;
    if(G__730131) {
      var bit__3911__auto__ = G__730131.cljs$lang$protocol_mask$partition0$ & 4096;
      if(bit__3911__auto__ || G__730131.cljs$core$ISet$) {
        return true
      }else {
        if(!G__730131.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__730131)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__730131)
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__730133 = x;
  if(G__730133) {
    var bit__3911__auto__ = G__730133.cljs$lang$protocol_mask$partition0$ & 512;
    if(bit__3911__auto__ || G__730133.cljs$core$IAssociative$) {
      return true
    }else {
      if(!G__730133.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__730133)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__730133)
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__730135 = x;
  if(G__730135) {
    var bit__3911__auto__ = G__730135.cljs$lang$protocol_mask$partition0$ & 16777216;
    if(bit__3911__auto__ || G__730135.cljs$core$ISequential$) {
      return true
    }else {
      if(!G__730135.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__730135)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__730135)
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__730137 = x;
  if(G__730137) {
    var bit__3911__auto__ = G__730137.cljs$lang$protocol_mask$partition0$ & 524288;
    if(bit__3911__auto__ || G__730137.cljs$core$IReduce$) {
      return true
    }else {
      if(!G__730137.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__730137)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__730137)
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__730139 = x;
    if(G__730139) {
      var bit__3911__auto__ = G__730139.cljs$lang$protocol_mask$partition0$ & 1024;
      if(bit__3911__auto__ || G__730139.cljs$core$IMap$) {
        return true
      }else {
        if(!G__730139.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__730139)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__730139)
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__730141 = x;
  if(G__730141) {
    var bit__3911__auto__ = G__730141.cljs$lang$protocol_mask$partition0$ & 16384;
    if(bit__3911__auto__ || G__730141.cljs$core$IVector$) {
      return true
    }else {
      if(!G__730141.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__730141)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__730141)
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__730143 = x;
  if(G__730143) {
    var bit__3904__auto__ = G__730143.cljs$lang$protocol_mask$partition1$ & 512;
    if(bit__3904__auto__ || G__730143.cljs$core$IChunkedSeq$) {
      return true
    }else {
      return false
    }
  }else {
    return false
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj730147 = {};
    return obj730147
  };
  var js_obj__1 = function() {
    var G__730148__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals)
    };
    var G__730148 = function(var_args) {
      var keyvals = null;
      if(arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__730148__delegate.call(this, keyvals)
    };
    G__730148.cljs$lang$maxFixedArity = 0;
    G__730148.cljs$lang$applyTo = function(arglist__730149) {
      var keyvals = cljs.core.seq(arglist__730149);
      return G__730148__delegate(keyvals)
    };
    G__730148.cljs$core$IFn$_invoke$arity$variadic = G__730148__delegate;
    return G__730148
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key)
  });
  return keys
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key]
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__730150 = i__$1 + 1;
      var G__730151 = j__$1 + 1;
      var G__730152 = len__$1 - 1;
      i__$1 = G__730150;
      j__$1 = G__730151;
      len__$1 = G__730152;
      continue
    }
    break
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__730153 = i__$1 - 1;
      var G__730154 = j__$1 - 1;
      var G__730155 = len__$1 - 1;
      i__$1 = G__730153;
      j__$1 = G__730154;
      len__$1 = G__730155;
      continue
    }
    break
  }
};
cljs.core.lookup_sentinel = function() {
  var obj730157 = {};
  return obj730157
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if(s == null) {
    return false
  }else {
    var G__730159 = s;
    if(G__730159) {
      var bit__3911__auto__ = G__730159.cljs$lang$protocol_mask$partition0$ & 64;
      if(bit__3911__auto__ || G__730159.cljs$core$ISeq$) {
        return true
      }else {
        if(!G__730159.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__730159)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__730159)
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__730161 = s;
  if(G__730161) {
    var bit__3911__auto__ = G__730161.cljs$lang$protocol_mask$partition0$ & 8388608;
    if(bit__3911__auto__ || G__730161.cljs$core$ISeqable$) {
      return true
    }else {
      if(!G__730161.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__730161)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__730161)
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if(cljs.core.truth_(x)) {
    return true
  }else {
    return false
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3285__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if(or__3285__auto__) {
    return or__3285__auto__
  }else {
    var G__730165 = f;
    if(G__730165) {
      var bit__3911__auto__ = G__730165.cljs$lang$protocol_mask$partition0$ & 1;
      if(bit__3911__auto__ || G__730165.cljs$core$IFn$) {
        return true
      }else {
        if(!G__730165.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__730165)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__730165)
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10)
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if(cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false
  }else {
    return true
  }
};
cljs.core.find = function find(coll, k) {
  if(!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null)
  }else {
    return null
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var distinct_QMARK___3 = function() {
    var G__730166__delegate = function(x, y, more) {
      if(!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while(true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if(cljs.core.truth_(xs)) {
            if(cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false
            }else {
              var G__730167 = cljs.core.conj.call(null, s, x__$1);
              var G__730168 = etc;
              s = G__730167;
              xs = G__730168;
              continue
            }
          }else {
            return true
          }
          break
        }
      }else {
        return false
      }
    };
    var G__730166 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730166__delegate.call(this, x, y, more)
    };
    G__730166.cljs$lang$maxFixedArity = 2;
    G__730166.cljs$lang$applyTo = function(arglist__730169) {
      var x = cljs.core.first(arglist__730169);
      arglist__730169 = cljs.core.next(arglist__730169);
      var y = cljs.core.first(arglist__730169);
      var more = cljs.core.rest(arglist__730169);
      return G__730166__delegate(x, y, more)
    };
    G__730166.cljs$core$IFn$_invoke$arity$variadic = G__730166__delegate;
    return G__730166
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_
}();
cljs.core.compare = function compare(x, y) {
  if(x === y) {
    return 0
  }else {
    if(x == null) {
      return-1
    }else {
      if(y == null) {
        return 1
      }else {
        if(cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if(function() {
            var G__730171 = x;
            if(G__730171) {
              var bit__3904__auto__ = G__730171.cljs$lang$protocol_mask$partition1$ & 2048;
              if(bit__3904__auto__ || G__730171.cljs$core$IComparable$) {
                return true
              }else {
                return false
              }
            }else {
              return false
            }
          }()) {
            return cljs.core._compare.call(null, x, y)
          }else {
            return goog.array.defaultCompare(x, y)
          }
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if(xl < yl) {
      return-1
    }else {
      if(xl > yl) {
        return 1
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0)
        }else {
          return null
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while(true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if(d === 0 && n + 1 < len) {
        var G__730172 = xs;
        var G__730173 = ys;
        var G__730174 = len;
        var G__730175 = n + 1;
        xs = G__730172;
        ys = G__730173;
        len = G__730174;
        n = G__730175;
        continue
      }else {
        return d
      }
      break
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if(cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare
  }else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if(typeof r === "number") {
        return r
      }else {
        if(cljs.core.truth_(r)) {
          return-1
        }else {
          if(cljs.core.truth_(f.call(null, y, x))) {
            return 1
          }else {
            return 0
          }
        }
      }
    }
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll)
  };
  var sort__2 = function(comp, coll) {
    if(cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a)
    }else {
      return cljs.core.List.EMPTY
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll)
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y))
    }, coll)
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s))
    }else {
      return f.call(null)
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while(true) {
      if(coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__730176 = nval;
          var G__730177 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__730176;
          coll__$1 = G__730177;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a)
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if(function() {
      var G__730180 = coll;
      if(G__730180) {
        var bit__3904__auto__ = G__730180.cljs$lang$protocol_mask$partition0$ & 524288;
        if(bit__3904__auto__ || G__730180.cljs$core$IReduce$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f)
    }else {
      if(coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f)
      }else {
        if(typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f)
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if(function() {
      var G__730181 = coll;
      if(G__730181) {
        var bit__3904__auto__ = G__730181.cljs$lang$protocol_mask$partition0$ & 524288;
        if(bit__3904__auto__ || G__730181.cljs$core$IReduce$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val)
    }else {
      if(coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val)
      }else {
        if(typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val)
        }else {
          if(cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val)
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll)
            }else {
              return null
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  return cljs.core._kv_reduce.call(null, coll, f, init)
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0
  };
  var _PLUS___1 = function(x) {
    return x
  };
  var _PLUS___2 = function(x, y) {
    return x + y
  };
  var _PLUS___3 = function() {
    var G__730182__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more)
    };
    var G__730182 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730182__delegate.call(this, x, y, more)
    };
    G__730182.cljs$lang$maxFixedArity = 2;
    G__730182.cljs$lang$applyTo = function(arglist__730183) {
      var x = cljs.core.first(arglist__730183);
      arglist__730183 = cljs.core.next(arglist__730183);
      var y = cljs.core.first(arglist__730183);
      var more = cljs.core.rest(arglist__730183);
      return G__730182__delegate(x, y, more)
    };
    G__730182.cljs$core$IFn$_invoke$arity$variadic = G__730182__delegate;
    return G__730182
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x
  };
  var ___2 = function(x, y) {
    return x - y
  };
  var ___3 = function() {
    var G__730184__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more)
    };
    var G__730184 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730184__delegate.call(this, x, y, more)
    };
    G__730184.cljs$lang$maxFixedArity = 2;
    G__730184.cljs$lang$applyTo = function(arglist__730185) {
      var x = cljs.core.first(arglist__730185);
      arglist__730185 = cljs.core.next(arglist__730185);
      var y = cljs.core.first(arglist__730185);
      var more = cljs.core.rest(arglist__730185);
      return G__730184__delegate(x, y, more)
    };
    G__730184.cljs$core$IFn$_invoke$arity$variadic = G__730184__delegate;
    return G__730184
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1
  };
  var _STAR___1 = function(x) {
    return x
  };
  var _STAR___2 = function(x, y) {
    return x * y
  };
  var _STAR___3 = function() {
    var G__730186__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more)
    };
    var G__730186 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730186__delegate.call(this, x, y, more)
    };
    G__730186.cljs$lang$maxFixedArity = 2;
    G__730186.cljs$lang$applyTo = function(arglist__730187) {
      var x = cljs.core.first(arglist__730187);
      arglist__730187 = cljs.core.next(arglist__730187);
      var y = cljs.core.first(arglist__730187);
      var more = cljs.core.rest(arglist__730187);
      return G__730186__delegate(x, y, more)
    };
    G__730186.cljs$core$IFn$_invoke$arity$variadic = G__730186__delegate;
    return G__730186
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x)
  };
  var _SLASH___2 = function(x, y) {
    return x / y
  };
  var _SLASH___3 = function() {
    var G__730188__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more)
    };
    var G__730188 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730188__delegate.call(this, x, y, more)
    };
    G__730188.cljs$lang$maxFixedArity = 2;
    G__730188.cljs$lang$applyTo = function(arglist__730189) {
      var x = cljs.core.first(arglist__730189);
      arglist__730189 = cljs.core.next(arglist__730189);
      var y = cljs.core.first(arglist__730189);
      var more = cljs.core.rest(arglist__730189);
      return G__730188__delegate(x, y, more)
    };
    G__730188.cljs$core$IFn$_invoke$arity$variadic = G__730188__delegate;
    return G__730188
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true
  };
  var _LT___2 = function(x, y) {
    return x < y
  };
  var _LT___3 = function() {
    var G__730190__delegate = function(x, y, more) {
      while(true) {
        if(x < y) {
          if(cljs.core.next.call(null, more)) {
            var G__730191 = y;
            var G__730192 = cljs.core.first.call(null, more);
            var G__730193 = cljs.core.next.call(null, more);
            x = G__730191;
            y = G__730192;
            more = G__730193;
            continue
          }else {
            return y < cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__730190 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730190__delegate.call(this, x, y, more)
    };
    G__730190.cljs$lang$maxFixedArity = 2;
    G__730190.cljs$lang$applyTo = function(arglist__730194) {
      var x = cljs.core.first(arglist__730194);
      arglist__730194 = cljs.core.next(arglist__730194);
      var y = cljs.core.first(arglist__730194);
      var more = cljs.core.rest(arglist__730194);
      return G__730190__delegate(x, y, more)
    };
    G__730190.cljs$core$IFn$_invoke$arity$variadic = G__730190__delegate;
    return G__730190
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y
  };
  var _LT__EQ___3 = function() {
    var G__730195__delegate = function(x, y, more) {
      while(true) {
        if(x <= y) {
          if(cljs.core.next.call(null, more)) {
            var G__730196 = y;
            var G__730197 = cljs.core.first.call(null, more);
            var G__730198 = cljs.core.next.call(null, more);
            x = G__730196;
            y = G__730197;
            more = G__730198;
            continue
          }else {
            return y <= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__730195 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730195__delegate.call(this, x, y, more)
    };
    G__730195.cljs$lang$maxFixedArity = 2;
    G__730195.cljs$lang$applyTo = function(arglist__730199) {
      var x = cljs.core.first(arglist__730199);
      arglist__730199 = cljs.core.next(arglist__730199);
      var y = cljs.core.first(arglist__730199);
      var more = cljs.core.rest(arglist__730199);
      return G__730195__delegate(x, y, more)
    };
    G__730195.cljs$core$IFn$_invoke$arity$variadic = G__730195__delegate;
    return G__730195
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true
  };
  var _GT___2 = function(x, y) {
    return x > y
  };
  var _GT___3 = function() {
    var G__730200__delegate = function(x, y, more) {
      while(true) {
        if(x > y) {
          if(cljs.core.next.call(null, more)) {
            var G__730201 = y;
            var G__730202 = cljs.core.first.call(null, more);
            var G__730203 = cljs.core.next.call(null, more);
            x = G__730201;
            y = G__730202;
            more = G__730203;
            continue
          }else {
            return y > cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__730200 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730200__delegate.call(this, x, y, more)
    };
    G__730200.cljs$lang$maxFixedArity = 2;
    G__730200.cljs$lang$applyTo = function(arglist__730204) {
      var x = cljs.core.first(arglist__730204);
      arglist__730204 = cljs.core.next(arglist__730204);
      var y = cljs.core.first(arglist__730204);
      var more = cljs.core.rest(arglist__730204);
      return G__730200__delegate(x, y, more)
    };
    G__730200.cljs$core$IFn$_invoke$arity$variadic = G__730200__delegate;
    return G__730200
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y
  };
  var _GT__EQ___3 = function() {
    var G__730205__delegate = function(x, y, more) {
      while(true) {
        if(x >= y) {
          if(cljs.core.next.call(null, more)) {
            var G__730206 = y;
            var G__730207 = cljs.core.first.call(null, more);
            var G__730208 = cljs.core.next.call(null, more);
            x = G__730206;
            y = G__730207;
            more = G__730208;
            continue
          }else {
            return y >= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__730205 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730205__delegate.call(this, x, y, more)
    };
    G__730205.cljs$lang$maxFixedArity = 2;
    G__730205.cljs$lang$applyTo = function(arglist__730209) {
      var x = cljs.core.first(arglist__730209);
      arglist__730209 = cljs.core.next(arglist__730209);
      var y = cljs.core.first(arglist__730209);
      var more = cljs.core.rest(arglist__730209);
      return G__730205__delegate(x, y, more)
    };
    G__730205.cljs$core$IFn$_invoke$arity$variadic = G__730205__delegate;
    return G__730205
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_
}();
cljs.core.dec = function dec(x) {
  return x - 1
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x
  };
  var max__2 = function(x, y) {
    var x__3592__auto__ = x;
    var y__3593__auto__ = y;
    return x__3592__auto__ > y__3593__auto__ ? x__3592__auto__ : y__3593__auto__
  };
  var max__3 = function() {
    var G__730210__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3592__auto__ = x;
        var y__3593__auto__ = y;
        return x__3592__auto__ > y__3593__auto__ ? x__3592__auto__ : y__3593__auto__
      }(), more)
    };
    var G__730210 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730210__delegate.call(this, x, y, more)
    };
    G__730210.cljs$lang$maxFixedArity = 2;
    G__730210.cljs$lang$applyTo = function(arglist__730211) {
      var x = cljs.core.first(arglist__730211);
      arglist__730211 = cljs.core.next(arglist__730211);
      var y = cljs.core.first(arglist__730211);
      var more = cljs.core.rest(arglist__730211);
      return G__730210__delegate(x, y, more)
    };
    G__730210.cljs$core$IFn$_invoke$arity$variadic = G__730210__delegate;
    return G__730210
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x
  };
  var min__2 = function(x, y) {
    var x__3599__auto__ = x;
    var y__3600__auto__ = y;
    return x__3599__auto__ < y__3600__auto__ ? x__3599__auto__ : y__3600__auto__
  };
  var min__3 = function() {
    var G__730212__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3599__auto__ = x;
        var y__3600__auto__ = y;
        return x__3599__auto__ < y__3600__auto__ ? x__3599__auto__ : y__3600__auto__
      }(), more)
    };
    var G__730212 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730212__delegate.call(this, x, y, more)
    };
    G__730212.cljs$lang$maxFixedArity = 2;
    G__730212.cljs$lang$applyTo = function(arglist__730213) {
      var x = cljs.core.first(arglist__730213);
      arglist__730213 = cljs.core.next(arglist__730213);
      var y = cljs.core.first(arglist__730213);
      var more = cljs.core.rest(arglist__730213);
      return G__730212__delegate(x, y, more)
    };
    G__730212.cljs$core$IFn$_invoke$arity$variadic = G__730212__delegate;
    return G__730212
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min
}();
cljs.core.byte$ = function byte$(x) {
  return x
};
cljs.core.char$ = function char$(x) {
  if(typeof x === "number") {
    return String.fromCharCode(x)
  }else {
    if(typeof x === "string" && x.length === 1) {
      return x
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      }else {
        return null
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x
};
cljs.core.float$ = function float$(x) {
  return x
};
cljs.core.double$ = function double$(x) {
  return x
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0
  };
  var unchecked_add__1 = function(x) {
    return x
  };
  var unchecked_add__2 = function(x, y) {
    return x + y
  };
  var unchecked_add__3 = function() {
    var G__730214__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more)
    };
    var G__730214 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730214__delegate.call(this, x, y, more)
    };
    G__730214.cljs$lang$maxFixedArity = 2;
    G__730214.cljs$lang$applyTo = function(arglist__730215) {
      var x = cljs.core.first(arglist__730215);
      arglist__730215 = cljs.core.next(arglist__730215);
      var y = cljs.core.first(arglist__730215);
      var more = cljs.core.rest(arglist__730215);
      return G__730214__delegate(x, y, more)
    };
    G__730214.cljs$core$IFn$_invoke$arity$variadic = G__730214__delegate;
    return G__730214
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0
  };
  var unchecked_add_int__1 = function(x) {
    return x
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y
  };
  var unchecked_add_int__3 = function() {
    var G__730216__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more)
    };
    var G__730216 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730216__delegate.call(this, x, y, more)
    };
    G__730216.cljs$lang$maxFixedArity = 2;
    G__730216.cljs$lang$applyTo = function(arglist__730217) {
      var x = cljs.core.first(arglist__730217);
      arglist__730217 = cljs.core.next(arglist__730217);
      var y = cljs.core.first(arglist__730217);
      var more = cljs.core.rest(arglist__730217);
      return G__730216__delegate(x, y, more)
    };
    G__730216.cljs$core$IFn$_invoke$arity$variadic = G__730216__delegate;
    return G__730216
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x)
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y
  };
  var unchecked_divide_int__3 = function() {
    var G__730218__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more)
    };
    var G__730218 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730218__delegate.call(this, x, y, more)
    };
    G__730218.cljs$lang$maxFixedArity = 2;
    G__730218.cljs$lang$applyTo = function(arglist__730219) {
      var x = cljs.core.first(arglist__730219);
      arglist__730219 = cljs.core.next(arglist__730219);
      var y = cljs.core.first(arglist__730219);
      var more = cljs.core.rest(arglist__730219);
      return G__730218__delegate(x, y, more)
    };
    G__730218.cljs$core$IFn$_invoke$arity$variadic = G__730218__delegate;
    return G__730218
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1
  };
  var unchecked_multiply__1 = function(x) {
    return x
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y
  };
  var unchecked_multiply__3 = function() {
    var G__730220__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more)
    };
    var G__730220 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730220__delegate.call(this, x, y, more)
    };
    G__730220.cljs$lang$maxFixedArity = 2;
    G__730220.cljs$lang$applyTo = function(arglist__730221) {
      var x = cljs.core.first(arglist__730221);
      arglist__730221 = cljs.core.next(arglist__730221);
      var y = cljs.core.first(arglist__730221);
      var more = cljs.core.rest(arglist__730221);
      return G__730220__delegate(x, y, more)
    };
    G__730220.cljs$core$IFn$_invoke$arity$variadic = G__730220__delegate;
    return G__730220
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1
  };
  var unchecked_multiply_int__1 = function(x) {
    return x
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y
  };
  var unchecked_multiply_int__3 = function() {
    var G__730222__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more)
    };
    var G__730222 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730222__delegate.call(this, x, y, more)
    };
    G__730222.cljs$lang$maxFixedArity = 2;
    G__730222.cljs$lang$applyTo = function(arglist__730223) {
      var x = cljs.core.first(arglist__730223);
      arglist__730223 = cljs.core.next(arglist__730223);
      var y = cljs.core.first(arglist__730223);
      var more = cljs.core.rest(arglist__730223);
      return G__730222__delegate(x, y, more)
    };
    G__730222.cljs$core$IFn$_invoke$arity$variadic = G__730222__delegate;
    return G__730222
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n)
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y
  };
  var unchecked_substract__3 = function() {
    var G__730224__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more)
    };
    var G__730224 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730224__delegate.call(this, x, y, more)
    };
    G__730224.cljs$lang$maxFixedArity = 2;
    G__730224.cljs$lang$applyTo = function(arglist__730225) {
      var x = cljs.core.first(arglist__730225);
      arglist__730225 = cljs.core.next(arglist__730225);
      var y = cljs.core.first(arglist__730225);
      var more = cljs.core.rest(arglist__730225);
      return G__730224__delegate(x, y, more)
    };
    G__730224.cljs$core$IFn$_invoke$arity$variadic = G__730224__delegate;
    return G__730224
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y
  };
  var unchecked_substract_int__3 = function() {
    var G__730226__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more)
    };
    var G__730226 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730226__delegate.call(this, x, y, more)
    };
    G__730226.cljs$lang$maxFixedArity = 2;
    G__730226.cljs$lang$applyTo = function(arglist__730227) {
      var x = cljs.core.first(arglist__730227);
      arglist__730227 = cljs.core.next(arglist__730227);
      var y = cljs.core.first(arglist__730227);
      var more = cljs.core.rest(arglist__730227);
      return G__730226__delegate(x, y, more)
    };
    G__730226.cljs$core$IFn$_invoke$arity$variadic = G__730226__delegate;
    return G__730226
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int
}();
cljs.core.fix = function fix(q) {
  if(q >= 0) {
    return Math.floor.call(null, q)
  }else {
    return Math.ceil.call(null, q)
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.booleans = function booleans(x) {
  return x
};
cljs.core.bytes = function bytes(x) {
  return x
};
cljs.core.chars = function chars(x) {
  return x
};
cljs.core.shorts = function shorts(x) {
  return x
};
cljs.core.ints = function ints(x) {
  return x
};
cljs.core.floats = function floats(x) {
  return x
};
cljs.core.doubles = function doubles(x) {
  return x
};
cljs.core.longs = function longs(x) {
  return x
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d)
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null)
  };
  var rand__1 = function(n) {
    return n * rand.call(null)
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n))
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n)
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n
};
cljs.core.bit_not = function bit_not(x) {
  return~x
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y)
  };
  var _EQ__EQ___3 = function() {
    var G__730228__delegate = function(x, y, more) {
      while(true) {
        if(_EQ__EQ_.call(null, x, y)) {
          if(cljs.core.next.call(null, more)) {
            var G__730229 = y;
            var G__730230 = cljs.core.first.call(null, more);
            var G__730231 = cljs.core.next.call(null, more);
            x = G__730229;
            y = G__730230;
            more = G__730231;
            continue
          }else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__730228 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730228__delegate.call(this, x, y, more)
    };
    G__730228.cljs$lang$maxFixedArity = 2;
    G__730228.cljs$lang$applyTo = function(arglist__730232) {
      var x = cljs.core.first(arglist__730232);
      arglist__730232 = cljs.core.next(arglist__730232);
      var y = cljs.core.first(arglist__730232);
      var more = cljs.core.rest(arglist__730232);
      return G__730228__delegate(x, y, more)
    };
    G__730228.cljs$core$IFn$_invoke$arity$variadic = G__730228__delegate;
    return G__730228
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs && n__$1 > 0) {
      var G__730233 = n__$1 - 1;
      var G__730234 = cljs.core.next.call(null, xs);
      n__$1 = G__730233;
      xs = G__730234;
      continue
    }else {
      return xs
    }
    break
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return""
  };
  var str__1 = function(x) {
    if(x == null) {
      return""
    }else {
      return x.toString()
    }
  };
  var str__2 = function() {
    var G__730235__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while(true) {
        if(cljs.core.truth_(more)) {
          var G__730236 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__730237 = cljs.core.next.call(null, more);
          sb = G__730236;
          more = G__730237;
          continue
        }else {
          return sb.toString()
        }
        break
      }
    };
    var G__730235 = function(x, var_args) {
      var ys = null;
      if(arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__730235__delegate.call(this, x, ys)
    };
    G__730235.cljs$lang$maxFixedArity = 1;
    G__730235.cljs$lang$applyTo = function(arglist__730238) {
      var x = cljs.core.first(arglist__730238);
      var ys = cljs.core.rest(arglist__730238);
      return G__730235__delegate(x, ys)
    };
    G__730235.cljs$core$IFn$_invoke$arity$variadic = G__730235__delegate;
    return G__730235
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start)
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end)
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while(true) {
      if(xs == null) {
        return ys == null
      }else {
        if(ys == null) {
          return false
        }else {
          if(cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__730239 = cljs.core.next.call(null, xs);
            var G__730240 = cljs.core.next.call(null, ys);
            xs = G__730239;
            ys = G__730240;
            continue
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false
            }else {
              return null
            }
          }
        }
      }
      break
    }
  }() : null)
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2)
};
cljs.core.hash_coll = function hash_coll(coll) {
  if(cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while(true) {
      if(s == null) {
        return res
      }else {
        var G__730241 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__730242 = cljs.core.next.call(null, s);
        res = G__730241;
        s = G__730242;
        continue
      }
      break
    }
  }else {
    return 0
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while(true) {
    if(s) {
      var e = cljs.core.first.call(null, s);
      var G__730243 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__730244 = cljs.core.next.call(null, s);
      h = G__730243;
      s = G__730244;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while(true) {
    if(s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__730245 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__730246 = cljs.core.next.call(null, s__$1);
      h = G__730245;
      s__$1 = G__730246;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__730253_730259 = cljs.core.seq.call(null, fn_map);
  var chunk__730254_730260 = null;
  var count__730255_730261 = 0;
  var i__730256_730262 = 0;
  while(true) {
    if(i__730256_730262 < count__730255_730261) {
      var vec__730257_730263 = cljs.core._nth.call(null, chunk__730254_730260, i__730256_730262);
      var key_name_730264 = cljs.core.nth.call(null, vec__730257_730263, 0, null);
      var f_730265 = cljs.core.nth.call(null, vec__730257_730263, 1, null);
      var str_name_730266 = cljs.core.name.call(null, key_name_730264);
      obj[str_name_730266] = f_730265;
      var G__730267 = seq__730253_730259;
      var G__730268 = chunk__730254_730260;
      var G__730269 = count__730255_730261;
      var G__730270 = i__730256_730262 + 1;
      seq__730253_730259 = G__730267;
      chunk__730254_730260 = G__730268;
      count__730255_730261 = G__730269;
      i__730256_730262 = G__730270;
      continue
    }else {
      var temp__4092__auto___730271 = cljs.core.seq.call(null, seq__730253_730259);
      if(temp__4092__auto___730271) {
        var seq__730253_730272__$1 = temp__4092__auto___730271;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__730253_730272__$1)) {
          var c__4009__auto___730273 = cljs.core.chunk_first.call(null, seq__730253_730272__$1);
          var G__730274 = cljs.core.chunk_rest.call(null, seq__730253_730272__$1);
          var G__730275 = c__4009__auto___730273;
          var G__730276 = cljs.core.count.call(null, c__4009__auto___730273);
          var G__730277 = 0;
          seq__730253_730259 = G__730274;
          chunk__730254_730260 = G__730275;
          count__730255_730261 = G__730276;
          i__730256_730262 = G__730277;
          continue
        }else {
          var vec__730258_730278 = cljs.core.first.call(null, seq__730253_730272__$1);
          var key_name_730279 = cljs.core.nth.call(null, vec__730258_730278, 0, null);
          var f_730280 = cljs.core.nth.call(null, vec__730258_730278, 1, null);
          var str_name_730281 = cljs.core.name.call(null, key_name_730279);
          obj[str_name_730281] = f_730280;
          var G__730282 = cljs.core.next.call(null, seq__730253_730272__$1);
          var G__730283 = null;
          var G__730284 = 0;
          var G__730285 = 0;
          seq__730253_730259 = G__730282;
          chunk__730254_730260 = G__730283;
          count__730255_730261 = G__730284;
          i__730256_730262 = G__730285;
          continue
        }
      }else {
      }
    }
    break
  }
  return obj
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/List")
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.count === 1) {
    return null
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null)
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1)
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.count === 1) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash)
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash)
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/EmptyList")
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null)
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta)
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__730287 = coll;
  if(G__730287) {
    var bit__3911__auto__ = G__730287.cljs$lang$protocol_mask$partition0$ & 134217728;
    if(bit__3911__auto__ || G__730287.cljs$core$IReversible$) {
      return true
    }else {
      if(!G__730287.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__730287)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__730287)
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll)
};
cljs.core.reverse = function reverse(coll) {
  if(cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll)
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while(true) {
        if(!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__730288 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__730288;
          continue
        }else {
          return arr
        }
        break
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while(true) {
      if(i > 0) {
        var G__730289 = i - 1;
        var G__730290 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__730289;
        r = G__730290;
        continue
      }else {
        return r
      }
      break
    }
  };
  var list = function(var_args) {
    var xs = null;
    if(arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return list__delegate.call(this, xs)
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__730291) {
    var xs = cljs.core.seq(arglist__730291);
    return list__delegate(xs)
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Cons")
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.rest == null) {
    return null
  }else {
    return cljs.core.seq.call(null, self__.rest)
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash)
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.rest == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash)
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash)
};
cljs.core.cons = function cons(x, coll) {
  if(function() {
    var or__3285__auto__ = coll == null;
    if(or__3285__auto__) {
      return or__3285__auto__
    }else {
      var G__730295 = coll;
      if(G__730295) {
        var bit__3904__auto__ = G__730295.cljs$lang$protocol_mask$partition0$ & 64;
        if(bit__3904__auto__ || G__730295.cljs$core$ISeq$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null)
  }else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null)
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__730297 = x;
  if(G__730297) {
    var bit__3911__auto__ = G__730297.cljs$lang$protocol_mask$partition0$ & 33554432;
    if(bit__3911__auto__ || G__730297.cljs$core$IList$) {
      return true
    }else {
      if(!G__730297.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__730297)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__730297)
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Keyword")
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""))
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if(self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash
  }else {
    return self__._hash
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__730299 = null;
  var G__730299__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw)
  };
  var G__730299__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found)
  };
  G__730299 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730299__2.call(this, self__, coll);
      case 3:
        return G__730299__3.call(this, self__, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730299
}();
cljs.core.Keyword.prototype.apply = function(self__, args730298) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730298)))
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw)
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found)
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if(other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn
  }else {
    return false
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("")
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash)
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if(x === y) {
    return true
  }else {
    if(x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn
    }else {
      return false
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if(function() {
    var G__730301 = x;
    if(G__730301) {
      var bit__3904__auto__ = G__730301.cljs$lang$protocol_mask$partition1$ & 4096;
      if(bit__3904__auto__ || G__730301.cljs$core$INamed$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._namespace.call(null, x)
  }else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if(name instanceof cljs.core.Keyword) {
      return name
    }else {
      if(name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null)
      }else {
        if(typeof name === "string") {
          var parts = name.split("/");
          if(parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null)
          }else {
            return new cljs.core.Keyword(null, parts[0], name, null)
          }
        }else {
          return null
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null)
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/LazySeq")
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(self__.s == null) {
    return null
  }else {
    return cljs.core.next.call(null, self__.s)
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if(self__.fn == null) {
    return self__.s
  }else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if(self__.s == null) {
    return null
  }else {
    var ls = self__.s;
    while(true) {
      if(ls instanceof cljs.core.LazySeq) {
        var G__730302 = ls.sval();
        ls = G__730302;
        continue
      }else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s)
      }
      break
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(self__.s == null) {
    return null
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if(!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash)
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash)
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end)
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0)
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1)
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off)
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  }else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end)
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i]
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i]
  }else {
    return not_found
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end)
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length)
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length)
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end)
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if(more__$1 == null) {
      return null
    }else {
      return more__$1
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1)
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    if(self__.more == null) {
      return cljs.core.List.EMPTY
    }else {
      return self__.more
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.more == null) {
    return null
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash)
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.more == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.more
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash)
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if(cljs.core._count.call(null, chunk) === 0) {
    return rest
  }else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null)
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x)
};
cljs.core.chunk = function chunk(b) {
  return b.chunk()
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s)
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s)
};
cljs.core.chunk_next = function chunk_next(s) {
  if(function() {
    var G__730304 = s;
    if(G__730304) {
      var bit__3904__auto__ = G__730304.cljs$lang$protocol_mask$partition1$ & 1024;
      if(bit__3904__auto__ || G__730304.cljs$core$IChunkedNext$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._chunked_next.call(null, s)
  }else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s))
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__730305 = cljs.core.next.call(null, s__$1);
      s__$1 = G__730305;
      continue
    }else {
      return ary
    }
    break
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_730306 = 0;
  var xs_730307 = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs_730307) {
      ret[i_730306] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_730307));
      var G__730308 = i_730306 + 1;
      var G__730309 = cljs.core.next.call(null, xs_730307);
      i_730306 = G__730308;
      xs_730307 = G__730309;
      continue
    }else {
    }
    break
  }
  return ret
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__730310 = i + 1;
          var G__730311 = cljs.core.next.call(null, s__$1);
          i = G__730310;
          s__$1 = G__730311;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4108__auto___730312 = size;
      var i_730313 = 0;
      while(true) {
        if(i_730313 < n__4108__auto___730312) {
          a[i_730313] = init_val_or_seq;
          var G__730314 = i_730313 + 1;
          i_730313 = G__730314;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__730315 = i + 1;
          var G__730316 = cljs.core.next.call(null, s__$1);
          i = G__730315;
          s__$1 = G__730316;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4108__auto___730317 = size;
      var i_730318 = 0;
      while(true) {
        if(i_730318 < n__4108__auto___730317) {
          a[i_730318] = init_val_or_seq;
          var G__730319 = i_730318 + 1;
          i_730318 = G__730319;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__730320 = i + 1;
          var G__730321 = cljs.core.next.call(null, s__$1);
          i = G__730320;
          s__$1 = G__730321;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4108__auto___730322 = size;
      var i_730323 = 0;
      while(true) {
        if(i_730323 < n__4108__auto___730322) {
          a[i_730323] = init_val_or_seq;
          var G__730324 = i_730323 + 1;
          i_730323 = G__730324;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if(typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null)
    }else {
      return cljs.core.into_array.call(null, size_or_seq)
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__730325 = i + 1;
          var G__730326 = cljs.core.next.call(null, s__$1);
          i = G__730325;
          s__$1 = G__730326;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__4108__auto___730327 = size;
      var i_730328 = 0;
      while(true) {
        if(i_730328 < n__4108__auto___730327) {
          a[i_730328] = init_val_or_seq;
          var G__730329 = i_730328 + 1;
          i_730328 = G__730329;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if(cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s)
  }else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while(true) {
      if(i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__730330 = cljs.core.next.call(null, s__$1);
        var G__730331 = i - 1;
        var G__730332 = sum + 1;
        s__$1 = G__730330;
        i = G__730331;
        sum = G__730332;
        continue
      }else {
        return sum
      }
      break
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if(arglist == null) {
    return null
  }else {
    if(cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist))
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)))
      }else {
        return null
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null
    }, null, null)
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x
    }, null, null)
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if(s) {
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y))
        }else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y))
        }
      }else {
        return y
      }
    }, null, null)
  };
  var concat__3 = function() {
    var G__730333__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if(xys__$1) {
            if(cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1))
            }else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1))
            }
          }else {
            if(cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1))
            }else {
              return null
            }
          }
        }, null, null)
      };
      return cat.call(null, concat.call(null, x, y), zs)
    };
    var G__730333 = function(x, y, var_args) {
      var zs = null;
      if(arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730333__delegate.call(this, x, y, zs)
    };
    G__730333.cljs$lang$maxFixedArity = 2;
    G__730333.cljs$lang$applyTo = function(arglist__730334) {
      var x = cljs.core.first(arglist__730334);
      arglist__730334 = cljs.core.next(arglist__730334);
      var y = cljs.core.first(arglist__730334);
      var zs = cljs.core.rest(arglist__730334);
      return G__730333__delegate(x, y, zs)
    };
    G__730333.cljs$core$IFn$_invoke$arity$variadic = G__730333__delegate;
    return G__730333
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args)
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args)
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args))
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)))
  };
  var list_STAR___5 = function() {
    var G__730335__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))))
    };
    var G__730335 = function(a, b, c, d, var_args) {
      var more = null;
      if(arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__730335__delegate.call(this, a, b, c, d, more)
    };
    G__730335.cljs$lang$maxFixedArity = 4;
    G__730335.cljs$lang$applyTo = function(arglist__730336) {
      var a = cljs.core.first(arglist__730336);
      arglist__730336 = cljs.core.next(arglist__730336);
      var b = cljs.core.first(arglist__730336);
      arglist__730336 = cljs.core.next(arglist__730336);
      var c = cljs.core.first(arglist__730336);
      arglist__730336 = cljs.core.next(arglist__730336);
      var d = cljs.core.first(arglist__730336);
      var more = cljs.core.rest(arglist__730336);
      return G__730335__delegate(a, b, c, d, more)
    };
    G__730335.cljs$core$IFn$_invoke$arity$variadic = G__730335__delegate;
    return G__730335
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll)
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll)
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val)
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val)
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key)
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll)
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val)
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if(argc === 0) {
    return f.call(null)
  }else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if(argc === 1) {
      if(f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a)
      }else {
        return f.call(null, a)
      }
    }else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if(argc === 2) {
        if(f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b)
        }else {
          return f.call(null, a, b)
        }
      }else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if(argc === 3) {
          if(f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c)
          }else {
            return f.call(null, a, b, c)
          }
        }else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if(argc === 4) {
            if(f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d)
            }else {
              return f.call(null, a, b, c, d)
            }
          }else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if(argc === 5) {
              if(f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e)
              }else {
                return f.call(null, a, b, c, d, e)
              }
            }else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if(argc === 6) {
                if(f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1)
                }else {
                  return f__$1.call(null, a, b, c, d, e, f__$1)
                }
              }else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if(argc === 7) {
                  if(f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g)
                  }else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g)
                  }
                }else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if(argc === 8) {
                    if(f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h)
                    }else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h)
                    }
                  }else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if(argc === 9) {
                      if(f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i)
                      }else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i)
                      }
                    }else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if(argc === 10) {
                        if(f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j)
                        }else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j)
                        }
                      }else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if(argc === 11) {
                          if(f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k)
                          }else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k)
                          }
                        }else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if(argc === 12) {
                            if(f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }
                          }else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if(argc === 13) {
                              if(f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }
                            }else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if(argc === 14) {
                                if(f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }
                              }else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if(argc === 15) {
                                  if(f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }
                                }else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if(argc === 16) {
                                    if(f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }
                                  }else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if(argc === 17) {
                                      if(f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }
                                    }else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if(argc === 18) {
                                        if(f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }
                                      }else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if(argc === 19) {
                                          if(f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }
                                        }else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if(argc === 20) {
                                            if(f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }
                                          }else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args)
      }else {
        return f.cljs$lang$applyTo(args)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, args))
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__6 = function() {
    var G__730337__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if(f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if(bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist)
        }else {
          return f.cljs$lang$applyTo(arglist)
        }
      }else {
        return f.apply(f, cljs.core.to_array.call(null, arglist))
      }
    };
    var G__730337 = function(f, a, b, c, d, var_args) {
      var args = null;
      if(arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__730337__delegate.call(this, f, a, b, c, d, args)
    };
    G__730337.cljs$lang$maxFixedArity = 5;
    G__730337.cljs$lang$applyTo = function(arglist__730338) {
      var f = cljs.core.first(arglist__730338);
      arglist__730338 = cljs.core.next(arglist__730338);
      var a = cljs.core.first(arglist__730338);
      arglist__730338 = cljs.core.next(arglist__730338);
      var b = cljs.core.first(arglist__730338);
      arglist__730338 = cljs.core.next(arglist__730338);
      var c = cljs.core.first(arglist__730338);
      arglist__730338 = cljs.core.next(arglist__730338);
      var d = cljs.core.first(arglist__730338);
      var args = cljs.core.rest(arglist__730338);
      return G__730337__delegate(f, a, b, c, d, args)
    };
    G__730337.cljs$core$IFn$_invoke$arity$variadic = G__730337__delegate;
    return G__730337
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply
}();
cljs.core.vary_meta = function() {
  var vary_meta__delegate = function(obj, f, args) {
    return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), args))
  };
  var vary_meta = function(obj, f, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return vary_meta__delegate.call(this, obj, f, args)
  };
  vary_meta.cljs$lang$maxFixedArity = 2;
  vary_meta.cljs$lang$applyTo = function(arglist__730339) {
    var obj = cljs.core.first(arglist__730339);
    arglist__730339 = cljs.core.next(arglist__730339);
    var f = cljs.core.first(arglist__730339);
    var args = cljs.core.rest(arglist__730339);
    return vary_meta__delegate(obj, f, args)
  };
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__delegate;
  return vary_meta
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var not_EQ___3 = function() {
    var G__730340__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more))
    };
    var G__730340 = function(x, y, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730340__delegate.call(this, x, y, more)
    };
    G__730340.cljs$lang$maxFixedArity = 2;
    G__730340.cljs$lang$applyTo = function(arglist__730341) {
      var x = cljs.core.first(arglist__730341);
      arglist__730341 = cljs.core.next(arglist__730341);
      var y = cljs.core.first(arglist__730341);
      var more = cljs.core.rest(arglist__730341);
      return G__730340__delegate(x, y, more)
    };
    G__730340.cljs$core$IFn$_invoke$arity$variadic = G__730340__delegate;
    return G__730340
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_
}();
cljs.core.not_empty = function not_empty(coll) {
  if(cljs.core.seq.call(null, coll)) {
    return coll
  }else {
    return null
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll) == null) {
      return true
    }else {
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__730342 = pred;
        var G__730343 = cljs.core.next.call(null, coll);
        pred = G__730342;
        coll = G__730343;
        continue
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll)
};
cljs.core.some = function some(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll)) {
      var or__3285__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if(cljs.core.truth_(or__3285__auto__)) {
        return or__3285__auto__
      }else {
        var G__730344 = pred;
        var G__730345 = cljs.core.next.call(null, coll);
        pred = G__730344;
        coll = G__730345;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll))
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if(cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0
  }else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n)
};
cljs.core.identity = function identity(x) {
  return x
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__730346 = null;
    var G__730346__0 = function() {
      return cljs.core.not.call(null, f.call(null))
    };
    var G__730346__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x))
    };
    var G__730346__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y))
    };
    var G__730346__3 = function() {
      var G__730347__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs))
      };
      var G__730347 = function(x, y, var_args) {
        var zs = null;
        if(arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
        }
        return G__730347__delegate.call(this, x, y, zs)
      };
      G__730347.cljs$lang$maxFixedArity = 2;
      G__730347.cljs$lang$applyTo = function(arglist__730348) {
        var x = cljs.core.first(arglist__730348);
        arglist__730348 = cljs.core.next(arglist__730348);
        var y = cljs.core.first(arglist__730348);
        var zs = cljs.core.rest(arglist__730348);
        return G__730347__delegate(x, y, zs)
      };
      G__730347.cljs$core$IFn$_invoke$arity$variadic = G__730347__delegate;
      return G__730347
    }();
    G__730346 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__730346__0.call(this);
        case 1:
          return G__730346__1.call(this, x);
        case 2:
          return G__730346__2.call(this, x, y);
        default:
          return G__730346__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__730346.cljs$lang$maxFixedArity = 2;
    G__730346.cljs$lang$applyTo = G__730346__3.cljs$lang$applyTo;
    return G__730346
  }()
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__730349__delegate = function(args) {
      return x
    };
    var G__730349 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__730349__delegate.call(this, args)
    };
    G__730349.cljs$lang$maxFixedArity = 0;
    G__730349.cljs$lang$applyTo = function(arglist__730350) {
      var args = cljs.core.seq(arglist__730350);
      return G__730349__delegate(args)
    };
    G__730349.cljs$core$IFn$_invoke$arity$variadic = G__730349__delegate;
    return G__730349
  }()
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity
  };
  var comp__1 = function(f) {
    return f
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__730351 = null;
      var G__730351__0 = function() {
        return f.call(null, g.call(null))
      };
      var G__730351__1 = function(x) {
        return f.call(null, g.call(null, x))
      };
      var G__730351__2 = function(x, y) {
        return f.call(null, g.call(null, x, y))
      };
      var G__730351__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z))
      };
      var G__730351__4 = function() {
        var G__730352__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__730352 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730352__delegate.call(this, x, y, z, args)
        };
        G__730352.cljs$lang$maxFixedArity = 3;
        G__730352.cljs$lang$applyTo = function(arglist__730353) {
          var x = cljs.core.first(arglist__730353);
          arglist__730353 = cljs.core.next(arglist__730353);
          var y = cljs.core.first(arglist__730353);
          arglist__730353 = cljs.core.next(arglist__730353);
          var z = cljs.core.first(arglist__730353);
          var args = cljs.core.rest(arglist__730353);
          return G__730352__delegate(x, y, z, args)
        };
        G__730352.cljs$core$IFn$_invoke$arity$variadic = G__730352__delegate;
        return G__730352
      }();
      G__730351 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__730351__0.call(this);
          case 1:
            return G__730351__1.call(this, x);
          case 2:
            return G__730351__2.call(this, x, y);
          case 3:
            return G__730351__3.call(this, x, y, z);
          default:
            return G__730351__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__730351.cljs$lang$maxFixedArity = 3;
      G__730351.cljs$lang$applyTo = G__730351__4.cljs$lang$applyTo;
      return G__730351
    }()
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__730354 = null;
      var G__730354__0 = function() {
        return f.call(null, g.call(null, h.call(null)))
      };
      var G__730354__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)))
      };
      var G__730354__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)))
      };
      var G__730354__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)))
      };
      var G__730354__4 = function() {
        var G__730355__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)))
        };
        var G__730355 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730355__delegate.call(this, x, y, z, args)
        };
        G__730355.cljs$lang$maxFixedArity = 3;
        G__730355.cljs$lang$applyTo = function(arglist__730356) {
          var x = cljs.core.first(arglist__730356);
          arglist__730356 = cljs.core.next(arglist__730356);
          var y = cljs.core.first(arglist__730356);
          arglist__730356 = cljs.core.next(arglist__730356);
          var z = cljs.core.first(arglist__730356);
          var args = cljs.core.rest(arglist__730356);
          return G__730355__delegate(x, y, z, args)
        };
        G__730355.cljs$core$IFn$_invoke$arity$variadic = G__730355__delegate;
        return G__730355
      }();
      G__730354 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__730354__0.call(this);
          case 1:
            return G__730354__1.call(this, x);
          case 2:
            return G__730354__2.call(this, x, y);
          case 3:
            return G__730354__3.call(this, x, y, z);
          default:
            return G__730354__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__730354.cljs$lang$maxFixedArity = 3;
      G__730354.cljs$lang$applyTo = G__730354__4.cljs$lang$applyTo;
      return G__730354
    }()
  };
  var comp__4 = function() {
    var G__730357__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__730358__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while(true) {
            if(fs__$2) {
              var G__730359 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__730360 = cljs.core.next.call(null, fs__$2);
              ret = G__730359;
              fs__$2 = G__730360;
              continue
            }else {
              return ret
            }
            break
          }
        };
        var G__730358 = function(var_args) {
          var args = null;
          if(arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__730358__delegate.call(this, args)
        };
        G__730358.cljs$lang$maxFixedArity = 0;
        G__730358.cljs$lang$applyTo = function(arglist__730361) {
          var args = cljs.core.seq(arglist__730361);
          return G__730358__delegate(args)
        };
        G__730358.cljs$core$IFn$_invoke$arity$variadic = G__730358__delegate;
        return G__730358
      }()
    };
    var G__730357 = function(f1, f2, f3, var_args) {
      var fs = null;
      if(arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__730357__delegate.call(this, f1, f2, f3, fs)
    };
    G__730357.cljs$lang$maxFixedArity = 3;
    G__730357.cljs$lang$applyTo = function(arglist__730362) {
      var f1 = cljs.core.first(arglist__730362);
      arglist__730362 = cljs.core.next(arglist__730362);
      var f2 = cljs.core.first(arglist__730362);
      arglist__730362 = cljs.core.next(arglist__730362);
      var f3 = cljs.core.first(arglist__730362);
      var fs = cljs.core.rest(arglist__730362);
      return G__730357__delegate(f1, f2, f3, fs)
    };
    G__730357.cljs$core$IFn$_invoke$arity$variadic = G__730357__delegate;
    return G__730357
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__730363__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args)
      };
      var G__730363 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__730363__delegate.call(this, args)
      };
      G__730363.cljs$lang$maxFixedArity = 0;
      G__730363.cljs$lang$applyTo = function(arglist__730364) {
        var args = cljs.core.seq(arglist__730364);
        return G__730363__delegate(args)
      };
      G__730363.cljs$core$IFn$_invoke$arity$variadic = G__730363__delegate;
      return G__730363
    }()
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__730365__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args)
      };
      var G__730365 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__730365__delegate.call(this, args)
      };
      G__730365.cljs$lang$maxFixedArity = 0;
      G__730365.cljs$lang$applyTo = function(arglist__730366) {
        var args = cljs.core.seq(arglist__730366);
        return G__730365__delegate(args)
      };
      G__730365.cljs$core$IFn$_invoke$arity$variadic = G__730365__delegate;
      return G__730365
    }()
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__730367__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args)
      };
      var G__730367 = function(var_args) {
        var args = null;
        if(arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__730367__delegate.call(this, args)
      };
      G__730367.cljs$lang$maxFixedArity = 0;
      G__730367.cljs$lang$applyTo = function(arglist__730368) {
        var args = cljs.core.seq(arglist__730368);
        return G__730367__delegate(args)
      };
      G__730367.cljs$core$IFn$_invoke$arity$variadic = G__730367__delegate;
      return G__730367
    }()
  };
  var partial__5 = function() {
    var G__730369__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__730370__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args))
        };
        var G__730370 = function(var_args) {
          var args = null;
          if(arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__730370__delegate.call(this, args)
        };
        G__730370.cljs$lang$maxFixedArity = 0;
        G__730370.cljs$lang$applyTo = function(arglist__730371) {
          var args = cljs.core.seq(arglist__730371);
          return G__730370__delegate(args)
        };
        G__730370.cljs$core$IFn$_invoke$arity$variadic = G__730370__delegate;
        return G__730370
      }()
    };
    var G__730369 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if(arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__730369__delegate.call(this, f, arg1, arg2, arg3, more)
    };
    G__730369.cljs$lang$maxFixedArity = 4;
    G__730369.cljs$lang$applyTo = function(arglist__730372) {
      var f = cljs.core.first(arglist__730372);
      arglist__730372 = cljs.core.next(arglist__730372);
      var arg1 = cljs.core.first(arglist__730372);
      arglist__730372 = cljs.core.next(arglist__730372);
      var arg2 = cljs.core.first(arglist__730372);
      arglist__730372 = cljs.core.next(arglist__730372);
      var arg3 = cljs.core.first(arglist__730372);
      var more = cljs.core.rest(arglist__730372);
      return G__730369__delegate(f, arg1, arg2, arg3, more)
    };
    G__730369.cljs$core$IFn$_invoke$arity$variadic = G__730369__delegate;
    return G__730369
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__730373 = null;
      var G__730373__1 = function(a) {
        return f.call(null, a == null ? x : a)
      };
      var G__730373__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b)
      };
      var G__730373__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c)
      };
      var G__730373__4 = function() {
        var G__730374__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds)
        };
        var G__730374 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730374__delegate.call(this, a, b, c, ds)
        };
        G__730374.cljs$lang$maxFixedArity = 3;
        G__730374.cljs$lang$applyTo = function(arglist__730375) {
          var a = cljs.core.first(arglist__730375);
          arglist__730375 = cljs.core.next(arglist__730375);
          var b = cljs.core.first(arglist__730375);
          arglist__730375 = cljs.core.next(arglist__730375);
          var c = cljs.core.first(arglist__730375);
          var ds = cljs.core.rest(arglist__730375);
          return G__730374__delegate(a, b, c, ds)
        };
        G__730374.cljs$core$IFn$_invoke$arity$variadic = G__730374__delegate;
        return G__730374
      }();
      G__730373 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__730373__1.call(this, a);
          case 2:
            return G__730373__2.call(this, a, b);
          case 3:
            return G__730373__3.call(this, a, b, c);
          default:
            return G__730373__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__730373.cljs$lang$maxFixedArity = 3;
      G__730373.cljs$lang$applyTo = G__730373__4.cljs$lang$applyTo;
      return G__730373
    }()
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__730376 = null;
      var G__730376__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__730376__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c)
      };
      var G__730376__4 = function() {
        var G__730377__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds)
        };
        var G__730377 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730377__delegate.call(this, a, b, c, ds)
        };
        G__730377.cljs$lang$maxFixedArity = 3;
        G__730377.cljs$lang$applyTo = function(arglist__730378) {
          var a = cljs.core.first(arglist__730378);
          arglist__730378 = cljs.core.next(arglist__730378);
          var b = cljs.core.first(arglist__730378);
          arglist__730378 = cljs.core.next(arglist__730378);
          var c = cljs.core.first(arglist__730378);
          var ds = cljs.core.rest(arglist__730378);
          return G__730377__delegate(a, b, c, ds)
        };
        G__730377.cljs$core$IFn$_invoke$arity$variadic = G__730377__delegate;
        return G__730377
      }();
      G__730376 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__730376__2.call(this, a, b);
          case 3:
            return G__730376__3.call(this, a, b, c);
          default:
            return G__730376__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__730376.cljs$lang$maxFixedArity = 3;
      G__730376.cljs$lang$applyTo = G__730376__4.cljs$lang$applyTo;
      return G__730376
    }()
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__730379 = null;
      var G__730379__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__730379__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c)
      };
      var G__730379__4 = function() {
        var G__730380__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds)
        };
        var G__730380 = function(a, b, c, var_args) {
          var ds = null;
          if(arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730380__delegate.call(this, a, b, c, ds)
        };
        G__730380.cljs$lang$maxFixedArity = 3;
        G__730380.cljs$lang$applyTo = function(arglist__730381) {
          var a = cljs.core.first(arglist__730381);
          arglist__730381 = cljs.core.next(arglist__730381);
          var b = cljs.core.first(arglist__730381);
          arglist__730381 = cljs.core.next(arglist__730381);
          var c = cljs.core.first(arglist__730381);
          var ds = cljs.core.rest(arglist__730381);
          return G__730380__delegate(a, b, c, ds)
        };
        G__730380.cljs$core$IFn$_invoke$arity$variadic = G__730380__delegate;
        return G__730380
      }();
      G__730379 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__730379__2.call(this, a, b);
          case 3:
            return G__730379__3.call(this, a, b, c);
          default:
            return G__730379__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__730379.cljs$lang$maxFixedArity = 3;
      G__730379.cljs$lang$applyTo = G__730379__4.cljs$lang$applyTo;
      return G__730379
    }()
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4108__auto___730382 = size;
          var i_730383 = 0;
          while(true) {
            if(i_730383 < n__4108__auto___730382) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_730383, cljs.core._nth.call(null, c, i_730383)));
              var G__730384 = i_730383 + 1;
              i_730383 = G__730384;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  return mapi.call(null, 0, coll)
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4108__auto___730385 = size;
        var i_730386 = 0;
        while(true) {
          if(i_730386 < n__4108__auto___730385) {
            var x_730387 = f.call(null, cljs.core._nth.call(null, c, i_730386));
            if(x_730387 == null) {
            }else {
              cljs.core.chunk_append.call(null, b, x_730387)
            }
            var G__730388 = i_730386 + 1;
            i_730386 = G__730388;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)))
      }else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if(x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s))
        }else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)))
        }
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4108__auto___730389 = size;
          var i_730390 = 0;
          while(true) {
            if(i_730390 < n__4108__auto___730389) {
              var x_730391 = f.call(null, idx + i_730390, cljs.core._nth.call(null, c, i_730390));
              if(x_730391 == null) {
              }else {
                cljs.core.chunk_append.call(null, b, x_730391)
              }
              var G__730392 = i_730390 + 1;
              i_730390 = G__730392;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if(x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s))
          }else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)))
          }
        }
      }else {
        return null
      }
    }, null, null)
  };
  return keepi.call(null, 0, coll)
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x))
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            return p.call(null, y)
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p.call(null, y);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              return p.call(null, z)
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep1__4 = function() {
        var G__730399__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args))
        };
        var G__730399 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730399__delegate.call(this, x, y, z, args)
        };
        G__730399.cljs$lang$maxFixedArity = 3;
        G__730399.cljs$lang$applyTo = function(arglist__730400) {
          var x = cljs.core.first(arglist__730400);
          arglist__730400 = cljs.core.next(arglist__730400);
          var y = cljs.core.first(arglist__730400);
          arglist__730400 = cljs.core.next(arglist__730400);
          var z = cljs.core.first(arglist__730400);
          var args = cljs.core.rest(arglist__730400);
          return G__730399__delegate(x, y, z, args)
        };
        G__730399.cljs$core$IFn$_invoke$arity$variadic = G__730399__delegate;
        return G__730399
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1
    }()
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            return p2.call(null, x)
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              var and__3273__auto____$2 = p2.call(null, x);
              if(cljs.core.truth_(and__3273__auto____$2)) {
                return p2.call(null, y)
              }else {
                return and__3273__auto____$2
              }
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              var and__3273__auto____$2 = p1.call(null, z);
              if(cljs.core.truth_(and__3273__auto____$2)) {
                var and__3273__auto____$3 = p2.call(null, x);
                if(cljs.core.truth_(and__3273__auto____$3)) {
                  var and__3273__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3273__auto____$4)) {
                    return p2.call(null, z)
                  }else {
                    return and__3273__auto____$4
                  }
                }else {
                  return and__3273__auto____$3
                }
              }else {
                return and__3273__auto____$2
              }
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep2__4 = function() {
        var G__730401__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__730393_SHARP_) {
            var and__3273__auto__ = p1.call(null, p1__730393_SHARP_);
            if(cljs.core.truth_(and__3273__auto__)) {
              return p2.call(null, p1__730393_SHARP_)
            }else {
              return and__3273__auto__
            }
          }, args))
        };
        var G__730401 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730401__delegate.call(this, x, y, z, args)
        };
        G__730401.cljs$lang$maxFixedArity = 3;
        G__730401.cljs$lang$applyTo = function(arglist__730402) {
          var x = cljs.core.first(arglist__730402);
          arglist__730402 = cljs.core.next(arglist__730402);
          var y = cljs.core.first(arglist__730402);
          arglist__730402 = cljs.core.next(arglist__730402);
          var z = cljs.core.first(arglist__730402);
          var args = cljs.core.rest(arglist__730402);
          return G__730401__delegate(x, y, z, args)
        };
        G__730401.cljs$core$IFn$_invoke$arity$variadic = G__730401__delegate;
        return G__730401
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2
    }()
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              return p3.call(null, x)
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              var and__3273__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3273__auto____$2)) {
                var and__3273__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3273__auto____$3)) {
                  var and__3273__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3273__auto____$4)) {
                    return p3.call(null, y)
                  }else {
                    return and__3273__auto____$4
                  }
                }else {
                  return and__3273__auto____$3
                }
              }else {
                return and__3273__auto____$2
              }
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3273__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3273__auto____$1)) {
              var and__3273__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3273__auto____$2)) {
                var and__3273__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3273__auto____$3)) {
                  var and__3273__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3273__auto____$4)) {
                    var and__3273__auto____$5 = p3.call(null, y);
                    if(cljs.core.truth_(and__3273__auto____$5)) {
                      var and__3273__auto____$6 = p1.call(null, z);
                      if(cljs.core.truth_(and__3273__auto____$6)) {
                        var and__3273__auto____$7 = p2.call(null, z);
                        if(cljs.core.truth_(and__3273__auto____$7)) {
                          return p3.call(null, z)
                        }else {
                          return and__3273__auto____$7
                        }
                      }else {
                        return and__3273__auto____$6
                      }
                    }else {
                      return and__3273__auto____$5
                    }
                  }else {
                    return and__3273__auto____$4
                  }
                }else {
                  return and__3273__auto____$3
                }
              }else {
                return and__3273__auto____$2
              }
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())
      };
      var ep3__4 = function() {
        var G__730403__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__730394_SHARP_) {
            var and__3273__auto__ = p1.call(null, p1__730394_SHARP_);
            if(cljs.core.truth_(and__3273__auto__)) {
              var and__3273__auto____$1 = p2.call(null, p1__730394_SHARP_);
              if(cljs.core.truth_(and__3273__auto____$1)) {
                return p3.call(null, p1__730394_SHARP_)
              }else {
                return and__3273__auto____$1
              }
            }else {
              return and__3273__auto__
            }
          }, args))
        };
        var G__730403 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730403__delegate.call(this, x, y, z, args)
        };
        G__730403.cljs$lang$maxFixedArity = 3;
        G__730403.cljs$lang$applyTo = function(arglist__730404) {
          var x = cljs.core.first(arglist__730404);
          arglist__730404 = cljs.core.next(arglist__730404);
          var y = cljs.core.first(arglist__730404);
          arglist__730404 = cljs.core.next(arglist__730404);
          var z = cljs.core.first(arglist__730404);
          var args = cljs.core.rest(arglist__730404);
          return G__730403__delegate(x, y, z, args)
        };
        G__730403.cljs$core$IFn$_invoke$arity$variadic = G__730403__delegate;
        return G__730403
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3
    }()
  };
  var every_pred__4 = function() {
    var G__730405__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__730395_SHARP_) {
            return p1__730395_SHARP_.call(null, x)
          }, ps__$1)
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__730396_SHARP_) {
            var and__3273__auto__ = p1__730396_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3273__auto__)) {
              return p1__730396_SHARP_.call(null, y)
            }else {
              return and__3273__auto__
            }
          }, ps__$1)
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__730397_SHARP_) {
            var and__3273__auto__ = p1__730397_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3273__auto__)) {
              var and__3273__auto____$1 = p1__730397_SHARP_.call(null, y);
              if(cljs.core.truth_(and__3273__auto____$1)) {
                return p1__730397_SHARP_.call(null, z)
              }else {
                return and__3273__auto____$1
              }
            }else {
              return and__3273__auto__
            }
          }, ps__$1)
        };
        var epn__4 = function() {
          var G__730406__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__730398_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__730398_SHARP_, args)
            }, ps__$1))
          };
          var G__730406 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__730406__delegate.call(this, x, y, z, args)
          };
          G__730406.cljs$lang$maxFixedArity = 3;
          G__730406.cljs$lang$applyTo = function(arglist__730407) {
            var x = cljs.core.first(arglist__730407);
            arglist__730407 = cljs.core.next(arglist__730407);
            var y = cljs.core.first(arglist__730407);
            arglist__730407 = cljs.core.next(arglist__730407);
            var z = cljs.core.first(arglist__730407);
            var args = cljs.core.rest(arglist__730407);
            return G__730406__delegate(x, y, z, args)
          };
          G__730406.cljs$core$IFn$_invoke$arity$variadic = G__730406__delegate;
          return G__730406
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn
      }()
    };
    var G__730405 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__730405__delegate.call(this, p1, p2, p3, ps)
    };
    G__730405.cljs$lang$maxFixedArity = 3;
    G__730405.cljs$lang$applyTo = function(arglist__730408) {
      var p1 = cljs.core.first(arglist__730408);
      arglist__730408 = cljs.core.next(arglist__730408);
      var p2 = cljs.core.first(arglist__730408);
      arglist__730408 = cljs.core.next(arglist__730408);
      var p3 = cljs.core.first(arglist__730408);
      var ps = cljs.core.rest(arglist__730408);
      return G__730405__delegate(p1, p2, p3, ps)
    };
    G__730405.cljs$core$IFn$_invoke$arity$variadic = G__730405__delegate;
    return G__730405
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null
      };
      var sp1__1 = function(x) {
        return p.call(null, x)
      };
      var sp1__2 = function(x, y) {
        var or__3285__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          return p.call(null, y)
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3285__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p.call(null, y);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            return p.call(null, z)
          }
        }
      };
      var sp1__4 = function() {
        var G__730415__delegate = function(x, y, z, args) {
          var or__3285__auto__ = sp1.call(null, x, y, z);
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return cljs.core.some.call(null, p, args)
          }
        };
        var G__730415 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730415__delegate.call(this, x, y, z, args)
        };
        G__730415.cljs$lang$maxFixedArity = 3;
        G__730415.cljs$lang$applyTo = function(arglist__730416) {
          var x = cljs.core.first(arglist__730416);
          arglist__730416 = cljs.core.next(arglist__730416);
          var y = cljs.core.first(arglist__730416);
          arglist__730416 = cljs.core.next(arglist__730416);
          var z = cljs.core.first(arglist__730416);
          var args = cljs.core.rest(arglist__730416);
          return G__730415__delegate(x, y, z, args)
        };
        G__730415.cljs$core$IFn$_invoke$arity$variadic = G__730415__delegate;
        return G__730415
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1
    }()
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null
      };
      var sp2__1 = function(x) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          return p2.call(null, x)
        }
      };
      var sp2__2 = function(x, y) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            var or__3285__auto____$2 = p2.call(null, x);
            if(cljs.core.truth_(or__3285__auto____$2)) {
              return or__3285__auto____$2
            }else {
              return p2.call(null, y)
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            var or__3285__auto____$2 = p1.call(null, z);
            if(cljs.core.truth_(or__3285__auto____$2)) {
              return or__3285__auto____$2
            }else {
              var or__3285__auto____$3 = p2.call(null, x);
              if(cljs.core.truth_(or__3285__auto____$3)) {
                return or__3285__auto____$3
              }else {
                var or__3285__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3285__auto____$4)) {
                  return or__3285__auto____$4
                }else {
                  return p2.call(null, z)
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__730417__delegate = function(x, y, z, args) {
          var or__3285__auto__ = sp2.call(null, x, y, z);
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return cljs.core.some.call(null, function(p1__730409_SHARP_) {
              var or__3285__auto____$1 = p1.call(null, p1__730409_SHARP_);
              if(cljs.core.truth_(or__3285__auto____$1)) {
                return or__3285__auto____$1
              }else {
                return p2.call(null, p1__730409_SHARP_)
              }
            }, args)
          }
        };
        var G__730417 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730417__delegate.call(this, x, y, z, args)
        };
        G__730417.cljs$lang$maxFixedArity = 3;
        G__730417.cljs$lang$applyTo = function(arglist__730418) {
          var x = cljs.core.first(arglist__730418);
          arglist__730418 = cljs.core.next(arglist__730418);
          var y = cljs.core.first(arglist__730418);
          arglist__730418 = cljs.core.next(arglist__730418);
          var z = cljs.core.first(arglist__730418);
          var args = cljs.core.rest(arglist__730418);
          return G__730417__delegate(x, y, z, args)
        };
        G__730417.cljs$core$IFn$_invoke$arity$variadic = G__730417__delegate;
        return G__730417
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2
    }()
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null
      };
      var sp3__1 = function(x) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            return p3.call(null, x)
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            var or__3285__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3285__auto____$2)) {
              return or__3285__auto____$2
            }else {
              var or__3285__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3285__auto____$3)) {
                return or__3285__auto____$3
              }else {
                var or__3285__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3285__auto____$4)) {
                  return or__3285__auto____$4
                }else {
                  return p3.call(null, y)
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3285__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3285__auto____$1)) {
            return or__3285__auto____$1
          }else {
            var or__3285__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3285__auto____$2)) {
              return or__3285__auto____$2
            }else {
              var or__3285__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3285__auto____$3)) {
                return or__3285__auto____$3
              }else {
                var or__3285__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3285__auto____$4)) {
                  return or__3285__auto____$4
                }else {
                  var or__3285__auto____$5 = p3.call(null, y);
                  if(cljs.core.truth_(or__3285__auto____$5)) {
                    return or__3285__auto____$5
                  }else {
                    var or__3285__auto____$6 = p1.call(null, z);
                    if(cljs.core.truth_(or__3285__auto____$6)) {
                      return or__3285__auto____$6
                    }else {
                      var or__3285__auto____$7 = p2.call(null, z);
                      if(cljs.core.truth_(or__3285__auto____$7)) {
                        return or__3285__auto____$7
                      }else {
                        return p3.call(null, z)
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__730419__delegate = function(x, y, z, args) {
          var or__3285__auto__ = sp3.call(null, x, y, z);
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return cljs.core.some.call(null, function(p1__730410_SHARP_) {
              var or__3285__auto____$1 = p1.call(null, p1__730410_SHARP_);
              if(cljs.core.truth_(or__3285__auto____$1)) {
                return or__3285__auto____$1
              }else {
                var or__3285__auto____$2 = p2.call(null, p1__730410_SHARP_);
                if(cljs.core.truth_(or__3285__auto____$2)) {
                  return or__3285__auto____$2
                }else {
                  return p3.call(null, p1__730410_SHARP_)
                }
              }
            }, args)
          }
        };
        var G__730419 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730419__delegate.call(this, x, y, z, args)
        };
        G__730419.cljs$lang$maxFixedArity = 3;
        G__730419.cljs$lang$applyTo = function(arglist__730420) {
          var x = cljs.core.first(arglist__730420);
          arglist__730420 = cljs.core.next(arglist__730420);
          var y = cljs.core.first(arglist__730420);
          arglist__730420 = cljs.core.next(arglist__730420);
          var z = cljs.core.first(arglist__730420);
          var args = cljs.core.rest(arglist__730420);
          return G__730419__delegate(x, y, z, args)
        };
        G__730419.cljs$core$IFn$_invoke$arity$variadic = G__730419__delegate;
        return G__730419
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3
    }()
  };
  var some_fn__4 = function() {
    var G__730421__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__730411_SHARP_) {
            return p1__730411_SHARP_.call(null, x)
          }, ps__$1)
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__730412_SHARP_) {
            var or__3285__auto__ = p1__730412_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return p1__730412_SHARP_.call(null, y)
            }
          }, ps__$1)
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__730413_SHARP_) {
            var or__3285__auto__ = p1__730413_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              var or__3285__auto____$1 = p1__730413_SHARP_.call(null, y);
              if(cljs.core.truth_(or__3285__auto____$1)) {
                return or__3285__auto____$1
              }else {
                return p1__730413_SHARP_.call(null, z)
              }
            }
          }, ps__$1)
        };
        var spn__4 = function() {
          var G__730422__delegate = function(x, y, z, args) {
            var or__3285__auto__ = spn.call(null, x, y, z);
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return cljs.core.some.call(null, function(p1__730414_SHARP_) {
                return cljs.core.some.call(null, p1__730414_SHARP_, args)
              }, ps__$1)
            }
          };
          var G__730422 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__730422__delegate.call(this, x, y, z, args)
          };
          G__730422.cljs$lang$maxFixedArity = 3;
          G__730422.cljs$lang$applyTo = function(arglist__730423) {
            var x = cljs.core.first(arglist__730423);
            arglist__730423 = cljs.core.next(arglist__730423);
            var y = cljs.core.first(arglist__730423);
            arglist__730423 = cljs.core.next(arglist__730423);
            var z = cljs.core.first(arglist__730423);
            var args = cljs.core.rest(arglist__730423);
            return G__730422__delegate(x, y, z, args)
          };
          G__730422.cljs$core$IFn$_invoke$arity$variadic = G__730422__delegate;
          return G__730422
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn
      }()
    };
    var G__730421 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__730421__delegate.call(this, p1, p2, p3, ps)
    };
    G__730421.cljs$lang$maxFixedArity = 3;
    G__730421.cljs$lang$applyTo = function(arglist__730424) {
      var p1 = cljs.core.first(arglist__730424);
      arglist__730424 = cljs.core.next(arglist__730424);
      var p2 = cljs.core.first(arglist__730424);
      arglist__730424 = cljs.core.next(arglist__730424);
      var p3 = cljs.core.first(arglist__730424);
      var ps = cljs.core.rest(arglist__730424);
      return G__730421__delegate(p1, p2, p3, ps)
    };
    G__730421.cljs$core$IFn$_invoke$arity$variadic = G__730421__delegate;
    return G__730421
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4108__auto___730426 = size;
          var i_730427 = 0;
          while(true) {
            if(i_730427 < n__4108__auto___730426) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_730427)));
              var G__730428 = i_730427 + 1;
              i_730427 = G__730428;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)))
      }else {
        return null
      }
    }, null, null)
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if(s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)))
      }else {
        return null
      }
    }, null, null)
  };
  var map__5 = function() {
    var G__730429__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)))
          }else {
            return null
          }
        }, null, null)
      };
      return map.call(null, function(p1__730425_SHARP_) {
        return cljs.core.apply.call(null, f, p1__730425_SHARP_)
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)))
    };
    var G__730429 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__730429__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__730429.cljs$lang$maxFixedArity = 4;
    G__730429.cljs$lang$applyTo = function(arglist__730430) {
      var f = cljs.core.first(arglist__730430);
      arglist__730430 = cljs.core.next(arglist__730430);
      var c1 = cljs.core.first(arglist__730430);
      arglist__730430 = cljs.core.next(arglist__730430);
      var c2 = cljs.core.first(arglist__730430);
      arglist__730430 = cljs.core.next(arglist__730430);
      var c3 = cljs.core.first(arglist__730430);
      var colls = cljs.core.rest(arglist__730430);
      return G__730429__delegate(f, c1, c2, c3, colls)
    };
    G__730429.cljs$core$IFn$_invoke$arity$variadic = G__730429__delegate;
    return G__730429
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if(n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(n__$1 > 0 && s) {
        var G__730431 = n__$1 - 1;
        var G__730432 = cljs.core.rest.call(null, s);
        n__$1 = G__730431;
        coll__$1 = G__730432;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll)
  }, null, null)
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s)
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x
    }, s, cljs.core.drop.call(null, n, s))
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while(true) {
    if(lead) {
      var G__730433 = cljs.core.next.call(null, s);
      var G__730434 = cljs.core.next.call(null, lead);
      s = G__730433;
      lead = G__730434;
      continue
    }else {
      return s
    }
    break
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3273__auto__ = s;
        if(and__3273__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s))
        }else {
          return and__3273__auto__
        }
      }())) {
        var G__730435 = pred__$1;
        var G__730436 = cljs.core.rest.call(null, s);
        pred__$1 = G__730435;
        coll__$1 = G__730436;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll)
  }, null, null)
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null)
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x))
    }, null, null)
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x))
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x))
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f))
    }, null, null)
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f))
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x))
  }, null, null))
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))))
      }else {
        return null
      }
    }, null, null)
  };
  var interleave__3 = function() {
    var G__730437__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)))
        }else {
          return null
        }
      }, null, null)
    };
    var G__730437 = function(c1, c2, var_args) {
      var colls = null;
      if(arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730437__delegate.call(this, c1, c2, colls)
    };
    G__730437.cljs$lang$maxFixedArity = 2;
    G__730437.cljs$lang$applyTo = function(arglist__730438) {
      var c1 = cljs.core.first(arglist__730438);
      arglist__730438 = cljs.core.next(arglist__730438);
      var c2 = cljs.core.first(arglist__730438);
      var colls = cljs.core.rest(arglist__730438);
      return G__730437__delegate(c1, c2, colls)
    };
    G__730437.cljs$core$IFn$_invoke$arity$variadic = G__730437__delegate;
    return G__730437
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll))
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1))
      }else {
        if(cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1))
        }else {
          return null
        }
      }
    }, null, null)
  };
  return cat.call(null, null, colls)
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll))
  };
  var mapcat__3 = function() {
    var G__730439__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls))
    };
    var G__730439 = function(f, coll, var_args) {
      var colls = null;
      if(arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__730439__delegate.call(this, f, coll, colls)
    };
    G__730439.cljs$lang$maxFixedArity = 2;
    G__730439.cljs$lang$applyTo = function(arglist__730440) {
      var f = cljs.core.first(arglist__730440);
      arglist__730440 = cljs.core.next(arglist__730440);
      var coll = cljs.core.first(arglist__730440);
      var colls = cljs.core.rest(arglist__730440);
      return G__730439__delegate(f, coll, colls)
    };
    G__730439.cljs$core$IFn$_invoke$arity$variadic = G__730439__delegate;
    return G__730439
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4108__auto___730441 = size;
        var i_730442 = 0;
        while(true) {
          if(i_730442 < n__4108__auto___730441) {
            if(cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_730442)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_730442))
            }else {
            }
            var G__730443 = i_730442 + 1;
            i_730442 = G__730443;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)))
      }else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if(cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r))
        }else {
          return filter.call(null, pred, r)
        }
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll)
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null)
    }, null, null)
  };
  return walk.call(null, root)
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__730444_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__730444_SHARP_)
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)))
};
cljs.core.into = function into(to, from) {
  if(!(to == null)) {
    if(function() {
      var G__730446 = to;
      if(G__730446) {
        var bit__3904__auto__ = G__730446.cljs$lang$protocol_mask$partition1$ & 4;
        if(bit__3904__auto__ || G__730446.cljs$core$IEditableCollection$) {
          return true
        }else {
          return false
        }
      }else {
        return false
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from))
    }else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from)
    }
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from)
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o))
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2))
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3))
  };
  var mapv__5 = function() {
    var G__730447__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls))
    };
    var G__730447 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__730447__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__730447.cljs$lang$maxFixedArity = 4;
    G__730447.cljs$lang$applyTo = function(arglist__730448) {
      var f = cljs.core.first(arglist__730448);
      arglist__730448 = cljs.core.next(arglist__730448);
      var c1 = cljs.core.first(arglist__730448);
      arglist__730448 = cljs.core.next(arglist__730448);
      var c2 = cljs.core.first(arglist__730448);
      arglist__730448 = cljs.core.next(arglist__730448);
      var c3 = cljs.core.first(arglist__730448);
      var colls = cljs.core.rest(arglist__730448);
      return G__730447__delegate(f, c1, c2, c3, colls)
    };
    G__730447.cljs$core$IFn$_invoke$arity$variadic = G__730447__delegate;
    return G__730447
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if(cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o)
    }else {
      return v
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll)
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)))
        }else {
          return null
        }
      }else {
        return null
      }
    }, null, null)
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)))
        }else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)))
        }
      }else {
        return null
      }
    }, null, null)
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null)
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while(true) {
      if(ks__$1) {
        if(!function() {
          var G__730450 = m__$1;
          if(G__730450) {
            var bit__3911__auto__ = G__730450.cljs$lang$protocol_mask$partition0$ & 256;
            if(bit__3911__auto__ || G__730450.cljs$core$ILookup$) {
              return true
            }else {
              if(!G__730450.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__730450)
              }else {
                return false
              }
            }
          }else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__730450)
          }
        }()) {
          return not_found
        }else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if(sentinel === m__$2) {
            return not_found
          }else {
            var G__730451 = sentinel;
            var G__730452 = m__$2;
            var G__730453 = cljs.core.next.call(null, ks__$1);
            sentinel = G__730451;
            m__$1 = G__730452;
            ks__$1 = G__730453;
            continue
          }
        }
      }else {
        return m__$1
      }
      break
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in
}();
cljs.core.assoc_in = function assoc_in(m, p__730454, v) {
  var vec__730456 = p__730454;
  var k = cljs.core.nth.call(null, vec__730456, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__730456, 1);
  if(ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v))
  }else {
    return cljs.core.assoc.call(null, m, k, v)
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__730457, f) {
    var vec__730467 = p__730457;
    var k = cljs.core.nth.call(null, vec__730467, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__730467, 1);
    if(ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)))
    }
  };
  var update_in__4 = function(m, p__730458, f, a) {
    var vec__730468 = p__730458;
    var k = cljs.core.nth.call(null, vec__730468, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__730468, 1);
    if(ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a))
    }
  };
  var update_in__5 = function(m, p__730459, f, a, b) {
    var vec__730469 = p__730459;
    var k = cljs.core.nth.call(null, vec__730469, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__730469, 1);
    if(ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b))
    }
  };
  var update_in__6 = function(m, p__730460, f, a, b, c) {
    var vec__730470 = p__730460;
    var k = cljs.core.nth.call(null, vec__730470, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__730470, 1);
    if(ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c))
    }else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c))
    }
  };
  var update_in__7 = function() {
    var G__730472__delegate = function(m, p__730461, f, a, b, c, args) {
      var vec__730471 = p__730461;
      var k = cljs.core.nth.call(null, vec__730471, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__730471, 1);
      if(ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args))
      }else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args))
      }
    };
    var G__730472 = function(m, p__730461, f, a, b, c, var_args) {
      var args = null;
      if(arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0)
      }
      return G__730472__delegate.call(this, m, p__730461, f, a, b, c, args)
    };
    G__730472.cljs$lang$maxFixedArity = 6;
    G__730472.cljs$lang$applyTo = function(arglist__730473) {
      var m = cljs.core.first(arglist__730473);
      arglist__730473 = cljs.core.next(arglist__730473);
      var p__730461 = cljs.core.first(arglist__730473);
      arglist__730473 = cljs.core.next(arglist__730473);
      var f = cljs.core.first(arglist__730473);
      arglist__730473 = cljs.core.next(arglist__730473);
      var a = cljs.core.first(arglist__730473);
      arglist__730473 = cljs.core.next(arglist__730473);
      var b = cljs.core.first(arglist__730473);
      arglist__730473 = cljs.core.next(arglist__730473);
      var c = cljs.core.first(arglist__730473);
      var args = cljs.core.rest(arglist__730473);
      return G__730472__delegate(m, p__730461, f, a, b, c, args)
    };
    G__730472.cljs$core$IFn$_invoke$arity$variadic = G__730472__delegate;
    return G__730472
  }();
  update_in = function(m, p__730461, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__730461, f);
      case 4:
        return update_in__4.call(this, m, p__730461, f, a);
      case 5:
        return update_in__5.call(this, m, p__730461, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__730461, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__730461, f, a, b, c, cljs.core.array_seq(arguments, 6))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3832__auto__, writer__3833__auto__, opts__3834__auto__) {
  return cljs.core._write.call(null, writer__3833__auto__, "cljs.core/VectorNode")
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr)
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, new Array(32))
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx]
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr))
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if(cnt < 32) {
    return 0
  }else {
    return cnt - 1 >>> 5 << 5
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while(true) {
    if(ll === 0) {
      return ret
    }else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__730474 = ll - 5;
      var G__730475 = r;
      ll = G__730474;
      ret = G__730475;
      continue
    }
    break
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if(5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret
  }else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if(!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if(0 <= i && i < pv.cnt) {
    if(i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail
    }else {
      var node = pv.root;
      var level = pv.shift;
      while(true) {
        if(level > 0) {
          var G__730476 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__730477 = level - 5;
          node = G__730476;
          level = G__730477;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt)
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if(level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret
  }else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if(new_child == null && subidx === 0) {
      return null
    }else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail))
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= k && k < self__.cnt) {
    if(cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null)
    }else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null)
    }
  }else {
    if(k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__730479 = null;
  var G__730479__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
  };
  var G__730479__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
  };
  G__730479 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730479__2.call(this, self__, k);
      case 3:
        return G__730479__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730479
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args730478) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730478)))
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while(true) {
    if(i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while(true) {
          if(j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2
            }else {
              var G__730480 = j + 1;
              var G__730481 = init__$2;
              j = G__730480;
              init__$1 = G__730481;
              continue
            }
          }else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1
          }
          break
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1)
      }else {
        var G__730482 = i + step_init[0];
        i = G__730482;
        continue
      }
    }else {
      return step_init[1]
    }
    break
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4108__auto___730483 = len;
    var i_730484 = 0;
    while(true) {
      if(i_730484 < n__4108__auto___730483) {
        new_tail[i_730484] = self__.tail[i_730484];
        var G__730485 = i_730484 + 1;
        i_730484 = G__730485;
        continue
      }else {
      }
      break
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null)
  }else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0)
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1)
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start)
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt === 0) {
    return null
  }else {
    if(self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  }else {
    if(1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
    }else {
      if(1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if(5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null)
          }else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null)
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val)
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash)
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31]
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n)
  }else {
    return not_found
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash)
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, new Array(32));
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if(l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null)
  }else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while(true) {
      if(i < l) {
        var G__730486 = i + 1;
        var G__730487 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__730486;
        out = G__730487;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if(args instanceof cljs.core.IndexedSeq) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true)
    }else {
      return cljs.core.vec.call(null, args)
    }
  };
  var vector = function(var_args) {
    var args = null;
    if(arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return vector__delegate.call(this, args)
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__730488) {
    var args = cljs.core.seq(arglist__730488);
    return vector__delegate(args)
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return null
    }else {
      return s
    }
  }else {
    return cljs.core._chunked_next.call(null, coll__$1)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start)
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off]
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return cljs.core.List.EMPTY
    }else {
      return s
    }
  }else {
    return cljs.core._chunked_rest.call(null, coll__$1)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return null
  }else {
    return s
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return cljs.core.List.EMPTY
  }else {
    return s
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash)
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null)
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null)
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null)
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Subvec")
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3592__auto__ = self__.end;
    var y__3593__auto__ = v_pos + 1;
    return x__3592__auto__ > y__3593__auto__ ? x__3592__auto__ : y__3593__auto__
  }(), null)
};
cljs.core.Subvec.prototype.call = function() {
  var G__730490 = null;
  var G__730490__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
  };
  var G__730490__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
  };
  G__730490 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730490__2.call(this, self__, k);
      case 3:
        return G__730490__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730490
}();
cljs.core.Subvec.prototype.apply = function(self__, args730489) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730489)))
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k)
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null)
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1)
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if(i === self__.end) {
      return null
    }else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1)
      }, null, null))
    }
  };
  return subvec_seq.call(null, self__.start)
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1)
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  }else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null)
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val)
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash)
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if(n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start)
  }else {
    return cljs.core._nth.call(null, self__.v, self__.start + n)
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(n < 0 || self__.end <= self__.start + n) {
    return not_found
  }else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found)
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash)
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while(true) {
    if(v instanceof cljs.core.Subvec) {
      var G__730491 = meta;
      var G__730492 = v.v;
      var G__730493 = v.start + start;
      var G__730494 = v.start + end;
      var G__730495 = __hash;
      meta = G__730491;
      v = G__730492;
      start = G__730493;
      end = G__730494;
      __hash = G__730495;
      continue
    }else {
      var c = cljs.core.count.call(null, v);
      if(start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      }else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash)
    }
    break
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v))
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null)
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if(edit === node.edit) {
    return node
  }else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr))
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj730499 = {};
    return obj730499
  }(), cljs.core.aclone.call(null, node.arr))
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = new Array(32);
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if(!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node)
    }else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node)
    }
  }());
  return ret
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if(new_child == null && subidx === 0) {
      return null
    }else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if(0 <= i && i < tv.cnt) {
    if(i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail
    }else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while(true) {
        if(level > 0) {
          var G__730500 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__730501 = level - 5;
          node = G__730500;
          level = G__730501;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/TransientVector")
};
cljs.core.TransientVector.prototype.call = function() {
  var G__730503 = null;
  var G__730503__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730503__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730503 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730503__2.call(this, self__, k);
      case 3:
        return G__730503__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730503
}();
cljs.core.TransientVector.prototype.apply = function(self__, args730502) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730502)))
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31]
  }else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n)
  }else {
    return not_found
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.root.edit) {
    return self__.cnt
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(0 <= n && n < self__.cnt) {
      if(cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1
      }else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if(level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1
          }else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1
      }
    }else {
      if(n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        }else {
          return null
        }
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    }else {
      if(1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1
      }else {
        if((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if(!(nr == null)) {
                return nr
              }else {
                return new cljs.core.VectorNode(self__.root.edit, new Array(32))
              }
            }();
            if(5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1
            }else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1
            }
          }else {
            return null
          }
        }
      }
    }
  }else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val)
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    if(self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1
    }else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = new Array(32);
      new_tail[0] = o;
      self__.tail = new_tail;
      if(self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = new Array(32);
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1
      }else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail)
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if(temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null)
  }else {
    if(self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1)
    }else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null)
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash)
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3285__auto__ = self__.rear;
      if(cljs.core.truth_(or__3285__auto__)) {
        return or__3285__auto__
      }else {
        return cljs.core.PersistentVector.EMPTY
      }
    }(), o), null)
  }else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null)
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if(cljs.core.truth_(function() {
    var or__3285__auto__ = self__.front;
    if(cljs.core.truth_(or__3285__auto__)) {
      return or__3285__auto__
    }else {
      return rear__$1
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null)
  }else {
    return null
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if(temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null)
    }else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null)
    }
  }else {
    return coll__$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1))
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash)
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv))
  }, x)) : null : null)
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while(true) {
    if(i < len) {
      if(k === array[i]) {
        return i
      }else {
        var G__730504 = i + incr;
        i = G__730504;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if(a__$1 < b__$1) {
    return-1
  }else {
    if(a__$1 > b__$1) {
      return 1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0
      }else {
        return null
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var k__$1 = ks[i];
      var G__730505 = i + 1;
      var G__730506 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__730505;
      out = G__730506;
      continue
    }else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm)
    }
    break
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj730510 = {};
    return obj730510
  }();
  var l = ks.length;
  var i_730511 = 0;
  while(true) {
    if(i_730511 < l) {
      var k_730512 = ks[i_730511];
      new_obj[k_730512] = obj[k_730512];
      var G__730513 = i_730511 + 1;
      i_730511 = G__730513;
      continue
    }else {
    }
    break
  }
  return new_obj
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ObjMap")
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1))
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k]
  }else {
    return not_found
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k)) {
    if(self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v)
    }else {
      if(!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null)
      }else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
      }
    }
  }else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v)
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true
  }else {
    return false
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__730516 = null;
  var G__730516__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730516__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730516 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730516__2.call(this, self__, k);
      case 3:
        return G__730516__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730516
}();
cljs.core.ObjMap.prototype.apply = function(self__, args730515) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730515)))
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while(true) {
    if(cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__730517 = cljs.core.rest.call(null, keys__$1);
        var G__730518 = init__$2;
        keys__$1 = G__730517;
        init__$1 = G__730518;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__730514_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__730514_SHARP_, self__.strobj[p1__730514_SHARP_]], null)
    }, self__.keys.sort(cljs.core.obj_map_compare_keys))
  }else {
    return null
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash)
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta)
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
  }else {
    return coll__$1
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash)
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj730520 = {};
  return obj730520
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null)
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(arr[i] == null) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__730521 = i + 2;
          i = G__730521;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn
      }()) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__730522 = i + 2;
          i = G__730522;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str
      }()) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__730523 = i + 2;
          i = G__730523;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(k === arr[i]) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__730524 = i + 2;
          i = G__730524;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(cljs.core._EQ_.call(null, k, arr[i])) {
        return i
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__730525 = i + 2;
          i = G__730525;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if(k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k)
  }else {
    if(goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k)
    }else {
      if(k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k)
      }else {
        if(k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k)
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_730526 = 0;
  while(true) {
    if(i_730526 < l) {
      narr[i_730526] = arr[i_730526];
      var G__730527 = i_730526 + 1;
      i_730526 = G__730527;
      continue
    }else {
    }
    break
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentArrayMapSeq")
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta)
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if(i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj730530 = {};
    return obj730530
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx === -1) {
    return not_found
  }else {
    return self__.arr[idx + 1]
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx === -1) {
    if(self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null)
    }else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta)
    }
  }else {
    if(v === self__.arr[idx + 1]) {
      return coll__$1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__730531 = cljs.core.aclone.call(null, self__.arr);
          G__730531[idx + 1] = v;
          return G__730531
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1)
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__730532 = null;
  var G__730532__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730532__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730532 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730532__2.call(this, self__, k);
      case 3:
        return G__730532__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730532
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args730528) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730528)))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__730533 = i + 2;
        var G__730534 = init__$2;
        i = G__730533;
        init__$1 = G__730534;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if(idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if(new_len === 0) {
      return cljs.core._empty.call(null, coll__$1)
    }else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while(true) {
        if(s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null)
        }else {
          if(cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__730535 = s + 2;
            var G__730536 = d;
            s = G__730535;
            d = G__730536;
            continue
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__730537 = s + 2;
              var G__730538 = d + 2;
              s = G__730537;
              d = G__730538;
              continue
            }else {
              return null
            }
          }
        }
        break
      }
    }
  }else {
    return coll__$1
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash)
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if(no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null)
  }else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while(true) {
      if(i < len) {
        var G__730539 = i + 2;
        var G__730540 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__730539;
        ret = G__730540;
        continue
      }else {
        return cljs.core._persistent_BANG_.call(null, ret)
      }
      break
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if(idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__730541_730543 = self__.arr;
      G__730541_730543.pop();
      G__730541_730543.pop();
      self__.len = self__.len - 2
    }else {
    }
    return tcoll__$1
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if(idx === -1) {
      if(self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1
      }else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val)
      }
    }else {
      if(val === self__.arr[idx + 1]) {
        return tcoll__$1
      }else {
        self__.arr[idx + 1] = val;
        return tcoll__$1
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    if(function() {
      var G__730542 = o;
      if(G__730542) {
        var bit__3911__auto__ = G__730542.cljs$lang$protocol_mask$partition0$ & 2048;
        if(bit__3911__auto__ || G__730542.cljs$core$IMapEntry$) {
          return true
        }else {
          if(!G__730542.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__730542)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__730542)
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__730544 = cljs.core.next.call(null, es);
          var G__730545 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__730544;
          tcoll__$2 = G__730545;
          continue
        }else {
          return tcoll__$2
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null)
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if(idx === -1) {
      return not_found
    }else {
      return self__.arr[idx + 1]
    }
  }else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2)
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr)
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while(true) {
    if(i < len) {
      var G__730546 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__730547 = i + 2;
      out = G__730546;
      i = G__730547;
      continue
    }else {
      return out
    }
    break
  }
};
cljs.core.Box = function(val) {
  this.val = val
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3832__auto__, writer__3833__auto__, opts__3834__auto__) {
  return cljs.core._write.call(null, writer__3833__auto__, "cljs.core/Box")
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val)
};
cljs.core.key_test = function key_test(key, other) {
  if(key === other) {
    return true
  }else {
    if(cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other)
      }else {
        return null
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__730550 = cljs.core.aclone.call(null, arr);
    G__730550[i] = a;
    return G__730550
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__730551 = cljs.core.aclone.call(null, arr);
    G__730551[i] = a;
    G__730551[j] = b;
    return G__730551
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1)
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31)
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if(!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1])
        }else {
          var node = arr[i + 1];
          if(!(node == null)) {
            return node.kv_reduce(f, init__$1)
          }else {
            return init__$1
          }
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__730552 = i + 2;
        var G__730553 = init__$2;
        i = G__730552;
        init__$1 = G__730553;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if(self__.bitmap === bit) {
    return null
  }else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable
    }else {
      if(n >= 16) {
        var nodes = new Array(32);
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_730554 = 0;
        var j_730555 = 0;
        while(true) {
          if(i_730554 < 32) {
            if((self__.bitmap >>> i_730554 & 1) === 0) {
              var G__730556 = i_730554 + 1;
              var G__730557 = j_730555;
              i_730554 = G__730556;
              j_730555 = G__730557;
              continue
            }else {
              nodes[i_730554] = !(self__.arr[j_730555] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_730555]), self__.arr[j_730555], self__.arr[j_730555 + 1], added_leaf_QMARK_) : self__.arr[j_730555 + 1];
              var G__730558 = i_730554 + 1;
              var G__730559 = j_730555 + 2;
              i_730554 = G__730558;
              j_730555 = G__730559;
              continue
            }
          }else {
          }
          break
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable
        }else {
          return null
        }
      }
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val)
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx)
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr)
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(n >= 16) {
      var nodes = new Array(32);
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_730560 = 0;
      var j_730561 = 0;
      while(true) {
        if(i_730560 < 32) {
          if((self__.bitmap >>> i_730560 & 1) === 0) {
            var G__730562 = i_730560 + 1;
            var G__730563 = j_730561;
            i_730560 = G__730562;
            j_730561 = G__730563;
            continue
          }else {
            nodes[i_730560] = !(self__.arr[j_730561] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_730561]), self__.arr[j_730561], self__.arr[j_730561 + 1], added_leaf_QMARK_) : self__.arr[j_730561 + 1];
            var G__730564 = i_730560 + 1;
            var G__730565 = j_730561 + 2;
            i_730560 = G__730564;
            j_730561 = G__730565;
            continue
          }
        }else {
        }
        break
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes)
    }else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr)
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val))
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr)
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, new Array(0));
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while(true) {
    if(i < len) {
      if(!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__730566 = i + 1;
        var G__730567 = j + 2;
        var G__730568 = bitmap | 1 << i;
        i = G__730566;
        j = G__730567;
        bitmap = G__730568;
        continue
      }else {
        var G__730569 = i + 1;
        var G__730570 = j;
        var G__730571 = bitmap;
        i = G__730569;
        j = G__730570;
        bitmap = G__730571;
        continue
      }
    }else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr)
    }
    break
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable
  }else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr)
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return inode
  }else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx)
        }else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr))
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var node = self__.arr[i];
      if(!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2)
        }else {
          var G__730572 = i + 1;
          var G__730573 = init__$2;
          i = G__730572;
          init__$1 = G__730573;
          continue
        }
      }else {
        var G__730574 = i + 1;
        var G__730575 = init__$1;
        i = G__730574;
        init__$1 = G__730575;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx)
        }else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }else {
          return null
        }
      }
    }
  }else {
    return inode
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)))
  }else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr)
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while(true) {
    if(i < lim) {
      if(cljs.core.key_test.call(null, key, arr[i])) {
        return i
      }else {
        var G__730576 = i + 2;
        i = G__730576;
        continue
      }
    }else {
      return-1
    }
    break
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      if(self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable
      }else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr)
      }
    }else {
      if(self__.arr[idx + 1] === val) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val)
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    removed_leaf_QMARK_[0] = true;
    if(self__.cnt === 1) {
      return null
    }else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr)
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    if(self__.cnt === 1) {
      return null
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)))
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr)
    }else {
      if(cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode
      }else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val))
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1]
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode
  }else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array)
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr)
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null)
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null)
  }else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash)
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null)
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          if(!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null)
          }else {
            var temp__4090__auto__ = nodes[j + 1];
            if(cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if(cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null)
              }else {
                var G__730577 = j + 2;
                j = G__730577;
                continue
              }
            }else {
              var G__730578 = j + 2;
              j = G__730578;
              continue
            }
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null)
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash)
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null)
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          var temp__4090__auto__ = nodes[j];
          if(cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if(cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null)
            }else {
              var G__730579 = j + 1;
              j = G__730579;
              continue
            }
          }else {
            var G__730580 = j + 1;
            j = G__730580;
            continue
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null)
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj730583 = {};
    return obj730583
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null)
    }
  }else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if(new_root === self__.root) {
      return coll__$1
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    return self__.has_nil_QMARK_
  }else {
    if(self__.root == null) {
      return false
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__730584 = null;
  var G__730584__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730584__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730584 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730584__2.call(this, self__, k);
      case 3:
        return G__730584__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730584
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args730581) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730581)))
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    if(!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if(self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s)
    }else {
      return s
    }
  }else {
    return null
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null)
    }else {
      return coll__$1
    }
  }else {
    if(self__.root == null) {
      return coll__$1
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if(new_root === self__.root) {
          return coll__$1
        }else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash)
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__730585 = i + 1;
      var G__730586 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__730585;
      out = G__730586;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_()
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return null
    }
  }else {
    if(self__.root == null) {
      return null
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.edit) {
    return self__.count
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(function() {
      var G__730587 = o;
      if(G__730587) {
        var bit__3911__auto__ = G__730587.cljs$lang$protocol_mask$partition0$ & 2048;
        if(bit__3911__auto__ || G__730587.cljs$core$IMapEntry$) {
          return true
        }else {
          if(!G__730587.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__730587)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__730587)
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__730588 = cljs.core.next.call(null, es);
          var G__730589 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__730588;
          tcoll__$1 = G__730589;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.nil_val === v) {
      }else {
        self__.nil_val = v
      }
      if(self__.has_nil_QMARK_) {
      }else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true
      }
      return tcoll
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if(node === self__.root) {
      }else {
        self__.root = node
      }
      if(added_leaf_QMARK_.val) {
        self__.count = self__.count + 1
      }else {
      }
      return tcoll
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll
      }else {
        return tcoll
      }
    }else {
      if(self__.root == null) {
        return tcoll
      }else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if(node === self__.root) {
        }else {
          self__.root = node
        }
        if(cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1
        }else {
        }
        return tcoll
      }
    }
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val)
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while(true) {
    if(!(t == null)) {
      var G__730590 = ascending_QMARK_ ? t.left : t.right;
      var G__730591 = cljs.core.conj.call(null, stack__$1, t);
      t = G__730590;
      stack__$1 = G__730591;
      continue
    }else {
      return stack__$1
    }
    break
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1
  }else {
    return self__.cnt
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if(!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash)
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null)
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if(ins instanceof cljs.core.RedNode) {
    if(ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null)
    }else {
      if(ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, ins, right, null)
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if(ins instanceof cljs.core.RedNode) {
    if(ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null)
    }else {
      if(ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, left, ins, null)
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if(del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null)
  }else {
    if(right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden())
    }else {
      if(right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if(del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null)
  }else {
    if(left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del)
    }else {
      if(left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2)
    }else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if(cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3)
      }else {
        return init__$3
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/BlackNode")
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null)
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v)
};
cljs.core.BlackNode.prototype.call = function() {
  var G__730593 = null;
  var G__730593__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730593__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730593 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730593__2.call(this, self__, k);
      case 3:
        return G__730593__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730593
}();
cljs.core.BlackNode.prototype.apply = function(self__, args730592) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730592)))
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null)
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node)
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del)
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right)
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node)
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f)
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start)
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key)
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null)
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v)
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta)
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash)
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/RedNode")
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null)
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v)
};
cljs.core.RedNode.prototype.call = function() {
  var G__730595 = null;
  var G__730595__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730595__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730595 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730595__2.call(this, self__, k);
      case 3:
        return G__730595__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730595
}();
cljs.core.RedNode.prototype.apply = function(self__, args730594) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730594)))
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null)
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null)
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null)
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null)
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null)
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if(self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null)
  }else {
    if(self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if(self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null)
  }else {
    if(self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start)
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key)
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null)
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v)
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta)
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash)
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if(tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null)
  }else {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return null
    }else {
      if(c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if(!(ins == null)) {
          return tree.add_left(ins)
        }else {
          return null
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if(!(ins == null)) {
            return tree.add_right(ins)
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if(left == null) {
    return right
  }else {
    if(right == null) {
      return left
    }else {
      if(left instanceof cljs.core.RedNode) {
        if(right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if(app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null)
          }else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null)
          }
        }else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null)
        }
      }else {
        if(right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if(app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null)
            }else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null))
            }
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if(!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right)
    }else {
      if(c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if(!(del == null) || !(found[0] == null)) {
          if(tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right)
          }else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null)
          }
        }else {
          return null
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if(!(del == null) || !(found[0] == null)) {
            if(tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del)
            }else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null)
            }
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }else {
    return null
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if(c === 0) {
    return tree.replace(tk, v, tree.left, tree.right)
  }else {
    if(c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v))
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if(!(n == null)) {
    return n.val
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if(t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if(cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null)
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__730597 = null;
  var G__730597__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730597__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730597 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730597__2.call(this, self__, k);
      case 3:
        return G__730597__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730597
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args730596) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730596)))
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if(!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init)
  }else {
    return init
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while(true) {
    if(!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if(c === 0) {
        return t
      }else {
        if(c < 0) {
          var G__730598 = t.left;
          t = G__730598;
          continue
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__730599 = t.right;
            t = G__730599;
            continue
          }else {
            return null
          }
        }
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while(true) {
      if(!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if(c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null)
        }else {
          if(cljs.core.truth_(ascending_QMARK_)) {
            if(c < 0) {
              var G__730600 = cljs.core.conj.call(null, stack, t);
              var G__730601 = t.left;
              stack = G__730600;
              t = G__730601;
              continue
            }else {
              var G__730602 = stack;
              var G__730603 = t.right;
              stack = G__730602;
              t = G__730603;
              continue
            }
          }else {
            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if(c > 0) {
                var G__730604 = cljs.core.conj.call(null, stack, t);
                var G__730605 = t.right;
                stack = G__730604;
                t = G__730605;
                continue
              }else {
                var G__730606 = stack;
                var G__730607 = t.left;
                stack = G__730606;
                t = G__730607;
                continue
              }
            }else {
              return null
            }
          }
        }
      }else {
        if(stack == null) {
          return null
        }else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null)
        }
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if(t == null) {
    if(cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null)
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash)
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while(true) {
      if(in$) {
        var G__730608 = cljs.core.nnext.call(null, in$);
        var G__730609 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__730608;
        out = G__730609;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return hash_map__delegate.call(this, keyvals)
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__730610) {
    var keyvals = cljs.core.seq(arglist__730610);
    return hash_map__delegate(keyvals)
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null)
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return array_map__delegate.call(this, keyvals)
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__730611) {
    var keyvals = cljs.core.seq(arglist__730611);
    return array_map__delegate(keyvals)
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj730615 = {};
      return obj730615
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while(true) {
      if(kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__730616 = cljs.core.nnext.call(null, kvs);
        kvs = G__730616;
        continue
      }else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj)
      }
      break
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return obj_map__delegate.call(this, keyvals)
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__730617) {
    var keyvals = cljs.core.seq(arglist__730617);
    return obj_map__delegate(keyvals)
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while(true) {
      if(in$) {
        var G__730618 = cljs.core.nnext.call(null, in$);
        var G__730619 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__730618;
        out = G__730619;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if(arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_map__delegate.call(this, keyvals)
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__730620) {
    var keyvals = cljs.core.seq(arglist__730620);
    return sorted_map__delegate(keyvals)
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while(true) {
      if(in$) {
        var G__730621 = cljs.core.nnext.call(null, in$);
        var G__730622 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__730621;
        out = G__730622;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if(arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals)
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__730623) {
    var comparator = cljs.core.first(arglist__730623);
    var keyvals = cljs.core.rest(arglist__730623);
    return sorted_map_by__delegate(comparator, keyvals)
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/KeySeq")
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__730624 = self__.mseq;
    if(G__730624) {
      var bit__3911__auto__ = G__730624.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__3911__auto__ || G__730624.cljs$core$INext$) {
        return true
      }else {
        if(!G__730624.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__730624)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__730624)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(nseq == null) {
    return null
  }else {
    return new cljs.core.KeySeq(nseq, self__._meta)
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me)
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__730625 = self__.mseq;
    if(G__730625) {
      var bit__3911__auto__ = G__730625.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__3911__auto__ || G__730625.cljs$core$INext$) {
        return true
      }else {
        if(!G__730625.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__730625)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__730625)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta)
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta)
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if(temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null)
  }else {
    return null
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry)
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/ValSeq")
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__730626 = self__.mseq;
    if(G__730626) {
      var bit__3911__auto__ = G__730626.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__3911__auto__ || G__730626.cljs$core$INext$) {
        return true
      }else {
        if(!G__730626.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__730626)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__730626)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(nseq == null) {
    return null
  }else {
    return new cljs.core.ValSeq(nseq, self__._meta)
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1)
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me)
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__730627 = self__.mseq;
    if(G__730627) {
      var bit__3911__auto__ = G__730627.cljs$lang$protocol_mask$partition0$ & 128;
      if(bit__3911__auto__ || G__730627.cljs$core$INext$) {
        return true
      }else {
        if(!G__730627.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__730627)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__730627)
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if(!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other)
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta)
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta)
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta)
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if(temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null)
  }else {
    return null
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry)
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__730628_SHARP_, p2__730629_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3285__auto__ = p1__730628_SHARP_;
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return cljs.core.PersistentArrayMap.EMPTY
          }
        }(), p2__730629_SHARP_)
      }, maps)
    }else {
      return null
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if(arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return merge__delegate.call(this, maps)
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__730630) {
    var maps = cljs.core.seq(arglist__730630);
    return merge__delegate(maps)
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if(cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v))
        }else {
          return cljs.core.assoc.call(null, m, k, v)
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3285__auto__ = m1;
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return cljs.core.PersistentArrayMap.EMPTY
            }
          }(), cljs.core.seq.call(null, m2))
        }
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps)
    }else {
      return null
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if(arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return merge_with__delegate.call(this, f, maps)
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__730631) {
    var f = cljs.core.first(arglist__730631);
    var maps = cljs.core.rest(arglist__730631);
    return merge_with__delegate(f, maps)
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while(true) {
    if(keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__730632 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__730633 = cljs.core.next.call(null, keys);
      ret = G__730632;
      keys = G__730633;
      continue
    }else {
      return ret
    }
    break
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v
  }else {
    return not_found
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__730636 = null;
  var G__730636__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730636__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730636 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730636__2.call(this, self__, k);
      case 3:
        return G__730636__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730636
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args730635) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730635)))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null)
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__730634_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__730634_SHARP_)
  }, other)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash)
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if(len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while(true) {
      if(i < len) {
        var G__730637 = i + 1;
        var G__730638 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__730637;
        out = G__730638;
        continue
      }else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null)
      }
      break
    }
  }else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while(true) {
      if(i < len) {
        var G__730639 = i + 2;
        var G__730640 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__730639;
        out = G__730640;
        continue
      }else {
        return cljs.core._persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__730642 = null;
  var G__730642__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null
    }else {
      return k
    }
  };
  var G__730642__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found
    }else {
      return k
    }
  };
  G__730642 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730642__2.call(this, self__, k);
      case 3:
        return G__730642__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730642
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args730641) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730641)))
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null
  }else {
    return k
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return k
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null)
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if(cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return v
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map)
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null)
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map)
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if(!(n == null)) {
    return n.key
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__730645 = null;
  var G__730645__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
  };
  var G__730645__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
  };
  G__730645 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__730645__2.call(this, self__, k);
      case 3:
        return G__730645__3.call(this, self__, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__730645
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args730644) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args730644)))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if(cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map))
  }else {
    return null
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__730643_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__730643_SHARP_)
  }, other)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta)
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash)
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4102__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while(true) {
      if(i < a__4102__auto__.length) {
        var G__730646 = i + 1;
        var G__730647 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__730646;
        res = G__730647;
        continue
      }else {
        return res
      }
      break
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret)
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if(in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY
  }else {
    if(in$ instanceof cljs.core.IndexedSeq) {
      return cljs.core.set_from_indexed_seq.call(null, in$)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while(true) {
          if(!(in$__$1 == null)) {
            var G__730648 = cljs.core._next.call(null, in$__$1);
            var G__730649 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__730648;
            out = G__730649;
            continue
          }else {
            return cljs.core._persistent_BANG_.call(null, out)
          }
          break
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var hash_set__1 = function() {
    var G__730650__delegate = function(keys) {
      return cljs.core.set.call(null, keys)
    };
    var G__730650 = function(var_args) {
      var keys = null;
      if(arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__730650__delegate.call(this, keys)
    };
    G__730650.cljs$lang$maxFixedArity = 0;
    G__730650.cljs$lang$applyTo = function(arglist__730651) {
      var keys = cljs.core.seq(arglist__730651);
      return G__730650__delegate(keys)
    };
    G__730650.cljs$core$IFn$_invoke$arity$variadic = G__730650__delegate;
    return G__730650
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys)
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if(arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_set__delegate.call(this, keys)
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__730652) {
    var keys = cljs.core.seq(arglist__730652);
    return sorted_set__delegate(keys)
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys)
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if(arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_set_by__delegate.call(this, comparator, keys)
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__730653) {
    var comparator = cljs.core.first(arglist__730653);
    var keys = cljs.core.rest(arglist__730653);
    return sorted_set_by__delegate(comparator, keys)
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by
}();
cljs.core.replace = function replace(smap, coll) {
  if(cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e))
      }else {
        return v
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)))
  }else {
    return cljs.core.map.call(null, function(p1__730654_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__730654_SHARP_);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e)
      }else {
        return p1__730654_SHARP_
      }
    }, coll)
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__730661, seen__$1) {
        while(true) {
          var vec__730662 = p__730661;
          var f = cljs.core.nth.call(null, vec__730662, 0, null);
          var xs__$1 = vec__730662;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if(temp__4092__auto__) {
            var s = temp__4092__auto__;
            if(cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__730663 = cljs.core.rest.call(null, s);
              var G__730664 = seen__$1;
              p__730661 = G__730663;
              seen__$1 = G__730664;
              continue
            }else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)))
            }
          }else {
            return null
          }
          break
        }
      }.call(null, xs, seen)
    }, null, null)
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY)
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while(true) {
    if(cljs.core.next.call(null, s__$1)) {
      var G__730665 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__730666 = cljs.core.next.call(null, s__$1);
      ret = G__730665;
      s__$1 = G__730666;
      continue
    }else {
      return cljs.core.seq.call(null, ret)
    }
    break
  }
};
cljs.core.name = function name(x) {
  if(function() {
    var G__730668 = x;
    if(G__730668) {
      var bit__3904__auto__ = G__730668.cljs$lang$protocol_mask$partition1$ & 4096;
      if(bit__3904__auto__ || G__730668.cljs$core$INamed$) {
        return true
      }else {
        return false
      }
    }else {
      return false
    }
  }()) {
    return cljs.core._name.call(null, x)
  }else {
    if(typeof x === "string") {
      return x
    }else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while(true) {
    if(ks && vs) {
      var G__730669 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__730670 = cljs.core.next.call(null, ks);
      var G__730671 = cljs.core.next.call(null, vs);
      map = G__730669;
      ks = G__730670;
      vs = G__730671;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, map)
    }
    break
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x
  };
  var max_key__3 = function(k, x, y) {
    if(k.call(null, x) > k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var max_key__4 = function() {
    var G__730674__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__730672_SHARP_, p2__730673_SHARP_) {
        return max_key.call(null, k, p1__730672_SHARP_, p2__730673_SHARP_)
      }, max_key.call(null, k, x, y), more)
    };
    var G__730674 = function(k, x, y, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__730674__delegate.call(this, k, x, y, more)
    };
    G__730674.cljs$lang$maxFixedArity = 3;
    G__730674.cljs$lang$applyTo = function(arglist__730675) {
      var k = cljs.core.first(arglist__730675);
      arglist__730675 = cljs.core.next(arglist__730675);
      var x = cljs.core.first(arglist__730675);
      arglist__730675 = cljs.core.next(arglist__730675);
      var y = cljs.core.first(arglist__730675);
      var more = cljs.core.rest(arglist__730675);
      return G__730674__delegate(k, x, y, more)
    };
    G__730674.cljs$core$IFn$_invoke$arity$variadic = G__730674__delegate;
    return G__730674
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x
  };
  var min_key__3 = function(k, x, y) {
    if(k.call(null, x) < k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var min_key__4 = function() {
    var G__730678__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__730676_SHARP_, p2__730677_SHARP_) {
        return min_key.call(null, k, p1__730676_SHARP_, p2__730677_SHARP_)
      }, min_key.call(null, k, x, y), more)
    };
    var G__730678 = function(k, x, y, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__730678__delegate.call(this, k, x, y, more)
    };
    G__730678.cljs$lang$maxFixedArity = 3;
    G__730678.cljs$lang$applyTo = function(arglist__730679) {
      var k = cljs.core.first(arglist__730679);
      arglist__730679 = cljs.core.next(arglist__730679);
      var x = cljs.core.first(arglist__730679);
      arglist__730679 = cljs.core.next(arglist__730679);
      var y = cljs.core.first(arglist__730679);
      var more = cljs.core.rest(arglist__730679);
      return G__730678__delegate(k, x, y, more)
    };
    G__730678.cljs$core$IFn$_invoke$arity$variadic = G__730678__delegate;
    return G__730678
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll)
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)))
      }else {
        return null
      }
    }, null, null)
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null, null)
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0)
  }
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__730682 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__730682, 0, null);
        var s = vec__730682;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true))
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__730683 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__730683, 0, null);
      var s = vec__730683;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if(cljs.core.truth_(temp__4092__auto__)) {
        var vec__730686 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__730686, 0, null);
        var s = vec__730686;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false))
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var vec__730687 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__730687, 0, null);
      var s = vec__730687;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Range")
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(self__.step > 0) {
    if(self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }else {
    if(self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1)
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s)
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(self__.step > 0) {
    if(self__.start < self__.end) {
      return rng__$1
    }else {
      return null
    }
  }else {
    if(self__.start > self__.end) {
      return rng__$1
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0
  }else {
    return Math.ceil((self__.end - self__.start) / self__.step)
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.start
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if(!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other)
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash)
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if(n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step
  }else {
    if(self__.start > self__.end && self__.step === 0) {
      return self__.start
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if(n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step
  }else {
    if(self__.start > self__.end && self__.step === 0) {
      return self__.start
    }else {
      return not_found
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash)
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1)
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1)
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1)
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null)
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null)
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if(temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__730688_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__730688_SHARP_))
        }
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))))
    }else {
      return null
    }
  }, null, null)
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1)
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll))
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s))
      }else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null))
      }
    }, null, null)
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if(temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s))
      }else {
        return null
      }
    }, null, null))
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__730699 = null;
      var G__730699__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null)
      };
      var G__730699__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null)
      };
      var G__730699__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null)
      };
      var G__730699__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null)
      };
      var G__730699__4 = function() {
        var G__730700__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null)
        };
        var G__730700 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730700__delegate.call(this, x, y, z, args)
        };
        G__730700.cljs$lang$maxFixedArity = 3;
        G__730700.cljs$lang$applyTo = function(arglist__730701) {
          var x = cljs.core.first(arglist__730701);
          arglist__730701 = cljs.core.next(arglist__730701);
          var y = cljs.core.first(arglist__730701);
          arglist__730701 = cljs.core.next(arglist__730701);
          var z = cljs.core.first(arglist__730701);
          var args = cljs.core.rest(arglist__730701);
          return G__730700__delegate(x, y, z, args)
        };
        G__730700.cljs$core$IFn$_invoke$arity$variadic = G__730700__delegate;
        return G__730700
      }();
      G__730699 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__730699__0.call(this);
          case 1:
            return G__730699__1.call(this, x);
          case 2:
            return G__730699__2.call(this, x, y);
          case 3:
            return G__730699__3.call(this, x, y, z);
          default:
            return G__730699__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__730699.cljs$lang$maxFixedArity = 3;
      G__730699.cljs$lang$applyTo = G__730699__4.cljs$lang$applyTo;
      return G__730699
    }()
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__730702 = null;
      var G__730702__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null)
      };
      var G__730702__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null)
      };
      var G__730702__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null)
      };
      var G__730702__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null)
      };
      var G__730702__4 = function() {
        var G__730703__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null)
        };
        var G__730703 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730703__delegate.call(this, x, y, z, args)
        };
        G__730703.cljs$lang$maxFixedArity = 3;
        G__730703.cljs$lang$applyTo = function(arglist__730704) {
          var x = cljs.core.first(arglist__730704);
          arglist__730704 = cljs.core.next(arglist__730704);
          var y = cljs.core.first(arglist__730704);
          arglist__730704 = cljs.core.next(arglist__730704);
          var z = cljs.core.first(arglist__730704);
          var args = cljs.core.rest(arglist__730704);
          return G__730703__delegate(x, y, z, args)
        };
        G__730703.cljs$core$IFn$_invoke$arity$variadic = G__730703__delegate;
        return G__730703
      }();
      G__730702 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__730702__0.call(this);
          case 1:
            return G__730702__1.call(this, x);
          case 2:
            return G__730702__2.call(this, x, y);
          case 3:
            return G__730702__3.call(this, x, y, z);
          default:
            return G__730702__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__730702.cljs$lang$maxFixedArity = 3;
      G__730702.cljs$lang$applyTo = G__730702__4.cljs$lang$applyTo;
      return G__730702
    }()
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__730705 = null;
      var G__730705__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null)
      };
      var G__730705__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null)
      };
      var G__730705__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null)
      };
      var G__730705__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null)
      };
      var G__730705__4 = function() {
        var G__730706__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null)
        };
        var G__730706 = function(x, y, z, var_args) {
          var args = null;
          if(arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__730706__delegate.call(this, x, y, z, args)
        };
        G__730706.cljs$lang$maxFixedArity = 3;
        G__730706.cljs$lang$applyTo = function(arglist__730707) {
          var x = cljs.core.first(arglist__730707);
          arglist__730707 = cljs.core.next(arglist__730707);
          var y = cljs.core.first(arglist__730707);
          arglist__730707 = cljs.core.next(arglist__730707);
          var z = cljs.core.first(arglist__730707);
          var args = cljs.core.rest(arglist__730707);
          return G__730706__delegate(x, y, z, args)
        };
        G__730706.cljs$core$IFn$_invoke$arity$variadic = G__730706__delegate;
        return G__730706
      }();
      G__730705 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__730705__0.call(this);
          case 1:
            return G__730705__1.call(this, x);
          case 2:
            return G__730705__2.call(this, x, y);
          case 3:
            return G__730705__3.call(this, x, y, z);
          default:
            return G__730705__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__730705.cljs$lang$maxFixedArity = 3;
      G__730705.cljs$lang$applyTo = G__730705__4.cljs$lang$applyTo;
      return G__730705
    }()
  };
  var juxt__4 = function() {
    var G__730708__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__730709 = null;
        var G__730709__0 = function() {
          return cljs.core.reduce.call(null, function(p1__730689_SHARP_, p2__730690_SHARP_) {
            return cljs.core.conj.call(null, p1__730689_SHARP_, p2__730690_SHARP_.call(null))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__730709__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__730691_SHARP_, p2__730692_SHARP_) {
            return cljs.core.conj.call(null, p1__730691_SHARP_, p2__730692_SHARP_.call(null, x))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__730709__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__730693_SHARP_, p2__730694_SHARP_) {
            return cljs.core.conj.call(null, p1__730693_SHARP_, p2__730694_SHARP_.call(null, x, y))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__730709__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__730695_SHARP_, p2__730696_SHARP_) {
            return cljs.core.conj.call(null, p1__730695_SHARP_, p2__730696_SHARP_.call(null, x, y, z))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__730709__4 = function() {
          var G__730710__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__730697_SHARP_, p2__730698_SHARP_) {
              return cljs.core.conj.call(null, p1__730697_SHARP_, cljs.core.apply.call(null, p2__730698_SHARP_, x, y, z, args))
            }, cljs.core.PersistentVector.EMPTY, fs__$1)
          };
          var G__730710 = function(x, y, z, var_args) {
            var args = null;
            if(arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__730710__delegate.call(this, x, y, z, args)
          };
          G__730710.cljs$lang$maxFixedArity = 3;
          G__730710.cljs$lang$applyTo = function(arglist__730711) {
            var x = cljs.core.first(arglist__730711);
            arglist__730711 = cljs.core.next(arglist__730711);
            var y = cljs.core.first(arglist__730711);
            arglist__730711 = cljs.core.next(arglist__730711);
            var z = cljs.core.first(arglist__730711);
            var args = cljs.core.rest(arglist__730711);
            return G__730710__delegate(x, y, z, args)
          };
          G__730710.cljs$core$IFn$_invoke$arity$variadic = G__730710__delegate;
          return G__730710
        }();
        G__730709 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__730709__0.call(this);
            case 1:
              return G__730709__1.call(this, x);
            case 2:
              return G__730709__2.call(this, x, y);
            case 3:
              return G__730709__3.call(this, x, y, z);
            default:
              return G__730709__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__730709.cljs$lang$maxFixedArity = 3;
        G__730709.cljs$lang$applyTo = G__730709__4.cljs$lang$applyTo;
        return G__730709
      }()
    };
    var G__730708 = function(f, g, h, var_args) {
      var fs = null;
      if(arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__730708__delegate.call(this, f, g, h, fs)
    };
    G__730708.cljs$lang$maxFixedArity = 3;
    G__730708.cljs$lang$applyTo = function(arglist__730712) {
      var f = cljs.core.first(arglist__730712);
      arglist__730712 = cljs.core.next(arglist__730712);
      var g = cljs.core.first(arglist__730712);
      arglist__730712 = cljs.core.next(arglist__730712);
      var h = cljs.core.first(arglist__730712);
      var fs = cljs.core.rest(arglist__730712);
      return G__730708__delegate(f, g, h, fs)
    };
    G__730708.cljs$core$IFn$_invoke$arity$variadic = G__730708__delegate;
    return G__730708
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll)) {
        var G__730713 = cljs.core.next.call(null, coll);
        coll = G__730713;
        continue
      }else {
        return null
      }
      break
    }
  };
  var dorun__2 = function(n, coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll) && n > 0) {
        var G__730714 = n - 1;
        var G__730715 = cljs.core.next.call(null, coll);
        n = G__730714;
        coll = G__730715;
        continue
      }else {
        return null
      }
      break
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }else {
    return null
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if(cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null)
    }, null, null)
  }else {
    return null
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__730717 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__730717, 0, null);
  var flags = cljs.core.nth.call(null, vec__730717, 1, null);
  var pattern = cljs.core.nth.call(null, vec__730717, 2, null);
  return new RegExp(pattern, flags)
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  cljs.core._write.call(null, writer, begin);
  if(cljs.core.seq.call(null, coll)) {
    print_one.call(null, cljs.core.first.call(null, coll), writer, opts)
  }else {
  }
  var coll_730718__$1 = cljs.core.next.call(null, coll);
  var n_730719 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
  while(true) {
    if(coll_730718__$1 && (n_730719 == null || !(n_730719 === 0))) {
      cljs.core._write.call(null, writer, sep);
      print_one.call(null, cljs.core.first.call(null, coll_730718__$1), writer, opts);
      var G__730720 = cljs.core.next.call(null, coll_730718__$1);
      var G__730721 = n_730719 - 1;
      coll_730718__$1 = G__730720;
      n_730719 = G__730721;
      continue
    }else {
    }
    break
  }
  if(cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
    cljs.core._write.call(null, writer, sep);
    print_one.call(null, "...", writer, opts)
  }else {
  }
  return cljs.core._write.call(null, writer, end)
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__730726 = cljs.core.seq.call(null, ss);
    var chunk__730727 = null;
    var count__730728 = 0;
    var i__730729 = 0;
    while(true) {
      if(i__730729 < count__730728) {
        var s = cljs.core._nth.call(null, chunk__730727, i__730729);
        cljs.core._write.call(null, writer, s);
        var G__730730 = seq__730726;
        var G__730731 = chunk__730727;
        var G__730732 = count__730728;
        var G__730733 = i__730729 + 1;
        seq__730726 = G__730730;
        chunk__730727 = G__730731;
        count__730728 = G__730732;
        i__730729 = G__730733;
        continue
      }else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__730726);
        if(temp__4092__auto__) {
          var seq__730726__$1 = temp__4092__auto__;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__730726__$1)) {
            var c__4009__auto__ = cljs.core.chunk_first.call(null, seq__730726__$1);
            var G__730734 = cljs.core.chunk_rest.call(null, seq__730726__$1);
            var G__730735 = c__4009__auto__;
            var G__730736 = cljs.core.count.call(null, c__4009__auto__);
            var G__730737 = 0;
            seq__730726 = G__730734;
            chunk__730727 = G__730735;
            count__730728 = G__730736;
            i__730729 = G__730737;
            continue
          }else {
            var s = cljs.core.first.call(null, seq__730726__$1);
            cljs.core._write.call(null, writer, s);
            var G__730738 = cljs.core.next.call(null, seq__730726__$1);
            var G__730739 = null;
            var G__730740 = 0;
            var G__730741 = 0;
            seq__730726 = G__730738;
            chunk__730727 = G__730739;
            count__730728 = G__730740;
            i__730729 = G__730741;
            continue
          }
        }else {
          return null
        }
      }
      break
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if(arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return write_all__delegate.call(this, writer, ss)
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__730742) {
    var writer = cljs.core.first(arglist__730742);
    var ss = cljs.core.rest(arglist__730742);
    return write_all__delegate(writer, ss)
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null
};
cljs.core.flush = function flush() {
  return null
};
cljs.core.char_escapes = function() {
  var obj730744 = {'"':'\\"', "\\":"\\\\", "\u0008":"\\b", "\u000c":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj730744
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\u0008\u000c\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match]
  })), cljs.core.str('"')].join("")
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if(obj == null) {
    return cljs.core._write.call(null, writer, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core._write.call(null, writer, "#<undefined>")
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if(cljs.core.truth_(function() {
          var and__3273__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if(cljs.core.truth_(and__3273__auto__)) {
            var and__3273__auto____$1 = function() {
              var G__730750 = obj;
              if(G__730750) {
                var bit__3911__auto__ = G__730750.cljs$lang$protocol_mask$partition0$ & 131072;
                if(bit__3911__auto__ || G__730750.cljs$core$IMeta$) {
                  return true
                }else {
                  if(!G__730750.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__730750)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__730750)
              }
            }();
            if(and__3273__auto____$1) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3273__auto____$1
            }
          }else {
            return and__3273__auto__
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ")
        }else {
        }
        if(obj == null) {
          return cljs.core._write.call(null, writer, "nil")
        }else {
          if(obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts)
          }else {
            if(function() {
              var G__730751 = obj;
              if(G__730751) {
                var bit__3904__auto__ = G__730751.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if(bit__3904__auto__ || G__730751.cljs$core$IPrintWithWriter$) {
                  return true
                }else {
                  return false
                }
              }else {
                return false
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts)
            }else {
              if(cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""))
              }else {
                if(obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#<Array [", ", ", "]>", opts, obj)
                }else {
                  if(goog.isString(obj)) {
                    if(cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj))
                    }else {
                      return cljs.core._write.call(null, writer, obj)
                    }
                  }else {
                    if(cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(obj)].join(""), ">")
                    }else {
                      if(obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while(true) {
                            if(cljs.core.count.call(null, ns) < len) {
                              var G__730753 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__730753;
                              continue
                            }else {
                              return ns
                            }
                            break
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"')
                      }else {
                        if(cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"')
                        }else {
                          if(function() {
                            var G__730752 = obj;
                            if(G__730752) {
                              var bit__3911__auto__ = G__730752.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if(bit__3911__auto__ || G__730752.cljs$core$IPrintWithWriter$) {
                                return true
                              }else {
                                if(!G__730752.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__730752)
                                }else {
                                  return false
                                }
                              }
                            }else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__730752)
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts)
                          }else {
                            if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                              return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(obj)].join(""), ">")
                            }else {
                              return null
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__730758 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__730759 = null;
  var count__730760 = 0;
  var i__730761 = 0;
  while(true) {
    if(i__730761 < count__730760) {
      var obj = cljs.core._nth.call(null, chunk__730759, i__730761);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__730762 = seq__730758;
      var G__730763 = chunk__730759;
      var G__730764 = count__730760;
      var G__730765 = i__730761 + 1;
      seq__730758 = G__730762;
      chunk__730759 = G__730763;
      count__730760 = G__730764;
      i__730761 = G__730765;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__730758);
      if(temp__4092__auto__) {
        var seq__730758__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__730758__$1)) {
          var c__4009__auto__ = cljs.core.chunk_first.call(null, seq__730758__$1);
          var G__730766 = cljs.core.chunk_rest.call(null, seq__730758__$1);
          var G__730767 = c__4009__auto__;
          var G__730768 = cljs.core.count.call(null, c__4009__auto__);
          var G__730769 = 0;
          seq__730758 = G__730766;
          chunk__730759 = G__730767;
          count__730760 = G__730768;
          i__730761 = G__730769;
          continue
        }else {
          var obj = cljs.core.first.call(null, seq__730758__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__730770 = cljs.core.next.call(null, seq__730758__$1);
          var G__730771 = null;
          var G__730772 = 0;
          var G__730773 = 0;
          seq__730758 = G__730770;
          chunk__730759 = G__730771;
          count__730760 = G__730772;
          i__730761 = G__730773;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return""
  }else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("")
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return"\n"
  }else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("")
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts))
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if(cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null)
  }else {
    return null
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr_str__delegate.call(this, objs)
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__730774) {
    var objs = cljs.core.seq(arglist__730774);
    return pr_str__delegate(objs)
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var prn_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn_str__delegate.call(this, objs)
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__730775) {
    var objs = cljs.core.seq(arglist__730775);
    return prn_str__delegate(objs)
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr__delegate.call(this, objs)
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__730776) {
    var objs = cljs.core.seq(arglist__730776);
    return pr__delegate(objs)
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return cljs_core_print__delegate.call(this, objs)
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__730777) {
    var objs = cljs.core.seq(arglist__730777);
    return cljs_core_print__delegate(objs)
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var print_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return print_str__delegate.call(this, objs)
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__730778) {
    var objs = cljs.core.seq(arglist__730778);
    return print_str__delegate(objs)
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if(cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
    }else {
      return null
    }
  };
  var println = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println__delegate.call(this, objs)
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__730779) {
    var objs = cljs.core.seq(arglist__730779);
    return println__delegate(objs)
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false))
  };
  var println_str = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println_str__delegate.call(this, objs)
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__730780) {
    var objs = cljs.core.seq(arglist__730780);
    return println_str__delegate(objs)
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if(cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
    }else {
      return null
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if(arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn__delegate.call(this, objs)
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__730781) {
    var objs = cljs.core.seq(arglist__730781);
    return prn__delegate(objs)
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn
}();
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1)
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1)
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y)
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y)
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y)
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y)
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Atom")
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__730782 = cljs.core.seq.call(null, self__.watches);
  var chunk__730783 = null;
  var count__730784 = 0;
  var i__730785 = 0;
  while(true) {
    if(i__730785 < count__730784) {
      var vec__730786 = cljs.core._nth.call(null, chunk__730783, i__730785);
      var key = cljs.core.nth.call(null, vec__730786, 0, null);
      var f = cljs.core.nth.call(null, vec__730786, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__730788 = seq__730782;
      var G__730789 = chunk__730783;
      var G__730790 = count__730784;
      var G__730791 = i__730785 + 1;
      seq__730782 = G__730788;
      chunk__730783 = G__730789;
      count__730784 = G__730790;
      i__730785 = G__730791;
      continue
    }else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__730782);
      if(temp__4092__auto__) {
        var seq__730782__$1 = temp__4092__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, seq__730782__$1)) {
          var c__4009__auto__ = cljs.core.chunk_first.call(null, seq__730782__$1);
          var G__730792 = cljs.core.chunk_rest.call(null, seq__730782__$1);
          var G__730793 = c__4009__auto__;
          var G__730794 = cljs.core.count.call(null, c__4009__auto__);
          var G__730795 = 0;
          seq__730782 = G__730792;
          chunk__730783 = G__730793;
          count__730784 = G__730794;
          i__730785 = G__730795;
          continue
        }else {
          var vec__730787 = cljs.core.first.call(null, seq__730782__$1);
          var key = cljs.core.nth.call(null, vec__730787, 0, null);
          var f = cljs.core.nth.call(null, vec__730787, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__730796 = cljs.core.next.call(null, seq__730782__$1);
          var G__730797 = null;
          var G__730798 = 0;
          var G__730799 = 0;
          seq__730782 = G__730796;
          chunk__730783 = G__730797;
          count__730784 = G__730798;
          i__730785 = G__730799;
          continue
        }
      }else {
        return null
      }
    }
    break
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key)
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#<Atom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, ">")
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches)
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null)
  };
  var atom__2 = function() {
    var G__730803__delegate = function(x, p__730800) {
      var map__730802 = p__730800;
      var map__730802__$1 = cljs.core.seq_QMARK_.call(null, map__730802) ? cljs.core.apply.call(null, cljs.core.hash_map, map__730802) : map__730802;
      var validator = cljs.core.get.call(null, map__730802__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__730802__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null)
    };
    var G__730803 = function(x, var_args) {
      var p__730800 = null;
      if(arguments.length > 1) {
        p__730800 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__730803__delegate.call(this, x, p__730800)
    };
    G__730803.cljs$lang$maxFixedArity = 1;
    G__730803.cljs$lang$applyTo = function(arglist__730804) {
      var x = cljs.core.first(arglist__730804);
      var p__730800 = cljs.core.rest(arglist__730804);
      return G__730803__delegate(x, p__730800)
    };
    G__730803.cljs$core$IFn$_invoke$arity$variadic = G__730803__delegate;
    return G__730803
  }();
  atom = function(x, var_args) {
    var p__730800 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var temp__4092__auto___730805 = a.validator;
  if(cljs.core.truth_(temp__4092__auto___730805)) {
    var validate_730806 = temp__4092__auto___730805;
    if(cljs.core.truth_(validate_730806.call(null, new_value))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }else {
  }
  var old_value_730807 = a.state;
  a.state = new_value;
  cljs.core._notify_watches.call(null, a, old_value_730807, new_value);
  return new_value
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state))
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x))
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y))
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z))
  };
  var swap_BANG___6 = function() {
    var G__730808__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more))
    };
    var G__730808 = function(a, f, x, y, z, var_args) {
      var more = null;
      if(arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__730808__delegate.call(this, a, f, x, y, z, more)
    };
    G__730808.cljs$lang$maxFixedArity = 5;
    G__730808.cljs$lang$applyTo = function(arglist__730809) {
      var a = cljs.core.first(arglist__730809);
      arglist__730809 = cljs.core.next(arglist__730809);
      var f = cljs.core.first(arglist__730809);
      arglist__730809 = cljs.core.next(arglist__730809);
      var x = cljs.core.first(arglist__730809);
      arglist__730809 = cljs.core.next(arglist__730809);
      var y = cljs.core.first(arglist__730809);
      arglist__730809 = cljs.core.next(arglist__730809);
      var z = cljs.core.first(arglist__730809);
      var more = cljs.core.rest(arglist__730809);
      return G__730808__delegate(a, f, x, y, z, more)
    };
    G__730808.cljs$core$IFn$_invoke$arity$variadic = G__730808__delegate;
    return G__730808
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if(cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true
  }else {
    return false
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o)
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args)
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if(arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__730810) {
    var iref = cljs.core.first(arglist__730810);
    arglist__730810 = cljs.core.next(arglist__730810);
    var f = cljs.core.first(arglist__730810);
    var args = cljs.core.rest(arglist__730810);
    return alter_meta_BANG___delegate(iref, f, args)
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f)
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key)
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__")
  };
  var gensym__1 = function(prefix_string) {
    if(cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0)
    }else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""))
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/Delay")
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state))
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__730811) {
    var map__730812 = p__730811;
    var map__730812__$1 = cljs.core.seq_QMARK_.call(null, map__730812) ? cljs.core.apply.call(null, cljs.core.hash_map, map__730812) : map__730812;
    var curr_state = map__730812__$1;
    var done = cljs.core.get.call(null, map__730812__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if(cljs.core.truth_(done)) {
      return curr_state
    }else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null)
    }
  }))
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f)
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay
};
cljs.core.force = function force(x) {
  if(cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x)
  }else {
    return x
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d)
};
cljs.core.IEncodeJS = function() {
  var obj730814 = {};
  return obj730814
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._clj__GT_js["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj->js", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._key__GT_js[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._key__GT_js["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key->js", x);
        }
      }
    }().call(null, x)
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if(function() {
    var G__730816 = k;
    if(G__730816) {
      var bit__3911__auto__ = null;
      if(cljs.core.truth_(function() {
        var or__3285__auto__ = bit__3911__auto__;
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          return G__730816.cljs$core$IEncodeJS$
        }
      }())) {
        return true
      }else {
        if(!G__730816.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__730816)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__730816)
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k)
  }else {
    if(typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k)
    }else {
      return cljs.core.pr_str.call(null, k)
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if(x == null) {
    return null
  }else {
    if(function() {
      var G__730826 = x;
      if(G__730826) {
        var bit__3911__auto__ = null;
        if(cljs.core.truth_(function() {
          var or__3285__auto__ = bit__3911__auto__;
          if(cljs.core.truth_(or__3285__auto__)) {
            return or__3285__auto__
          }else {
            return G__730826.cljs$core$IEncodeJS$
          }
        }())) {
          return true
        }else {
          if(!G__730826.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__730826)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__730826)
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x)
    }else {
      if(x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x)
      }else {
        if(x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("")
        }else {
          if(cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj730828 = {};
              return obj730828
            }();
            var seq__730829_730835 = cljs.core.seq.call(null, x);
            var chunk__730830_730836 = null;
            var count__730831_730837 = 0;
            var i__730832_730838 = 0;
            while(true) {
              if(i__730832_730838 < count__730831_730837) {
                var vec__730833_730839 = cljs.core._nth.call(null, chunk__730830_730836, i__730832_730838);
                var k_730840 = cljs.core.nth.call(null, vec__730833_730839, 0, null);
                var v_730841 = cljs.core.nth.call(null, vec__730833_730839, 1, null);
                m[cljs.core.key__GT_js.call(null, k_730840)] = clj__GT_js.call(null, v_730841);
                var G__730842 = seq__730829_730835;
                var G__730843 = chunk__730830_730836;
                var G__730844 = count__730831_730837;
                var G__730845 = i__730832_730838 + 1;
                seq__730829_730835 = G__730842;
                chunk__730830_730836 = G__730843;
                count__730831_730837 = G__730844;
                i__730832_730838 = G__730845;
                continue
              }else {
                var temp__4092__auto___730846 = cljs.core.seq.call(null, seq__730829_730835);
                if(temp__4092__auto___730846) {
                  var seq__730829_730847__$1 = temp__4092__auto___730846;
                  if(cljs.core.chunked_seq_QMARK_.call(null, seq__730829_730847__$1)) {
                    var c__4009__auto___730848 = cljs.core.chunk_first.call(null, seq__730829_730847__$1);
                    var G__730849 = cljs.core.chunk_rest.call(null, seq__730829_730847__$1);
                    var G__730850 = c__4009__auto___730848;
                    var G__730851 = cljs.core.count.call(null, c__4009__auto___730848);
                    var G__730852 = 0;
                    seq__730829_730835 = G__730849;
                    chunk__730830_730836 = G__730850;
                    count__730831_730837 = G__730851;
                    i__730832_730838 = G__730852;
                    continue
                  }else {
                    var vec__730834_730853 = cljs.core.first.call(null, seq__730829_730847__$1);
                    var k_730854 = cljs.core.nth.call(null, vec__730834_730853, 0, null);
                    var v_730855 = cljs.core.nth.call(null, vec__730834_730853, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_730854)] = clj__GT_js.call(null, v_730855);
                    var G__730856 = cljs.core.next.call(null, seq__730829_730847__$1);
                    var G__730857 = null;
                    var G__730858 = 0;
                    var G__730859 = 0;
                    seq__730829_730835 = G__730856;
                    chunk__730830_730836 = G__730857;
                    count__730831_730837 = G__730858;
                    i__730832_730838 = G__730859;
                    continue
                  }
                }else {
                }
              }
              break
            }
            return m
          }else {
            if(cljs.core.coll_QMARK_.call(null, x)) {
              return cljs.core.apply.call(null, cljs.core.array, cljs.core.map.call(null, clj__GT_js, x))
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x
              }else {
                return null
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj730861 = {};
  return obj730861
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if(function() {
    var and__3273__auto__ = x;
    if(and__3273__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options)
  }else {
    var x__3888__auto__ = x == null ? null : x;
    return function() {
      var or__3285__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._js__GT_clj["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js->clj", x);
        }
      }
    }().call(null, x, options)
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null))
  };
  var js__GT_clj__2 = function() {
    var G__730882__delegate = function(x, opts) {
      if(function() {
        var G__730872 = x;
        if(G__730872) {
          var bit__3911__auto__ = null;
          if(cljs.core.truth_(function() {
            var or__3285__auto__ = bit__3911__auto__;
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return G__730872.cljs$core$IEncodeClojure$
            }
          }())) {
            return true
          }else {
            if(!G__730872.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__730872)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__730872)
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts))
      }else {
        if(cljs.core.seq.call(null, opts)) {
          var map__730873 = opts;
          var map__730873__$1 = cljs.core.seq_QMARK_.call(null, map__730873) ? cljs.core.apply.call(null, cljs.core.hash_map, map__730873) : map__730873;
          var keywordize_keys = cljs.core.get.call(null, map__730873__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__730873, map__730873__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if(cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1))
              }else {
                if(cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1))
                }else {
                  if(x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1))
                  }else {
                    if(cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__3978__auto__ = function(map__730873, map__730873__$1, keywordize_keys, keyfn) {
                          return function iter__730878(s__730879) {
                            return new cljs.core.LazySeq(null, function(map__730873, map__730873__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__730879__$1 = s__730879;
                                while(true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__730879__$1);
                                  if(temp__4092__auto__) {
                                    var s__730879__$2 = temp__4092__auto__;
                                    if(cljs.core.chunked_seq_QMARK_.call(null, s__730879__$2)) {
                                      var c__3976__auto__ = cljs.core.chunk_first.call(null, s__730879__$2);
                                      var size__3977__auto__ = cljs.core.count.call(null, c__3976__auto__);
                                      var b__730881 = cljs.core.chunk_buffer.call(null, size__3977__auto__);
                                      if(function() {
                                        var i__730880 = 0;
                                        while(true) {
                                          if(i__730880 < size__3977__auto__) {
                                            var k = cljs.core._nth.call(null, c__3976__auto__, i__730880);
                                            cljs.core.chunk_append.call(null, b__730881, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__730883 = i__730880 + 1;
                                            i__730880 = G__730883;
                                            continue
                                          }else {
                                            return true
                                          }
                                          break
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__730881), iter__730878.call(null, cljs.core.chunk_rest.call(null, s__730879__$2)))
                                      }else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__730881), null)
                                      }
                                    }else {
                                      var k = cljs.core.first.call(null, s__730879__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__730878.call(null, cljs.core.rest.call(null, s__730879__$2)))
                                    }
                                  }else {
                                    return null
                                  }
                                  break
                                }
                              }
                            }(map__730873, map__730873__$1, keywordize_keys, keyfn), null, null)
                          }
                        }(map__730873, map__730873__$1, keywordize_keys, keyfn);
                        return iter__3978__auto__.call(null, cljs.core.js_keys.call(null, x__$1))
                      }())
                    }else {
                      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1
                      }else {
                        return null
                      }
                    }
                  }
                }
              }
            }
          }(map__730873, map__730873__$1, keywordize_keys, keyfn);
          return f.call(null, x)
        }else {
          return null
        }
      }
    };
    var G__730882 = function(x, var_args) {
      var opts = null;
      if(arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__730882__delegate.call(this, x, opts)
    };
    G__730882.cljs$lang$maxFixedArity = 1;
    G__730882.cljs$lang$applyTo = function(arglist__730884) {
      var x = cljs.core.first(arglist__730884);
      var opts = cljs.core.rest(arglist__730884);
      return G__730882__delegate(x, opts)
    };
    G__730882.cljs$core$IFn$_invoke$arity$variadic = G__730882__delegate;
    return G__730882
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__730885__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if(cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v
      }else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret
      }
    };
    var G__730885 = function(var_args) {
      var args = null;
      if(arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__730885__delegate.call(this, args)
    };
    G__730885.cljs$lang$maxFixedArity = 0;
    G__730885.cljs$lang$applyTo = function(arglist__730886) {
      var args = cljs.core.seq(arglist__730886);
      return G__730885__delegate(args)
    };
    G__730885.cljs$core$IFn$_invoke$arity$variadic = G__730885__delegate;
    return G__730885
  }()
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while(true) {
      var ret = f.call(null);
      if(cljs.core.fn_QMARK_.call(null, ret)) {
        var G__730887 = ret;
        f = G__730887;
        continue
      }else {
        return ret
      }
      break
    }
  };
  var trampoline__2 = function() {
    var G__730888__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args)
      })
    };
    var G__730888 = function(f, var_args) {
      var args = null;
      if(arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__730888__delegate.call(this, f, args)
    };
    G__730888.cljs$lang$maxFixedArity = 1;
    G__730888.cljs$lang$applyTo = function(arglist__730889) {
      var f = cljs.core.first(arglist__730889);
      var args = cljs.core.rest(arglist__730889);
      return G__730888__delegate(f, args)
    };
    G__730888.cljs$core$IFn$_invoke$arity$variadic = G__730888__delegate;
    return G__730888
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1)
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n)
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)))
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x))
  }, cljs.core.PersistentArrayMap.EMPTY, coll)
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null)
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if(cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null))
  }else {
  }
  return cljs.core._global_hierarchy
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args)
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args)
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__730890) {
    var f = cljs.core.first(arglist__730890);
    var args = cljs.core.rest(arglist__730890);
    return swap_global_hierarchy_BANG___delegate(f, args)
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent)
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3285__auto__ = cljs.core._EQ_.call(null, child, parent);
    if(or__3285__auto__) {
      return or__3285__auto__
    }else {
      var or__3285__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if(or__3285__auto____$1) {
        return or__3285__auto____$1
      }else {
        var and__3273__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if(and__3273__auto__) {
          var and__3273__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if(and__3273__auto____$1) {
            var and__3273__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if(and__3273__auto____$2) {
              var ret = true;
              var i = 0;
              while(true) {
                if(!ret || i === cljs.core.count.call(null, parent)) {
                  return ret
                }else {
                  var G__730891 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__730892 = i + 1;
                  ret = G__730891;
                  i = G__730892;
                  continue
                }
                break
              }
            }else {
              return and__3273__auto____$2
            }
          }else {
            return and__3273__auto____$1
          }
        }else {
          return and__3273__auto__
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag)
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag))
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if(cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null
  };
  var derive__3 = function(h, tag, parent) {
    if(cljs.core.not_EQ_.call(null, tag, parent)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not=", "not=", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))))
          }
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)))
      }
    }(tp, td, ta);
    var or__3285__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null)
    }();
    if(cljs.core.truth_(or__3285__auto__)) {
      return or__3285__auto__
    }else {
      return h
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__730893_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__730893_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__730893_SHARP_), cljs.core.second.call(null, p1__730893_SHARP_)))
      }
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if(cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__730894_SHARP_, p2__730895_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__730894_SHARP_, p2__730895_SHARP_)
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq))
    }else {
      return h
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table)
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy)
  })
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3285__auto__ = cljs.core.truth_(function() {
    var and__3273__auto__ = xprefs;
    if(cljs.core.truth_(and__3273__auto__)) {
      return xprefs.call(null, y)
    }else {
      return and__3273__auto__
    }
  }()) ? true : null;
  if(cljs.core.truth_(or__3285__auto__)) {
    return or__3285__auto__
  }else {
    var or__3285__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while(true) {
        if(cljs.core.count.call(null, ps) > 0) {
          if(cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          }else {
          }
          var G__730896 = cljs.core.rest.call(null, ps);
          ps = G__730896;
          continue
        }else {
          return null
        }
        break
      }
    }();
    if(cljs.core.truth_(or__3285__auto____$1)) {
      return or__3285__auto____$1
    }else {
      var or__3285__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while(true) {
          if(cljs.core.count.call(null, ps) > 0) {
            if(cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            }else {
            }
            var G__730897 = cljs.core.rest.call(null, ps);
            ps = G__730897;
            continue
          }else {
            return null
          }
          break
        }
      }();
      if(cljs.core.truth_(or__3285__auto____$2)) {
        return or__3285__auto____$2
      }else {
        return false
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3285__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if(cljs.core.truth_(or__3285__auto__)) {
    return or__3285__auto__
  }else {
    return cljs.core.isa_QMARK_.call(null, x, y)
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__730900) {
    var vec__730901 = p__730900;
    var k = cljs.core.nth.call(null, vec__730901, 0, null);
    var _ = cljs.core.nth.call(null, vec__730901, 1, null);
    var e = vec__730901;
    if(cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3285__auto__ = be == null;
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table)
        }
      }()) ? e : be;
      if(cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      }else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -> "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2
    }else {
      return be
    }
  }, null, cljs.core.deref.call(null, method_table));
  if(cljs.core.truth_(best_entry)) {
    if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry)
    }else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
    }
  }else {
    return null
  }
};
cljs.core.IMultiFn = function() {
  var obj730903 = {};
  return obj730903
}();
cljs.core._reset = function _reset(mf) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._reset[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._reset["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._add_method[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._add_method["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method)
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._remove_method[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._remove_method["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._prefer_method[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._prefer_method["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y)
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._get_method[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._get_method["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._methods = function _methods(mf) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._methods[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._methods["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._prefers = function _prefers(mf) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._prefers[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._prefers["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if(function() {
    var and__3273__auto__ = mf;
    if(and__3273__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args)
  }else {
    var x__3888__auto__ = mf == null ? null : mf;
    return function() {
      var or__3285__auto__ = cljs.core._dispatch[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core._dispatch["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args)
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if(cljs.core.truth_(target_fn)) {
  }else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args)
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/MultiFn")
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null
  });
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  }else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if(cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn
  }else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if(cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn
    }else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val)
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if(cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  }else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y))
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args)
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
};
cljs.core.MultiFn.prototype.call = function() {
  var G__730904__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args)
  };
  var G__730904 = function(_, var_args) {
    var args = null;
    if(arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__730904__delegate.call(this, _, args)
  };
  G__730904.cljs$lang$maxFixedArity = 1;
  G__730904.cljs$lang$applyTo = function(arglist__730905) {
    var _ = cljs.core.first(arglist__730905);
    var args = cljs.core.rest(arglist__730905);
    return G__730904__delegate(_, args)
  };
  G__730904.cljs$core$IFn$_invoke$arity$variadic = G__730904__delegate;
  return G__730904
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args)
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn)
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val)
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y)
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn)
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val)
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn)
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core/UUID")
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1))
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid)
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3832__auto__, writer__3833__auto__, opts__3834__auto__) {
  return cljs.core._write.call(null, writer__3833__auto__, "cljs.core/ExceptionInfo")
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause)
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null)
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause)
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info
}();
cljs.core.ex_data = function ex_data(ex) {
  if(ex instanceof cljs.core.ExceptionInfo) {
    return ex.data
  }else {
    return null
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if(ex instanceof Error) {
    return ex.message
  }else {
    return null
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if(ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause
  }else {
    return null
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if(cljs.core.truth_(pred.call(null, x, y))) {
      return-1
    }else {
      if(cljs.core.truth_(pred.call(null, y, x))) {
        return 1
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "&", "&", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x)
};
goog.provide("cljs_uuid.core");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid.core.make_random = function make_random() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16)
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16)
  };
  return new cljs.core.UUID((new goog.string.StringBuffer(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null))).toString())
};
cljs_uuid.core.make_v4 = cljs_uuid.core.make_random;
cljs_uuid.core.make_random_string = function make_random_string() {
  return cljs_uuid.core.make_random.call(null).uuid
};
goog.provide("chaperone.crossover.user");
goog.require("cljs.core");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.user.User = function(id, firstname, lastname, password, email, photo, last_logged_in, __meta, __extmap) {
  this.id = id;
  this.firstname = firstname;
  this.lastname = lastname;
  this.password = password;
  this.email = email;
  this.photo = photo;
  this.last_logged_in = last_logged_in;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 7) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3842__auto__) {
  var self__ = this;
  var this__3842__auto____$1 = this;
  var h__3696__auto__ = self__.__hash;
  if(!(h__3696__auto__ == null)) {
    return h__3696__auto__
  }else {
    var h__3696__auto____$1 = cljs.core.hash_imap.call(null, this__3842__auto____$1);
    self__.__hash = h__3696__auto____$1;
    return h__3696__auto____$1
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3847__auto__, k__3848__auto__) {
  var self__ = this;
  var this__3847__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3847__auto____$1, k__3848__auto__, null)
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3849__auto__, k733079, else__3850__auto__) {
  var self__ = this;
  var this__3849__auto____$1 = this;
  if(cljs.core.keyword_identical_QMARK_.call(null, k733079, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id
  }else {
    if(cljs.core.keyword_identical_QMARK_.call(null, k733079, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229))) {
      return self__.firstname
    }else {
      if(cljs.core.keyword_identical_QMARK_.call(null, k733079, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043))) {
        return self__.lastname
      }else {
        if(cljs.core.keyword_identical_QMARK_.call(null, k733079, new cljs.core.Keyword(null, "password", "password", 2230889997))) {
          return self__.password
        }else {
          if(cljs.core.keyword_identical_QMARK_.call(null, k733079, new cljs.core.Keyword(null, "email", "email", 1110523662))) {
            return self__.email
          }else {
            if(cljs.core.keyword_identical_QMARK_.call(null, k733079, new cljs.core.Keyword(null, "photo", "photo", 1120547236))) {
              return self__.photo
            }else {
              if(cljs.core.keyword_identical_QMARK_.call(null, k733079, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907))) {
                return self__.last_logged_in
              }else {
                if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return cljs.core.get.call(null, self__.__extmap, k733079, else__3850__auto__)
                }else {
                  return null
                }
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3854__auto__, k__3855__auto__, G__733078) {
  var self__ = this;
  var this__3854__auto____$1 = this;
  var pred__733081 = cljs.core.keyword_identical_QMARK_;
  var expr__733082 = k__3855__auto__;
  if(cljs.core.truth_(pred__733081.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__733082))) {
    return new chaperone.crossover.user.User(G__733078, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
  }else {
    if(cljs.core.truth_(pred__733081.call(null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), expr__733082))) {
      return new chaperone.crossover.user.User(self__.id, G__733078, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
    }else {
      if(cljs.core.truth_(pred__733081.call(null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), expr__733082))) {
        return new chaperone.crossover.user.User(self__.id, self__.firstname, G__733078, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
      }else {
        if(cljs.core.truth_(pred__733081.call(null, new cljs.core.Keyword(null, "password", "password", 2230889997), expr__733082))) {
          return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, G__733078, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
        }else {
          if(cljs.core.truth_(pred__733081.call(null, new cljs.core.Keyword(null, "email", "email", 1110523662), expr__733082))) {
            return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, G__733078, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null)
          }else {
            if(cljs.core.truth_(pred__733081.call(null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), expr__733082))) {
              return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, G__733078, self__.last_logged_in, self__.__meta, self__.__extmap, null)
            }else {
              if(cljs.core.truth_(pred__733081.call(null, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), expr__733082))) {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, G__733078, self__.__meta, self__.__extmap, null)
              }else {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3855__auto__, G__733078), null)
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3861__auto__, writer__3862__auto__, opts__3863__auto__) {
  var self__ = this;
  var this__3861__auto____$1 = this;
  var pr_pair__3864__auto__ = function(keyval__3865__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3862__auto__, cljs.core.pr_writer, "", " ", "", opts__3863__auto__, keyval__3865__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3862__auto__, pr_pair__3864__auto__, "#chaperone.crossover.user.User{", ", ", "}", opts__3863__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap))
};
chaperone.crossover.user.User.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3852__auto__, entry__3853__auto__) {
  var self__ = this;
  var this__3852__auto____$1 = this;
  if(cljs.core.vector_QMARK_.call(null, entry__3853__auto__)) {
    return cljs.core._assoc.call(null, this__3852__auto____$1, cljs.core._nth.call(null, entry__3853__auto__, 0), cljs.core._nth.call(null, entry__3853__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3852__auto____$1, entry__3853__auto__)
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3859__auto__) {
  var self__ = this;
  var this__3859__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap))
};
chaperone.crossover.user.User.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3851__auto__) {
  var self__ = this;
  var this__3851__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap)
};
chaperone.crossover.user.User.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3843__auto__, other__3844__auto__) {
  var self__ = this;
  var this__3843__auto____$1 = this;
  if(cljs.core.truth_(function() {
    var and__3273__auto__ = other__3844__auto__;
    if(cljs.core.truth_(and__3273__auto__)) {
      return this__3843__auto____$1.constructor === other__3844__auto__.constructor && cljs.core.equiv_map.call(null, this__3843__auto____$1, other__3844__auto__)
    }else {
      return and__3273__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3846__auto__, G__733078) {
  var self__ = this;
  var this__3846__auto____$1 = this;
  return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, G__733078, self__.__extmap, self__.__hash)
};
chaperone.crossover.user.User.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3845__auto__) {
  var self__ = this;
  var this__3845__auto____$1 = this;
  return self__.__meta
};
chaperone.crossover.user.User.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3856__auto__, k__3857__auto__) {
  var self__ = this;
  var this__3856__auto____$1 = this;
  if(cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), null, new cljs.core.Keyword(null, "email", "email", 1110523662), null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), null, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), null, new cljs.core.Keyword(null, "password", "password", 2230889997), null], null), null), k__3857__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3856__auto____$1), self__.__meta), k__3857__auto__)
  }else {
    return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3857__auto__)), null)
  }
};
chaperone.crossover.user.User.cljs$lang$type = true;
chaperone.crossover.user.User.cljs$lang$ctorPrSeq = function(this__3881__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.user/User")
};
chaperone.crossover.user.User.cljs$lang$ctorPrWriter = function(this__3881__auto__, writer__3882__auto__) {
  return cljs.core._write.call(null, writer__3882__auto__, "chaperone.crossover.user/User")
};
chaperone.crossover.user.__GT_User = function __GT_User(id, firstname, lastname, password, email, photo, last_logged_in) {
  return new chaperone.crossover.user.User(id, firstname, lastname, password, email, photo, last_logged_in)
};
chaperone.crossover.user.map__GT_User = function map__GT_User(G__733080) {
  return new chaperone.crossover.user.User((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__733080), (new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(G__733080), (new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(G__733080), (new cljs.core.Keyword(null, "password", "password", 2230889997)).cljs$core$IFn$_invoke$arity$1(G__733080), (new cljs.core.Keyword(null, "email", 
  "email", 1110523662)).cljs$core$IFn$_invoke$arity$1(G__733080), (new cljs.core.Keyword(null, "photo", "photo", 1120547236)).cljs$core$IFn$_invoke$arity$1(G__733080), (new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)).cljs$core$IFn$_invoke$arity$1(G__733080), null, cljs.core.dissoc.call(null, G__733080, new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), new cljs.core.Keyword(null, "lastname", "lastname", 
  3850225043), new cljs.core.Keyword(null, "password", "password", 2230889997), new cljs.core.Keyword(null, "email", "email", 1110523662), new cljs.core.Keyword(null, "photo", "photo", 1120547236), new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)))
};
chaperone.crossover.user.new_user = function() {
  var new_user__delegate = function(firstname, lastname, email, password, p__733084) {
    var map__733086 = p__733084;
    var map__733086__$1 = cljs.core.seq_QMARK_.call(null, map__733086) ? cljs.core.apply.call(null, cljs.core.hash_map, map__733086) : map__733086;
    var last_logged_in = cljs.core.get.call(null, map__733086__$1, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907));
    var photo = cljs.core.get.call(null, map__733086__$1, new cljs.core.Keyword(null, "photo", "photo", 1120547236));
    return chaperone.crossover.user.__GT_User.call(null, cljs_uuid.core.make_random_string.call(null), firstname, lastname, password, email, photo, last_logged_in)
  };
  var new_user = function(firstname, lastname, email, password, var_args) {
    var p__733084 = null;
    if(arguments.length > 4) {
      p__733084 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
    }
    return new_user__delegate.call(this, firstname, lastname, email, password, p__733084)
  };
  new_user.cljs$lang$maxFixedArity = 4;
  new_user.cljs$lang$applyTo = function(arglist__733087) {
    var firstname = cljs.core.first(arglist__733087);
    arglist__733087 = cljs.core.next(arglist__733087);
    var lastname = cljs.core.first(arglist__733087);
    arglist__733087 = cljs.core.next(arglist__733087);
    var email = cljs.core.first(arglist__733087);
    arglist__733087 = cljs.core.next(arglist__733087);
    var password = cljs.core.first(arglist__733087);
    var p__733084 = cljs.core.rest(arglist__733087);
    return new_user__delegate(firstname, lastname, email, password, p__733084)
  };
  new_user.cljs$core$IFn$_invoke$arity$variadic = new_user__delegate;
  return new_user
}();
goog.provide("purnam.common");
goog.require("cljs.core");
purnam.common.flags = function() {
  var obj733077 = {};
  return obj733077
}();
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("")
};
clojure.string.replace = function replace(s, match, replacement) {
  if(typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement)
  }else {
    if(cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      }else {
        return null
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement)
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll)
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll))
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase()
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase()
};
clojure.string.capitalize = function capitalize(s) {
  if(cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s)
  }else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("")
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while(true) {
    if(cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__733062 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__733062;
      continue
    }else {
      return v__$1
    }
    break
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if(cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v)
  }else {
    return v
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if(limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "")
  }else {
    var pred__733066 = cljs.core._EQ_;
    var expr__733067 = limit;
    if(cljs.core.truth_(pred__733066.call(null, 1, expr__733067))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null)
    }else {
      if(cljs.core.truth_(pred__733066.call(null, 2, expr__733067))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null)
      }else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c))
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0)
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while(true) {
        if(cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1)
        }else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if(cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__733069 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__733070 = limit__$1 - 1;
            var G__733071 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__733069;
            limit__$1 = G__733070;
            parts = G__733071;
            continue
          }else {
            return cljs.core.conj.call(null, parts, s__$1)
          }
        }
        break
      }
    }())
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/)
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s)
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s)
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s)
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while(true) {
    if(index === 0) {
      return""
    }else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if(cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__733072 = index - 1;
        index = G__733072;
        continue
      }else {
        return s.substring(0, index)
      }
    }
    break
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s)
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while(true) {
    if(cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString()
    }else {
      var ch = s.charAt(index);
      var temp__4090__auto___733073 = cljs.core.get.call(null, cmap, ch);
      if(cljs.core.truth_(temp__4090__auto___733073)) {
        var replacement_733074 = temp__4090__auto___733073;
        buffer.append([cljs.core.str(replacement_733074)].join(""))
      }else {
        buffer.append(ch)
      }
      var G__733075 = index + 1;
      index = G__733075;
      continue
    }
    break
  }
};
goog.provide("purnam.cljs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("purnam.common");
goog.require("purnam.common");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.cljs.nested_val = function nested_val(p__732900, val) {
  var vec__732904 = p__732900;
  var k = cljs.core.nth.call(null, vec__732904, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__732904, 1);
  if(k == null) {
    return val
  }else {
    var o = function() {
      var obj732906 = {};
      return obj732906
    }();
    o[k] = nested_val.call(null, ks, val);
    return o
  }
};
purnam.cljs.nested_delete = function nested_delete(p__732907, val) {
  var vec__732909 = p__732907;
  var k = cljs.core.nth.call(null, vec__732909, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__732909, 1);
  if(ks == null) {
    delete val[k]
  }else {
    nested_delete.call(null, ks, val)
  }
  return val
};
purnam.cljs.aset_in = function() {
  var aset_in = null;
  var aset_in__2 = function(var$, arr) {
    return aset_in.call(null, var$, arr, null)
  };
  var aset_in__3 = function(var$, arr, val) {
    var vec__732911 = arr;
    var k = cljs.core.nth.call(null, vec__732911, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__732911, 1);
    if(k == null) {
    }else {
      if(cljs.core.empty_QMARK_.call(null, ks)) {
        if(cljs.core.truth_(val)) {
          var$[k] = val
        }else {
          delete var$[k]
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var temp__4090__auto___732912 = var$[k];
          if(cljs.core.truth_(temp__4090__auto___732912)) {
            var svar_732913 = temp__4090__auto___732912;
            aset_in.call(null, svar_732913, ks, val)
          }else {
            if(cljs.core.truth_(val)) {
              var$[k] = purnam.cljs.nested_val.call(null, ks, val)
            }else {
            }
          }
        }else {
        }
      }
    }
    return var$
  };
  aset_in = function(var$, arr, val) {
    switch(arguments.length) {
      case 2:
        return aset_in__2.call(this, var$, arr);
      case 3:
        return aset_in__3.call(this, var$, arr, val)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset_in.cljs$core$IFn$_invoke$arity$2 = aset_in__2;
  aset_in.cljs$core$IFn$_invoke$arity$3 = aset_in__3;
  return aset_in
}();
purnam.cljs.aget_in = function() {
  var aget_in = null;
  var aget_in__1 = function(var$) {
    return var$
  };
  var aget_in__2 = function(var$, arr) {
    if(var$ == null) {
      return null
    }else {
      if(cljs.core.empty_QMARK_.call(null, arr)) {
        return var$
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return aget_in.call(null, var$[cljs.core.first.call(null, arr)], cljs.core.next.call(null, arr))
        }else {
          return null
        }
      }
    }
  };
  aget_in = function(var$, arr) {
    switch(arguments.length) {
      case 1:
        return aget_in__1.call(this, var$);
      case 2:
        return aget_in__2.call(this, var$, arr)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget_in.cljs$core$IFn$_invoke$arity$1 = aget_in__1;
  aget_in.cljs$core$IFn$_invoke$arity$2 = aget_in__2;
  return aget_in
}();
purnam.cljs.js_strkey = function js_strkey(x) {
  if(typeof x === "string") {
    return x
  }else {
    if(x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x)
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(x)].join("")
      }else {
        return null
      }
    }
  }
};
purnam.cljs.js_obj_name = function js_obj_name(this$) {
  var temp__4090__auto__ = cljs.core.re_find.call(null, /^function (\w+)/, [cljs.core.str(this$)].join(""));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var vec__732915 = temp__4090__auto__;
    var _ = cljs.core.nth.call(null, vec__732915, 0, null);
    var n = cljs.core.nth.call(null, vec__732915, 1, null);
    return n
  }else {
    return"Object"
  }
};
purnam.cljs.js_lookup = function() {
  var js_lookup = null;
  var js_lookup__2 = function(o, k) {
    return o[purnam.cljs.js_strkey.call(null, k)]
  };
  var js_lookup__3 = function(o, k, not_found) {
    var s = purnam.cljs.js_strkey.call(null, k);
    var temp__4090__auto__ = o[s];
    if(cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return res
    }else {
      return not_found
    }
  };
  js_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return js_lookup__2.call(this, o, k);
      case 3:
        return js_lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_lookup.cljs$core$IFn$_invoke$arity$2 = js_lookup__2;
  js_lookup.cljs$core$IFn$_invoke$arity$3 = js_lookup__3;
  return js_lookup
}();
purnam.cljs.js_assoc = function() {
  var js_assoc = null;
  var js_assoc__3 = function(o, k, v) {
    o[purnam.cljs.js_strkey.call(null, k)] = v;
    return o
  };
  var js_assoc__4 = function() {
    var G__732916__delegate = function(o, k, v, more) {
      while(true) {
        js_assoc.call(null, o, k, v);
        if(cljs.core.truth_(more)) {
          var G__732917 = o;
          var G__732918 = cljs.core.first.call(null, more);
          var G__732919 = cljs.core.second.call(null, more);
          var G__732920 = cljs.core.nnext.call(null, more);
          o = G__732917;
          k = G__732918;
          v = G__732919;
          more = G__732920;
          continue
        }else {
          return o
        }
        break
      }
    };
    var G__732916 = function(o, k, v, var_args) {
      var more = null;
      if(arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__732916__delegate.call(this, o, k, v, more)
    };
    G__732916.cljs$lang$maxFixedArity = 3;
    G__732916.cljs$lang$applyTo = function(arglist__732921) {
      var o = cljs.core.first(arglist__732921);
      arglist__732921 = cljs.core.next(arglist__732921);
      var k = cljs.core.first(arglist__732921);
      arglist__732921 = cljs.core.next(arglist__732921);
      var v = cljs.core.first(arglist__732921);
      var more = cljs.core.rest(arglist__732921);
      return G__732916__delegate(o, k, v, more)
    };
    G__732916.cljs$core$IFn$_invoke$arity$variadic = G__732916__delegate;
    return G__732916
  }();
  js_assoc = function(o, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return js_assoc__3.call(this, o, k, v);
      default:
        return js_assoc__4.cljs$core$IFn$_invoke$arity$variadic(o, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_assoc.cljs$lang$maxFixedArity = 3;
  js_assoc.cljs$lang$applyTo = js_assoc__4.cljs$lang$applyTo;
  js_assoc.cljs$core$IFn$_invoke$arity$3 = js_assoc__3;
  js_assoc.cljs$core$IFn$_invoke$arity$variadic = js_assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return js_assoc
}();
purnam.cljs.js_dissoc = function() {
  var js_dissoc__delegate = function(o, k, more) {
    while(true) {
      delete o[purnam.cljs.js_strkey.call(null, k)];
      if(cljs.core.truth_(more)) {
        var G__732922 = o;
        var G__732923 = cljs.core.first.call(null, more);
        var G__732924 = cljs.core.next.call(null, more);
        o = G__732922;
        k = G__732923;
        more = G__732924;
        continue
      }else {
        return o
      }
      break
    }
  };
  var js_dissoc = function(o, k, var_args) {
    var more = null;
    if(arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return js_dissoc__delegate.call(this, o, k, more)
  };
  js_dissoc.cljs$lang$maxFixedArity = 2;
  js_dissoc.cljs$lang$applyTo = function(arglist__732925) {
    var o = cljs.core.first(arglist__732925);
    arglist__732925 = cljs.core.next(arglist__732925);
    var k = cljs.core.first(arglist__732925);
    var more = cljs.core.rest(arglist__732925);
    return js_dissoc__delegate(o, k, more)
  };
  js_dissoc.cljs$core$IFn$_invoke$arity$variadic = js_dissoc__delegate;
  return js_dissoc
}();
purnam.cljs.js_empty = function js_empty(o) {
  var G__732931_732936 = goog.typeOf(o);
  if(cljs.core._EQ_.call(null, "array", G__732931_732936)) {
    o["length"] = 0
  }else {
    if(cljs.core._EQ_.call(null, "object", G__732931_732936)) {
      var seq__732932_732937 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o));
      var chunk__732933_732938 = null;
      var count__732934_732939 = 0;
      var i__732935_732940 = 0;
      while(true) {
        if(i__732935_732940 < count__732934_732939) {
          var k_732941 = cljs.core._nth.call(null, chunk__732933_732938, i__732935_732940);
          delete o[k_732941];
          var G__732942 = seq__732932_732937;
          var G__732943 = chunk__732933_732938;
          var G__732944 = count__732934_732939;
          var G__732945 = i__732935_732940 + 1;
          seq__732932_732937 = G__732942;
          chunk__732933_732938 = G__732943;
          count__732934_732939 = G__732944;
          i__732935_732940 = G__732945;
          continue
        }else {
          var temp__4092__auto___732946 = cljs.core.seq.call(null, seq__732932_732937);
          if(temp__4092__auto___732946) {
            var seq__732932_732947__$1 = temp__4092__auto___732946;
            if(cljs.core.chunked_seq_QMARK_.call(null, seq__732932_732947__$1)) {
              var c__4009__auto___732948 = cljs.core.chunk_first.call(null, seq__732932_732947__$1);
              var G__732949 = cljs.core.chunk_rest.call(null, seq__732932_732947__$1);
              var G__732950 = c__4009__auto___732948;
              var G__732951 = cljs.core.count.call(null, c__4009__auto___732948);
              var G__732952 = 0;
              seq__732932_732937 = G__732949;
              chunk__732933_732938 = G__732950;
              count__732934_732939 = G__732951;
              i__732935_732940 = G__732952;
              continue
            }else {
              var k_732953 = cljs.core.first.call(null, seq__732932_732947__$1);
              delete o[k_732953];
              var G__732954 = cljs.core.next.call(null, seq__732932_732947__$1);
              var G__732955 = null;
              var G__732956 = 0;
              var G__732957 = 0;
              seq__732932_732937 = G__732954;
              chunk__732933_732938 = G__732955;
              count__732934_732939 = G__732956;
              i__732935_732940 = G__732957;
              continue
            }
          }else {
          }
        }
        break
      }
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(goog.typeOf(o))].join(""));
      }else {
      }
    }
  }
  return o
};
purnam.cljs.js_merge = function() {
  var js_merge = null;
  var js_merge__2 = function(o1, o2) {
    var seq__732962_732966 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__732963_732967 = null;
    var count__732964_732968 = 0;
    var i__732965_732969 = 0;
    while(true) {
      if(i__732965_732969 < count__732964_732968) {
        var k_732970 = cljs.core._nth.call(null, chunk__732963_732967, i__732965_732969);
        o1[k_732970] = o2[k_732970];
        var G__732971 = seq__732962_732966;
        var G__732972 = chunk__732963_732967;
        var G__732973 = count__732964_732968;
        var G__732974 = i__732965_732969 + 1;
        seq__732962_732966 = G__732971;
        chunk__732963_732967 = G__732972;
        count__732964_732968 = G__732973;
        i__732965_732969 = G__732974;
        continue
      }else {
        var temp__4092__auto___732975 = cljs.core.seq.call(null, seq__732962_732966);
        if(temp__4092__auto___732975) {
          var seq__732962_732976__$1 = temp__4092__auto___732975;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__732962_732976__$1)) {
            var c__4009__auto___732977 = cljs.core.chunk_first.call(null, seq__732962_732976__$1);
            var G__732978 = cljs.core.chunk_rest.call(null, seq__732962_732976__$1);
            var G__732979 = c__4009__auto___732977;
            var G__732980 = cljs.core.count.call(null, c__4009__auto___732977);
            var G__732981 = 0;
            seq__732962_732966 = G__732978;
            chunk__732963_732967 = G__732979;
            count__732964_732968 = G__732980;
            i__732965_732969 = G__732981;
            continue
          }else {
            var k_732982 = cljs.core.first.call(null, seq__732962_732976__$1);
            o1[k_732982] = o2[k_732982];
            var G__732983 = cljs.core.next.call(null, seq__732962_732976__$1);
            var G__732984 = null;
            var G__732985 = 0;
            var G__732986 = 0;
            seq__732962_732966 = G__732983;
            chunk__732963_732967 = G__732984;
            count__732964_732968 = G__732985;
            i__732965_732969 = G__732986;
            continue
          }
        }else {
        }
      }
      break
    }
    return o1
  };
  var js_merge__3 = function() {
    var G__732987__delegate = function(o1, o2, more) {
      return cljs.core.apply.call(null, js_merge, js_merge.call(null, o1, o2), more)
    };
    var G__732987 = function(o1, o2, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__732987__delegate.call(this, o1, o2, more)
    };
    G__732987.cljs$lang$maxFixedArity = 2;
    G__732987.cljs$lang$applyTo = function(arglist__732988) {
      var o1 = cljs.core.first(arglist__732988);
      arglist__732988 = cljs.core.next(arglist__732988);
      var o2 = cljs.core.first(arglist__732988);
      var more = cljs.core.rest(arglist__732988);
      return G__732987__delegate(o1, o2, more)
    };
    G__732987.cljs$core$IFn$_invoke$arity$variadic = G__732987__delegate;
    return G__732987
  }();
  js_merge = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge__2.call(this, o1, o2);
      default:
        return js_merge__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge.cljs$lang$maxFixedArity = 2;
  js_merge.cljs$lang$applyTo = js_merge__3.cljs$lang$applyTo;
  js_merge.cljs$core$IFn$_invoke$arity$2 = js_merge__2;
  js_merge.cljs$core$IFn$_invoke$arity$variadic = js_merge__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge
}();
purnam.cljs.js_merge_nil = function() {
  var js_merge_nil = null;
  var js_merge_nil__2 = function(o1, o2) {
    var seq__732993_732997 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__732994_732998 = null;
    var count__732995_732999 = 0;
    var i__732996_733000 = 0;
    while(true) {
      if(i__732996_733000 < count__732995_732999) {
        var k_733001 = cljs.core._nth.call(null, chunk__732994_732998, i__732996_733000);
        if(cljs.core.not.call(null, o1[k_733001])) {
          o1[k_733001] = o2[k_733001]
        }else {
        }
        var G__733002 = seq__732993_732997;
        var G__733003 = chunk__732994_732998;
        var G__733004 = count__732995_732999;
        var G__733005 = i__732996_733000 + 1;
        seq__732993_732997 = G__733002;
        chunk__732994_732998 = G__733003;
        count__732995_732999 = G__733004;
        i__732996_733000 = G__733005;
        continue
      }else {
        var temp__4092__auto___733006 = cljs.core.seq.call(null, seq__732993_732997);
        if(temp__4092__auto___733006) {
          var seq__732993_733007__$1 = temp__4092__auto___733006;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__732993_733007__$1)) {
            var c__4009__auto___733008 = cljs.core.chunk_first.call(null, seq__732993_733007__$1);
            var G__733009 = cljs.core.chunk_rest.call(null, seq__732993_733007__$1);
            var G__733010 = c__4009__auto___733008;
            var G__733011 = cljs.core.count.call(null, c__4009__auto___733008);
            var G__733012 = 0;
            seq__732993_732997 = G__733009;
            chunk__732994_732998 = G__733010;
            count__732995_732999 = G__733011;
            i__732996_733000 = G__733012;
            continue
          }else {
            var k_733013 = cljs.core.first.call(null, seq__732993_733007__$1);
            if(cljs.core.not.call(null, o1[k_733013])) {
              o1[k_733013] = o2[k_733013]
            }else {
            }
            var G__733014 = cljs.core.next.call(null, seq__732993_733007__$1);
            var G__733015 = null;
            var G__733016 = 0;
            var G__733017 = 0;
            seq__732993_732997 = G__733014;
            chunk__732994_732998 = G__733015;
            count__732995_732999 = G__733016;
            i__732996_733000 = G__733017;
            continue
          }
        }else {
        }
      }
      break
    }
    return o1
  };
  var js_merge_nil__3 = function() {
    var G__733018__delegate = function(o1, o2, more) {
      while(true) {
        js_merge_nil.call(null, o1, o2);
        if(cljs.core.truth_(more)) {
          var G__733019 = js_merge_nil.call(null, o1, o2);
          var G__733020 = cljs.core.first.call(null, more);
          var G__733021 = cljs.core.next.call(null, more);
          o1 = G__733019;
          o2 = G__733020;
          more = G__733021;
          continue
        }else {
          return o1
        }
        break
      }
    };
    var G__733018 = function(o1, o2, var_args) {
      var more = null;
      if(arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__733018__delegate.call(this, o1, o2, more)
    };
    G__733018.cljs$lang$maxFixedArity = 2;
    G__733018.cljs$lang$applyTo = function(arglist__733022) {
      var o1 = cljs.core.first(arglist__733022);
      arglist__733022 = cljs.core.next(arglist__733022);
      var o2 = cljs.core.first(arglist__733022);
      var more = cljs.core.rest(arglist__733022);
      return G__733018__delegate(o1, o2, more)
    };
    G__733018.cljs$core$IFn$_invoke$arity$variadic = G__733018__delegate;
    return G__733018
  }();
  js_merge_nil = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge_nil__2.call(this, o1, o2);
      default:
        return js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge_nil.cljs$lang$maxFixedArity = 2;
  js_merge_nil.cljs$lang$applyTo = js_merge_nil__3.cljs$lang$applyTo;
  js_merge_nil.cljs$core$IFn$_invoke$arity$2 = js_merge_nil__2;
  js_merge_nil.cljs$core$IFn$_invoke$arity$variadic = js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge_nil
}();
purnam.cljs.js_replace = function js_replace(o1, o2) {
  purnam.cljs.js_empty.call(null, o1);
  return purnam.cljs.js_merge.call(null, o1, o2)
};
purnam.cljs.js_equals = function js_equals(v1, v2) {
  if(cljs.core._EQ_.call(null, v1, v2)) {
    return true
  }else {
    var t1 = goog.typeOf(v1);
    var t2 = goog.typeOf(v2);
    if(cljs.core._EQ_.call(null, "array", t1, t2)) {
      return goog.array.equals(v1, v2, js_equals)
    }else {
      if(cljs.core._EQ_.call(null, "object", t1, t2)) {
        var ks1 = cljs.core.js_keys.call(null, v1).sort();
        var ks2 = cljs.core.js_keys.call(null, v2).sort();
        if(cljs.core.truth_(goog.array.equals(ks1, ks2))) {
          return goog.array.every(ks1, function(k) {
            return js_equals.call(null, v1[k], v2[k])
          })
        }else {
          return false
        }
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false
        }else {
          return null
        }
      }
    }
  }
};
purnam.cljs.js_copy = function js_copy(o) {
  return goog.object.clone(o)
};
purnam.cljs.js_initial_value = function js_initial_value(v) {
  var t = goog.typeOf(v);
  if(cljs.core._EQ_.call(null, t, "object")) {
    var obj733026 = {};
    return obj733026
  }else {
    if(cljs.core._EQ_.call(null, t, "array")) {
      return[]
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return v
      }else {
        return null
      }
    }
  }
};
purnam.cljs.js_deep_extend = function() {
  var js_deep_extend = null;
  var js_deep_extend__2 = function(to, from) {
    var visited = [from];
    var visitedlu = [to];
    js_deep_extend.call(null, to, from, visited, visitedlu);
    return to
  };
  var js_deep_extend__4 = function(to, from, visited, visitedlu) {
    var seq__733031_733035 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, from));
    var chunk__733032_733036 = null;
    var count__733033_733037 = 0;
    var i__733034_733038 = 0;
    while(true) {
      if(i__733034_733038 < count__733033_733037) {
        var k_733039 = cljs.core._nth.call(null, chunk__733032_733036, i__733034_733038);
        var v_733040 = from[k_733039];
        var vn_733041 = purnam.cljs.js_initial_value.call(null, v_733040);
        if(cljs.core.not_EQ_.call(null, v_733040, vn_733041)) {
          var i_733042 = visited.indexOf(v_733040);
          if(cljs.core._EQ_.call(null, -1, i_733042)) {
            visited.push(v_733040);
            visitedlu.push(vn_733041);
            js_deep_extend.call(null, vn_733041, v_733040, visited, visitedlu);
            to[k_733039] = vn_733041
          }else {
            to[k_733039] = visitedlu[i_733042]
          }
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            to[k_733039] = v_733040
          }else {
          }
        }
        var G__733043 = seq__733031_733035;
        var G__733044 = chunk__733032_733036;
        var G__733045 = count__733033_733037;
        var G__733046 = i__733034_733038 + 1;
        seq__733031_733035 = G__733043;
        chunk__733032_733036 = G__733044;
        count__733033_733037 = G__733045;
        i__733034_733038 = G__733046;
        continue
      }else {
        var temp__4092__auto___733047 = cljs.core.seq.call(null, seq__733031_733035);
        if(temp__4092__auto___733047) {
          var seq__733031_733048__$1 = temp__4092__auto___733047;
          if(cljs.core.chunked_seq_QMARK_.call(null, seq__733031_733048__$1)) {
            var c__4009__auto___733049 = cljs.core.chunk_first.call(null, seq__733031_733048__$1);
            var G__733050 = cljs.core.chunk_rest.call(null, seq__733031_733048__$1);
            var G__733051 = c__4009__auto___733049;
            var G__733052 = cljs.core.count.call(null, c__4009__auto___733049);
            var G__733053 = 0;
            seq__733031_733035 = G__733050;
            chunk__733032_733036 = G__733051;
            count__733033_733037 = G__733052;
            i__733034_733038 = G__733053;
            continue
          }else {
            var k_733054 = cljs.core.first.call(null, seq__733031_733048__$1);
            var v_733055 = from[k_733054];
            var vn_733056 = purnam.cljs.js_initial_value.call(null, v_733055);
            if(cljs.core.not_EQ_.call(null, v_733055, vn_733056)) {
              var i_733057 = visited.indexOf(v_733055);
              if(cljs.core._EQ_.call(null, -1, i_733057)) {
                visited.push(v_733055);
                visitedlu.push(vn_733056);
                js_deep_extend.call(null, vn_733056, v_733055, visited, visitedlu);
                to[k_733054] = vn_733056
              }else {
                to[k_733054] = visitedlu[i_733057]
              }
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                to[k_733054] = v_733055
              }else {
              }
            }
            var G__733058 = cljs.core.next.call(null, seq__733031_733048__$1);
            var G__733059 = null;
            var G__733060 = 0;
            var G__733061 = 0;
            seq__733031_733035 = G__733058;
            chunk__733032_733036 = G__733059;
            count__733033_733037 = G__733060;
            i__733034_733038 = G__733061;
            continue
          }
        }else {
        }
      }
      break
    }
    return to
  };
  js_deep_extend = function(to, from, visited, visitedlu) {
    switch(arguments.length) {
      case 2:
        return js_deep_extend__2.call(this, to, from);
      case 4:
        return js_deep_extend__4.call(this, to, from, visited, visitedlu)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_deep_extend.cljs$core$IFn$_invoke$arity$2 = js_deep_extend__2;
  js_deep_extend.cljs$core$IFn$_invoke$arity$4 = js_deep_extend__4;
  return js_deep_extend
}();
purnam.cljs.js_deep_copy = function js_deep_copy(value) {
  var vn = purnam.cljs.js_initial_value.call(null, value);
  if(cljs.core.not_EQ_.call(null, value, vn)) {
    return purnam.cljs.js_deep_extend.call(null, vn, value)
  }else {
    return value
  }
};
purnam.cljs.js_deep_replace = function js_deep_replace(o1, o2) {
  purnam.cljs.js_empty.call(null, o1);
  return purnam.cljs.js_deep_extend.call(null, o1, o2)
};
purnam.cljs.js_LT__ = function js_LT__(obj) {
  return cljs.core.clj__GT_js.call(null, obj)
};
purnam.cljs.log = function() {
  var log = null;
  var log__1 = function(x) {
    if(cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x)].join(""), x)
    }else {
      console.log([cljs.core.str(x)].join(""))
    }
    return x
  };
  var log__2 = function(x, y) {
    if(cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""), y)
    }else {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""))
    }
    return y
  };
  log = function(x, y) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, x);
      case 2:
        return log__2.call(this, x, y)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log
}();
purnam.cljs.augment_fn_string = function augment_fn_string(func) {
  if(typeof func === "string") {
    return function(x) {
      return purnam.cljs.aget_in.call(null, x, clojure.string.split.call(null, func, /\./))
    }
  }else {
    return func
  }
};
purnam.cljs.check_fn = function() {
  var check_fn = null;
  var check_fn__1 = function(chk) {
    return function(x) {
      if(cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, x)
      }else {
        return cljs.core._EQ_.call(null, x, chk)
      }
    }
  };
  var check_fn__2 = function(func, chk) {
    return function(x) {
      var res = func.call(null, x);
      if(cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, res)
      }else {
        return cljs.core._EQ_.call(null, res, chk)
      }
    }
  };
  check_fn = function(func, chk) {
    switch(arguments.length) {
      case 1:
        return check_fn__1.call(this, func);
      case 2:
        return check_fn__2.call(this, func, chk)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_fn.cljs$core$IFn$_invoke$arity$1 = check_fn__1;
  check_fn.cljs$core$IFn$_invoke$arity$2 = check_fn__2;
  return check_fn
}();
goog.provide("chaperone.ng.core");
goog.require("cljs.core");
goog.require("purnam.cljs");
goog.require("purnam.cljs");
chaperone.ng.core.chaperone_app = angular.module("chaperone.app", ["ngRoute"]);
angular.module("chaperone.app").config(["$routeProvider", function($routeProvider) {
  var G__729430 = $routeProvider;
  G__729430.when("/admin/users/add", function() {
    var G__729431 = function() {
      var obj729434 = {};
      return obj729434
    }();
    G__729431["templateUrl"] = "/public/partials/admin/user/user-form.html";
    G__729431["controller"] = "AdminUserCtrl";
    return G__729431
  }());
  G__729430.when("/admin/users/list", function() {
    var G__729435 = function() {
      var obj729438 = {};
      return obj729438
    }();
    G__729435["templateUrl"] = "/public/partials/admin/user/list.html";
    return G__729435
  }());
  G__729430.otherwise(function() {
    var G__729439 = function() {
      var obj729442 = {};
      return obj729442
    }();
    G__729439["templateUrl"] = "/public/partials/index.html";
    return G__729439
  }());
  return G__729430
}]);
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj732844 = {};
  return obj732844
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if(function() {
    var and__3273__auto__ = port;
    if(and__3273__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler)
  }else {
    var x__3888__auto__ = port == null ? null : port;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler)
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj732846 = {};
  return obj732846
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if(function() {
    var and__3273__auto__ = port;
    if(and__3273__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler)
  }else {
    var x__3888__auto__ = port == null ? null : port;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler)
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj732848 = {};
  return obj732848
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if(function() {
    var and__3273__auto__ = chan;
    if(and__3273__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan)
  }else {
    var x__3888__auto__ = chan == null ? null : chan;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan)
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj732850 = {};
  return obj732850
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if(function() {
    var and__3273__auto__ = h;
    if(and__3273__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h)
  }else {
    var x__3888__auto__ = h == null ? null : h;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h)
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if(function() {
    var and__3273__auto__ = h;
    if(and__3273__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h)
  }else {
    var x__3888__auto__ = h == null ? null : h;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h)
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj732852 = {};
  return obj732852
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if(function() {
    var and__3273__auto__ = b;
    if(and__3273__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b)
  }else {
    var x__3888__auto__ = b == null ? null : b;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b)
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if(function() {
    var and__3273__auto__ = b;
    if(and__3273__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b)
  }else {
    var x__3888__auto__ = b == null ? null : b;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b)
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if(function() {
    var and__3273__auto__ = b;
    if(and__3273__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm)
  }else {
    var x__3888__auto__ = b == null ? null : b;
    return function() {
      var or__3285__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm)
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o]
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx]
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724))
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if(typeof cljs.core.async.impl.ioc_helpers.t732870 !== "undefined") {
  }else {
    cljs.core.async.impl.ioc_helpers.t732870 = function(f, fn_handler, meta732871) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta732871 = meta732871;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.impl.ioc_helpers.t732870.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t732870.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t732870";
    cljs.core.async.impl.ioc_helpers.t732870.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.ioc-helpers/t732870")
    };
    cljs.core.async.impl.ioc_helpers.t732870.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t732870.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true
    };
    cljs.core.async.impl.ioc_helpers.t732870.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f
    };
    cljs.core.async.impl.ioc_helpers.t732870.prototype.cljs$core$IMeta$_meta$arity$1 = function(_732872) {
      var self__ = this;
      var _732872__$1 = this;
      return self__.meta732871
    };
    cljs.core.async.impl.ioc_helpers.t732870.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_732872, meta732871__$1) {
      var self__ = this;
      var _732872__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t732870(self__.f, self__.fn_handler, meta732871__$1)
    };
    cljs.core.async.impl.ioc_helpers.__GT_t732870 = function __GT_t732870(f__$1, fn_handler__$1, meta732871) {
      return new cljs.core.async.impl.ioc_helpers.t732870(f__$1, fn_handler__$1, meta732871)
    }
  }
  return new cljs.core.async.impl.ioc_helpers.t732870(f, fn_handler, null)
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state)
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state)
  }catch(e732874) {
    if(e732874 instanceof Object) {
      var ex = e732874;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    }else {
      if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e732874;
      }else {
        return null
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_732877_732879 = state;
    statearr_732877_732879[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_732877_732879[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
  }));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_732878_732880 = state;
    statearr_732878_732880[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_732878_732880[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
  }else {
    return null
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_732883_732885 = state;
    statearr_732883_732885[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_732883_732885[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
  }));
  if(cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_732884_732886 = state;
    statearr_732884_732886[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_732884_732886[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
  }else {
    return null
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__732887) {
    var map__732892 = p__732887;
    var map__732892__$1 = cljs.core.seq_QMARK_.call(null, map__732892) ? cljs.core.apply.call(null, cljs.core.hash_map, map__732892) : map__732892;
    var opts = map__732892__$1;
    var statearr_732893_732896 = state;
    statearr_732893_732896[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_732894_732897 = state;
      statearr_732894_732897[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state)
    }, ports, opts);
    if(cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_732895_732898 = state;
      statearr_732895_732898[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
    }else {
      return null
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__732887 = null;
    if(arguments.length > 3) {
      p__732887 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__732887)
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__732899) {
    var state = cljs.core.first(arglist__732899);
    arglist__732899 = cljs.core.next(arglist__732899);
    var cont_block = cljs.core.first(arglist__732899);
    arglist__732899 = cljs.core.next(arglist__732899);
    var ports = cljs.core.first(arglist__732899);
    var p__732887 = cljs.core.rest(arglist__732899);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__732887)
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if(value == null) {
  }else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null
    }))
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while(true) {
    if(cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__732864 = cnt + 1;
      cnt = G__732864;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.buffers/RingBuffer")
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if(self__.length === 0) {
    return null
  }else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if(self__.length + 1 === self__.arr.length) {
    this$.resize()
  }else {
  }
  return this$.unshift(x)
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if(self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr
  }else {
    if(self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr
    }else {
      if(self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr
      }else {
        return null
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4108__auto__ = self__.length;
  var x = 0;
  while(true) {
    if(x < n__4108__auto__) {
      var v_732865 = this$.pop();
      if(keep_QMARK_.call(null, v_732865)) {
        this$.unshift(v_732865)
      }else {
      }
      var G__732866 = x + 1;
      x = G__732866;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr)
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if(n > 0) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ">", ">", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n))
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.buffers/FixedBuffer")
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if(cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm)
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n)
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.buffers/DroppingBuffer")
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if(self__.buf.length === self__.n) {
    return null
  }else {
    return self__.buf.unshift(itm)
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n)
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.buffers/SlidingBuffer")
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop()
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if(self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1)
  }else {
  }
  return self__.buf.unshift(itm)
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n)
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n)
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_732853 = 0;
  while(true) {
    var m_732854 = cljs.core.async.impl.dispatch.tasks.pop();
    if(m_732854 == null) {
    }else {
      m_732854.call(null);
      if(count_732853 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__732855 = count_732853 + 1;
        count_732853 = G__732855;
        continue
      }else {
      }
    }
    break
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if(cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null)
  }else {
    return null
  }
};
if(typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null)
  }
}else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if(cljs.core.truth_(function() {
    var and__3273__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if(and__3273__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_
    }else {
      return and__3273__auto__
    }
  }())) {
    return null
  }else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if(typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0)
    }else {
      if(typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages)
      }else {
        if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null)
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay)
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if(typeof cljs.core.async.impl.channels.t732859 !== "undefined") {
  }else {
    cljs.core.async.impl.channels.t732859 = function(val, box, meta732860) {
      this.val = val;
      this.box = box;
      this.meta732860 = meta732860;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984
    };
    cljs.core.async.impl.channels.t732859.cljs$lang$type = true;
    cljs.core.async.impl.channels.t732859.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t732859";
    cljs.core.async.impl.channels.t732859.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.channels/t732859")
    };
    cljs.core.async.impl.channels.t732859.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val
    };
    cljs.core.async.impl.channels.t732859.prototype.cljs$core$IMeta$_meta$arity$1 = function(_732861) {
      var self__ = this;
      var _732861__$1 = this;
      return self__.meta732860
    };
    cljs.core.async.impl.channels.t732859.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_732861, meta732860__$1) {
      var self__ = this;
      var _732861__$1 = this;
      return new cljs.core.async.impl.channels.t732859(self__.val, self__.box, meta732860__$1)
    };
    cljs.core.async.impl.channels.__GT_t732859 = function __GT_t732859(val__$1, box__$1, meta732860) {
      return new cljs.core.async.impl.channels.t732859(val__$1, box__$1, meta732860)
    }
  }
  return new cljs.core.async.impl.channels.t732859(val, box, null)
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3832__auto__, writer__3833__auto__, opts__3834__auto__) {
  return cljs.core._write.call(null, writer__3833__auto__, "cljs.core.async.impl.channels/PutBox")
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val)
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler)
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.channels/ManyToManyChannel")
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if(self__.closed) {
    return null
  }else {
    self__.closed = true;
    while(true) {
      var taker_732862 = self__.takes.pop();
      if(taker_732862 == null) {
      }else {
        if(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_732862)) {
          var take_cb_732863 = cljs.core.async.impl.protocols.commit.call(null, taker_732862);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_732863, taker_732862) {
            return function() {
              return take_cb_732863.call(null, null)
            }
          }(take_cb_732863, taker_732862))
        }else {
        }
        continue
      }
      break
    }
    return null
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if(!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null
  }else {
    if(!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf))
    }else {
      while(true) {
        var putter = self__.puts.pop();
        if(!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if(cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val)
          }else {
            continue
          }
        }else {
          if(self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null)
          }else {
            if(self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_)
            }else {
              self__.dirty_takes = self__.dirty_takes + 1
            }
            if(self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            }else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "<", "<", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, "takes", 
              "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null
          }
        }
        break
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if(!(val == null)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if(closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null)
  }else {
    while(true) {
      var taker = self__.takes.pop();
      if(!(taker == null)) {
        if(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val)
            }
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null)
        }else {
          continue
        }
      }else {
        if(!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null)
        }else {
          if(self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_)
          }else {
            self__.dirty_puts = self__.dirty_puts + 1
          }
          if(self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          }else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "<", "<", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null
        }
      }
      break
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed)
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null)
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0)
  };
  var random_level__1 = function(level) {
    while(true) {
      if(Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__732819 = level + 1;
        level = G__732819;
        continue
      }else {
        return level
      }
      break
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.timers/SkipListNode")
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1)
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key)
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward)
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level)
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_732820 = 0;
    while(true) {
      if(i_732820 < arr.length) {
        arr[i_732820] = null;
        var G__732821 = i_732820 + 1;
        i_732820 = G__732821;
        continue
      }else {
      }
      break
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr)
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null)
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while(true) {
      if(!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while(true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if(cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if(x_SINGLEQUOTE_.key < k) {
                var G__732822 = x_SINGLEQUOTE_;
                x__$1 = G__732822;
                continue
              }else {
                return x__$1
              }
            }else {
              return x__$1
            }
            break
          }
        }();
        if(update == null) {
        }else {
          update[level] = x__$1
        }
        var G__732823 = x__$1;
        var G__732824 = k;
        var G__732825 = level - 1;
        var G__732826 = update;
        x = G__732823;
        k = G__732824;
        level = G__732825;
        update = G__732826;
        continue
      }else {
        return x
      }
      break
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
  return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async.impl.timers/SkipList")
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1)
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if(node == null) {
        return null
      }else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]))
      }
    }, null, null)
  };
  return iter.call(null, self__.header.forward[0])
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if(!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v
  }else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if(new_level > self__.level) {
      var i_732827 = self__.level + 1;
      while(true) {
        if(i_732827 <= new_level + 1) {
          update[i_732827] = self__.header;
          var G__732828 = i_732827 + 1;
          i_732827 = G__732828;
          continue
        }else {
        }
        break
      }
      self__.level = new_level
    }else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while(true) {
      if(i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2
      }else {
        return null
      }
      break
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if(!(x__$1 == null) && x__$1.key === k) {
    var i_732829 = 0;
    while(true) {
      if(i_732829 <= self__.level) {
        var links_732830 = update[i_732829].forward;
        if(links_732830[i_732829] === x__$1) {
          links_732830[i_732829] = x__$1.forward[i_732829];
          var G__732831 = i_732829 + 1;
          i_732829 = G__732831;
          continue
        }else {
          var G__732832 = i_732829 + 1;
          i_732829 = G__732832;
          continue
        }
      }else {
      }
      break
    }
    while(true) {
      if(self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue
      }else {
        return null
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while(true) {
    if(!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while(true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if(x_SINGLEQUOTE_ == null) {
            return null
          }else {
            if(x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_
            }else {
              var G__732833 = x_SINGLEQUOTE_;
              x__$1 = G__732833;
              continue
            }
          }
          break
        }
      }();
      if(!(nx == null)) {
        var G__732834 = nx;
        var G__732835 = level__$1 - 1;
        x = G__732834;
        level__$1 = G__732835;
        continue
      }else {
        var G__732836 = x;
        var G__732837 = level__$1 - 1;
        x = G__732836;
        level__$1 = G__732837;
        continue
      }
    }else {
      if(x === self__.header) {
        return null
      }else {
        return x
      }
    }
    break
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while(true) {
    if(!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while(true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if(!(x_SINGLEQUOTE_ == null)) {
            if(x_SINGLEQUOTE_.key > k) {
              return x__$1
            }else {
              var G__732838 = x_SINGLEQUOTE_;
              x__$1 = G__732838;
              continue
            }
          }else {
            if(level__$1 === 0) {
              return x__$1
            }else {
              return null
            }
          }
          break
        }
      }();
      if(cljs.core.truth_(nx)) {
        var G__732839 = nx;
        var G__732840 = level__$1 - 1;
        x = G__732839;
        level__$1 = G__732840;
        continue
      }else {
        var G__732841 = x;
        var G__732842 = level__$1 - 1;
        x = G__732841;
        level__$1 = G__732842;
        continue
      }
    }else {
      if(x === self__.header) {
        return null
      }else {
        return x
      }
    }
    break
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level)
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0)
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3285__auto__ = cljs.core.truth_(function() {
    var and__3273__auto__ = me;
    if(cljs.core.truth_(and__3273__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS
    }else {
      return and__3273__auto__
    }
  }()) ? me.val : null;
  if(cljs.core.truth_(or__3285__auto__)) {
    return or__3285__auto__
  }else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel)
    }, msecs);
    return timeout_channel
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if(typeof cljs.core.async.t730909 !== "undefined") {
  }else {
    cljs.core.async.t730909 = function(f, fn_handler, meta730910) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta730910 = meta730910;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t730909.cljs$lang$type = true;
    cljs.core.async.t730909.cljs$lang$ctorStr = "cljs.core.async/t730909";
    cljs.core.async.t730909.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t730909")
    };
    cljs.core.async.t730909.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t730909.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true
    };
    cljs.core.async.t730909.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f
    };
    cljs.core.async.t730909.prototype.cljs$core$IMeta$_meta$arity$1 = function(_730911) {
      var self__ = this;
      var _730911__$1 = this;
      return self__.meta730910
    };
    cljs.core.async.t730909.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_730911, meta730910__$1) {
      var self__ = this;
      var _730911__$1 = this;
      return new cljs.core.async.t730909(self__.f, self__.fn_handler, meta730910__$1)
    };
    cljs.core.async.__GT_t730909 = function __GT_t730909(f__$1, fn_handler__$1, meta730910) {
      return new cljs.core.async.t730909(f__$1, fn_handler__$1, meta730910)
    }
  }
  return new cljs.core.async.t730909(f, fn_handler, null)
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n)
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n)
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n)
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null)
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1)
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs)
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if(null) {
    return null
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("<! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true)
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if(cljs.core.truth_(ret)) {
      var val_730912 = cljs.core.deref.call(null, ret);
      if(cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_730912)
      }else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_730912)
        })
      }
    }else {
    }
    return null
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_
}();
cljs.core.async.nop = function nop() {
  return null
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if(null) {
    return null
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(">! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop)
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true)
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if(cljs.core.truth_(function() {
      var and__3273__auto__ = ret;
      if(cljs.core.truth_(and__3273__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop)
      }else {
        return and__3273__auto__
      }
    }())) {
      if(cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null)
      }else {
        cljs.core.async.impl.dispatch.run.call(null, fn0)
      }
    }else {
    }
    return null
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port)
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4108__auto___730913 = n;
  var x_730914 = 0;
  while(true) {
    if(x_730914 < n__4108__auto___730913) {
      a[x_730914] = 0;
      var G__730915 = x_730914 + 1;
      x_730914 = G__730915;
      continue
    }else {
    }
    break
  }
  var i = 1;
  while(true) {
    if(cljs.core._EQ_.call(null, i, n)) {
      return a
    }else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__730916 = i + 1;
      i = G__730916;
      continue
    }
    break
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if(typeof cljs.core.async.t730920 !== "undefined") {
  }else {
    cljs.core.async.t730920 = function(flag, alt_flag, meta730921) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta730921 = meta730921;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t730920.cljs$lang$type = true;
    cljs.core.async.t730920.cljs$lang$ctorStr = "cljs.core.async/t730920";
    cljs.core.async.t730920.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t730920")
    };
    cljs.core.async.t730920.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t730920.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag)
    };
    cljs.core.async.t730920.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true
    };
    cljs.core.async.t730920.prototype.cljs$core$IMeta$_meta$arity$1 = function(_730922) {
      var self__ = this;
      var _730922__$1 = this;
      return self__.meta730921
    };
    cljs.core.async.t730920.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_730922, meta730921__$1) {
      var self__ = this;
      var _730922__$1 = this;
      return new cljs.core.async.t730920(self__.flag, self__.alt_flag, meta730921__$1)
    };
    cljs.core.async.__GT_t730920 = function __GT_t730920(flag__$1, alt_flag__$1, meta730921) {
      return new cljs.core.async.t730920(flag__$1, alt_flag__$1, meta730921)
    }
  }
  return new cljs.core.async.t730920(flag, alt_flag, null)
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if(typeof cljs.core.async.t730926 !== "undefined") {
  }else {
    cljs.core.async.t730926 = function(cb, flag, alt_handler, meta730927) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta730927 = meta730927;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t730926.cljs$lang$type = true;
    cljs.core.async.t730926.cljs$lang$ctorStr = "cljs.core.async/t730926";
    cljs.core.async.t730926.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t730926")
    };
    cljs.core.async.t730926.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t730926.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag)
    };
    cljs.core.async.t730926.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb
    };
    cljs.core.async.t730926.prototype.cljs$core$IMeta$_meta$arity$1 = function(_730928) {
      var self__ = this;
      var _730928__$1 = this;
      return self__.meta730927
    };
    cljs.core.async.t730926.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_730928, meta730927__$1) {
      var self__ = this;
      var _730928__$1 = this;
      return new cljs.core.async.t730926(self__.cb, self__.flag, self__.alt_handler, meta730927__$1)
    };
    cljs.core.async.__GT_t730926 = function __GT_t730926(cb__$1, flag__$1, alt_handler__$1, meta730927) {
      return new cljs.core.async.t730926(cb__$1, flag__$1, alt_handler__$1, meta730927)
    }
  }
  return new cljs.core.async.t730926(cb, flag, alt_handler, null)
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while(true) {
      if(i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null))
            }
          }(i, val, idx, port, wport, flag, n, idxs, priority)))
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__730929_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__730929_SHARP_, port], null))
          }
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if(cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3285__auto__ = wport;
            if(cljs.core.truth_(or__3285__auto__)) {
              return or__3285__auto__
            }else {
              return port
            }
          }()], null))
        }else {
          var G__730930 = i + 1;
          i = G__730930;
          continue
        }
      }else {
        return null
      }
      break
    }
  }();
  var or__3285__auto__ = ret;
  if(cljs.core.truth_(or__3285__auto__)) {
    return or__3285__auto__
  }else {
    if(cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3273__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if(cljs.core.truth_(and__3273__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag)
        }else {
          return and__3273__auto__
        }
      }();
      if(cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null))
      }else {
        return null
      }
    }else {
      return null
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__730931) {
    var map__730933 = p__730931;
    var map__730933__$1 = cljs.core.seq_QMARK_.call(null, map__730933) ? cljs.core.apply.call(null, cljs.core.hash_map, map__730933) : map__730933;
    var opts = map__730933__$1;
    if(null) {
      return null
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__730931 = null;
    if(arguments.length > 1) {
      p__730931 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return alts_BANG___delegate.call(this, ports, p__730931)
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__730934) {
    var ports = cljs.core.first(arglist__730934);
    var p__730931 = cljs.core.rest(arglist__730934);
    return alts_BANG___delegate(ports, p__730931)
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if(typeof cljs.core.async.t730942 !== "undefined") {
  }else {
    cljs.core.async.t730942 = function(ch, f, map_LT_, meta730943) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta730943 = meta730943;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t730942.cljs$lang$type = true;
    cljs.core.async.t730942.cljs$lang$ctorStr = "cljs.core.async/t730942";
    cljs.core.async.t730942.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t730942")
    };
    cljs.core.async.t730942.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t730942.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0)
    };
    cljs.core.async.t730942.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t730942.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if(typeof cljs.core.async.t730945 !== "undefined") {
        }else {
          cljs.core.async.t730945 = function(fn1, _, meta730943, ch, f, map_LT_, meta730946) {
            this.fn1 = fn1;
            this._ = _;
            this.meta730943 = meta730943;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta730946 = meta730946;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216
          };
          cljs.core.async.t730945.cljs$lang$type = true;
          cljs.core.async.t730945.cljs$lang$ctorStr = "cljs.core.async/t730945";
          cljs.core.async.t730945.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
            return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t730945")
          };
          cljs.core.async.t730945.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t730945.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1)
          };
          cljs.core.async.t730945.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1)
          };
          cljs.core.async.t730945.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__730935_SHARP_) {
                return f1.call(null, p1__730935_SHARP_ == null ? null : self__.f.call(null, p1__730935_SHARP_))
              }
            }(f1, ___$4)
          };
          cljs.core.async.t730945.prototype.cljs$core$IMeta$_meta$arity$1 = function(_730947) {
            var self__ = this;
            var _730947__$1 = this;
            return self__.meta730946
          };
          cljs.core.async.t730945.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_730947, meta730946__$1) {
            var self__ = this;
            var _730947__$1 = this;
            return new cljs.core.async.t730945(self__.fn1, self__._, self__.meta730943, self__.ch, self__.f, self__.map_LT_, meta730946__$1)
          };
          cljs.core.async.__GT_t730945 = function __GT_t730945(fn1__$1, ___$2, meta730943__$1, ch__$2, f__$2, map_LT___$2, meta730946) {
            return new cljs.core.async.t730945(fn1__$1, ___$2, meta730943__$1, ch__$2, f__$2, map_LT___$2, meta730946)
          }
        }
        return new cljs.core.async.t730945(fn1, ___$1, self__.meta730943, self__.ch, self__.f, self__.map_LT_, null)
      }());
      if(cljs.core.truth_(function() {
        var and__3273__auto__ = ret;
        if(cljs.core.truth_(and__3273__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null)
        }else {
          return and__3273__auto__
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)))
      }else {
        return ret
      }
    };
    cljs.core.async.t730942.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t730942.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t730942.prototype.cljs$core$IMeta$_meta$arity$1 = function(_730944) {
      var self__ = this;
      var _730944__$1 = this;
      return self__.meta730943
    };
    cljs.core.async.t730942.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_730944, meta730943__$1) {
      var self__ = this;
      var _730944__$1 = this;
      return new cljs.core.async.t730942(self__.ch, self__.f, self__.map_LT_, meta730943__$1)
    };
    cljs.core.async.__GT_t730942 = function __GT_t730942(ch__$1, f__$1, map_LT___$1, meta730943) {
      return new cljs.core.async.t730942(ch__$1, f__$1, map_LT___$1, meta730943)
    }
  }
  return new cljs.core.async.t730942(ch, f, map_LT_, null)
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if(typeof cljs.core.async.t730951 !== "undefined") {
  }else {
    cljs.core.async.t730951 = function(ch, f, map_GT_, meta730952) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta730952 = meta730952;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t730951.cljs$lang$type = true;
    cljs.core.async.t730951.cljs$lang$ctorStr = "cljs.core.async/t730951";
    cljs.core.async.t730951.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t730951")
    };
    cljs.core.async.t730951.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t730951.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0)
    };
    cljs.core.async.t730951.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t730951.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1)
    };
    cljs.core.async.t730951.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t730951.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t730951.prototype.cljs$core$IMeta$_meta$arity$1 = function(_730953) {
      var self__ = this;
      var _730953__$1 = this;
      return self__.meta730952
    };
    cljs.core.async.t730951.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_730953, meta730952__$1) {
      var self__ = this;
      var _730953__$1 = this;
      return new cljs.core.async.t730951(self__.ch, self__.f, self__.map_GT_, meta730952__$1)
    };
    cljs.core.async.__GT_t730951 = function __GT_t730951(ch__$1, f__$1, map_GT___$1, meta730952) {
      return new cljs.core.async.t730951(ch__$1, f__$1, map_GT___$1, meta730952)
    }
  }
  return new cljs.core.async.t730951(ch, f, map_GT_, null)
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if(typeof cljs.core.async.t730957 !== "undefined") {
  }else {
    cljs.core.async.t730957 = function(ch, p, filter_GT_, meta730958) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta730958 = meta730958;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216
    };
    cljs.core.async.t730957.cljs$lang$type = true;
    cljs.core.async.t730957.cljs$lang$ctorStr = "cljs.core.async/t730957";
    cljs.core.async.t730957.cljs$lang$ctorPrWriter = function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
      return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t730957")
    };
    cljs.core.async.t730957.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t730957.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if(cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0)
      }else {
        return cljs.core.async.impl.channels.box.call(null, null)
      }
    };
    cljs.core.async.t730957.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t730957.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1)
    };
    cljs.core.async.t730957.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t730957.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch)
    };
    cljs.core.async.t730957.prototype.cljs$core$IMeta$_meta$arity$1 = function(_730959) {
      var self__ = this;
      var _730959__$1 = this;
      return self__.meta730958
    };
    cljs.core.async.t730957.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_730959, meta730958__$1) {
      var self__ = this;
      var _730959__$1 = this;
      return new cljs.core.async.t730957(self__.ch, self__.p, self__.filter_GT_, meta730958__$1)
    };
    cljs.core.async.__GT_t730957 = function __GT_t730957(ch__$1, p__$1, filter_GT___$1, meta730958) {
      return new cljs.core.async.t730957(ch__$1, p__$1, filter_GT___$1, meta730958)
    }
  }
  return new cljs.core.async.t730957(ch, p, filter_GT_, null)
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch)
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null)
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5728__auto___731034 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_731017) {
          var state_val_731018 = state_731017[1];
          if(state_val_731018 === 1) {
            var state_731017__$1 = state_731017;
            var statearr_731019_731035 = state_731017__$1;
            statearr_731019_731035[2] = null;
            statearr_731019_731035[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_731018 === 2) {
              var state_731017__$1 = state_731017;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_731017__$1, 4, ch)
            }else {
              if(state_val_731018 === 3) {
                var inst_731015 = state_731017[2];
                var state_731017__$1 = state_731017;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_731017__$1, inst_731015)
              }else {
                if(state_val_731018 === 4) {
                  var inst_730999 = state_731017[5];
                  var inst_730999__$1 = state_731017[2];
                  var inst_731000 = inst_730999__$1 == null;
                  var state_731017__$1 = function() {
                    var statearr_731020 = state_731017;
                    statearr_731020[5] = inst_730999__$1;
                    return statearr_731020
                  }();
                  if(cljs.core.truth_(inst_731000)) {
                    var statearr_731021_731036 = state_731017__$1;
                    statearr_731021_731036[1] = 5
                  }else {
                    var statearr_731022_731037 = state_731017__$1;
                    statearr_731022_731037[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_731018 === 5) {
                    var inst_731002 = cljs.core.async.close_BANG_.call(null, out);
                    var state_731017__$1 = state_731017;
                    var statearr_731023_731038 = state_731017__$1;
                    statearr_731023_731038[2] = inst_731002;
                    statearr_731023_731038[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_731018 === 6) {
                      var inst_730999 = state_731017[5];
                      var inst_731004 = p.call(null, inst_730999);
                      var state_731017__$1 = state_731017;
                      if(cljs.core.truth_(inst_731004)) {
                        var statearr_731024_731039 = state_731017__$1;
                        statearr_731024_731039[1] = 8
                      }else {
                        var statearr_731025_731040 = state_731017__$1;
                        statearr_731025_731040[1] = 9
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_731018 === 7) {
                        var inst_731013 = state_731017[2];
                        var state_731017__$1 = state_731017;
                        var statearr_731026_731041 = state_731017__$1;
                        statearr_731026_731041[2] = inst_731013;
                        statearr_731026_731041[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_731018 === 8) {
                          var inst_730999 = state_731017[5];
                          var state_731017__$1 = state_731017;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_731017__$1, 11, out, inst_730999)
                        }else {
                          if(state_val_731018 === 9) {
                            var state_731017__$1 = state_731017;
                            var statearr_731027_731042 = state_731017__$1;
                            statearr_731027_731042[2] = null;
                            statearr_731027_731042[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_731018 === 10) {
                              var inst_731010 = state_731017[2];
                              var state_731017__$1 = function() {
                                var statearr_731028 = state_731017;
                                statearr_731028[6] = inst_731010;
                                return statearr_731028
                              }();
                              var statearr_731029_731043 = state_731017__$1;
                              statearr_731029_731043[2] = null;
                              statearr_731029_731043[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_731018 === 11) {
                                var inst_731007 = state_731017[2];
                                var state_731017__$1 = state_731017;
                                var statearr_731030_731044 = state_731017__$1;
                                statearr_731030_731044[2] = inst_731007;
                                statearr_731030_731044[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_731032 = new Array(7);
              statearr_731032[0] = state_machine__5679__auto__;
              statearr_731032[1] = 1;
              return statearr_731032
            };
            var state_machine__5679__auto____1 = function(state_731017) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_731017);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_731017) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_731017)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_731033 = f__5729__auto__.call(null);
        statearr_731033[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___731034;
        return statearr_731033
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return out
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null)
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n)
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5728__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5729__auto__ = function() {
      var switch__5678__auto__ = function(state_731192) {
        var state_val_731193 = state_731192[1];
        if(state_val_731193 === 1) {
          var state_731192__$1 = state_731192;
          var statearr_731194_731227 = state_731192__$1;
          statearr_731194_731227[2] = null;
          statearr_731194_731227[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_731193 === 2) {
            var state_731192__$1 = state_731192;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_731192__$1, 4, in$)
          }else {
            if(state_val_731193 === 3) {
              var inst_731190 = state_731192[2];
              var state_731192__$1 = state_731192;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_731192__$1, inst_731190)
            }else {
              if(state_val_731193 === 4) {
                var inst_731138 = state_731192[5];
                var inst_731138__$1 = state_731192[2];
                var inst_731139 = inst_731138__$1 == null;
                var state_731192__$1 = function() {
                  var statearr_731195 = state_731192;
                  statearr_731195[5] = inst_731138__$1;
                  return statearr_731195
                }();
                if(cljs.core.truth_(inst_731139)) {
                  var statearr_731196_731228 = state_731192__$1;
                  statearr_731196_731228[1] = 5
                }else {
                  var statearr_731197_731229 = state_731192__$1;
                  statearr_731197_731229[1] = 6
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_731193 === 5) {
                  var inst_731141 = cljs.core.async.close_BANG_.call(null, out);
                  var state_731192__$1 = state_731192;
                  var statearr_731198_731230 = state_731192__$1;
                  statearr_731198_731230[2] = inst_731141;
                  statearr_731198_731230[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_731193 === 6) {
                    var inst_731138 = state_731192[5];
                    var inst_731143 = f.call(null, inst_731138);
                    var inst_731148 = cljs.core.seq.call(null, inst_731143);
                    var inst_731149 = inst_731148;
                    var inst_731150 = null;
                    var inst_731151 = 0;
                    var inst_731152 = 0;
                    var state_731192__$1 = function() {
                      var statearr_731199 = state_731192;
                      statearr_731199[6] = inst_731149;
                      statearr_731199[7] = inst_731151;
                      statearr_731199[8] = inst_731150;
                      statearr_731199[9] = inst_731152;
                      return statearr_731199
                    }();
                    var statearr_731200_731231 = state_731192__$1;
                    statearr_731200_731231[2] = null;
                    statearr_731200_731231[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_731193 === 7) {
                      var inst_731188 = state_731192[2];
                      var state_731192__$1 = state_731192;
                      var statearr_731201_731232 = state_731192__$1;
                      statearr_731201_731232[2] = inst_731188;
                      statearr_731201_731232[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_731193 === 8) {
                        var inst_731151 = state_731192[7];
                        var inst_731152 = state_731192[9];
                        var inst_731154 = inst_731152 < inst_731151;
                        var inst_731155 = inst_731154;
                        var state_731192__$1 = state_731192;
                        if(cljs.core.truth_(inst_731155)) {
                          var statearr_731202_731233 = state_731192__$1;
                          statearr_731202_731233[1] = 10
                        }else {
                          var statearr_731203_731234 = state_731192__$1;
                          statearr_731203_731234[1] = 11
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_731193 === 9) {
                          var inst_731185 = state_731192[2];
                          var state_731192__$1 = function() {
                            var statearr_731204 = state_731192;
                            statearr_731204[10] = inst_731185;
                            return statearr_731204
                          }();
                          var statearr_731205_731235 = state_731192__$1;
                          statearr_731205_731235[2] = null;
                          statearr_731205_731235[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_731193 === 10) {
                            var inst_731150 = state_731192[8];
                            var inst_731152 = state_731192[9];
                            var inst_731157 = cljs.core._nth.call(null, inst_731150, inst_731152);
                            var state_731192__$1 = state_731192;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_731192__$1, 13, out, inst_731157)
                          }else {
                            if(state_val_731193 === 11) {
                              var inst_731149 = state_731192[6];
                              var inst_731163 = state_731192[11];
                              var inst_731163__$1 = cljs.core.seq.call(null, inst_731149);
                              var state_731192__$1 = function() {
                                var statearr_731209 = state_731192;
                                statearr_731209[11] = inst_731163__$1;
                                return statearr_731209
                              }();
                              if(inst_731163__$1) {
                                var statearr_731210_731236 = state_731192__$1;
                                statearr_731210_731236[1] = 14
                              }else {
                                var statearr_731211_731237 = state_731192__$1;
                                statearr_731211_731237[1] = 15
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_731193 === 12) {
                                var inst_731183 = state_731192[2];
                                var state_731192__$1 = state_731192;
                                var statearr_731212_731238 = state_731192__$1;
                                statearr_731212_731238[2] = inst_731183;
                                statearr_731212_731238[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_731193 === 13) {
                                  var inst_731149 = state_731192[6];
                                  var inst_731151 = state_731192[7];
                                  var inst_731150 = state_731192[8];
                                  var inst_731152 = state_731192[9];
                                  var inst_731159 = state_731192[2];
                                  var inst_731160 = inst_731152 + 1;
                                  var tmp731206 = inst_731149;
                                  var tmp731207 = inst_731151;
                                  var tmp731208 = inst_731150;
                                  var inst_731149__$1 = tmp731206;
                                  var inst_731150__$1 = tmp731208;
                                  var inst_731151__$1 = tmp731207;
                                  var inst_731152__$1 = inst_731160;
                                  var state_731192__$1 = function() {
                                    var statearr_731213 = state_731192;
                                    statearr_731213[6] = inst_731149__$1;
                                    statearr_731213[7] = inst_731151__$1;
                                    statearr_731213[8] = inst_731150__$1;
                                    statearr_731213[9] = inst_731152__$1;
                                    statearr_731213[12] = inst_731159;
                                    return statearr_731213
                                  }();
                                  var statearr_731214_731239 = state_731192__$1;
                                  statearr_731214_731239[2] = null;
                                  statearr_731214_731239[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_731193 === 14) {
                                    var inst_731163 = state_731192[11];
                                    var inst_731165 = cljs.core.chunked_seq_QMARK_.call(null, inst_731163);
                                    var state_731192__$1 = state_731192;
                                    if(inst_731165) {
                                      var statearr_731215_731240 = state_731192__$1;
                                      statearr_731215_731240[1] = 17
                                    }else {
                                      var statearr_731216_731241 = state_731192__$1;
                                      statearr_731216_731241[1] = 18
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_731193 === 15) {
                                      var state_731192__$1 = state_731192;
                                      var statearr_731217_731242 = state_731192__$1;
                                      statearr_731217_731242[2] = null;
                                      statearr_731217_731242[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_731193 === 16) {
                                        var inst_731181 = state_731192[2];
                                        var state_731192__$1 = state_731192;
                                        var statearr_731218_731243 = state_731192__$1;
                                        statearr_731218_731243[2] = inst_731181;
                                        statearr_731218_731243[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_731193 === 17) {
                                          var inst_731163 = state_731192[11];
                                          var inst_731167 = cljs.core.chunk_first.call(null, inst_731163);
                                          var inst_731168 = cljs.core.chunk_rest.call(null, inst_731163);
                                          var inst_731169 = cljs.core.count.call(null, inst_731167);
                                          var inst_731149 = inst_731168;
                                          var inst_731150 = inst_731167;
                                          var inst_731151 = inst_731169;
                                          var inst_731152 = 0;
                                          var state_731192__$1 = function() {
                                            var statearr_731219 = state_731192;
                                            statearr_731219[6] = inst_731149;
                                            statearr_731219[7] = inst_731151;
                                            statearr_731219[8] = inst_731150;
                                            statearr_731219[9] = inst_731152;
                                            return statearr_731219
                                          }();
                                          var statearr_731220_731244 = state_731192__$1;
                                          statearr_731220_731244[2] = null;
                                          statearr_731220_731244[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_731193 === 18) {
                                            var inst_731163 = state_731192[11];
                                            var inst_731172 = cljs.core.first.call(null, inst_731163);
                                            var state_731192__$1 = state_731192;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_731192__$1, 20, out, inst_731172)
                                          }else {
                                            if(state_val_731193 === 19) {
                                              var inst_731178 = state_731192[2];
                                              var state_731192__$1 = state_731192;
                                              var statearr_731221_731245 = state_731192__$1;
                                              statearr_731221_731245[2] = inst_731178;
                                              statearr_731221_731245[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_731193 === 20) {
                                                var inst_731163 = state_731192[11];
                                                var inst_731174 = state_731192[2];
                                                var inst_731175 = cljs.core.next.call(null, inst_731163);
                                                var inst_731149 = inst_731175;
                                                var inst_731150 = null;
                                                var inst_731151 = 0;
                                                var inst_731152 = 0;
                                                var state_731192__$1 = function() {
                                                  var statearr_731222 = state_731192;
                                                  statearr_731222[6] = inst_731149;
                                                  statearr_731222[13] = inst_731174;
                                                  statearr_731222[7] = inst_731151;
                                                  statearr_731222[8] = inst_731150;
                                                  statearr_731222[9] = inst_731152;
                                                  return statearr_731222
                                                }();
                                                var statearr_731223_731246 = state_731192__$1;
                                                statearr_731223_731246[2] = null;
                                                statearr_731223_731246[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                return null
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5678__auto__) {
        return function() {
          var state_machine__5679__auto__ = null;
          var state_machine__5679__auto____0 = function() {
            var statearr_731225 = new Array(14);
            statearr_731225[0] = state_machine__5679__auto__;
            statearr_731225[1] = 1;
            return statearr_731225
          };
          var state_machine__5679__auto____1 = function(state_731192) {
            while(true) {
              var result__5680__auto__ = switch__5678__auto__.call(null, state_731192);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5680__auto__
              }
              break
            }
          };
          state_machine__5679__auto__ = function(state_731192) {
            switch(arguments.length) {
              case 0:
                return state_machine__5679__auto____0.call(this);
              case 1:
                return state_machine__5679__auto____1.call(this, state_731192)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
          return state_machine__5679__auto__
        }()
      }(switch__5678__auto__)
    }();
    var state__5730__auto__ = function() {
      var statearr_731226 = f__5729__auto__.call(null);
      statearr_731226[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto__;
      return statearr_731226
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
  });
  return c__5728__auto__
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null)
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null)
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true)
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5728__auto___731319 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_731302) {
          var state_val_731303 = state_731302[1];
          if(state_val_731303 === 1) {
            var state_731302__$1 = state_731302;
            var statearr_731304_731320 = state_731302__$1;
            statearr_731304_731320[2] = null;
            statearr_731304_731320[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_731303 === 2) {
              var state_731302__$1 = state_731302;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_731302__$1, 4, from)
            }else {
              if(state_val_731303 === 3) {
                var inst_731300 = state_731302[2];
                var state_731302__$1 = state_731302;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_731302__$1, inst_731300)
              }else {
                if(state_val_731303 === 4) {
                  var inst_731285 = state_731302[5];
                  var inst_731285__$1 = state_731302[2];
                  var inst_731286 = inst_731285__$1 == null;
                  var state_731302__$1 = function() {
                    var statearr_731305 = state_731302;
                    statearr_731305[5] = inst_731285__$1;
                    return statearr_731305
                  }();
                  if(cljs.core.truth_(inst_731286)) {
                    var statearr_731306_731321 = state_731302__$1;
                    statearr_731306_731321[1] = 5
                  }else {
                    var statearr_731307_731322 = state_731302__$1;
                    statearr_731307_731322[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_731303 === 5) {
                    var state_731302__$1 = state_731302;
                    if(cljs.core.truth_(close_QMARK_)) {
                      var statearr_731308_731323 = state_731302__$1;
                      statearr_731308_731323[1] = 8
                    }else {
                      var statearr_731309_731324 = state_731302__$1;
                      statearr_731309_731324[1] = 9
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_731303 === 6) {
                      var inst_731285 = state_731302[5];
                      var state_731302__$1 = state_731302;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_731302__$1, 11, to, inst_731285)
                    }else {
                      if(state_val_731303 === 7) {
                        var inst_731298 = state_731302[2];
                        var state_731302__$1 = state_731302;
                        var statearr_731310_731325 = state_731302__$1;
                        statearr_731310_731325[2] = inst_731298;
                        statearr_731310_731325[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_731303 === 8) {
                          var inst_731289 = cljs.core.async.close_BANG_.call(null, to);
                          var state_731302__$1 = state_731302;
                          var statearr_731311_731326 = state_731302__$1;
                          statearr_731311_731326[2] = inst_731289;
                          statearr_731311_731326[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_731303 === 9) {
                            var state_731302__$1 = state_731302;
                            var statearr_731312_731327 = state_731302__$1;
                            statearr_731312_731327[2] = null;
                            statearr_731312_731327[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_731303 === 10) {
                              var inst_731292 = state_731302[2];
                              var state_731302__$1 = state_731302;
                              var statearr_731313_731328 = state_731302__$1;
                              statearr_731313_731328[2] = inst_731292;
                              statearr_731313_731328[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_731303 === 11) {
                                var inst_731295 = state_731302[2];
                                var state_731302__$1 = function() {
                                  var statearr_731314 = state_731302;
                                  statearr_731314[6] = inst_731295;
                                  return statearr_731314
                                }();
                                var statearr_731315_731329 = state_731302__$1;
                                statearr_731315_731329[2] = null;
                                statearr_731315_731329[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_731317 = new Array(7);
              statearr_731317[0] = state_machine__5679__auto__;
              statearr_731317[1] = 1;
              return statearr_731317
            };
            var state_machine__5679__auto____1 = function(state_731302) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_731302);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_731302) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_731302)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_731318 = f__5729__auto__.call(null);
        statearr_731318[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___731319;
        return statearr_731318
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return to
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null)
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5728__auto___731408 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_731390) {
          var state_val_731391 = state_731390[1];
          if(state_val_731391 === 1) {
            var state_731390__$1 = state_731390;
            var statearr_731392_731409 = state_731390__$1;
            statearr_731392_731409[2] = null;
            statearr_731392_731409[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_731391 === 2) {
              var state_731390__$1 = state_731390;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_731390__$1, 4, ch)
            }else {
              if(state_val_731391 === 3) {
                var inst_731388 = state_731390[2];
                var state_731390__$1 = state_731390;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_731390__$1, inst_731388)
              }else {
                if(state_val_731391 === 4) {
                  var inst_731371 = state_731390[5];
                  var inst_731371__$1 = state_731390[2];
                  var inst_731372 = inst_731371__$1 == null;
                  var state_731390__$1 = function() {
                    var statearr_731393 = state_731390;
                    statearr_731393[5] = inst_731371__$1;
                    return statearr_731393
                  }();
                  if(cljs.core.truth_(inst_731372)) {
                    var statearr_731394_731410 = state_731390__$1;
                    statearr_731394_731410[1] = 5
                  }else {
                    var statearr_731395_731411 = state_731390__$1;
                    statearr_731395_731411[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_731391 === 5) {
                    var inst_731374 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_731375 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_731390__$1 = function() {
                      var statearr_731396 = state_731390;
                      statearr_731396[6] = inst_731374;
                      return statearr_731396
                    }();
                    var statearr_731397_731412 = state_731390__$1;
                    statearr_731397_731412[2] = inst_731375;
                    statearr_731397_731412[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_731391 === 6) {
                      var inst_731371 = state_731390[5];
                      var inst_731377 = p.call(null, inst_731371);
                      var state_731390__$1 = state_731390;
                      if(cljs.core.truth_(inst_731377)) {
                        var statearr_731398_731413 = state_731390__$1;
                        statearr_731398_731413[1] = 9
                      }else {
                        var statearr_731399_731414 = state_731390__$1;
                        statearr_731399_731414[1] = 10
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_731391 === 7) {
                        var inst_731386 = state_731390[2];
                        var state_731390__$1 = state_731390;
                        var statearr_731400_731415 = state_731390__$1;
                        statearr_731400_731415[2] = inst_731386;
                        statearr_731400_731415[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_731391 === 8) {
                          var inst_731383 = state_731390[2];
                          var state_731390__$1 = function() {
                            var statearr_731401 = state_731390;
                            statearr_731401[7] = inst_731383;
                            return statearr_731401
                          }();
                          var statearr_731402_731416 = state_731390__$1;
                          statearr_731402_731416[2] = null;
                          statearr_731402_731416[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_731391 === 9) {
                            var state_731390__$1 = state_731390;
                            var statearr_731403_731417 = state_731390__$1;
                            statearr_731403_731417[2] = tc;
                            statearr_731403_731417[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_731391 === 10) {
                              var state_731390__$1 = state_731390;
                              var statearr_731404_731418 = state_731390__$1;
                              statearr_731404_731418[2] = fc;
                              statearr_731404_731418[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_731391 === 11) {
                                var inst_731371 = state_731390[5];
                                var inst_731381 = state_731390[2];
                                var state_731390__$1 = state_731390;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_731390__$1, 8, inst_731381, inst_731371)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_731406 = new Array(8);
              statearr_731406[0] = state_machine__5679__auto__;
              statearr_731406[1] = 1;
              return statearr_731406
            };
            var state_machine__5679__auto____1 = function(state_731390) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_731390);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_731390) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_731390)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_731407 = f__5729__auto__.call(null);
        statearr_731407[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___731408;
        return statearr_731407
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null)
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5728__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5729__auto__ = function() {
      var switch__5678__auto__ = function(state_731461) {
        var state_val_731462 = state_731461[1];
        if(state_val_731462 === 7) {
          var inst_731457 = state_731461[2];
          var state_731461__$1 = state_731461;
          var statearr_731463_731475 = state_731461__$1;
          statearr_731463_731475[2] = inst_731457;
          statearr_731463_731475[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_731462 === 6) {
            var inst_731450 = state_731461[5];
            var inst_731447 = state_731461[6];
            var inst_731454 = f.call(null, inst_731447, inst_731450);
            var inst_731447__$1 = inst_731454;
            var state_731461__$1 = function() {
              var statearr_731464 = state_731461;
              statearr_731464[6] = inst_731447__$1;
              return statearr_731464
            }();
            var statearr_731465_731476 = state_731461__$1;
            statearr_731465_731476[2] = null;
            statearr_731465_731476[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_731462 === 5) {
              var inst_731447 = state_731461[6];
              var state_731461__$1 = state_731461;
              var statearr_731466_731477 = state_731461__$1;
              statearr_731466_731477[2] = inst_731447;
              statearr_731466_731477[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_731462 === 4) {
                var inst_731450 = state_731461[5];
                var inst_731450__$1 = state_731461[2];
                var inst_731451 = inst_731450__$1 == null;
                var state_731461__$1 = function() {
                  var statearr_731467 = state_731461;
                  statearr_731467[5] = inst_731450__$1;
                  return statearr_731467
                }();
                if(cljs.core.truth_(inst_731451)) {
                  var statearr_731468_731478 = state_731461__$1;
                  statearr_731468_731478[1] = 5
                }else {
                  var statearr_731469_731479 = state_731461__$1;
                  statearr_731469_731479[1] = 6
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_731462 === 3) {
                  var inst_731459 = state_731461[2];
                  var state_731461__$1 = state_731461;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_731461__$1, inst_731459)
                }else {
                  if(state_val_731462 === 2) {
                    var state_731461__$1 = state_731461;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_731461__$1, 4, ch)
                  }else {
                    if(state_val_731462 === 1) {
                      var inst_731447 = init;
                      var state_731461__$1 = function() {
                        var statearr_731470 = state_731461;
                        statearr_731470[6] = inst_731447;
                        return statearr_731470
                      }();
                      var statearr_731471_731480 = state_731461__$1;
                      statearr_731471_731480[2] = null;
                      statearr_731471_731480[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      return null
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5678__auto__) {
        return function() {
          var state_machine__5679__auto__ = null;
          var state_machine__5679__auto____0 = function() {
            var statearr_731473 = new Array(7);
            statearr_731473[0] = state_machine__5679__auto__;
            statearr_731473[1] = 1;
            return statearr_731473
          };
          var state_machine__5679__auto____1 = function(state_731461) {
            while(true) {
              var result__5680__auto__ = switch__5678__auto__.call(null, state_731461);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5680__auto__
              }
              break
            }
          };
          state_machine__5679__auto__ = function(state_731461) {
            switch(arguments.length) {
              case 0:
                return state_machine__5679__auto____0.call(this);
              case 1:
                return state_machine__5679__auto____1.call(this, state_731461)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
          return state_machine__5679__auto__
        }()
      }(switch__5678__auto__)
    }();
    var state__5730__auto__ = function() {
      var statearr_731474 = f__5729__auto__.call(null);
      statearr_731474[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto__;
      return statearr_731474
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
  });
  return c__5728__auto__
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true)
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5728__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_731538) {
          var state_val_731539 = state_731538[1];
          if(state_val_731539 === 1) {
            var inst_731518 = cljs.core.seq.call(null, coll);
            var inst_731519 = inst_731518;
            var state_731538__$1 = function() {
              var statearr_731540 = state_731538;
              statearr_731540[5] = inst_731519;
              return statearr_731540
            }();
            var statearr_731541_731555 = state_731538__$1;
            statearr_731541_731555[2] = null;
            statearr_731541_731555[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_731539 === 2) {
              var inst_731519 = state_731538[5];
              var state_731538__$1 = state_731538;
              if(cljs.core.truth_(inst_731519)) {
                var statearr_731542_731556 = state_731538__$1;
                statearr_731542_731556[1] = 4
              }else {
                var statearr_731543_731557 = state_731538__$1;
                statearr_731543_731557[1] = 5
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_731539 === 3) {
                var inst_731536 = state_731538[2];
                var state_731538__$1 = state_731538;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_731538__$1, inst_731536)
              }else {
                if(state_val_731539 === 4) {
                  var inst_731519 = state_731538[5];
                  var inst_731522 = cljs.core.first.call(null, inst_731519);
                  var state_731538__$1 = state_731538;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_731538__$1, 7, ch, inst_731522)
                }else {
                  if(state_val_731539 === 5) {
                    var state_731538__$1 = state_731538;
                    if(cljs.core.truth_(close_QMARK_)) {
                      var statearr_731544_731558 = state_731538__$1;
                      statearr_731544_731558[1] = 8
                    }else {
                      var statearr_731545_731559 = state_731538__$1;
                      statearr_731545_731559[1] = 9
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_731539 === 6) {
                      var inst_731534 = state_731538[2];
                      var state_731538__$1 = state_731538;
                      var statearr_731546_731560 = state_731538__$1;
                      statearr_731546_731560[2] = inst_731534;
                      statearr_731546_731560[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_731539 === 7) {
                        var inst_731519 = state_731538[5];
                        var inst_731524 = state_731538[2];
                        var inst_731525 = cljs.core.next.call(null, inst_731519);
                        var inst_731519__$1 = inst_731525;
                        var state_731538__$1 = function() {
                          var statearr_731547 = state_731538;
                          statearr_731547[5] = inst_731519__$1;
                          statearr_731547[6] = inst_731524;
                          return statearr_731547
                        }();
                        var statearr_731548_731561 = state_731538__$1;
                        statearr_731548_731561[2] = null;
                        statearr_731548_731561[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_731539 === 8) {
                          var inst_731529 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_731538__$1 = state_731538;
                          var statearr_731549_731562 = state_731538__$1;
                          statearr_731549_731562[2] = inst_731529;
                          statearr_731549_731562[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_731539 === 9) {
                            var state_731538__$1 = state_731538;
                            var statearr_731550_731563 = state_731538__$1;
                            statearr_731550_731563[2] = null;
                            statearr_731550_731563[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_731539 === 10) {
                              var inst_731532 = state_731538[2];
                              var state_731538__$1 = state_731538;
                              var statearr_731551_731564 = state_731538__$1;
                              statearr_731551_731564[2] = inst_731532;
                              statearr_731551_731564[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              return null
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_731553 = new Array(7);
              statearr_731553[0] = state_machine__5679__auto__;
              statearr_731553[1] = 1;
              return statearr_731553
            };
            var state_machine__5679__auto____1 = function(state_731538) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_731538);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_731538) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_731538)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_731554 = f__5729__auto__.call(null);
        statearr_731554[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto__;
        return statearr_731554
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return c__5728__auto__
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch
};
cljs.core.async.Mux = function() {
  var obj731566 = {};
  return obj731566
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if(function() {
    var and__3273__auto__ = _;
    if(and__3273__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_)
  }else {
    var x__3888__auto__ = _ == null ? null : _;
    return function() {
      var or__3285__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _)
  }
};
cljs.core.async.Mult = function() {
  var obj731568 = {};
  return obj731568
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_)
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m)
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if(typeof cljs.core.async.t731781 !== "undefined") {
    }else {
      cljs.core.async.t731781 = function(cs, ch, mult, meta731782) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta731782 = meta731782;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216
      };
      cljs.core.async.t731781.cljs$lang$type = true;
      cljs.core.async.t731781.cljs$lang$ctorStr = "cljs.core.async/t731781";
      cljs.core.async.t731781.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
          return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t731781")
        }
      }(cs);
      cljs.core.async.t731781.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t731781.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null
        }
      }(cs);
      cljs.core.async.t731781.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null
        }
      }(cs);
      cljs.core.async.t731781.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null
        }
      }(cs);
      cljs.core.async.t731781.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t731781.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch
        }
      }(cs);
      cljs.core.async.t731781.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_731783) {
          var self__ = this;
          var _731783__$1 = this;
          return self__.meta731782
        }
      }(cs);
      cljs.core.async.t731781.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_731783, meta731782__$1) {
          var self__ = this;
          var _731783__$1 = this;
          return new cljs.core.async.t731781(self__.cs, self__.ch, self__.mult, meta731782__$1)
        }
      }(cs);
      cljs.core.async.__GT_t731781 = function(cs) {
        return function __GT_t731781(cs__$1, ch__$1, mult__$1, meta731782) {
          return new cljs.core.async.t731781(cs__$1, ch__$1, mult__$1, meta731782)
        }
      }(cs)
    }
    return new cljs.core.async.t731781(cs, ch, mult, null)
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if(cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true)
      }else {
        return null
      }
    }
  }(cs, m, dchan, dctr);
  var c__5728__auto___731993 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5729__auto__ = function() {
      var switch__5678__auto__ = function(state_731911) {
        var state_val_731912 = state_731911[1];
        if(state_val_731912 === 32) {
          try {
            var inst_731786 = state_731911[5];
            var inst_731862 = state_731911[6];
            var inst_731868 = cljs.core.async.put_BANG_.call(null, inst_731862, inst_731786, done);
            var state_731911__$1 = state_731911;
            var statearr_731915_731994 = state_731911__$1;
            statearr_731915_731994[2] = inst_731868;
            statearr_731915_731994[1] = 30;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }catch(e731913) {
            if(e731913 instanceof Object) {
              var ex__5672__auto__ = e731913;
              var statearr_731914_731995 = state_731911;
              statearr_731914_731995[1] = 31;
              statearr_731914_731995[2] = ex__5672__auto__;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e731913;
              }else {
                return null
              }
            }
          }
        }else {
          if(state_val_731912 === 1) {
            var state_731911__$1 = state_731911;
            var statearr_731916_731996 = state_731911__$1;
            statearr_731916_731996[2] = null;
            statearr_731916_731996[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_731912 === 33) {
              var inst_731874 = state_731911[7];
              var inst_731876 = cljs.core.chunked_seq_QMARK_.call(null, inst_731874);
              var state_731911__$1 = state_731911;
              if(inst_731876) {
                var statearr_731917_731997 = state_731911__$1;
                statearr_731917_731997[1] = 36
              }else {
                var statearr_731918_731998 = state_731911__$1;
                statearr_731918_731998[1] = 37
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_731912 === 2) {
                var state_731911__$1 = state_731911;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_731911__$1, 4, ch)
              }else {
                if(state_val_731912 === 34) {
                  var state_731911__$1 = state_731911;
                  var statearr_731919_731999 = state_731911__$1;
                  statearr_731919_731999[2] = null;
                  statearr_731919_731999[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_731912 === 3) {
                    var inst_731909 = state_731911[2];
                    var state_731911__$1 = state_731911;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_731911__$1, inst_731909)
                  }else {
                    if(state_val_731912 === 35) {
                      var inst_731898 = state_731911[2];
                      var state_731911__$1 = state_731911;
                      var statearr_731920_732000 = state_731911__$1;
                      statearr_731920_732000[2] = inst_731898;
                      statearr_731920_732000[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_731912 === 4) {
                        var inst_731786 = state_731911[5];
                        var inst_731786__$1 = state_731911[2];
                        var inst_731787 = inst_731786__$1 == null;
                        var state_731911__$1 = function() {
                          var statearr_731921 = state_731911;
                          statearr_731921[5] = inst_731786__$1;
                          return statearr_731921
                        }();
                        if(cljs.core.truth_(inst_731787)) {
                          var statearr_731922_732001 = state_731911__$1;
                          statearr_731922_732001[1] = 5
                        }else {
                          var statearr_731923_732002 = state_731911__$1;
                          statearr_731923_732002[1] = 6
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_731912 === 36) {
                          var inst_731874 = state_731911[7];
                          var inst_731878 = cljs.core.chunk_first.call(null, inst_731874);
                          var inst_731879 = cljs.core.chunk_rest.call(null, inst_731874);
                          var inst_731880 = cljs.core.count.call(null, inst_731878);
                          var inst_731854 = inst_731879;
                          var inst_731855 = inst_731878;
                          var inst_731856 = inst_731880;
                          var inst_731857 = 0;
                          var state_731911__$1 = function() {
                            var statearr_731924 = state_731911;
                            statearr_731924[8] = inst_731855;
                            statearr_731924[9] = inst_731856;
                            statearr_731924[10] = inst_731857;
                            statearr_731924[11] = inst_731854;
                            return statearr_731924
                          }();
                          var statearr_731925_732003 = state_731911__$1;
                          statearr_731925_732003[2] = null;
                          statearr_731925_732003[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_731912 === 5) {
                            var inst_731793 = cljs.core.deref.call(null, cs);
                            var inst_731794 = cljs.core.seq.call(null, inst_731793);
                            var inst_731795 = inst_731794;
                            var inst_731796 = null;
                            var inst_731797 = 0;
                            var inst_731798 = 0;
                            var state_731911__$1 = function() {
                              var statearr_731926 = state_731911;
                              statearr_731926[12] = inst_731795;
                              statearr_731926[13] = inst_731798;
                              statearr_731926[14] = inst_731797;
                              statearr_731926[15] = inst_731796;
                              return statearr_731926
                            }();
                            var statearr_731927_732004 = state_731911__$1;
                            statearr_731927_732004[2] = null;
                            statearr_731927_732004[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_731912 === 37) {
                              var inst_731874 = state_731911[7];
                              var inst_731883 = cljs.core.first.call(null, inst_731874);
                              var state_731911__$1 = function() {
                                var statearr_731928 = state_731911;
                                statearr_731928[16] = inst_731883;
                                return statearr_731928
                              }();
                              var statearr_731929_732005 = state_731911__$1;
                              statearr_731929_732005[2] = null;
                              statearr_731929_732005[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_731912 === 6) {
                                var inst_731845 = cljs.core.deref.call(null, cs);
                                var inst_731846 = cljs.core.keys.call(null, inst_731845);
                                var inst_731847 = cljs.core.count.call(null, inst_731846);
                                var inst_731848 = cljs.core.reset_BANG_.call(null, dctr, inst_731847);
                                var inst_731853 = cljs.core.seq.call(null, inst_731846);
                                var inst_731854 = inst_731853;
                                var inst_731855 = null;
                                var inst_731856 = 0;
                                var inst_731857 = 0;
                                var state_731911__$1 = function() {
                                  var statearr_731930 = state_731911;
                                  statearr_731930[8] = inst_731855;
                                  statearr_731930[9] = inst_731856;
                                  statearr_731930[10] = inst_731857;
                                  statearr_731930[11] = inst_731854;
                                  statearr_731930[17] = inst_731848;
                                  return statearr_731930
                                }();
                                var statearr_731931_732006 = state_731911__$1;
                                statearr_731931_732006[2] = null;
                                statearr_731931_732006[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_731912 === 38) {
                                  var inst_731895 = state_731911[2];
                                  var state_731911__$1 = state_731911;
                                  var statearr_731932_732007 = state_731911__$1;
                                  statearr_731932_732007[2] = inst_731895;
                                  statearr_731932_732007[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_731912 === 7) {
                                    var inst_731907 = state_731911[2];
                                    var state_731911__$1 = state_731911;
                                    var statearr_731933_732008 = state_731911__$1;
                                    statearr_731933_732008[2] = inst_731907;
                                    statearr_731933_732008[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_731912 === 39) {
                                      var inst_731874 = state_731911[7];
                                      var inst_731891 = state_731911[2];
                                      var inst_731892 = cljs.core.next.call(null, inst_731874);
                                      var inst_731854 = inst_731892;
                                      var inst_731855 = null;
                                      var inst_731856 = 0;
                                      var inst_731857 = 0;
                                      var state_731911__$1 = function() {
                                        var statearr_731934 = state_731911;
                                        statearr_731934[18] = inst_731891;
                                        statearr_731934[8] = inst_731855;
                                        statearr_731934[9] = inst_731856;
                                        statearr_731934[10] = inst_731857;
                                        statearr_731934[11] = inst_731854;
                                        return statearr_731934
                                      }();
                                      var statearr_731935_732009 = state_731911__$1;
                                      statearr_731935_732009[2] = null;
                                      statearr_731935_732009[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_731912 === 8) {
                                        var inst_731798 = state_731911[13];
                                        var inst_731797 = state_731911[14];
                                        var inst_731800 = inst_731798 < inst_731797;
                                        var inst_731801 = inst_731800;
                                        var state_731911__$1 = state_731911;
                                        if(cljs.core.truth_(inst_731801)) {
                                          var statearr_731936_732010 = state_731911__$1;
                                          statearr_731936_732010[1] = 10
                                        }else {
                                          var statearr_731937_732011 = state_731911__$1;
                                          statearr_731937_732011[1] = 11
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_731912 === 40) {
                                          var inst_731883 = state_731911[16];
                                          var inst_731884 = state_731911[2];
                                          var inst_731885 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_731886 = cljs.core.async.untap_STAR_.call(null, m, inst_731883);
                                          var state_731911__$1 = function() {
                                            var statearr_731938 = state_731911;
                                            statearr_731938[19] = inst_731885;
                                            statearr_731938[20] = inst_731884;
                                            return statearr_731938
                                          }();
                                          var statearr_731939_732012 = state_731911__$1;
                                          statearr_731939_732012[2] = inst_731886;
                                          statearr_731939_732012[1] = 39;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_731912 === 9) {
                                            var inst_731843 = state_731911[2];
                                            var state_731911__$1 = state_731911;
                                            var statearr_731940_732013 = state_731911__$1;
                                            statearr_731940_732013[2] = inst_731843;
                                            statearr_731940_732013[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_731912 === 41) {
                                              try {
                                                var inst_731786 = state_731911[5];
                                                var inst_731883 = state_731911[16];
                                                var inst_731889 = cljs.core.async.put_BANG_.call(null, inst_731883, inst_731786, done);
                                                var state_731911__$1 = state_731911;
                                                var statearr_731943_732014 = state_731911__$1;
                                                statearr_731943_732014[2] = inst_731889;
                                                statearr_731943_732014[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }catch(e731941) {
                                                if(e731941 instanceof Object) {
                                                  var ex__5672__auto__ = e731941;
                                                  var statearr_731942_732015 = state_731911;
                                                  statearr_731942_732015[1] = 40;
                                                  statearr_731942_732015[2] = ex__5672__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                    throw e731941;
                                                  }else {
                                                    return null
                                                  }
                                                }
                                              }
                                            }else {
                                              if(state_val_731912 === 10) {
                                                var inst_731798 = state_731911[13];
                                                var inst_731796 = state_731911[15];
                                                var inst_731804 = cljs.core._nth.call(null, inst_731796, inst_731798);
                                                var inst_731805 = cljs.core.nth.call(null, inst_731804, 0, null);
                                                var inst_731806 = cljs.core.nth.call(null, inst_731804, 1, null);
                                                var state_731911__$1 = function() {
                                                  var statearr_731944 = state_731911;
                                                  statearr_731944[21] = inst_731805;
                                                  return statearr_731944
                                                }();
                                                if(cljs.core.truth_(inst_731806)) {
                                                  var statearr_731945_732016 = state_731911__$1;
                                                  statearr_731945_732016[1] = 13
                                                }else {
                                                  var statearr_731946_732017 = state_731911__$1;
                                                  statearr_731946_732017[1] = 14
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                if(state_val_731912 === 42) {
                                                  var inst_731904 = state_731911[2];
                                                  var state_731911__$1 = function() {
                                                    var statearr_731947 = state_731911;
                                                    statearr_731947[22] = inst_731904;
                                                    return statearr_731947
                                                  }();
                                                  var statearr_731948_732018 = state_731911__$1;
                                                  statearr_731948_732018[2] = null;
                                                  statearr_731948_732018[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_731912 === 11) {
                                                    var inst_731795 = state_731911[12];
                                                    var inst_731815 = state_731911[23];
                                                    var inst_731815__$1 = cljs.core.seq.call(null, inst_731795);
                                                    var state_731911__$1 = function() {
                                                      var statearr_731949 = state_731911;
                                                      statearr_731949[23] = inst_731815__$1;
                                                      return statearr_731949
                                                    }();
                                                    if(inst_731815__$1) {
                                                      var statearr_731950_732019 = state_731911__$1;
                                                      statearr_731950_732019[1] = 16
                                                    }else {
                                                      var statearr_731951_732020 = state_731911__$1;
                                                      statearr_731951_732020[1] = 17
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_731912 === 12) {
                                                      var inst_731841 = state_731911[2];
                                                      var state_731911__$1 = state_731911;
                                                      var statearr_731952_732021 = state_731911__$1;
                                                      statearr_731952_732021[2] = inst_731841;
                                                      statearr_731952_732021[1] = 9;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      if(state_val_731912 === 13) {
                                                        var inst_731805 = state_731911[21];
                                                        var inst_731808 = cljs.core.async.close_BANG_.call(null, inst_731805);
                                                        var state_731911__$1 = state_731911;
                                                        var statearr_731956_732022 = state_731911__$1;
                                                        statearr_731956_732022[2] = inst_731808;
                                                        statearr_731956_732022[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                      }else {
                                                        if(state_val_731912 === 14) {
                                                          var state_731911__$1 = state_731911;
                                                          var statearr_731957_732023 = state_731911__$1;
                                                          statearr_731957_732023[2] = null;
                                                          statearr_731957_732023[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                        }else {
                                                          if(state_val_731912 === 15) {
                                                            var inst_731795 = state_731911[12];
                                                            var inst_731798 = state_731911[13];
                                                            var inst_731797 = state_731911[14];
                                                            var inst_731796 = state_731911[15];
                                                            var inst_731811 = state_731911[2];
                                                            var inst_731812 = inst_731798 + 1;
                                                            var tmp731953 = inst_731795;
                                                            var tmp731954 = inst_731797;
                                                            var tmp731955 = inst_731796;
                                                            var inst_731795__$1 = tmp731953;
                                                            var inst_731796__$1 = tmp731955;
                                                            var inst_731797__$1 = tmp731954;
                                                            var inst_731798__$1 = inst_731812;
                                                            var state_731911__$1 = function() {
                                                              var statearr_731958 = state_731911;
                                                              statearr_731958[24] = inst_731811;
                                                              statearr_731958[12] = inst_731795__$1;
                                                              statearr_731958[13] = inst_731798__$1;
                                                              statearr_731958[14] = inst_731797__$1;
                                                              statearr_731958[15] = inst_731796__$1;
                                                              return statearr_731958
                                                            }();
                                                            var statearr_731959_732024 = state_731911__$1;
                                                            statearr_731959_732024[2] = null;
                                                            statearr_731959_732024[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                          }else {
                                                            if(state_val_731912 === 16) {
                                                              var inst_731815 = state_731911[23];
                                                              var inst_731817 = cljs.core.chunked_seq_QMARK_.call(null, inst_731815);
                                                              var state_731911__$1 = state_731911;
                                                              if(inst_731817) {
                                                                var statearr_731960_732025 = state_731911__$1;
                                                                statearr_731960_732025[1] = 19
                                                              }else {
                                                                var statearr_731961_732026 = state_731911__$1;
                                                                statearr_731961_732026[1] = 20
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }else {
                                                              if(state_val_731912 === 17) {
                                                                var state_731911__$1 = state_731911;
                                                                var statearr_731962_732027 = state_731911__$1;
                                                                statearr_731962_732027[2] = null;
                                                                statearr_731962_732027[1] = 18;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                              }else {
                                                                if(state_val_731912 === 18) {
                                                                  var inst_731839 = state_731911[2];
                                                                  var state_731911__$1 = state_731911;
                                                                  var statearr_731963_732028 = state_731911__$1;
                                                                  statearr_731963_732028[2] = inst_731839;
                                                                  statearr_731963_732028[1] = 12;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                }else {
                                                                  if(state_val_731912 === 19) {
                                                                    var inst_731815 = state_731911[23];
                                                                    var inst_731819 = cljs.core.chunk_first.call(null, inst_731815);
                                                                    var inst_731820 = cljs.core.chunk_rest.call(null, inst_731815);
                                                                    var inst_731821 = cljs.core.count.call(null, inst_731819);
                                                                    var inst_731795 = inst_731820;
                                                                    var inst_731796 = inst_731819;
                                                                    var inst_731797 = inst_731821;
                                                                    var inst_731798 = 0;
                                                                    var state_731911__$1 = function() {
                                                                      var statearr_731964 = state_731911;
                                                                      statearr_731964[12] = inst_731795;
                                                                      statearr_731964[13] = inst_731798;
                                                                      statearr_731964[14] = inst_731797;
                                                                      statearr_731964[15] = inst_731796;
                                                                      return statearr_731964
                                                                    }();
                                                                    var statearr_731965_732029 = state_731911__$1;
                                                                    statearr_731965_732029[2] = null;
                                                                    statearr_731965_732029[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                  }else {
                                                                    if(state_val_731912 === 20) {
                                                                      var inst_731815 = state_731911[23];
                                                                      var inst_731825 = cljs.core.first.call(null, inst_731815);
                                                                      var inst_731826 = cljs.core.nth.call(null, inst_731825, 0, null);
                                                                      var inst_731827 = cljs.core.nth.call(null, inst_731825, 1, null);
                                                                      var state_731911__$1 = function() {
                                                                        var statearr_731966 = state_731911;
                                                                        statearr_731966[25] = inst_731826;
                                                                        return statearr_731966
                                                                      }();
                                                                      if(cljs.core.truth_(inst_731827)) {
                                                                        var statearr_731967_732030 = state_731911__$1;
                                                                        statearr_731967_732030[1] = 22
                                                                      }else {
                                                                        var statearr_731968_732031 = state_731911__$1;
                                                                        statearr_731968_732031[1] = 23
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                    }else {
                                                                      if(state_val_731912 === 21) {
                                                                        var inst_731836 = state_731911[2];
                                                                        var state_731911__$1 = state_731911;
                                                                        var statearr_731969_732032 = state_731911__$1;
                                                                        statearr_731969_732032[2] = inst_731836;
                                                                        statearr_731969_732032[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                      }else {
                                                                        if(state_val_731912 === 22) {
                                                                          var inst_731826 = state_731911[25];
                                                                          var inst_731829 = cljs.core.async.close_BANG_.call(null, inst_731826);
                                                                          var state_731911__$1 = state_731911;
                                                                          var statearr_731970_732033 = state_731911__$1;
                                                                          statearr_731970_732033[2] = inst_731829;
                                                                          statearr_731970_732033[1] = 24;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                        }else {
                                                                          if(state_val_731912 === 23) {
                                                                            var state_731911__$1 = state_731911;
                                                                            var statearr_731971_732034 = state_731911__$1;
                                                                            statearr_731971_732034[2] = null;
                                                                            statearr_731971_732034[1] = 24;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                          }else {
                                                                            if(state_val_731912 === 24) {
                                                                              var inst_731815 = state_731911[23];
                                                                              var inst_731832 = state_731911[2];
                                                                              var inst_731833 = cljs.core.next.call(null, inst_731815);
                                                                              var inst_731795 = inst_731833;
                                                                              var inst_731796 = null;
                                                                              var inst_731797 = 0;
                                                                              var inst_731798 = 0;
                                                                              var state_731911__$1 = function() {
                                                                                var statearr_731972 = state_731911;
                                                                                statearr_731972[12] = inst_731795;
                                                                                statearr_731972[26] = inst_731832;
                                                                                statearr_731972[13] = inst_731798;
                                                                                statearr_731972[14] = inst_731797;
                                                                                statearr_731972[15] = inst_731796;
                                                                                return statearr_731972
                                                                              }();
                                                                              var statearr_731973_732035 = state_731911__$1;
                                                                              statearr_731973_732035[2] = null;
                                                                              statearr_731973_732035[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                            }else {
                                                                              if(state_val_731912 === 25) {
                                                                                var inst_731856 = state_731911[9];
                                                                                var inst_731857 = state_731911[10];
                                                                                var inst_731859 = inst_731857 < inst_731856;
                                                                                var inst_731860 = inst_731859;
                                                                                var state_731911__$1 = state_731911;
                                                                                if(cljs.core.truth_(inst_731860)) {
                                                                                  var statearr_731974_732036 = state_731911__$1;
                                                                                  statearr_731974_732036[1] = 27
                                                                                }else {
                                                                                  var statearr_731975_732037 = state_731911__$1;
                                                                                  statearr_731975_732037[1] = 28
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                              }else {
                                                                                if(state_val_731912 === 26) {
                                                                                  var inst_731902 = state_731911[2];
                                                                                  var state_731911__$1 = function() {
                                                                                    var statearr_731976 = state_731911;
                                                                                    statearr_731976[27] = inst_731902;
                                                                                    return statearr_731976
                                                                                  }();
                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_731911__$1, 42, dchan)
                                                                                }else {
                                                                                  if(state_val_731912 === 27) {
                                                                                    var inst_731855 = state_731911[8];
                                                                                    var inst_731857 = state_731911[10];
                                                                                    var inst_731862 = cljs.core._nth.call(null, inst_731855, inst_731857);
                                                                                    var state_731911__$1 = function() {
                                                                                      var statearr_731977 = state_731911;
                                                                                      statearr_731977[6] = inst_731862;
                                                                                      return statearr_731977
                                                                                    }();
                                                                                    var statearr_731978_732038 = state_731911__$1;
                                                                                    statearr_731978_732038[2] = null;
                                                                                    statearr_731978_732038[1] = 32;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                  }else {
                                                                                    if(state_val_731912 === 28) {
                                                                                      var inst_731854 = state_731911[11];
                                                                                      var inst_731874 = state_731911[7];
                                                                                      var inst_731874__$1 = cljs.core.seq.call(null, inst_731854);
                                                                                      var state_731911__$1 = function() {
                                                                                        var statearr_731982 = state_731911;
                                                                                        statearr_731982[7] = inst_731874__$1;
                                                                                        return statearr_731982
                                                                                      }();
                                                                                      if(inst_731874__$1) {
                                                                                        var statearr_731983_732039 = state_731911__$1;
                                                                                        statearr_731983_732039[1] = 33
                                                                                      }else {
                                                                                        var statearr_731984_732040 = state_731911__$1;
                                                                                        statearr_731984_732040[1] = 34
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                    }else {
                                                                                      if(state_val_731912 === 29) {
                                                                                        var inst_731900 = state_731911[2];
                                                                                        var state_731911__$1 = state_731911;
                                                                                        var statearr_731985_732041 = state_731911__$1;
                                                                                        statearr_731985_732041[2] = inst_731900;
                                                                                        statearr_731985_732041[1] = 26;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                      }else {
                                                                                        if(state_val_731912 === 30) {
                                                                                          var inst_731855 = state_731911[8];
                                                                                          var inst_731856 = state_731911[9];
                                                                                          var inst_731857 = state_731911[10];
                                                                                          var inst_731854 = state_731911[11];
                                                                                          var inst_731870 = state_731911[2];
                                                                                          var inst_731871 = inst_731857 + 1;
                                                                                          var tmp731979 = inst_731855;
                                                                                          var tmp731980 = inst_731856;
                                                                                          var tmp731981 = inst_731854;
                                                                                          var inst_731854__$1 = tmp731981;
                                                                                          var inst_731855__$1 = tmp731979;
                                                                                          var inst_731856__$1 = tmp731980;
                                                                                          var inst_731857__$1 = inst_731871;
                                                                                          var state_731911__$1 = function() {
                                                                                            var statearr_731986 = state_731911;
                                                                                            statearr_731986[8] = inst_731855__$1;
                                                                                            statearr_731986[9] = inst_731856__$1;
                                                                                            statearr_731986[10] = inst_731857__$1;
                                                                                            statearr_731986[11] = inst_731854__$1;
                                                                                            statearr_731986[28] = inst_731870;
                                                                                            return statearr_731986
                                                                                          }();
                                                                                          var statearr_731987_732042 = state_731911__$1;
                                                                                          statearr_731987_732042[2] = null;
                                                                                          statearr_731987_732042[1] = 25;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                        }else {
                                                                                          if(state_val_731912 === 31) {
                                                                                            var inst_731862 = state_731911[6];
                                                                                            var inst_731863 = state_731911[2];
                                                                                            var inst_731864 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                            var inst_731865 = cljs.core.async.untap_STAR_.call(null, m, inst_731862);
                                                                                            var state_731911__$1 = function() {
                                                                                              var statearr_731988 = state_731911;
                                                                                              statearr_731988[29] = inst_731864;
                                                                                              statearr_731988[30] = inst_731863;
                                                                                              return statearr_731988
                                                                                            }();
                                                                                            var statearr_731989_732043 = state_731911__$1;
                                                                                            statearr_731989_732043[2] = inst_731865;
                                                                                            statearr_731989_732043[1] = 30;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                                                          }else {
                                                                                            return null
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5678__auto__) {
        return function() {
          var state_machine__5679__auto__ = null;
          var state_machine__5679__auto____0 = function() {
            var statearr_731991 = new Array(31);
            statearr_731991[0] = state_machine__5679__auto__;
            statearr_731991[1] = 1;
            return statearr_731991
          };
          var state_machine__5679__auto____1 = function(state_731911) {
            while(true) {
              var result__5680__auto__ = switch__5678__auto__.call(null, state_731911);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5680__auto__
              }
              break
            }
          };
          state_machine__5679__auto__ = function(state_731911) {
            switch(arguments.length) {
              case 0:
                return state_machine__5679__auto____0.call(this);
              case 1:
                return state_machine__5679__auto____1.call(this, state_731911)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
          return state_machine__5679__auto__
        }()
      }(switch__5678__auto__)
    }();
    var state__5730__auto__ = function() {
      var statearr_731992 = f__5729__auto__.call(null);
      statearr_731992[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___731993;
      return statearr_731992
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
  });
  return m
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true)
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch)
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult)
};
cljs.core.async.Mix = function() {
  var obj732045 = {};
  return obj732045
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch)
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m)
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map)
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if(function() {
    var and__3273__auto__ = m;
    if(and__3273__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2
    }else {
      return and__3273__auto__
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode)
  }else {
    var x__3888__auto__ = m == null ? null : m;
    return function() {
      var or__3285__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode)
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true)
    }
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if(cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c)
          }else {
            return ret
          }
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs)
    }
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null)
    }
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if(typeof cljs.core.async.t732151 !== "undefined") {
    }else {
      cljs.core.async.t732151 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta732152) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta732152 = meta732152;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216
      };
      cljs.core.async.t732151.cljs$lang$type = true;
      cljs.core.async.t732151.cljs$lang$ctorStr = "cljs.core.async/t732151";
      cljs.core.async.t732151.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
          return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t732151")
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t732151.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t732151.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t732151.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t732151.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t732151.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t732151.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if(cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          }else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t732151.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t732151.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t732151.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_732153) {
          var self__ = this;
          var _732153__$1 = this;
          return self__.meta732152
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t732151.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_732153, meta732152__$1) {
          var self__ = this;
          var _732153__$1 = this;
          return new cljs.core.async.t732151(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta732152__$1)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t732151 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t732151(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta732152) {
          return new cljs.core.async.t732151(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta732152)
        }
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state)
    }
    return new cljs.core.async.t732151(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null)
  }();
  var c__5728__auto___732256 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5729__auto__ = function() {
      var switch__5678__auto__ = function(state_732218) {
        var state_val_732219 = state_732218[1];
        if(state_val_732219 === 1) {
          var inst_732157 = state_732218[5];
          var inst_732157__$1 = calc_state.call(null);
          var inst_732158 = cljs.core.seq_QMARK_.call(null, inst_732157__$1);
          var state_732218__$1 = function() {
            var statearr_732220 = state_732218;
            statearr_732220[5] = inst_732157__$1;
            return statearr_732220
          }();
          if(inst_732158) {
            var statearr_732221_732257 = state_732218__$1;
            statearr_732221_732257[1] = 2
          }else {
            var statearr_732222_732258 = state_732218__$1;
            statearr_732222_732258[1] = 3
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
        }else {
          if(state_val_732219 === 2) {
            var inst_732157 = state_732218[5];
            var inst_732160 = cljs.core.apply.call(null, cljs.core.hash_map, inst_732157);
            var state_732218__$1 = state_732218;
            var statearr_732223_732259 = state_732218__$1;
            statearr_732223_732259[2] = inst_732160;
            statearr_732223_732259[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_732219 === 3) {
              var inst_732157 = state_732218[5];
              var state_732218__$1 = state_732218;
              var statearr_732224_732260 = state_732218__$1;
              statearr_732224_732260[2] = inst_732157;
              statearr_732224_732260[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_732219 === 4) {
                var inst_732157 = state_732218[5];
                var inst_732163 = state_732218[2];
                var inst_732164 = cljs.core.get.call(null, inst_732163, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_732165 = cljs.core.get.call(null, inst_732163, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_732166 = cljs.core.get.call(null, inst_732163, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_732167 = inst_732157;
                var state_732218__$1 = function() {
                  var statearr_732225 = state_732218;
                  statearr_732225[6] = inst_732166;
                  statearr_732225[7] = inst_732167;
                  statearr_732225[8] = inst_732165;
                  statearr_732225[9] = inst_732164;
                  return statearr_732225
                }();
                var statearr_732226_732261 = state_732218__$1;
                statearr_732226_732261[2] = null;
                statearr_732226_732261[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
              }else {
                if(state_val_732219 === 5) {
                  var inst_732167 = state_732218[7];
                  var inst_732170 = cljs.core.seq_QMARK_.call(null, inst_732167);
                  var state_732218__$1 = state_732218;
                  if(inst_732170) {
                    var statearr_732227_732262 = state_732218__$1;
                    statearr_732227_732262[1] = 7
                  }else {
                    var statearr_732228_732263 = state_732218__$1;
                    statearr_732228_732263[1] = 8
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_732219 === 6) {
                    var inst_732216 = state_732218[2];
                    var state_732218__$1 = state_732218;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_732218__$1, inst_732216)
                  }else {
                    if(state_val_732219 === 7) {
                      var inst_732167 = state_732218[7];
                      var inst_732172 = cljs.core.apply.call(null, cljs.core.hash_map, inst_732167);
                      var state_732218__$1 = state_732218;
                      var statearr_732229_732264 = state_732218__$1;
                      statearr_732229_732264[2] = inst_732172;
                      statearr_732229_732264[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_732219 === 8) {
                        var inst_732167 = state_732218[7];
                        var state_732218__$1 = state_732218;
                        var statearr_732230_732265 = state_732218__$1;
                        statearr_732230_732265[2] = inst_732167;
                        statearr_732230_732265[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_732219 === 9) {
                          var inst_732175 = state_732218[10];
                          var inst_732175__$1 = state_732218[2];
                          var inst_732176 = cljs.core.get.call(null, inst_732175__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_732177 = cljs.core.get.call(null, inst_732175__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_732178 = cljs.core.get.call(null, inst_732175__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_732218__$1 = function() {
                            var statearr_732231 = state_732218;
                            statearr_732231[11] = inst_732177;
                            statearr_732231[12] = inst_732178;
                            statearr_732231[10] = inst_732175__$1;
                            return statearr_732231
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_732218__$1, 10, inst_732176)
                        }else {
                          if(state_val_732219 === 10) {
                            var inst_732182 = state_732218[13];
                            var inst_732183 = state_732218[14];
                            var inst_732181 = state_732218[2];
                            var inst_732182__$1 = cljs.core.nth.call(null, inst_732181, 0, null);
                            var inst_732183__$1 = cljs.core.nth.call(null, inst_732181, 1, null);
                            var inst_732184 = inst_732182__$1 == null;
                            var inst_732185 = cljs.core._EQ_.call(null, inst_732183__$1, change);
                            var inst_732186 = inst_732184 || inst_732185;
                            var state_732218__$1 = function() {
                              var statearr_732232 = state_732218;
                              statearr_732232[13] = inst_732182__$1;
                              statearr_732232[14] = inst_732183__$1;
                              return statearr_732232
                            }();
                            if(cljs.core.truth_(inst_732186)) {
                              var statearr_732233_732266 = state_732218__$1;
                              statearr_732233_732266[1] = 11
                            }else {
                              var statearr_732234_732267 = state_732218__$1;
                              statearr_732234_732267[1] = 12
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_732219 === 11) {
                              var inst_732182 = state_732218[13];
                              var inst_732188 = inst_732182 == null;
                              var state_732218__$1 = state_732218;
                              if(cljs.core.truth_(inst_732188)) {
                                var statearr_732235_732268 = state_732218__$1;
                                statearr_732235_732268[1] = 14
                              }else {
                                var statearr_732236_732269 = state_732218__$1;
                                statearr_732236_732269[1] = 15
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_732219 === 12) {
                                var inst_732197 = state_732218[15];
                                var inst_732178 = state_732218[12];
                                var inst_732183 = state_732218[14];
                                var inst_732197__$1 = inst_732178.call(null, inst_732183);
                                var state_732218__$1 = function() {
                                  var statearr_732237 = state_732218;
                                  statearr_732237[15] = inst_732197__$1;
                                  return statearr_732237
                                }();
                                if(cljs.core.truth_(inst_732197__$1)) {
                                  var statearr_732238_732270 = state_732218__$1;
                                  statearr_732238_732270[1] = 17
                                }else {
                                  var statearr_732239_732271 = state_732218__$1;
                                  statearr_732239_732271[1] = 18
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_732219 === 13) {
                                  var inst_732214 = state_732218[2];
                                  var state_732218__$1 = state_732218;
                                  var statearr_732240_732272 = state_732218__$1;
                                  statearr_732240_732272[2] = inst_732214;
                                  statearr_732240_732272[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_732219 === 14) {
                                    var inst_732183 = state_732218[14];
                                    var inst_732190 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_732183);
                                    var state_732218__$1 = state_732218;
                                    var statearr_732241_732273 = state_732218__$1;
                                    statearr_732241_732273[2] = inst_732190;
                                    statearr_732241_732273[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_732219 === 15) {
                                      var state_732218__$1 = state_732218;
                                      var statearr_732242_732274 = state_732218__$1;
                                      statearr_732242_732274[2] = null;
                                      statearr_732242_732274[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_732219 === 16) {
                                        var inst_732193 = state_732218[2];
                                        var inst_732194 = calc_state.call(null);
                                        var inst_732167 = inst_732194;
                                        var state_732218__$1 = function() {
                                          var statearr_732243 = state_732218;
                                          statearr_732243[16] = inst_732193;
                                          statearr_732243[7] = inst_732167;
                                          return statearr_732243
                                        }();
                                        var statearr_732244_732275 = state_732218__$1;
                                        statearr_732244_732275[2] = null;
                                        statearr_732244_732275[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_732219 === 17) {
                                          var inst_732197 = state_732218[15];
                                          var state_732218__$1 = state_732218;
                                          var statearr_732245_732276 = state_732218__$1;
                                          statearr_732245_732276[2] = inst_732197;
                                          statearr_732245_732276[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_732219 === 18) {
                                            var inst_732177 = state_732218[11];
                                            var inst_732178 = state_732218[12];
                                            var inst_732183 = state_732218[14];
                                            var inst_732200 = cljs.core.empty_QMARK_.call(null, inst_732178);
                                            var inst_732201 = inst_732177.call(null, inst_732183);
                                            var inst_732202 = cljs.core.not.call(null, inst_732201);
                                            var inst_732203 = inst_732200 && inst_732202;
                                            var state_732218__$1 = state_732218;
                                            var statearr_732246_732277 = state_732218__$1;
                                            statearr_732246_732277[2] = inst_732203;
                                            statearr_732246_732277[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_732219 === 19) {
                                              var inst_732205 = state_732218[2];
                                              var state_732218__$1 = state_732218;
                                              if(cljs.core.truth_(inst_732205)) {
                                                var statearr_732247_732278 = state_732218__$1;
                                                statearr_732247_732278[1] = 20
                                              }else {
                                                var statearr_732248_732279 = state_732218__$1;
                                                statearr_732248_732279[1] = 21
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_732219 === 20) {
                                                var inst_732182 = state_732218[13];
                                                var state_732218__$1 = state_732218;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_732218__$1, 23, out, inst_732182)
                                              }else {
                                                if(state_val_732219 === 21) {
                                                  var state_732218__$1 = state_732218;
                                                  var statearr_732249_732280 = state_732218__$1;
                                                  statearr_732249_732280[2] = null;
                                                  statearr_732249_732280[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_732219 === 22) {
                                                    var inst_732175 = state_732218[10];
                                                    var inst_732211 = state_732218[2];
                                                    var inst_732167 = inst_732175;
                                                    var state_732218__$1 = function() {
                                                      var statearr_732250 = state_732218;
                                                      statearr_732250[7] = inst_732167;
                                                      statearr_732250[17] = inst_732211;
                                                      return statearr_732250
                                                    }();
                                                    var statearr_732251_732281 = state_732218__$1;
                                                    statearr_732251_732281[2] = null;
                                                    statearr_732251_732281[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_732219 === 23) {
                                                      var inst_732208 = state_732218[2];
                                                      var state_732218__$1 = state_732218;
                                                      var statearr_732252_732282 = state_732218__$1;
                                                      statearr_732252_732282[2] = inst_732208;
                                                      statearr_732252_732282[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      return null
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5678__auto__) {
        return function() {
          var state_machine__5679__auto__ = null;
          var state_machine__5679__auto____0 = function() {
            var statearr_732254 = new Array(18);
            statearr_732254[0] = state_machine__5679__auto__;
            statearr_732254[1] = 1;
            return statearr_732254
          };
          var state_machine__5679__auto____1 = function(state_732218) {
            while(true) {
              var result__5680__auto__ = switch__5678__auto__.call(null, state_732218);
              if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue
              }else {
                return result__5680__auto__
              }
              break
            }
          };
          state_machine__5679__auto__ = function(state_732218) {
            switch(arguments.length) {
              case 0:
                return state_machine__5679__auto____0.call(this);
              case 1:
                return state_machine__5679__auto____1.call(this, state_732218)
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
          state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
          return state_machine__5679__auto__
        }()
      }(switch__5678__auto__)
    }();
    var state__5730__auto__ = function() {
      var statearr_732255 = f__5729__auto__.call(null);
      statearr_732255[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___732256;
      return statearr_732255
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
  });
  return m
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch)
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch)
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix)
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map)
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode)
};
cljs.core.async.Pub = function() {
  var obj732284 = {};
  return obj732284
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if(function() {
    var and__3273__auto__ = p;
    if(and__3273__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4
    }else {
      return and__3273__auto__
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_)
  }else {
    var x__3888__auto__ = p == null ? null : p;
    return function() {
      var or__3285__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_)
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if(function() {
    var and__3273__auto__ = p;
    if(and__3273__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3
    }else {
      return and__3273__auto__
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch)
  }else {
    var x__3888__auto__ = p == null ? null : p;
    return function() {
      var or__3285__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__3888__auto__)];
      if(or__3285__auto__) {
        return or__3285__auto__
      }else {
        var or__3285__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if(or__3285__auto____$1) {
          return or__3285__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch)
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if(function() {
      var and__3273__auto__ = p;
      if(and__3273__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1
      }else {
        return and__3273__auto__
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p)
    }else {
      var x__3888__auto__ = p == null ? null : p;
      return function() {
        var or__3285__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p)
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if(function() {
      var and__3273__auto__ = p;
      if(and__3273__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2
      }else {
        return and__3273__auto__
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v)
    }else {
      var x__3888__auto__ = p == null ? null : p;
      return function() {
        var or__3285__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__3888__auto__)];
        if(or__3285__auto__) {
          return or__3285__auto__
        }else {
          var or__3285__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if(or__3285__auto____$1) {
            return or__3285__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v)
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null))
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3285__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if(cljs.core.truth_(or__3285__auto__)) {
          return or__3285__auto__
        }else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3285__auto__, mults) {
            return function(p1__732285_SHARP_) {
              if(cljs.core.truth_(p1__732285_SHARP_.call(null, topic))) {
                return p1__732285_SHARP_
              }else {
                return cljs.core.assoc.call(null, p1__732285_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))))
              }
            }
          }(or__3285__auto__, mults)), topic)
        }
      }
    }(mults);
    var p = function() {
      if(typeof cljs.core.async.t732409 !== "undefined") {
      }else {
        cljs.core.async.t732409 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta732410) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta732410 = meta732410;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216
        };
        cljs.core.async.t732409.cljs$lang$type = true;
        cljs.core.async.t732409.cljs$lang$ctorStr = "cljs.core.async/t732409";
        cljs.core.async.t732409.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3829__auto__, writer__3830__auto__, opt__3831__auto__) {
            return cljs.core._write.call(null, writer__3830__auto__, "cljs.core.async/t732409")
          }
        }(mults, ensure_mult);
        cljs.core.async.t732409.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t732409.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_)
          }
        }(mults, ensure_mult);
        cljs.core.async.t732409.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if(cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2)
            }else {
              return null
            }
          }
        }(mults, ensure_mult);
        cljs.core.async.t732409.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY)
          }
        }(mults, ensure_mult);
        cljs.core.async.t732409.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic)
          }
        }(mults, ensure_mult);
        cljs.core.async.t732409.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t732409.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch
          }
        }(mults, ensure_mult);
        cljs.core.async.t732409.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_732411) {
            var self__ = this;
            var _732411__$1 = this;
            return self__.meta732410
          }
        }(mults, ensure_mult);
        cljs.core.async.t732409.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_732411, meta732410__$1) {
            var self__ = this;
            var _732411__$1 = this;
            return new cljs.core.async.t732409(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta732410__$1)
          }
        }(mults, ensure_mult);
        cljs.core.async.__GT_t732409 = function(mults, ensure_mult) {
          return function __GT_t732409(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta732410) {
            return new cljs.core.async.t732409(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta732410)
          }
        }(mults, ensure_mult)
      }
      return new cljs.core.async.t732409(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null)
    }();
    var c__5728__auto___732532 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_732484) {
          var state_val_732485 = state_732484[1];
          if(state_val_732485 === 1) {
            var state_732484__$1 = state_732484;
            var statearr_732486_732533 = state_732484__$1;
            statearr_732486_732533[2] = null;
            statearr_732486_732533[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_732485 === 2) {
              var state_732484__$1 = state_732484;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_732484__$1, 4, ch)
            }else {
              if(state_val_732485 === 3) {
                var inst_732482 = state_732484[2];
                var state_732484__$1 = state_732484;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_732484__$1, inst_732482)
              }else {
                if(state_val_732485 === 4) {
                  var inst_732414 = state_732484[5];
                  var inst_732414__$1 = state_732484[2];
                  var inst_732415 = inst_732414__$1 == null;
                  var state_732484__$1 = function() {
                    var statearr_732487 = state_732484;
                    statearr_732487[5] = inst_732414__$1;
                    return statearr_732487
                  }();
                  if(cljs.core.truth_(inst_732415)) {
                    var statearr_732488_732534 = state_732484__$1;
                    statearr_732488_732534[1] = 5
                  }else {
                    var statearr_732489_732535 = state_732484__$1;
                    statearr_732489_732535[1] = 6
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_732485 === 5) {
                    var inst_732421 = cljs.core.deref.call(null, mults);
                    var inst_732422 = cljs.core.vals.call(null, inst_732421);
                    var inst_732423 = cljs.core.seq.call(null, inst_732422);
                    var inst_732424 = inst_732423;
                    var inst_732425 = null;
                    var inst_732426 = 0;
                    var inst_732427 = 0;
                    var state_732484__$1 = function() {
                      var statearr_732490 = state_732484;
                      statearr_732490[6] = inst_732427;
                      statearr_732490[7] = inst_732426;
                      statearr_732490[8] = inst_732425;
                      statearr_732490[9] = inst_732424;
                      return statearr_732490
                    }();
                    var statearr_732491_732536 = state_732484__$1;
                    statearr_732491_732536[2] = null;
                    statearr_732491_732536[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_732485 === 6) {
                      var inst_732464 = state_732484[10];
                      var inst_732462 = state_732484[11];
                      var inst_732414 = state_732484[5];
                      var inst_732462__$1 = topic_fn.call(null, inst_732414);
                      var inst_732463 = cljs.core.deref.call(null, mults);
                      var inst_732464__$1 = cljs.core.get.call(null, inst_732463, inst_732462__$1);
                      var state_732484__$1 = function() {
                        var statearr_732492 = state_732484;
                        statearr_732492[10] = inst_732464__$1;
                        statearr_732492[11] = inst_732462__$1;
                        return statearr_732492
                      }();
                      if(cljs.core.truth_(inst_732464__$1)) {
                        var statearr_732493_732537 = state_732484__$1;
                        statearr_732493_732537[1] = 19
                      }else {
                        var statearr_732494_732538 = state_732484__$1;
                        statearr_732494_732538[1] = 20
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_732485 === 7) {
                        var inst_732480 = state_732484[2];
                        var state_732484__$1 = state_732484;
                        var statearr_732495_732539 = state_732484__$1;
                        statearr_732495_732539[2] = inst_732480;
                        statearr_732495_732539[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_732485 === 8) {
                          var inst_732427 = state_732484[6];
                          var inst_732426 = state_732484[7];
                          var inst_732429 = inst_732427 < inst_732426;
                          var inst_732430 = inst_732429;
                          var state_732484__$1 = state_732484;
                          if(cljs.core.truth_(inst_732430)) {
                            var statearr_732499_732540 = state_732484__$1;
                            statearr_732499_732540[1] = 10
                          }else {
                            var statearr_732500_732541 = state_732484__$1;
                            statearr_732500_732541[1] = 11
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_732485 === 9) {
                            var inst_732460 = state_732484[2];
                            var state_732484__$1 = state_732484;
                            var statearr_732501_732542 = state_732484__$1;
                            statearr_732501_732542[2] = inst_732460;
                            statearr_732501_732542[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_732485 === 10) {
                              var inst_732427 = state_732484[6];
                              var inst_732426 = state_732484[7];
                              var inst_732425 = state_732484[8];
                              var inst_732424 = state_732484[9];
                              var inst_732432 = cljs.core._nth.call(null, inst_732425, inst_732427);
                              var inst_732433 = cljs.core.async.muxch_STAR_.call(null, inst_732432);
                              var inst_732434 = cljs.core.async.close_BANG_.call(null, inst_732433);
                              var inst_732435 = inst_732427 + 1;
                              var tmp732496 = inst_732426;
                              var tmp732497 = inst_732425;
                              var tmp732498 = inst_732424;
                              var inst_732424__$1 = tmp732498;
                              var inst_732425__$1 = tmp732497;
                              var inst_732426__$1 = tmp732496;
                              var inst_732427__$1 = inst_732435;
                              var state_732484__$1 = function() {
                                var statearr_732502 = state_732484;
                                statearr_732502[6] = inst_732427__$1;
                                statearr_732502[12] = inst_732434;
                                statearr_732502[7] = inst_732426__$1;
                                statearr_732502[8] = inst_732425__$1;
                                statearr_732502[9] = inst_732424__$1;
                                return statearr_732502
                              }();
                              var statearr_732503_732543 = state_732484__$1;
                              statearr_732503_732543[2] = null;
                              statearr_732503_732543[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_732485 === 11) {
                                var inst_732424 = state_732484[9];
                                var inst_732438 = state_732484[13];
                                var inst_732438__$1 = cljs.core.seq.call(null, inst_732424);
                                var state_732484__$1 = function() {
                                  var statearr_732504 = state_732484;
                                  statearr_732504[13] = inst_732438__$1;
                                  return statearr_732504
                                }();
                                if(inst_732438__$1) {
                                  var statearr_732505_732544 = state_732484__$1;
                                  statearr_732505_732544[1] = 13
                                }else {
                                  var statearr_732506_732545 = state_732484__$1;
                                  statearr_732506_732545[1] = 14
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                if(state_val_732485 === 12) {
                                  var inst_732458 = state_732484[2];
                                  var state_732484__$1 = state_732484;
                                  var statearr_732507_732546 = state_732484__$1;
                                  statearr_732507_732546[2] = inst_732458;
                                  statearr_732507_732546[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_732485 === 13) {
                                    var inst_732438 = state_732484[13];
                                    var inst_732440 = cljs.core.chunked_seq_QMARK_.call(null, inst_732438);
                                    var state_732484__$1 = state_732484;
                                    if(inst_732440) {
                                      var statearr_732508_732547 = state_732484__$1;
                                      statearr_732508_732547[1] = 16
                                    }else {
                                      var statearr_732509_732548 = state_732484__$1;
                                      statearr_732509_732548[1] = 17
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_732485 === 14) {
                                      var state_732484__$1 = state_732484;
                                      var statearr_732510_732549 = state_732484__$1;
                                      statearr_732510_732549[2] = null;
                                      statearr_732510_732549[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                    }else {
                                      if(state_val_732485 === 15) {
                                        var inst_732456 = state_732484[2];
                                        var state_732484__$1 = state_732484;
                                        var statearr_732511_732550 = state_732484__$1;
                                        statearr_732511_732550[2] = inst_732456;
                                        statearr_732511_732550[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_732485 === 16) {
                                          var inst_732438 = state_732484[13];
                                          var inst_732442 = cljs.core.chunk_first.call(null, inst_732438);
                                          var inst_732443 = cljs.core.chunk_rest.call(null, inst_732438);
                                          var inst_732444 = cljs.core.count.call(null, inst_732442);
                                          var inst_732424 = inst_732443;
                                          var inst_732425 = inst_732442;
                                          var inst_732426 = inst_732444;
                                          var inst_732427 = 0;
                                          var state_732484__$1 = function() {
                                            var statearr_732512 = state_732484;
                                            statearr_732512[6] = inst_732427;
                                            statearr_732512[7] = inst_732426;
                                            statearr_732512[8] = inst_732425;
                                            statearr_732512[9] = inst_732424;
                                            return statearr_732512
                                          }();
                                          var statearr_732513_732551 = state_732484__$1;
                                          statearr_732513_732551[2] = null;
                                          statearr_732513_732551[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          if(state_val_732485 === 17) {
                                            var inst_732438 = state_732484[13];
                                            var inst_732447 = cljs.core.first.call(null, inst_732438);
                                            var inst_732448 = cljs.core.async.muxch_STAR_.call(null, inst_732447);
                                            var inst_732449 = cljs.core.async.close_BANG_.call(null, inst_732448);
                                            var inst_732450 = cljs.core.next.call(null, inst_732438);
                                            var inst_732424 = inst_732450;
                                            var inst_732425 = null;
                                            var inst_732426 = 0;
                                            var inst_732427 = 0;
                                            var state_732484__$1 = function() {
                                              var statearr_732514 = state_732484;
                                              statearr_732514[6] = inst_732427;
                                              statearr_732514[7] = inst_732426;
                                              statearr_732514[8] = inst_732425;
                                              statearr_732514[9] = inst_732424;
                                              statearr_732514[14] = inst_732449;
                                              return statearr_732514
                                            }();
                                            var statearr_732515_732552 = state_732484__$1;
                                            statearr_732515_732552[2] = null;
                                            statearr_732515_732552[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                          }else {
                                            if(state_val_732485 === 18) {
                                              var inst_732453 = state_732484[2];
                                              var state_732484__$1 = state_732484;
                                              var statearr_732516_732553 = state_732484__$1;
                                              statearr_732516_732553[2] = inst_732453;
                                              statearr_732516_732553[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                            }else {
                                              if(state_val_732485 === 19) {
                                                var state_732484__$1 = state_732484;
                                                var statearr_732517_732554 = state_732484__$1;
                                                statearr_732517_732554[2] = null;
                                                statearr_732517_732554[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                              }else {
                                                if(state_val_732485 === 20) {
                                                  var state_732484__$1 = state_732484;
                                                  var statearr_732518_732555 = state_732484__$1;
                                                  statearr_732518_732555[2] = null;
                                                  statearr_732518_732555[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                }else {
                                                  if(state_val_732485 === 21) {
                                                    var inst_732477 = state_732484[2];
                                                    var state_732484__$1 = function() {
                                                      var statearr_732519 = state_732484;
                                                      statearr_732519[15] = inst_732477;
                                                      return statearr_732519
                                                    }();
                                                    var statearr_732520_732556 = state_732484__$1;
                                                    statearr_732520_732556[2] = null;
                                                    statearr_732520_732556[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                  }else {
                                                    if(state_val_732485 === 22) {
                                                      var inst_732474 = state_732484[2];
                                                      var state_732484__$1 = state_732484;
                                                      var statearr_732521_732557 = state_732484__$1;
                                                      statearr_732521_732557[2] = inst_732474;
                                                      statearr_732521_732557[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                    }else {
                                                      if(state_val_732485 === 23) {
                                                        var inst_732462 = state_732484[11];
                                                        var inst_732466 = state_732484[2];
                                                        var inst_732467 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_732462);
                                                        var state_732484__$1 = function() {
                                                          var statearr_732522 = state_732484;
                                                          statearr_732522[16] = inst_732466;
                                                          return statearr_732522
                                                        }();
                                                        var statearr_732523_732558 = state_732484__$1;
                                                        statearr_732523_732558[2] = inst_732467;
                                                        statearr_732523_732558[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                      }else {
                                                        if(state_val_732485 === 24) {
                                                          try {
                                                            var inst_732464 = state_732484[10];
                                                            var inst_732414 = state_732484[5];
                                                            var inst_732470 = cljs.core.async.muxch_STAR_.call(null, inst_732464);
                                                            var state_732484__$1 = state_732484;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_732484__$1, 25, inst_732470, inst_732414)
                                                          }catch(e732524) {
                                                            if(e732524 instanceof Object) {
                                                              var ex__5672__auto__ = e732524;
                                                              var statearr_732525_732559 = state_732484;
                                                              statearr_732525_732559[1] = 23;
                                                              statearr_732525_732559[2] = ex__5672__auto__;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }else {
                                                              if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                throw e732524;
                                                              }else {
                                                                return null
                                                              }
                                                            }
                                                          }
                                                        }else {
                                                          if(state_val_732485 === 25) {
                                                            try {
                                                              var inst_732472 = state_732484[2];
                                                              var state_732484__$1 = state_732484;
                                                              var statearr_732528_732560 = state_732484__$1;
                                                              statearr_732528_732560[2] = inst_732472;
                                                              statearr_732528_732560[1] = 22;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                            }catch(e732526) {
                                                              if(e732526 instanceof Object) {
                                                                var ex__5672__auto__ = e732526;
                                                                var statearr_732527_732561 = state_732484;
                                                                statearr_732527_732561[1] = 23;
                                                                statearr_732527_732561[2] = ex__5672__auto__;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                                              }else {
                                                                if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                  throw e732526;
                                                                }else {
                                                                  return null
                                                                }
                                                              }
                                                            }
                                                          }else {
                                                            return null
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_732530 = new Array(17);
              statearr_732530[0] = state_machine__5679__auto__;
              statearr_732530[1] = 1;
              return statearr_732530
            };
            var state_machine__5679__auto____1 = function(state_732484) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_732484);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_732484) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_732484)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_732531 = f__5729__auto__.call(null);
        statearr_732531[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___732532;
        return statearr_732531
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return p
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true)
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_)
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch)
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p)
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic)
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null)
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if(cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt))
            }else {
              return null
            }
          }
        }(chs__$1, out, cnt, rets, dchan, dctr)
      }
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5728__auto___732692 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_732664) {
          var state_val_732665 = state_732664[1];
          if(state_val_732665 === 1) {
            var state_732664__$1 = state_732664;
            var statearr_732666_732693 = state_732664__$1;
            statearr_732666_732693[2] = null;
            statearr_732666_732693[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_732665 === 2) {
              var inst_732628 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_732629 = 0;
              var state_732664__$1 = function() {
                var statearr_732667 = state_732664;
                statearr_732667[5] = inst_732628;
                statearr_732667[6] = inst_732629;
                return statearr_732667
              }();
              var statearr_732668_732694 = state_732664__$1;
              statearr_732668_732694[2] = null;
              statearr_732668_732694[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_732665 === 3) {
                var inst_732662 = state_732664[2];
                var state_732664__$1 = state_732664;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_732664__$1, inst_732662)
              }else {
                if(state_val_732665 === 4) {
                  var inst_732629 = state_732664[6];
                  var inst_732631 = inst_732629 < cnt;
                  var state_732664__$1 = state_732664;
                  if(cljs.core.truth_(inst_732631)) {
                    var statearr_732669_732695 = state_732664__$1;
                    statearr_732669_732695[1] = 6
                  }else {
                    var statearr_732670_732696 = state_732664__$1;
                    statearr_732670_732696[1] = 7
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                }else {
                  if(state_val_732665 === 5) {
                    var inst_732648 = state_732664[2];
                    var state_732664__$1 = function() {
                      var statearr_732671 = state_732664;
                      statearr_732671[7] = inst_732648;
                      return statearr_732671
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_732664__$1, 12, dchan)
                  }else {
                    if(state_val_732665 === 6) {
                      var state_732664__$1 = state_732664;
                      var statearr_732672_732697 = state_732664__$1;
                      statearr_732672_732697[2] = null;
                      statearr_732672_732697[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_732665 === 7) {
                        var state_732664__$1 = state_732664;
                        var statearr_732673_732698 = state_732664__$1;
                        statearr_732673_732698[2] = null;
                        statearr_732673_732698[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_732665 === 8) {
                          var inst_732646 = state_732664[2];
                          var state_732664__$1 = state_732664;
                          var statearr_732674_732699 = state_732664__$1;
                          statearr_732674_732699[2] = inst_732646;
                          statearr_732674_732699[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_732665 === 9) {
                            var inst_732629 = state_732664[6];
                            var inst_732641 = state_732664[2];
                            var inst_732642 = inst_732629 + 1;
                            var inst_732629__$1 = inst_732642;
                            var state_732664__$1 = function() {
                              var statearr_732675 = state_732664;
                              statearr_732675[8] = inst_732641;
                              statearr_732675[6] = inst_732629__$1;
                              return statearr_732675
                            }();
                            var statearr_732676_732700 = state_732664__$1;
                            statearr_732676_732700[2] = null;
                            statearr_732676_732700[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                          }else {
                            if(state_val_732665 === 10) {
                              var inst_732633 = state_732664[2];
                              var inst_732634 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_732664__$1 = function() {
                                var statearr_732677 = state_732664;
                                statearr_732677[9] = inst_732633;
                                return statearr_732677
                              }();
                              var statearr_732678_732701 = state_732664__$1;
                              statearr_732678_732701[2] = inst_732634;
                              statearr_732678_732701[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_732665 === 11) {
                                try {
                                  var inst_732629 = state_732664[6];
                                  var inst_732637 = chs__$1.call(null, inst_732629);
                                  var inst_732638 = done.call(null, inst_732629);
                                  var inst_732639 = cljs.core.async.take_BANG_.call(null, inst_732637, inst_732638);
                                  var state_732664__$1 = state_732664;
                                  var statearr_732681_732702 = state_732664__$1;
                                  statearr_732681_732702[2] = inst_732639;
                                  statearr_732681_732702[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }catch(e732679) {
                                  if(e732679 instanceof Object) {
                                    var ex__5672__auto__ = e732679;
                                    var statearr_732680_732703 = state_732664;
                                    statearr_732680_732703[1] = 10;
                                    statearr_732680_732703[2] = ex__5672__auto__;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                      throw e732679;
                                    }else {
                                      return null
                                    }
                                  }
                                }
                              }else {
                                if(state_val_732665 === 12) {
                                  var inst_732650 = state_732664[10];
                                  var inst_732650__$1 = state_732664[2];
                                  var inst_732651 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_732650__$1);
                                  var state_732664__$1 = function() {
                                    var statearr_732682 = state_732664;
                                    statearr_732682[10] = inst_732650__$1;
                                    return statearr_732682
                                  }();
                                  if(cljs.core.truth_(inst_732651)) {
                                    var statearr_732683_732704 = state_732664__$1;
                                    statearr_732683_732704[1] = 13
                                  }else {
                                    var statearr_732684_732705 = state_732664__$1;
                                    statearr_732684_732705[1] = 14
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                }else {
                                  if(state_val_732665 === 13) {
                                    var inst_732653 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_732664__$1 = state_732664;
                                    var statearr_732685_732706 = state_732664__$1;
                                    statearr_732685_732706[2] = inst_732653;
                                    statearr_732685_732706[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                  }else {
                                    if(state_val_732665 === 14) {
                                      var inst_732650 = state_732664[10];
                                      var inst_732655 = cljs.core.apply.call(null, f, inst_732650);
                                      var state_732664__$1 = state_732664;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_732664__$1, 16, out, inst_732655)
                                    }else {
                                      if(state_val_732665 === 15) {
                                        var inst_732660 = state_732664[2];
                                        var state_732664__$1 = state_732664;
                                        var statearr_732686_732707 = state_732664__$1;
                                        statearr_732686_732707[2] = inst_732660;
                                        statearr_732686_732707[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                      }else {
                                        if(state_val_732665 === 16) {
                                          var inst_732657 = state_732664[2];
                                          var state_732664__$1 = function() {
                                            var statearr_732687 = state_732664;
                                            statearr_732687[11] = inst_732657;
                                            return statearr_732687
                                          }();
                                          var statearr_732688_732708 = state_732664__$1;
                                          statearr_732688_732708[2] = null;
                                          statearr_732688_732708[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                                        }else {
                                          return null
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_732690 = new Array(12);
              statearr_732690[0] = state_machine__5679__auto__;
              statearr_732690[1] = 1;
              return statearr_732690
            };
            var state_machine__5679__auto____1 = function(state_732664) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_732664);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_732664) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_732664)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_732691 = f__5729__auto__.call(null);
        statearr_732691[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___732692;
        return statearr_732691
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return out
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null)
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5728__auto___732808 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_732788) {
          var state_val_732789 = state_732788[1];
          if(state_val_732789 === 1) {
            var inst_732759 = cljs.core.vec.call(null, chs);
            var inst_732760 = inst_732759;
            var state_732788__$1 = function() {
              var statearr_732790 = state_732788;
              statearr_732790[5] = inst_732760;
              return statearr_732790
            }();
            var statearr_732791_732809 = state_732788__$1;
            statearr_732791_732809[2] = null;
            statearr_732791_732809[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
          }else {
            if(state_val_732789 === 2) {
              var inst_732760 = state_732788[5];
              var inst_732762 = cljs.core.count.call(null, inst_732760);
              var inst_732763 = inst_732762 > 0;
              var state_732788__$1 = state_732788;
              if(cljs.core.truth_(inst_732763)) {
                var statearr_732792_732810 = state_732788__$1;
                statearr_732792_732810[1] = 4
              }else {
                var statearr_732793_732811 = state_732788__$1;
                statearr_732793_732811[1] = 5
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
            }else {
              if(state_val_732789 === 3) {
                var inst_732786 = state_732788[2];
                var state_732788__$1 = state_732788;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_732788__$1, inst_732786)
              }else {
                if(state_val_732789 === 4) {
                  var inst_732760 = state_732788[5];
                  var state_732788__$1 = state_732788;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_732788__$1, 7, inst_732760)
                }else {
                  if(state_val_732789 === 5) {
                    var inst_732782 = cljs.core.async.close_BANG_.call(null, out);
                    var state_732788__$1 = state_732788;
                    var statearr_732794_732812 = state_732788__$1;
                    statearr_732794_732812[2] = inst_732782;
                    statearr_732794_732812[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                  }else {
                    if(state_val_732789 === 6) {
                      var inst_732784 = state_732788[2];
                      var state_732788__$1 = state_732788;
                      var statearr_732795_732813 = state_732788__$1;
                      statearr_732795_732813[2] = inst_732784;
                      statearr_732795_732813[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                    }else {
                      if(state_val_732789 === 7) {
                        var inst_732768 = state_732788[6];
                        var inst_732767 = state_732788[7];
                        var inst_732767__$1 = state_732788[2];
                        var inst_732768__$1 = cljs.core.nth.call(null, inst_732767__$1, 0, null);
                        var inst_732769 = cljs.core.nth.call(null, inst_732767__$1, 1, null);
                        var inst_732770 = inst_732768__$1 == null;
                        var state_732788__$1 = function() {
                          var statearr_732796 = state_732788;
                          statearr_732796[6] = inst_732768__$1;
                          statearr_732796[8] = inst_732769;
                          statearr_732796[7] = inst_732767__$1;
                          return statearr_732796
                        }();
                        if(cljs.core.truth_(inst_732770)) {
                          var statearr_732797_732814 = state_732788__$1;
                          statearr_732797_732814[1] = 8
                        }else {
                          var statearr_732798_732815 = state_732788__$1;
                          statearr_732798_732815[1] = 9
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                      }else {
                        if(state_val_732789 === 8) {
                          var inst_732760 = state_732788[5];
                          var inst_732768 = state_732788[6];
                          var inst_732769 = state_732788[8];
                          var inst_732767 = state_732788[7];
                          var inst_732772 = function() {
                            var c = inst_732769;
                            var v = inst_732768;
                            var vec__732765 = inst_732767;
                            var cs = inst_732760;
                            return function(c, v, vec__732765, cs, inst_732760, inst_732768, inst_732769, inst_732767, state_val_732789) {
                              return function(p1__732709_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__732709_SHARP_)
                              }
                            }(c, v, vec__732765, cs, inst_732760, inst_732768, inst_732769, inst_732767, state_val_732789)
                          }();
                          var inst_732773 = cljs.core.filterv.call(null, inst_732772, inst_732760);
                          var inst_732760__$1 = inst_732773;
                          var state_732788__$1 = function() {
                            var statearr_732799 = state_732788;
                            statearr_732799[5] = inst_732760__$1;
                            return statearr_732799
                          }();
                          var statearr_732800_732816 = state_732788__$1;
                          statearr_732800_732816[2] = null;
                          statearr_732800_732816[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                        }else {
                          if(state_val_732789 === 9) {
                            var inst_732768 = state_732788[6];
                            var state_732788__$1 = state_732788;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_732788__$1, 11, out, inst_732768)
                          }else {
                            if(state_val_732789 === 10) {
                              var inst_732780 = state_732788[2];
                              var state_732788__$1 = state_732788;
                              var statearr_732802_732817 = state_732788__$1;
                              statearr_732802_732817[2] = inst_732780;
                              statearr_732802_732817[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                            }else {
                              if(state_val_732789 === 11) {
                                var inst_732760 = state_732788[5];
                                var inst_732777 = state_732788[2];
                                var tmp732801 = inst_732760;
                                var inst_732760__$1 = tmp732801;
                                var state_732788__$1 = function() {
                                  var statearr_732803 = state_732788;
                                  statearr_732803[5] = inst_732760__$1;
                                  statearr_732803[9] = inst_732777;
                                  return statearr_732803
                                }();
                                var statearr_732804_732818 = state_732788__$1;
                                statearr_732804_732818[2] = null;
                                statearr_732804_732818[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407)
                              }else {
                                return null
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_732806 = new Array(10);
              statearr_732806[0] = state_machine__5679__auto__;
              statearr_732806[1] = 1;
              return statearr_732806
            };
            var state_machine__5679__auto____1 = function(state_732788) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_732788);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_732788) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_732788)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_732807 = f__5729__auto__.call(null);
        statearr_732807[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto___732808;
        return statearr_732807
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return out
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch)
};
goog.provide("chaperone.user");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.user.User");
goog.require("cljs.core.async");
chaperone.user.save_user = function save_user(user) {
  throw Error("save-user Not implemented");
};
goog.provide("chaperone.ng.admin.user");
goog.require("cljs.core");
goog.require("purnam.cljs");
goog.require("cljs.core.async");
goog.require("purnam.cljs");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("chaperone.user");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.core");
chaperone.ng.admin.user.chaperone_app_AdminUserCtrl = ["$scope", "$location", function($scope, $location) {
  purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["init"], null), function() {
    return purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["title"], null), "Add")
  });
  purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["load-user"], null), function() {
    var user = chaperone.crossover.user.new_user.call(null, "", "", "", "");
    return purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user))
  });
  return purnam.cljs.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["save-user"], null), function() {
    var user = chaperone.crossover.user.map__GT_User.call(null, cljs.core.js__GT_clj.call(null, purnam.cljs.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null))));
    var chan = chaperone.user.save_user.call(null, user);
    var c__5728__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5729__auto__ = function() {
        var switch__5678__auto__ = function(state_729486) {
          var state_val_729487 = state_729486[1];
          if(state_val_729487 === 2) {
            var inst_729471 = state_729486[2];
            var inst_729472 = purnam.cljs.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
            var inst_729473 = inst_729472["path"];
            var inst_729474 = inst_729473.call(inst_729472, "/admin/users/list");
            var inst_729475 = ["alert"];
            var inst_729476 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_729475, null);
            var inst_729481 = {};
            var inst_729482 = inst_729481["message"] = "User has been saved successfully";
            var inst_729483 = inst_729481["category"] = "success";
            var inst_729484 = purnam.cljs.aset_in.call(null, $scope, inst_729476, inst_729481);
            var state_729486__$1 = function() {
              var statearr_729488 = state_729486;
              statearr_729488[5] = inst_729483;
              statearr_729488[6] = inst_729482;
              statearr_729488[7] = inst_729474;
              statearr_729488[8] = inst_729471;
              return statearr_729488
            }();
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_729486__$1, inst_729484)
          }else {
            if(state_val_729487 === 1) {
              var state_729486__$1 = state_729486;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_729486__$1, 2, chan)
            }else {
              return null
            }
          }
        };
        return function(switch__5678__auto__) {
          return function() {
            var state_machine__5679__auto__ = null;
            var state_machine__5679__auto____0 = function() {
              var statearr_729490 = new Array(9);
              statearr_729490[0] = state_machine__5679__auto__;
              statearr_729490[1] = 1;
              return statearr_729490
            };
            var state_machine__5679__auto____1 = function(state_729486) {
              while(true) {
                var result__5680__auto__ = switch__5678__auto__.call(null, state_729486);
                if(cljs.core.keyword_identical_QMARK_.call(null, result__5680__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue
                }else {
                  return result__5680__auto__
                }
                break
              }
            };
            state_machine__5679__auto__ = function(state_729486) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5679__auto____0.call(this);
                case 1:
                  return state_machine__5679__auto____1.call(this, state_729486)
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5679__auto____0;
            state_machine__5679__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5679__auto____1;
            return state_machine__5679__auto__
          }()
        }(switch__5678__auto__)
      }();
      var state__5730__auto__ = function() {
        var statearr_729491 = f__5729__auto__.call(null);
        statearr_729491[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5728__auto__;
        return statearr_729491
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5730__auto__)
    });
    return c__5728__auto__
  })
}];
angular.module("chaperone.app").controller("AdminUserCtrl", chaperone.ng.admin.user.chaperone_app_AdminUserCtrl);
goog.provide("chaperone.ng.admin.user_test.cljs");
goog.require("cljs.core");
goog.require("purnam.cljs");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("purnam.cljs");
goog.require("chaperone.user");
goog.require("chaperone.user");
goog.require("chaperone.ng.admin.user");
goog.require("chaperone.ng.admin.user");
beforeEach(function() {
  var obj_SHARP_ = purnam.cljs.aget_in.call(null, this, cljs.core.PersistentVector.EMPTY);
  var fn_SHARP_ = obj_SHARP_["addMatchers"];
  return fn_SHARP_.call(obj_SHARP_, function() {
    var G__729492 = function() {
      var obj729495 = {};
      return obj729495
    }();
    G__729492["toSatisfy"] = function(expected, tactual, texpected) {
      var actual = purnam.cljs.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["actual"], null));
      var actualText = [cljs.core.str(actual)].join("");
      var actualText__$1 = cljs.core._EQ_.call(null, actualText, "[object Object]") ? function() {
        var ks = function() {
          var obj_SHARP___$1 = purnam.cljs.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
          var fn_SHARP___$1 = obj_SHARP___$1["getKeys"];
          return fn_SHARP___$1.call(obj_SHARP___$1, actual)
        }();
        var vs = function() {
          var obj_SHARP___$1 = purnam.cljs.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
          var fn_SHARP___$1 = obj_SHARP___$1["getValues"];
          return fn_SHARP___$1.call(obj_SHARP___$1, actual)
        }();
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(ks, vs, actual, actualText) {
          return function(x, y) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null)
          }
        }(ks, vs, actual, actualText), ks, vs))
      }() : actualText;
      var notText = cljs.core.truth_(purnam.cljs.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["isNot"], null))) ? "Not " : "";
      this["message"] = function() {
        return[cljs.core.str("Expression: "), cljs.core.str(tactual), cljs.core.str("\n  Expected: "), cljs.core.str(notText), cljs.core.str(texpected), cljs.core.str("\n  Actual: "), cljs.core.str(actualText__$1)].join("")
      };
      if(cljs.core._EQ_.call(null, function() {
        var obj_SHARP___$1 = purnam.cljs.aget_in.call(null, goog, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP___$1 = obj_SHARP___$1["typeOf"];
        return fn_SHARP___$1.call(obj_SHARP___$1, expected)
      }(), "array")) {
        return purnam.cljs.js_equals.call(null, expected, actual)
      }else {
        if(cljs.core.fn_QMARK_.call(null, expected)) {
          return expected.call(null, actual)
        }else {
          if(new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var or__3285__auto__ = cljs.core._EQ_.call(null, expected, actual);
            if(or__3285__auto__) {
              return or__3285__auto__
            }else {
              return purnam.cljs.js_equals.call(null, expected, actual)
            }
          }else {
            return null
          }
        }
      }
    };
    return G__729492
  }())
});
var spec_729503 = function() {
  var obj729497 = {};
  return obj729497
}();
describe("Testing AdminUserCtrl", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$controller", "$location", "$rootScope", function($controller, $location, $rootScope) {
    spec_729503["$scope"] = $controller.call(null, "AdminUserCtrl", function() {
      var G__729498 = function() {
        var obj729501 = {};
        return obj729501
      }();
      G__729498["$scope"] = function() {
        var obj_SHARP_ = purnam.cljs.aget_in.call(null, $rootScope, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP_ = obj_SHARP_["$new"];
        return fn_SHARP_.call(obj_SHARP_)
      }();
      G__729498["$location"] = $location;
      return G__729498
    }());
    return spec_729503["$location"] = $location
  }]));
  it("Should have a title in the scope", function() {
    var obj_SHARP__729504 = purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__729505 = obj_SHARP__729504["init"];
    fn_SHARP__729505.call(obj_SHARP__729504);
    return expect(purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "title"], null))).toSatisfy("Add", '(purnam.cljs/aget-in spec ["$scope" "title"])', "Add")
  });
  it("Should create a new user into scope, when a non existent usersid is used", function() {
    var obj_SHARP__729506 = purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__729507 = obj_SHARP__729506["load-user"];
    fn_SHARP__729507.call(obj_SHARP__729506);
    expect(purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null))).toSatisfy("", '(purnam.cljs/aget-in spec ["$scope" "user" "firstname"])', "");
    expect(purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null))).toSatisfy("", '(purnam.cljs/aget-in spec ["$scope" "user" "lastname"])', "");
    expect(purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null))).toSatisfy("", '(purnam.cljs/aget-in spec ["$scope" "user" "email"])', "");
    return expect(purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null))).toSatisfy("", '(purnam.cljs/aget-in spec ["$scope" "user" "password"])', "")
  });
  it("Should show a message and change the location when a user is saved", function() {
    var obj_SHARP__729508 = purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__729509 = obj_SHARP__729508["load-user"];
    fn_SHARP__729509.call(obj_SHARP__729508);
    purnam.cljs.aset_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null), "John");
    purnam.cljs.aset_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null), "Doe");
    purnam.cljs.aset_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null), "email@email.com");
    purnam.cljs.aset_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null), "password");
    var ws_chan = cljs.core.async.chan.call(null);
    var save_user729502 = chaperone.user.save_user;
    try {
      chaperone.user.save_user = function(user) {
        return ws_chan
      };
      var obj_SHARP__729510 = purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__729511 = obj_SHARP__729510["save-user"];
      fn_SHARP__729511.call(obj_SHARP__729510);
      runs(function() {
        return cljs.core.async.put_BANG_.call(null, ws_chan, cljs.core.PersistentArrayMap.EMPTY)
      });
      waitsFor(function() {
        return cljs.core._EQ_.call(null, function() {
          var obj_SHARP_ = purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$location"], null));
          var fn_SHARP_ = obj_SHARP_["path"];
          return fn_SHARP_.call(obj_SHARP_)
        }(), "/admin/users/list")
      }, "Location never gets set", 1E3);
      return runs(function() {
        return expect(purnam.cljs.aget_in.call(null, spec_729503, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "alert", "category"], null))).toSatisfy("success", '(purnam.cljs/aget-in spec ["$scope" "alert" "category"])', "success")
      })
    }finally {
      chaperone.user.save_user = save_user729502
    }
  });
  return null
});

//# sourceMappingURL=main.js.map