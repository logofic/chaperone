var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2138";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__182480__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__182480 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__182480__delegate.call(this, args);
    };
    G__182480.cljs$lang$maxFixedArity = 0;
    G__182480.cljs$lang$applyTo = function(arglist__182481) {
      var args = cljs.core.seq(arglist__182481);
      return G__182480__delegate(args);
    };
    G__182480.cljs$core$IFn$_invoke$arity$variadic = G__182480__delegate;
    return G__182480;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3392__auto__ = ty;
    if (cljs.core.truth_(and__3392__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3392__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4246__auto___182482 = len;
  var i_182483 = 0;
  while (true) {
    if (i_182483 < n__4246__auto___182482) {
      new_arr[i_182483] = arr[i_182483];
      var G__182484 = i_182483 + 1;
      i_182483 = G__182484;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__182485__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__182485 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182485__delegate.call(this, array, i, idxs);
    };
    G__182485.cljs$lang$maxFixedArity = 2;
    G__182485.cljs$lang$applyTo = function(arglist__182486) {
      var array = cljs.core.first(arglist__182486);
      arglist__182486 = cljs.core.next(arglist__182486);
      var i = cljs.core.first(arglist__182486);
      var idxs = cljs.core.rest(arglist__182486);
      return G__182485__delegate(array, i, idxs);
    };
    G__182485.cljs$core$IFn$_invoke$arity$variadic = G__182485__delegate;
    return G__182485;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__182487__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__182487 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__182487__delegate.call(this, array, idx, idx2, idxv);
    };
    G__182487.cljs$lang$maxFixedArity = 3;
    G__182487.cljs$lang$applyTo = function(arglist__182488) {
      var array = cljs.core.first(arglist__182488);
      arglist__182488 = cljs.core.next(arglist__182488);
      var idx = cljs.core.first(arglist__182488);
      arglist__182488 = cljs.core.next(arglist__182488);
      var idx2 = cljs.core.first(arglist__182488);
      var idxv = cljs.core.rest(arglist__182488);
      return G__182487__delegate(array, idx, idx2, idxv);
    };
    G__182487.cljs$core$IFn$_invoke$arity$variadic = G__182487__delegate;
    return G__182487;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj182490 = {};
  return obj182490;
}();
cljs.core.IFn = function() {
  var obj182492 = {};
  return obj182492;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj182494 = {};
  return obj182494;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3392__auto__ = value;
    if (and__3392__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4025__auto__ = value == null ? null : value;
    return function() {
      var or__3404__auto__ = cljs.core._clone[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._clone["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj182496 = {};
  return obj182496;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._count[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._count["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj182498 = {};
  return obj182498;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._empty[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._empty["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj182500 = {};
  return obj182500;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._conj[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._conj["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj182502 = {};
  return obj182502;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3392__auto__ = coll;
      if (and__3392__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4025__auto__ = coll == null ? null : coll;
      return function() {
        var or__3404__auto__ = cljs.core._nth[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._nth["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3392__auto__ = coll;
      if (and__3392__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4025__auto__ = coll == null ? null : coll;
      return function() {
        var or__3404__auto__ = cljs.core._nth[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._nth["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj182504 = {};
  return obj182504;
}();
cljs.core.ISeq = function() {
  var obj182506 = {};
  return obj182506;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._first[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._first["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._rest[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._rest["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj182508 = {};
  return obj182508;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._next[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._next["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj182510 = {};
  return obj182510;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3392__auto__ = o;
      if (and__3392__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4025__auto__ = o == null ? null : o;
      return function() {
        var or__3404__auto__ = cljs.core._lookup[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._lookup["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3392__auto__ = o;
      if (and__3392__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4025__auto__ = o == null ? null : o;
      return function() {
        var or__3404__auto__ = cljs.core._lookup[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._lookup["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj182512 = {};
  return obj182512;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._assoc[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._assoc["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj182514 = {};
  return obj182514;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._dissoc[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._dissoc["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj182516 = {};
  return obj182516;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._key[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._key["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._val[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._val["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj182518 = {};
  return obj182518;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._disjoin[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._disjoin["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj182520 = {};
  return obj182520;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._peek[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._peek["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._pop[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._pop["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj182522 = {};
  return obj182522;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._assoc_n[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj182524 = {};
  return obj182524;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._deref[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._deref["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj182526 = {};
  return obj182526;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj182528 = {};
  return obj182528;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._meta[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._meta["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj182530 = {};
  return obj182530;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._with_meta[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._with_meta["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj182532 = {};
  return obj182532;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3392__auto__ = coll;
      if (and__3392__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4025__auto__ = coll == null ? null : coll;
      return function() {
        var or__3404__auto__ = cljs.core._reduce[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._reduce["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3392__auto__ = coll;
      if (and__3392__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4025__auto__ = coll == null ? null : coll;
      return function() {
        var or__3404__auto__ = cljs.core._reduce[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._reduce["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj182534 = {};
  return obj182534;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj182536 = {};
  return obj182536;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._equiv[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._equiv["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj182538 = {};
  return obj182538;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._hash[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._hash["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj182540 = {};
  return obj182540;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._seq[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._seq["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj182542 = {};
  return obj182542;
}();
cljs.core.IList = function() {
  var obj182544 = {};
  return obj182544;
}();
cljs.core.IRecord = function() {
  var obj182546 = {};
  return obj182546;
}();
cljs.core.IReversible = function() {
  var obj182548 = {};
  return obj182548;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._rseq[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._rseq["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj182550 = {};
  return obj182550;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._entry_key[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._entry_key["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._comparator[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._comparator["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj182552 = {};
  return obj182552;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3392__auto__ = writer;
    if (and__3392__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4025__auto__ = writer == null ? null : writer;
    return function() {
      var or__3404__auto__ = cljs.core._write[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._write["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3392__auto__ = writer;
    if (and__3392__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4025__auto__ = writer == null ? null : writer;
    return function() {
      var or__3404__auto__ = cljs.core._flush[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._flush["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj182554 = {};
  return obj182554;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._pr_writer[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj182556 = {};
  return obj182556;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3392__auto__ = d;
    if (and__3392__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4025__auto__ = d == null ? null : d;
    return function() {
      var or__3404__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj182558 = {};
  return obj182558;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3392__auto__ = this$;
    if (and__3392__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4025__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3404__auto__ = cljs.core._notify_watches[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3392__auto__ = this$;
    if (and__3392__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4025__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3404__auto__ = cljs.core._add_watch[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._add_watch["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3392__auto__ = this$;
    if (and__3392__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4025__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3404__auto__ = cljs.core._remove_watch[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj182560 = {};
  return obj182560;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._as_transient[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._as_transient["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj182562 = {};
  return obj182562;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj182564 = {};
  return obj182564;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj182566 = {};
  return obj182566;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj182568 = {};
  return obj182568;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj182570 = {};
  return obj182570;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj182572 = {};
  return obj182572;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._compare[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._compare["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj182574 = {};
  return obj182574;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._drop_first[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._drop_first["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj182576 = {};
  return obj182576;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._chunked_first[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj182578 = {};
  return obj182578;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._chunked_next[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj182580 = {};
  return obj182580;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._name[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._name["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._namespace[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._namespace["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3392__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3392__auto__) {
        return b.ns;
      } else {
        return and__3392__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3815__auto__ = self__._hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__182582 = null;
  var G__182582__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__182582__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__182582 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__182582__2.call(this, self__, coll);
      case 3:
        return G__182582__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__182582;
}();
cljs.core.Symbol.prototype.apply = function(self__, args182581) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args182581)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.cljs$core$ICloneable$ = true;
cljs.core.Symbol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, self__._meta);
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__182584 = coll;
      if (G__182584) {
        var bit__4041__auto__ = G__182584.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4041__auto__ || G__182584.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__182586 = coll;
      if (G__182586) {
        var bit__4041__auto__ = G__182586.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4041__auto__ || G__182586.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__182588 = coll;
      if (G__182588) {
        var bit__4041__auto__ = G__182588.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4041__auto__ || G__182588.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__182590 = coll;
      if (G__182590) {
        var bit__4041__auto__ = G__182590.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4041__auto__ || G__182590.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__182591__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__182592 = y;
            var G__182593 = cljs.core.first.call(null, more);
            var G__182594 = cljs.core.next.call(null, more);
            x = G__182592;
            y = G__182593;
            more = G__182594;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__182591 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182591__delegate.call(this, x, y, more);
    };
    G__182591.cljs$lang$maxFixedArity = 2;
    G__182591.cljs$lang$applyTo = function(arglist__182595) {
      var x = cljs.core.first(arglist__182595);
      arglist__182595 = cljs.core.next(arglist__182595);
      var y = cljs.core.first(arglist__182595);
      var more = cljs.core.rest(arglist__182595);
      return G__182591__delegate(x, y, more);
    };
    G__182591.cljs$core$IFn$_invoke$arity$variadic = G__182591__delegate;
    return G__182591;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__182596 = nval;
            var G__182597 = n + 1;
            val = G__182596;
            n = G__182597;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__182598 = nval;
          var G__182599 = n + 1;
          val__$1 = G__182598;
          n = G__182599;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__182600 = nval;
          var G__182601 = n + 1;
          val__$1 = G__182600;
          n = G__182601;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__182602 = nval;
            var G__182603 = n + 1;
            val = G__182602;
            n = G__182603;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__182604 = nval;
          var G__182605 = n + 1;
          val__$1 = G__182604;
          n = G__182605;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__182606 = nval;
          var G__182607 = n + 1;
          val__$1 = G__182606;
          n = G__182607;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__182609 = x;
  if (G__182609) {
    var bit__4048__auto__ = G__182609.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4048__auto__ || G__182609.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__182609.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__182609);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__182609);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__182611 = x;
  if (G__182611) {
    var bit__4048__auto__ = G__182611.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4048__auto__ || G__182611.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__182611.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__182611);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__182611);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__182612 = sn;
      s = G__182612;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__182613__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__182614 = conj.call(null, coll, x);
          var G__182615 = cljs.core.first.call(null, xs);
          var G__182616 = cljs.core.next.call(null, xs);
          coll = G__182614;
          x = G__182615;
          xs = G__182616;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__182613 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182613__delegate.call(this, coll, x, xs);
    };
    G__182613.cljs$lang$maxFixedArity = 2;
    G__182613.cljs$lang$applyTo = function(arglist__182617) {
      var coll = cljs.core.first(arglist__182617);
      arglist__182617 = cljs.core.next(arglist__182617);
      var x = cljs.core.first(arglist__182617);
      var xs = cljs.core.rest(arglist__182617);
      return G__182613__delegate(coll, x, xs);
    };
    G__182613.cljs$core$IFn$_invoke$arity$variadic = G__182613__delegate;
    return G__182613;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__182618 = cljs.core.next.call(null, s);
      var G__182619 = acc + 1;
      s = G__182618;
      acc = G__182619;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__182621 = coll;
      if (G__182621) {
        var bit__4041__auto__ = G__182621.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4041__auto__ || G__182621.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__182622 = cljs.core.next.call(null, coll);
              var G__182623 = n - 1;
              coll = G__182622;
              n = G__182623;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__182624 = cljs.core.next.call(null, coll);
              var G__182625 = n - 1;
              var G__182626 = not_found;
              coll = G__182624;
              n = G__182625;
              not_found = G__182626;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__182631 = coll;
        if (G__182631) {
          var bit__4041__auto__ = G__182631.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4041__auto__ || G__182631.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__182632 = coll;
                  if (G__182632) {
                    var bit__4048__auto__ = G__182632.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4048__auto__ || G__182632.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__182632.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__182632);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__182632);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__182633 = coll;
        if (G__182633) {
          var bit__4041__auto__ = G__182633.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4041__auto__ || G__182633.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__182634 = coll;
                  if (G__182634) {
                    var bit__4048__auto__ = G__182634.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4048__auto__ || G__182634.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__182634.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__182634);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__182634);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__182637 = o;
        if (G__182637) {
          var bit__4041__auto__ = G__182637.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4041__auto__ || G__182637.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__182638 = o;
        if (G__182638) {
          var bit__4041__auto__ = G__182638.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4041__auto__ || G__182638.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__182639__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__182640 = ret;
          var G__182641 = cljs.core.first.call(null, kvs);
          var G__182642 = cljs.core.second.call(null, kvs);
          var G__182643 = cljs.core.nnext.call(null, kvs);
          coll = G__182640;
          k = G__182641;
          v = G__182642;
          kvs = G__182643;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__182639 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__182639__delegate.call(this, coll, k, v, kvs);
    };
    G__182639.cljs$lang$maxFixedArity = 3;
    G__182639.cljs$lang$applyTo = function(arglist__182644) {
      var coll = cljs.core.first(arglist__182644);
      arglist__182644 = cljs.core.next(arglist__182644);
      var k = cljs.core.first(arglist__182644);
      arglist__182644 = cljs.core.next(arglist__182644);
      var v = cljs.core.first(arglist__182644);
      var kvs = cljs.core.rest(arglist__182644);
      return G__182639__delegate(coll, k, v, kvs);
    };
    G__182639.cljs$core$IFn$_invoke$arity$variadic = G__182639__delegate;
    return G__182639;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__182645__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__182646 = ret;
            var G__182647 = cljs.core.first.call(null, ks);
            var G__182648 = cljs.core.next.call(null, ks);
            coll = G__182646;
            k = G__182647;
            ks = G__182648;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__182645 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182645__delegate.call(this, coll, k, ks);
    };
    G__182645.cljs$lang$maxFixedArity = 2;
    G__182645.cljs$lang$applyTo = function(arglist__182649) {
      var coll = cljs.core.first(arglist__182649);
      arglist__182649 = cljs.core.next(arglist__182649);
      var k = cljs.core.first(arglist__182649);
      var ks = cljs.core.rest(arglist__182649);
      return G__182645__delegate(coll, k, ks);
    };
    G__182645.cljs$core$IFn$_invoke$arity$variadic = G__182645__delegate;
    return G__182645;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3404__auto__ = goog.isFunction(f);
  if (or__3404__auto__) {
    return or__3404__auto__;
  } else {
    var G__182653 = f;
    if (G__182653) {
      var bit__4048__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3404__auto____$1 = bit__4048__auto__;
        if (cljs.core.truth_(or__3404__auto____$1)) {
          return or__3404__auto____$1;
        } else {
          return G__182653.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__182653.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__182653);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__182653);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__182661 = o;
    if (G__182661) {
      var bit__4048__auto__ = G__182661.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4048__auto__ || G__182661.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__182661.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__182661);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__182661);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t182662 !== "undefined") {
      } else {
        cljs.core.t182662 = function(meta, o, with_meta, meta182663) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta182663 = meta182663;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t182662.cljs$lang$type = true;
        cljs.core.t182662.cljs$lang$ctorStr = "cljs.core/t182662";
        cljs.core.t182662.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
          return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/t182662");
        };
        cljs.core.t182662.prototype.call = function() {
          var G__182666__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__182666 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__182666__delegate.call(this, self__, args);
          };
          G__182666.cljs$lang$maxFixedArity = 1;
          G__182666.cljs$lang$applyTo = function(arglist__182667) {
            var self__ = cljs.core.first(arglist__182667);
            var args = cljs.core.rest(arglist__182667);
            return G__182666__delegate(self__, args);
          };
          G__182666.cljs$core$IFn$_invoke$arity$variadic = G__182666__delegate;
          return G__182666;
        }();
        cljs.core.t182662.prototype.apply = function(self__, args182665) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args182665)));
        };
        cljs.core.t182662.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__182668__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__182668 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__182668__delegate.call(this, args);
          };
          G__182668.cljs$lang$maxFixedArity = 0;
          G__182668.cljs$lang$applyTo = function(arglist__182669) {
            var args = cljs.core.seq(arglist__182669);
            return G__182668__delegate(args);
          };
          G__182668.cljs$core$IFn$_invoke$arity$variadic = G__182668__delegate;
          return G__182668;
        }();
        cljs.core.t182662.prototype.cljs$core$Fn$ = true;
        cljs.core.t182662.prototype.cljs$core$IMeta$_meta$arity$1 = function(_182664) {
          var self__ = this;
          var _182664__$1 = this;
          return self__.meta182663;
        };
        cljs.core.t182662.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_182664, meta182663__$1) {
          var self__ = this;
          var _182664__$1 = this;
          return new cljs.core.t182662(self__.meta, self__.o, self__.with_meta, meta182663__$1);
        };
        cljs.core.__GT_t182662 = function __GT_t182662(meta__$1, o__$1, with_meta__$1, meta182663) {
          return new cljs.core.t182662(meta__$1, o__$1, with_meta__$1, meta182663);
        };
      }
      return new cljs.core.t182662(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3392__auto__ = !(o == null);
    if (and__3392__auto__) {
      var G__182673 = o;
      if (G__182673) {
        var bit__4048__auto__ = G__182673.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4048__auto__ || G__182673.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__182673.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__182673);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__182673);
      }
    } else {
      return and__3392__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__182674__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__182675 = ret;
            var G__182676 = cljs.core.first.call(null, ks);
            var G__182677 = cljs.core.next.call(null, ks);
            coll = G__182675;
            k = G__182676;
            ks = G__182677;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__182674 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182674__delegate.call(this, coll, k, ks);
    };
    G__182674.cljs$lang$maxFixedArity = 2;
    G__182674.cljs$lang$applyTo = function(arglist__182678) {
      var coll = cljs.core.first(arglist__182678);
      arglist__182678 = cljs.core.next(arglist__182678);
      var k = cljs.core.first(arglist__182678);
      var ks = cljs.core.rest(arglist__182678);
      return G__182674__delegate(coll, k, ks);
    };
    G__182674.cljs$core$IFn$_invoke$arity$variadic = G__182674__delegate;
    return G__182674;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj182680 = {};
  return obj182680;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj182684 = {};
      return obj182684;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__182686 = o;
    if (G__182686) {
      var bit__4041__auto__ = G__182686.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4041__auto__ || G__182686.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__182688 = x;
    if (G__182688) {
      var bit__4048__auto__ = G__182688.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4048__auto__ || G__182688.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__182688.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__182688);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__182688);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__182690 = x;
    if (G__182690) {
      var bit__4048__auto__ = G__182690.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4048__auto__ || G__182690.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__182690.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__182690);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__182690);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__182692 = x;
  if (G__182692) {
    var bit__4048__auto__ = G__182692.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4048__auto__ || G__182692.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__182692.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__182692);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__182692);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__182694 = x;
  if (G__182694) {
    var bit__4048__auto__ = G__182694.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4048__auto__ || G__182694.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__182694.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__182694);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__182694);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__182696 = x;
  if (G__182696) {
    var bit__4048__auto__ = G__182696.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4048__auto__ || G__182696.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__182696.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__182696);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__182696);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__182698 = x;
  if (G__182698) {
    var bit__4048__auto__ = G__182698.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4048__auto__ || G__182698.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__182698.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__182698);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__182698);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__182700 = x;
    if (G__182700) {
      var bit__4048__auto__ = G__182700.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4048__auto__ || G__182700.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__182700.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__182700);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__182700);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__182702 = x;
  if (G__182702) {
    var bit__4048__auto__ = G__182702.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4048__auto__ || G__182702.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__182702.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__182702);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__182702);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__182704 = x;
  if (G__182704) {
    var bit__4041__auto__ = G__182704.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4041__auto__ || G__182704.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj182708 = {};
    return obj182708;
  };
  var js_obj__1 = function() {
    var G__182709__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__182709 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__182709__delegate.call(this, keyvals);
    };
    G__182709.cljs$lang$maxFixedArity = 0;
    G__182709.cljs$lang$applyTo = function(arglist__182710) {
      var keyvals = cljs.core.seq(arglist__182710);
      return G__182709__delegate(keyvals);
    };
    G__182709.cljs$core$IFn$_invoke$arity$variadic = G__182709__delegate;
    return G__182709;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__182711 = i__$1 + 1;
      var G__182712 = j__$1 + 1;
      var G__182713 = len__$1 - 1;
      i__$1 = G__182711;
      j__$1 = G__182712;
      len__$1 = G__182713;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__182714 = i__$1 - 1;
      var G__182715 = j__$1 - 1;
      var G__182716 = len__$1 - 1;
      i__$1 = G__182714;
      j__$1 = G__182715;
      len__$1 = G__182716;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj182718 = {};
  return obj182718;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__182720 = s;
    if (G__182720) {
      var bit__4048__auto__ = G__182720.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4048__auto__ || G__182720.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__182720.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__182720);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__182720);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__182722 = s;
  if (G__182722) {
    var bit__4048__auto__ = G__182722.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4048__auto__ || G__182722.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__182722.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__182722);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__182722);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3404__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3404__auto__) {
    return or__3404__auto__;
  } else {
    var G__182726 = f;
    if (G__182726) {
      var bit__4048__auto__ = G__182726.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4048__auto__ || G__182726.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__182726.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__182726);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__182726);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__182727__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__182728 = cljs.core.conj.call(null, s, x__$1);
              var G__182729 = etc;
              s = G__182728;
              xs = G__182729;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__182727 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182727__delegate.call(this, x, y, more);
    };
    G__182727.cljs$lang$maxFixedArity = 2;
    G__182727.cljs$lang$applyTo = function(arglist__182730) {
      var x = cljs.core.first(arglist__182730);
      arglist__182730 = cljs.core.next(arglist__182730);
      var y = cljs.core.first(arglist__182730);
      var more = cljs.core.rest(arglist__182730);
      return G__182727__delegate(x, y, more);
    };
    G__182727.cljs$core$IFn$_invoke$arity$variadic = G__182727__delegate;
    return G__182727;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3404__auto__ = cljs.core.seq.call(null, coll);
    if (or__3404__auto__) {
      return or__3404__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__182732 = x;
            if (G__182732) {
              var bit__4041__auto__ = G__182732.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4041__auto__ || G__182732.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__182733 = xs;
        var G__182734 = ys;
        var G__182735 = len;
        var G__182736 = n + 1;
        xs = G__182733;
        ys = G__182734;
        len = G__182735;
        n = G__182736;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__182737 = nval;
          var G__182738 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__182737;
          coll__$1 = G__182738;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__182741 = coll;
      if (G__182741) {
        var bit__4041__auto__ = G__182741.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4041__auto__ || G__182741.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__182742 = coll;
      if (G__182742) {
        var bit__4041__auto__ = G__182742.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4041__auto__ || G__182742.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__182743__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__182743 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182743__delegate.call(this, x, y, more);
    };
    G__182743.cljs$lang$maxFixedArity = 2;
    G__182743.cljs$lang$applyTo = function(arglist__182744) {
      var x = cljs.core.first(arglist__182744);
      arglist__182744 = cljs.core.next(arglist__182744);
      var y = cljs.core.first(arglist__182744);
      var more = cljs.core.rest(arglist__182744);
      return G__182743__delegate(x, y, more);
    };
    G__182743.cljs$core$IFn$_invoke$arity$variadic = G__182743__delegate;
    return G__182743;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__182745__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__182745 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182745__delegate.call(this, x, y, more);
    };
    G__182745.cljs$lang$maxFixedArity = 2;
    G__182745.cljs$lang$applyTo = function(arglist__182746) {
      var x = cljs.core.first(arglist__182746);
      arglist__182746 = cljs.core.next(arglist__182746);
      var y = cljs.core.first(arglist__182746);
      var more = cljs.core.rest(arglist__182746);
      return G__182745__delegate(x, y, more);
    };
    G__182745.cljs$core$IFn$_invoke$arity$variadic = G__182745__delegate;
    return G__182745;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__182747__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__182747 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182747__delegate.call(this, x, y, more);
    };
    G__182747.cljs$lang$maxFixedArity = 2;
    G__182747.cljs$lang$applyTo = function(arglist__182748) {
      var x = cljs.core.first(arglist__182748);
      arglist__182748 = cljs.core.next(arglist__182748);
      var y = cljs.core.first(arglist__182748);
      var more = cljs.core.rest(arglist__182748);
      return G__182747__delegate(x, y, more);
    };
    G__182747.cljs$core$IFn$_invoke$arity$variadic = G__182747__delegate;
    return G__182747;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__182749__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__182749 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182749__delegate.call(this, x, y, more);
    };
    G__182749.cljs$lang$maxFixedArity = 2;
    G__182749.cljs$lang$applyTo = function(arglist__182750) {
      var x = cljs.core.first(arglist__182750);
      arglist__182750 = cljs.core.next(arglist__182750);
      var y = cljs.core.first(arglist__182750);
      var more = cljs.core.rest(arglist__182750);
      return G__182749__delegate(x, y, more);
    };
    G__182749.cljs$core$IFn$_invoke$arity$variadic = G__182749__delegate;
    return G__182749;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__182751__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__182752 = y;
            var G__182753 = cljs.core.first.call(null, more);
            var G__182754 = cljs.core.next.call(null, more);
            x = G__182752;
            y = G__182753;
            more = G__182754;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__182751 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182751__delegate.call(this, x, y, more);
    };
    G__182751.cljs$lang$maxFixedArity = 2;
    G__182751.cljs$lang$applyTo = function(arglist__182755) {
      var x = cljs.core.first(arglist__182755);
      arglist__182755 = cljs.core.next(arglist__182755);
      var y = cljs.core.first(arglist__182755);
      var more = cljs.core.rest(arglist__182755);
      return G__182751__delegate(x, y, more);
    };
    G__182751.cljs$core$IFn$_invoke$arity$variadic = G__182751__delegate;
    return G__182751;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__182756__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__182757 = y;
            var G__182758 = cljs.core.first.call(null, more);
            var G__182759 = cljs.core.next.call(null, more);
            x = G__182757;
            y = G__182758;
            more = G__182759;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__182756 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182756__delegate.call(this, x, y, more);
    };
    G__182756.cljs$lang$maxFixedArity = 2;
    G__182756.cljs$lang$applyTo = function(arglist__182760) {
      var x = cljs.core.first(arglist__182760);
      arglist__182760 = cljs.core.next(arglist__182760);
      var y = cljs.core.first(arglist__182760);
      var more = cljs.core.rest(arglist__182760);
      return G__182756__delegate(x, y, more);
    };
    G__182756.cljs$core$IFn$_invoke$arity$variadic = G__182756__delegate;
    return G__182756;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__182761__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__182762 = y;
            var G__182763 = cljs.core.first.call(null, more);
            var G__182764 = cljs.core.next.call(null, more);
            x = G__182762;
            y = G__182763;
            more = G__182764;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__182761 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182761__delegate.call(this, x, y, more);
    };
    G__182761.cljs$lang$maxFixedArity = 2;
    G__182761.cljs$lang$applyTo = function(arglist__182765) {
      var x = cljs.core.first(arglist__182765);
      arglist__182765 = cljs.core.next(arglist__182765);
      var y = cljs.core.first(arglist__182765);
      var more = cljs.core.rest(arglist__182765);
      return G__182761__delegate(x, y, more);
    };
    G__182761.cljs$core$IFn$_invoke$arity$variadic = G__182761__delegate;
    return G__182761;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__182766__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__182767 = y;
            var G__182768 = cljs.core.first.call(null, more);
            var G__182769 = cljs.core.next.call(null, more);
            x = G__182767;
            y = G__182768;
            more = G__182769;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__182766 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182766__delegate.call(this, x, y, more);
    };
    G__182766.cljs$lang$maxFixedArity = 2;
    G__182766.cljs$lang$applyTo = function(arglist__182770) {
      var x = cljs.core.first(arglist__182770);
      arglist__182770 = cljs.core.next(arglist__182770);
      var y = cljs.core.first(arglist__182770);
      var more = cljs.core.rest(arglist__182770);
      return G__182766__delegate(x, y, more);
    };
    G__182766.cljs$core$IFn$_invoke$arity$variadic = G__182766__delegate;
    return G__182766;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3711__auto__ = x;
    var y__3712__auto__ = y;
    return x__3711__auto__ > y__3712__auto__ ? x__3711__auto__ : y__3712__auto__;
  };
  var max__3 = function() {
    var G__182771__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3711__auto__ = x;
        var y__3712__auto__ = y;
        return x__3711__auto__ > y__3712__auto__ ? x__3711__auto__ : y__3712__auto__;
      }(), more);
    };
    var G__182771 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182771__delegate.call(this, x, y, more);
    };
    G__182771.cljs$lang$maxFixedArity = 2;
    G__182771.cljs$lang$applyTo = function(arglist__182772) {
      var x = cljs.core.first(arglist__182772);
      arglist__182772 = cljs.core.next(arglist__182772);
      var y = cljs.core.first(arglist__182772);
      var more = cljs.core.rest(arglist__182772);
      return G__182771__delegate(x, y, more);
    };
    G__182771.cljs$core$IFn$_invoke$arity$variadic = G__182771__delegate;
    return G__182771;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3718__auto__ = x;
    var y__3719__auto__ = y;
    return x__3718__auto__ < y__3719__auto__ ? x__3718__auto__ : y__3719__auto__;
  };
  var min__3 = function() {
    var G__182773__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3718__auto__ = x;
        var y__3719__auto__ = y;
        return x__3718__auto__ < y__3719__auto__ ? x__3718__auto__ : y__3719__auto__;
      }(), more);
    };
    var G__182773 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182773__delegate.call(this, x, y, more);
    };
    G__182773.cljs$lang$maxFixedArity = 2;
    G__182773.cljs$lang$applyTo = function(arglist__182774) {
      var x = cljs.core.first(arglist__182774);
      arglist__182774 = cljs.core.next(arglist__182774);
      var y = cljs.core.first(arglist__182774);
      var more = cljs.core.rest(arglist__182774);
      return G__182773__delegate(x, y, more);
    };
    G__182773.cljs$core$IFn$_invoke$arity$variadic = G__182773__delegate;
    return G__182773;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__182775__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__182775 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182775__delegate.call(this, x, y, more);
    };
    G__182775.cljs$lang$maxFixedArity = 2;
    G__182775.cljs$lang$applyTo = function(arglist__182776) {
      var x = cljs.core.first(arglist__182776);
      arglist__182776 = cljs.core.next(arglist__182776);
      var y = cljs.core.first(arglist__182776);
      var more = cljs.core.rest(arglist__182776);
      return G__182775__delegate(x, y, more);
    };
    G__182775.cljs$core$IFn$_invoke$arity$variadic = G__182775__delegate;
    return G__182775;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__182777__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__182777 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182777__delegate.call(this, x, y, more);
    };
    G__182777.cljs$lang$maxFixedArity = 2;
    G__182777.cljs$lang$applyTo = function(arglist__182778) {
      var x = cljs.core.first(arglist__182778);
      arglist__182778 = cljs.core.next(arglist__182778);
      var y = cljs.core.first(arglist__182778);
      var more = cljs.core.rest(arglist__182778);
      return G__182777__delegate(x, y, more);
    };
    G__182777.cljs$core$IFn$_invoke$arity$variadic = G__182777__delegate;
    return G__182777;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__182779__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__182779 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182779__delegate.call(this, x, y, more);
    };
    G__182779.cljs$lang$maxFixedArity = 2;
    G__182779.cljs$lang$applyTo = function(arglist__182780) {
      var x = cljs.core.first(arglist__182780);
      arglist__182780 = cljs.core.next(arglist__182780);
      var y = cljs.core.first(arglist__182780);
      var more = cljs.core.rest(arglist__182780);
      return G__182779__delegate(x, y, more);
    };
    G__182779.cljs$core$IFn$_invoke$arity$variadic = G__182779__delegate;
    return G__182779;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__182781__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__182781 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182781__delegate.call(this, x, y, more);
    };
    G__182781.cljs$lang$maxFixedArity = 2;
    G__182781.cljs$lang$applyTo = function(arglist__182782) {
      var x = cljs.core.first(arglist__182782);
      arglist__182782 = cljs.core.next(arglist__182782);
      var y = cljs.core.first(arglist__182782);
      var more = cljs.core.rest(arglist__182782);
      return G__182781__delegate(x, y, more);
    };
    G__182781.cljs$core$IFn$_invoke$arity$variadic = G__182781__delegate;
    return G__182781;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__182783__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__182783 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182783__delegate.call(this, x, y, more);
    };
    G__182783.cljs$lang$maxFixedArity = 2;
    G__182783.cljs$lang$applyTo = function(arglist__182784) {
      var x = cljs.core.first(arglist__182784);
      arglist__182784 = cljs.core.next(arglist__182784);
      var y = cljs.core.first(arglist__182784);
      var more = cljs.core.rest(arglist__182784);
      return G__182783__delegate(x, y, more);
    };
    G__182783.cljs$core$IFn$_invoke$arity$variadic = G__182783__delegate;
    return G__182783;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__182785__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__182785 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182785__delegate.call(this, x, y, more);
    };
    G__182785.cljs$lang$maxFixedArity = 2;
    G__182785.cljs$lang$applyTo = function(arglist__182786) {
      var x = cljs.core.first(arglist__182786);
      arglist__182786 = cljs.core.next(arglist__182786);
      var y = cljs.core.first(arglist__182786);
      var more = cljs.core.rest(arglist__182786);
      return G__182785__delegate(x, y, more);
    };
    G__182785.cljs$core$IFn$_invoke$arity$variadic = G__182785__delegate;
    return G__182785;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__182787__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__182787 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182787__delegate.call(this, x, y, more);
    };
    G__182787.cljs$lang$maxFixedArity = 2;
    G__182787.cljs$lang$applyTo = function(arglist__182788) {
      var x = cljs.core.first(arglist__182788);
      arglist__182788 = cljs.core.next(arglist__182788);
      var y = cljs.core.first(arglist__182788);
      var more = cljs.core.rest(arglist__182788);
      return G__182787__delegate(x, y, more);
    };
    G__182787.cljs$core$IFn$_invoke$arity$variadic = G__182787__delegate;
    return G__182787;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__182789__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__182790 = y;
            var G__182791 = cljs.core.first.call(null, more);
            var G__182792 = cljs.core.next.call(null, more);
            x = G__182790;
            y = G__182791;
            more = G__182792;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__182789 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182789__delegate.call(this, x, y, more);
    };
    G__182789.cljs$lang$maxFixedArity = 2;
    G__182789.cljs$lang$applyTo = function(arglist__182793) {
      var x = cljs.core.first(arglist__182793);
      arglist__182793 = cljs.core.next(arglist__182793);
      var y = cljs.core.first(arglist__182793);
      var more = cljs.core.rest(arglist__182793);
      return G__182789__delegate(x, y, more);
    };
    G__182789.cljs$core$IFn$_invoke$arity$variadic = G__182789__delegate;
    return G__182789;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__182794 = n__$1 - 1;
      var G__182795 = cljs.core.next.call(null, xs);
      n__$1 = G__182794;
      xs = G__182795;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__182796__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__182797 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__182798 = cljs.core.next.call(null, more);
          sb = G__182797;
          more = G__182798;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__182796 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__182796__delegate.call(this, x, ys);
    };
    G__182796.cljs$lang$maxFixedArity = 1;
    G__182796.cljs$lang$applyTo = function(arglist__182799) {
      var x = cljs.core.first(arglist__182799);
      var ys = cljs.core.rest(arglist__182799);
      return G__182796__delegate(x, ys);
    };
    G__182796.cljs$core$IFn$_invoke$arity$variadic = G__182796__delegate;
    return G__182796;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__182800 = cljs.core.next.call(null, xs);
            var G__182801 = cljs.core.next.call(null, ys);
            xs = G__182800;
            ys = G__182801;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__182802 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__182803 = cljs.core.next.call(null, s);
        res = G__182802;
        s = G__182803;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__182804 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__182805 = cljs.core.next.call(null, s);
      h = G__182804;
      s = G__182805;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__182806 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__182807 = cljs.core.next.call(null, s__$1);
      h = G__182806;
      s__$1 = G__182807;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__182814_182820 = cljs.core.seq.call(null, fn_map);
  var chunk__182815_182821 = null;
  var count__182816_182822 = 0;
  var i__182817_182823 = 0;
  while (true) {
    if (i__182817_182823 < count__182816_182822) {
      var vec__182818_182824 = cljs.core._nth.call(null, chunk__182815_182821, i__182817_182823);
      var key_name_182825 = cljs.core.nth.call(null, vec__182818_182824, 0, null);
      var f_182826 = cljs.core.nth.call(null, vec__182818_182824, 1, null);
      var str_name_182827 = cljs.core.name.call(null, key_name_182825);
      obj[str_name_182827] = f_182826;
      var G__182828 = seq__182814_182820;
      var G__182829 = chunk__182815_182821;
      var G__182830 = count__182816_182822;
      var G__182831 = i__182817_182823 + 1;
      seq__182814_182820 = G__182828;
      chunk__182815_182821 = G__182829;
      count__182816_182822 = G__182830;
      i__182817_182823 = G__182831;
      continue;
    } else {
      var temp__4092__auto___182832 = cljs.core.seq.call(null, seq__182814_182820);
      if (temp__4092__auto___182832) {
        var seq__182814_182833__$1 = temp__4092__auto___182832;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__182814_182833__$1)) {
          var c__4146__auto___182834 = cljs.core.chunk_first.call(null, seq__182814_182833__$1);
          var G__182835 = cljs.core.chunk_rest.call(null, seq__182814_182833__$1);
          var G__182836 = c__4146__auto___182834;
          var G__182837 = cljs.core.count.call(null, c__4146__auto___182834);
          var G__182838 = 0;
          seq__182814_182820 = G__182835;
          chunk__182815_182821 = G__182836;
          count__182816_182822 = G__182837;
          i__182817_182823 = G__182838;
          continue;
        } else {
          var vec__182819_182839 = cljs.core.first.call(null, seq__182814_182833__$1);
          var key_name_182840 = cljs.core.nth.call(null, vec__182819_182839, 0, null);
          var f_182841 = cljs.core.nth.call(null, vec__182819_182839, 1, null);
          var str_name_182842 = cljs.core.name.call(null, key_name_182840);
          obj[str_name_182842] = f_182841;
          var G__182843 = cljs.core.next.call(null, seq__182814_182833__$1);
          var G__182844 = null;
          var G__182845 = 0;
          var G__182846 = 0;
          seq__182814_182820 = G__182843;
          chunk__182815_182821 = G__182844;
          count__182816_182822 = G__182845;
          i__182817_182823 = G__182846;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$ = true;
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__182848 = coll;
  if (G__182848) {
    var bit__4048__auto__ = G__182848.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4048__auto__ || G__182848.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__182848.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__182848);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__182848);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__182849 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__182849;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__182850 = i - 1;
        var G__182851 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__182850;
        r = G__182851;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__182852) {
    var xs = cljs.core.seq(arglist__182852);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$ = true;
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3404__auto__ = coll == null;
    if (or__3404__auto__) {
      return or__3404__auto__;
    } else {
      var G__182856 = coll;
      if (G__182856) {
        var bit__4041__auto__ = G__182856.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4041__auto__ || G__182856.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__182858 = x;
  if (G__182858) {
    var bit__4048__auto__ = G__182858.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4048__auto__ || G__182858.cljs$core$IList$) {
      return true;
    } else {
      if (!G__182858.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__182858);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__182858);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__182860 = null;
  var G__182860__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__182860__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__182860 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__182860__2.call(this, self__, coll);
      case 3:
        return G__182860__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__182860;
}();
cljs.core.Keyword.prototype.apply = function(self__, args182859) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args182859)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.cljs$core$ICloneable$ = true;
cljs.core.Keyword.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Keyword(self__.ns, self__.name, self__.fqn, self__._hash);
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__182862 = x;
    if (G__182862) {
      var bit__4041__auto__ = G__182862.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4041__auto__ || G__182862.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__182863 = ls.sval();
        ls = G__182863;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__182865 = s;
    if (G__182865) {
      var bit__4041__auto__ = G__182865.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4041__auto__ || G__182865.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__182866 = cljs.core.next.call(null, s__$1);
      s__$1 = G__182866;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_182867 = 0;
  var xs_182868 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_182868) {
      ret[i_182867] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_182868));
      var G__182869 = i_182867 + 1;
      var G__182870 = cljs.core.next.call(null, xs_182868);
      i_182867 = G__182869;
      xs_182868 = G__182870;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__182871 = i + 1;
          var G__182872 = cljs.core.next.call(null, s__$1);
          i = G__182871;
          s__$1 = G__182872;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4246__auto___182873 = size;
      var i_182874 = 0;
      while (true) {
        if (i_182874 < n__4246__auto___182873) {
          a[i_182874] = init_val_or_seq;
          var G__182875 = i_182874 + 1;
          i_182874 = G__182875;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__182876 = i + 1;
          var G__182877 = cljs.core.next.call(null, s__$1);
          i = G__182876;
          s__$1 = G__182877;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4246__auto___182878 = size;
      var i_182879 = 0;
      while (true) {
        if (i_182879 < n__4246__auto___182878) {
          a[i_182879] = init_val_or_seq;
          var G__182880 = i_182879 + 1;
          i_182879 = G__182880;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__182881 = i + 1;
          var G__182882 = cljs.core.next.call(null, s__$1);
          i = G__182881;
          s__$1 = G__182882;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4246__auto___182883 = size;
      var i_182884 = 0;
      while (true) {
        if (i_182884 < n__4246__auto___182883) {
          a[i_182884] = init_val_or_seq;
          var G__182885 = i_182884 + 1;
          i_182884 = G__182885;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__182886 = i + 1;
          var G__182887 = cljs.core.next.call(null, s__$1);
          i = G__182886;
          s__$1 = G__182887;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4246__auto___182888 = size;
      var i_182889 = 0;
      while (true) {
        if (i_182889 < n__4246__auto___182888) {
          a[i_182889] = init_val_or_seq;
          var G__182890 = i_182889 + 1;
          i_182889 = G__182890;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__182891 = cljs.core.next.call(null, s__$1);
        var G__182892 = i - 1;
        var G__182893 = sum + 1;
        s__$1 = G__182891;
        i = G__182892;
        sum = G__182893;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__182894__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__182894 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182894__delegate.call(this, x, y, zs);
    };
    G__182894.cljs$lang$maxFixedArity = 2;
    G__182894.cljs$lang$applyTo = function(arglist__182895) {
      var x = cljs.core.first(arglist__182895);
      arglist__182895 = cljs.core.next(arglist__182895);
      var y = cljs.core.first(arglist__182895);
      var zs = cljs.core.rest(arglist__182895);
      return G__182894__delegate(x, y, zs);
    };
    G__182894.cljs$core$IFn$_invoke$arity$variadic = G__182894__delegate;
    return G__182894;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__182896__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__182896 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__182896__delegate.call(this, a, b, c, d, more);
    };
    G__182896.cljs$lang$maxFixedArity = 4;
    G__182896.cljs$lang$applyTo = function(arglist__182897) {
      var a = cljs.core.first(arglist__182897);
      arglist__182897 = cljs.core.next(arglist__182897);
      var b = cljs.core.first(arglist__182897);
      arglist__182897 = cljs.core.next(arglist__182897);
      var c = cljs.core.first(arglist__182897);
      arglist__182897 = cljs.core.next(arglist__182897);
      var d = cljs.core.first(arglist__182897);
      var more = cljs.core.rest(arglist__182897);
      return G__182896__delegate(a, b, c, d, more);
    };
    G__182896.cljs$core$IFn$_invoke$arity$variadic = G__182896__delegate;
    return G__182896;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val);
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key);
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val);
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__182898__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__182898 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__182898__delegate.call(this, f, a, b, c, d, args);
    };
    G__182898.cljs$lang$maxFixedArity = 5;
    G__182898.cljs$lang$applyTo = function(arglist__182899) {
      var f = cljs.core.first(arglist__182899);
      arglist__182899 = cljs.core.next(arglist__182899);
      var a = cljs.core.first(arglist__182899);
      arglist__182899 = cljs.core.next(arglist__182899);
      var b = cljs.core.first(arglist__182899);
      arglist__182899 = cljs.core.next(arglist__182899);
      var c = cljs.core.first(arglist__182899);
      arglist__182899 = cljs.core.next(arglist__182899);
      var d = cljs.core.first(arglist__182899);
      var args = cljs.core.rest(arglist__182899);
      return G__182898__delegate(f, a, b, c, d, args);
    };
    G__182898.cljs$core$IFn$_invoke$arity$variadic = G__182898__delegate;
    return G__182898;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__182900__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__182900 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__182900__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__182900.cljs$lang$maxFixedArity = 6;
    G__182900.cljs$lang$applyTo = function(arglist__182901) {
      var obj = cljs.core.first(arglist__182901);
      arglist__182901 = cljs.core.next(arglist__182901);
      var f = cljs.core.first(arglist__182901);
      arglist__182901 = cljs.core.next(arglist__182901);
      var a = cljs.core.first(arglist__182901);
      arglist__182901 = cljs.core.next(arglist__182901);
      var b = cljs.core.first(arglist__182901);
      arglist__182901 = cljs.core.next(arglist__182901);
      var c = cljs.core.first(arglist__182901);
      arglist__182901 = cljs.core.next(arglist__182901);
      var d = cljs.core.first(arglist__182901);
      var args = cljs.core.rest(arglist__182901);
      return G__182900__delegate(obj, f, a, b, c, d, args);
    };
    G__182900.cljs$core$IFn$_invoke$arity$variadic = G__182900__delegate;
    return G__182900;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__182902__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__182902 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182902__delegate.call(this, x, y, more);
    };
    G__182902.cljs$lang$maxFixedArity = 2;
    G__182902.cljs$lang$applyTo = function(arglist__182903) {
      var x = cljs.core.first(arglist__182903);
      arglist__182903 = cljs.core.next(arglist__182903);
      var y = cljs.core.first(arglist__182903);
      var more = cljs.core.rest(arglist__182903);
      return G__182902__delegate(x, y, more);
    };
    G__182902.cljs$core$IFn$_invoke$arity$variadic = G__182902__delegate;
    return G__182902;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__182904 = pred;
        var G__182905 = cljs.core.next.call(null, coll);
        pred = G__182904;
        coll = G__182905;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3404__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        var G__182906 = pred;
        var G__182907 = cljs.core.next.call(null, coll);
        pred = G__182906;
        coll = G__182907;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__182908 = null;
    var G__182908__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__182908__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__182908__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__182908__3 = function() {
      var G__182909__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__182909 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__182909__delegate.call(this, x, y, zs);
      };
      G__182909.cljs$lang$maxFixedArity = 2;
      G__182909.cljs$lang$applyTo = function(arglist__182910) {
        var x = cljs.core.first(arglist__182910);
        arglist__182910 = cljs.core.next(arglist__182910);
        var y = cljs.core.first(arglist__182910);
        var zs = cljs.core.rest(arglist__182910);
        return G__182909__delegate(x, y, zs);
      };
      G__182909.cljs$core$IFn$_invoke$arity$variadic = G__182909__delegate;
      return G__182909;
    }();
    G__182908 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__182908__0.call(this);
        case 1:
          return G__182908__1.call(this, x);
        case 2:
          return G__182908__2.call(this, x, y);
        default:
          return G__182908__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__182908.cljs$lang$maxFixedArity = 2;
    G__182908.cljs$lang$applyTo = G__182908__3.cljs$lang$applyTo;
    return G__182908;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__182911__delegate = function(args) {
      return x;
    };
    var G__182911 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__182911__delegate.call(this, args);
    };
    G__182911.cljs$lang$maxFixedArity = 0;
    G__182911.cljs$lang$applyTo = function(arglist__182912) {
      var args = cljs.core.seq(arglist__182912);
      return G__182911__delegate(args);
    };
    G__182911.cljs$core$IFn$_invoke$arity$variadic = G__182911__delegate;
    return G__182911;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__182913 = null;
      var G__182913__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__182913__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__182913__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__182913__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__182913__4 = function() {
        var G__182914__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__182914 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182914__delegate.call(this, x, y, z, args);
        };
        G__182914.cljs$lang$maxFixedArity = 3;
        G__182914.cljs$lang$applyTo = function(arglist__182915) {
          var x = cljs.core.first(arglist__182915);
          arglist__182915 = cljs.core.next(arglist__182915);
          var y = cljs.core.first(arglist__182915);
          arglist__182915 = cljs.core.next(arglist__182915);
          var z = cljs.core.first(arglist__182915);
          var args = cljs.core.rest(arglist__182915);
          return G__182914__delegate(x, y, z, args);
        };
        G__182914.cljs$core$IFn$_invoke$arity$variadic = G__182914__delegate;
        return G__182914;
      }();
      G__182913 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__182913__0.call(this);
          case 1:
            return G__182913__1.call(this, x);
          case 2:
            return G__182913__2.call(this, x, y);
          case 3:
            return G__182913__3.call(this, x, y, z);
          default:
            return G__182913__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__182913.cljs$lang$maxFixedArity = 3;
      G__182913.cljs$lang$applyTo = G__182913__4.cljs$lang$applyTo;
      return G__182913;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__182916 = null;
      var G__182916__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__182916__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__182916__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__182916__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__182916__4 = function() {
        var G__182917__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__182917 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182917__delegate.call(this, x, y, z, args);
        };
        G__182917.cljs$lang$maxFixedArity = 3;
        G__182917.cljs$lang$applyTo = function(arglist__182918) {
          var x = cljs.core.first(arglist__182918);
          arglist__182918 = cljs.core.next(arglist__182918);
          var y = cljs.core.first(arglist__182918);
          arglist__182918 = cljs.core.next(arglist__182918);
          var z = cljs.core.first(arglist__182918);
          var args = cljs.core.rest(arglist__182918);
          return G__182917__delegate(x, y, z, args);
        };
        G__182917.cljs$core$IFn$_invoke$arity$variadic = G__182917__delegate;
        return G__182917;
      }();
      G__182916 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__182916__0.call(this);
          case 1:
            return G__182916__1.call(this, x);
          case 2:
            return G__182916__2.call(this, x, y);
          case 3:
            return G__182916__3.call(this, x, y, z);
          default:
            return G__182916__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__182916.cljs$lang$maxFixedArity = 3;
      G__182916.cljs$lang$applyTo = G__182916__4.cljs$lang$applyTo;
      return G__182916;
    }();
  };
  var comp__4 = function() {
    var G__182919__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__182920__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__182921 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__182922 = cljs.core.next.call(null, fs__$2);
              ret = G__182921;
              fs__$2 = G__182922;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__182920 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__182920__delegate.call(this, args);
        };
        G__182920.cljs$lang$maxFixedArity = 0;
        G__182920.cljs$lang$applyTo = function(arglist__182923) {
          var args = cljs.core.seq(arglist__182923);
          return G__182920__delegate(args);
        };
        G__182920.cljs$core$IFn$_invoke$arity$variadic = G__182920__delegate;
        return G__182920;
      }();
    };
    var G__182919 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__182919__delegate.call(this, f1, f2, f3, fs);
    };
    G__182919.cljs$lang$maxFixedArity = 3;
    G__182919.cljs$lang$applyTo = function(arglist__182924) {
      var f1 = cljs.core.first(arglist__182924);
      arglist__182924 = cljs.core.next(arglist__182924);
      var f2 = cljs.core.first(arglist__182924);
      arglist__182924 = cljs.core.next(arglist__182924);
      var f3 = cljs.core.first(arglist__182924);
      var fs = cljs.core.rest(arglist__182924);
      return G__182919__delegate(f1, f2, f3, fs);
    };
    G__182919.cljs$core$IFn$_invoke$arity$variadic = G__182919__delegate;
    return G__182919;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__182925__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__182925 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__182925__delegate.call(this, args);
      };
      G__182925.cljs$lang$maxFixedArity = 0;
      G__182925.cljs$lang$applyTo = function(arglist__182926) {
        var args = cljs.core.seq(arglist__182926);
        return G__182925__delegate(args);
      };
      G__182925.cljs$core$IFn$_invoke$arity$variadic = G__182925__delegate;
      return G__182925;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__182927__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__182927 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__182927__delegate.call(this, args);
      };
      G__182927.cljs$lang$maxFixedArity = 0;
      G__182927.cljs$lang$applyTo = function(arglist__182928) {
        var args = cljs.core.seq(arglist__182928);
        return G__182927__delegate(args);
      };
      G__182927.cljs$core$IFn$_invoke$arity$variadic = G__182927__delegate;
      return G__182927;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__182929__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__182929 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__182929__delegate.call(this, args);
      };
      G__182929.cljs$lang$maxFixedArity = 0;
      G__182929.cljs$lang$applyTo = function(arglist__182930) {
        var args = cljs.core.seq(arglist__182930);
        return G__182929__delegate(args);
      };
      G__182929.cljs$core$IFn$_invoke$arity$variadic = G__182929__delegate;
      return G__182929;
    }();
  };
  var partial__5 = function() {
    var G__182931__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__182932__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__182932 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__182932__delegate.call(this, args);
        };
        G__182932.cljs$lang$maxFixedArity = 0;
        G__182932.cljs$lang$applyTo = function(arglist__182933) {
          var args = cljs.core.seq(arglist__182933);
          return G__182932__delegate(args);
        };
        G__182932.cljs$core$IFn$_invoke$arity$variadic = G__182932__delegate;
        return G__182932;
      }();
    };
    var G__182931 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__182931__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__182931.cljs$lang$maxFixedArity = 4;
    G__182931.cljs$lang$applyTo = function(arglist__182934) {
      var f = cljs.core.first(arglist__182934);
      arglist__182934 = cljs.core.next(arglist__182934);
      var arg1 = cljs.core.first(arglist__182934);
      arglist__182934 = cljs.core.next(arglist__182934);
      var arg2 = cljs.core.first(arglist__182934);
      arglist__182934 = cljs.core.next(arglist__182934);
      var arg3 = cljs.core.first(arglist__182934);
      var more = cljs.core.rest(arglist__182934);
      return G__182931__delegate(f, arg1, arg2, arg3, more);
    };
    G__182931.cljs$core$IFn$_invoke$arity$variadic = G__182931__delegate;
    return G__182931;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__182935 = null;
      var G__182935__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__182935__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__182935__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__182935__4 = function() {
        var G__182936__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__182936 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182936__delegate.call(this, a, b, c, ds);
        };
        G__182936.cljs$lang$maxFixedArity = 3;
        G__182936.cljs$lang$applyTo = function(arglist__182937) {
          var a = cljs.core.first(arglist__182937);
          arglist__182937 = cljs.core.next(arglist__182937);
          var b = cljs.core.first(arglist__182937);
          arglist__182937 = cljs.core.next(arglist__182937);
          var c = cljs.core.first(arglist__182937);
          var ds = cljs.core.rest(arglist__182937);
          return G__182936__delegate(a, b, c, ds);
        };
        G__182936.cljs$core$IFn$_invoke$arity$variadic = G__182936__delegate;
        return G__182936;
      }();
      G__182935 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__182935__1.call(this, a);
          case 2:
            return G__182935__2.call(this, a, b);
          case 3:
            return G__182935__3.call(this, a, b, c);
          default:
            return G__182935__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__182935.cljs$lang$maxFixedArity = 3;
      G__182935.cljs$lang$applyTo = G__182935__4.cljs$lang$applyTo;
      return G__182935;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__182938 = null;
      var G__182938__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__182938__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__182938__4 = function() {
        var G__182939__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__182939 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182939__delegate.call(this, a, b, c, ds);
        };
        G__182939.cljs$lang$maxFixedArity = 3;
        G__182939.cljs$lang$applyTo = function(arglist__182940) {
          var a = cljs.core.first(arglist__182940);
          arglist__182940 = cljs.core.next(arglist__182940);
          var b = cljs.core.first(arglist__182940);
          arglist__182940 = cljs.core.next(arglist__182940);
          var c = cljs.core.first(arglist__182940);
          var ds = cljs.core.rest(arglist__182940);
          return G__182939__delegate(a, b, c, ds);
        };
        G__182939.cljs$core$IFn$_invoke$arity$variadic = G__182939__delegate;
        return G__182939;
      }();
      G__182938 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__182938__2.call(this, a, b);
          case 3:
            return G__182938__3.call(this, a, b, c);
          default:
            return G__182938__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__182938.cljs$lang$maxFixedArity = 3;
      G__182938.cljs$lang$applyTo = G__182938__4.cljs$lang$applyTo;
      return G__182938;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__182941 = null;
      var G__182941__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__182941__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__182941__4 = function() {
        var G__182942__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__182942 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182942__delegate.call(this, a, b, c, ds);
        };
        G__182942.cljs$lang$maxFixedArity = 3;
        G__182942.cljs$lang$applyTo = function(arglist__182943) {
          var a = cljs.core.first(arglist__182943);
          arglist__182943 = cljs.core.next(arglist__182943);
          var b = cljs.core.first(arglist__182943);
          arglist__182943 = cljs.core.next(arglist__182943);
          var c = cljs.core.first(arglist__182943);
          var ds = cljs.core.rest(arglist__182943);
          return G__182942__delegate(a, b, c, ds);
        };
        G__182942.cljs$core$IFn$_invoke$arity$variadic = G__182942__delegate;
        return G__182942;
      }();
      G__182941 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__182941__2.call(this, a, b);
          case 3:
            return G__182941__3.call(this, a, b, c);
          default:
            return G__182941__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__182941.cljs$lang$maxFixedArity = 3;
      G__182941.cljs$lang$applyTo = G__182941__4.cljs$lang$applyTo;
      return G__182941;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4246__auto___182944 = size;
          var i_182945 = 0;
          while (true) {
            if (i_182945 < n__4246__auto___182944) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_182945, cljs.core._nth.call(null, c, i_182945)));
              var G__182946 = i_182945 + 1;
              i_182945 = G__182946;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4246__auto___182947 = size;
        var i_182948 = 0;
        while (true) {
          if (i_182948 < n__4246__auto___182947) {
            var x_182949 = f.call(null, cljs.core._nth.call(null, c, i_182948));
            if (x_182949 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_182949);
            }
            var G__182950 = i_182948 + 1;
            i_182948 = G__182950;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4246__auto___182951 = size;
          var i_182952 = 0;
          while (true) {
            if (i_182952 < n__4246__auto___182951) {
              var x_182953 = f.call(null, idx + i_182952, cljs.core._nth.call(null, c, i_182952));
              if (x_182953 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_182953);
              }
              var G__182954 = i_182952 + 1;
              i_182952 = G__182954;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            return p.call(null, y);
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__182961__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__182961 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182961__delegate.call(this, x, y, z, args);
        };
        G__182961.cljs$lang$maxFixedArity = 3;
        G__182961.cljs$lang$applyTo = function(arglist__182962) {
          var x = cljs.core.first(arglist__182962);
          arglist__182962 = cljs.core.next(arglist__182962);
          var y = cljs.core.first(arglist__182962);
          arglist__182962 = cljs.core.next(arglist__182962);
          var z = cljs.core.first(arglist__182962);
          var args = cljs.core.rest(arglist__182962);
          return G__182961__delegate(x, y, z, args);
        };
        G__182961.cljs$core$IFn$_invoke$arity$variadic = G__182961__delegate;
        return G__182961;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              var and__3392__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3392__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3392__auto____$2;
              }
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              var and__3392__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3392__auto____$2)) {
                var and__3392__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3392__auto____$3)) {
                  var and__3392__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3392__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3392__auto____$4;
                  }
                } else {
                  return and__3392__auto____$3;
                }
              } else {
                return and__3392__auto____$2;
              }
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__182963__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__182955_SHARP_) {
            var and__3392__auto__ = p1.call(null, p1__182955_SHARP_);
            if (cljs.core.truth_(and__3392__auto__)) {
              return p2.call(null, p1__182955_SHARP_);
            } else {
              return and__3392__auto__;
            }
          }, args));
        };
        var G__182963 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182963__delegate.call(this, x, y, z, args);
        };
        G__182963.cljs$lang$maxFixedArity = 3;
        G__182963.cljs$lang$applyTo = function(arglist__182964) {
          var x = cljs.core.first(arglist__182964);
          arglist__182964 = cljs.core.next(arglist__182964);
          var y = cljs.core.first(arglist__182964);
          arglist__182964 = cljs.core.next(arglist__182964);
          var z = cljs.core.first(arglist__182964);
          var args = cljs.core.rest(arglist__182964);
          return G__182963__delegate(x, y, z, args);
        };
        G__182963.cljs$core$IFn$_invoke$arity$variadic = G__182963__delegate;
        return G__182963;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              var and__3392__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3392__auto____$2)) {
                var and__3392__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3392__auto____$3)) {
                  var and__3392__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3392__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3392__auto____$4;
                  }
                } else {
                  return and__3392__auto____$3;
                }
              } else {
                return and__3392__auto____$2;
              }
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              var and__3392__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3392__auto____$2)) {
                var and__3392__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3392__auto____$3)) {
                  var and__3392__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3392__auto____$4)) {
                    var and__3392__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3392__auto____$5)) {
                      var and__3392__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3392__auto____$6)) {
                        var and__3392__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3392__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3392__auto____$7;
                        }
                      } else {
                        return and__3392__auto____$6;
                      }
                    } else {
                      return and__3392__auto____$5;
                    }
                  } else {
                    return and__3392__auto____$4;
                  }
                } else {
                  return and__3392__auto____$3;
                }
              } else {
                return and__3392__auto____$2;
              }
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__182965__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__182956_SHARP_) {
            var and__3392__auto__ = p1.call(null, p1__182956_SHARP_);
            if (cljs.core.truth_(and__3392__auto__)) {
              var and__3392__auto____$1 = p2.call(null, p1__182956_SHARP_);
              if (cljs.core.truth_(and__3392__auto____$1)) {
                return p3.call(null, p1__182956_SHARP_);
              } else {
                return and__3392__auto____$1;
              }
            } else {
              return and__3392__auto__;
            }
          }, args));
        };
        var G__182965 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182965__delegate.call(this, x, y, z, args);
        };
        G__182965.cljs$lang$maxFixedArity = 3;
        G__182965.cljs$lang$applyTo = function(arglist__182966) {
          var x = cljs.core.first(arglist__182966);
          arglist__182966 = cljs.core.next(arglist__182966);
          var y = cljs.core.first(arglist__182966);
          arglist__182966 = cljs.core.next(arglist__182966);
          var z = cljs.core.first(arglist__182966);
          var args = cljs.core.rest(arglist__182966);
          return G__182965__delegate(x, y, z, args);
        };
        G__182965.cljs$core$IFn$_invoke$arity$variadic = G__182965__delegate;
        return G__182965;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__182967__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__182957_SHARP_) {
            return p1__182957_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__182958_SHARP_) {
            var and__3392__auto__ = p1__182958_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3392__auto__)) {
              return p1__182958_SHARP_.call(null, y);
            } else {
              return and__3392__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__182959_SHARP_) {
            var and__3392__auto__ = p1__182959_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3392__auto__)) {
              var and__3392__auto____$1 = p1__182959_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3392__auto____$1)) {
                return p1__182959_SHARP_.call(null, z);
              } else {
                return and__3392__auto____$1;
              }
            } else {
              return and__3392__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__182968__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__182960_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__182960_SHARP_, args);
            }, ps__$1));
          };
          var G__182968 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__182968__delegate.call(this, x, y, z, args);
          };
          G__182968.cljs$lang$maxFixedArity = 3;
          G__182968.cljs$lang$applyTo = function(arglist__182969) {
            var x = cljs.core.first(arglist__182969);
            arglist__182969 = cljs.core.next(arglist__182969);
            var y = cljs.core.first(arglist__182969);
            arglist__182969 = cljs.core.next(arglist__182969);
            var z = cljs.core.first(arglist__182969);
            var args = cljs.core.rest(arglist__182969);
            return G__182968__delegate(x, y, z, args);
          };
          G__182968.cljs$core$IFn$_invoke$arity$variadic = G__182968__delegate;
          return G__182968;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__182967 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__182967__delegate.call(this, p1, p2, p3, ps);
    };
    G__182967.cljs$lang$maxFixedArity = 3;
    G__182967.cljs$lang$applyTo = function(arglist__182970) {
      var p1 = cljs.core.first(arglist__182970);
      arglist__182970 = cljs.core.next(arglist__182970);
      var p2 = cljs.core.first(arglist__182970);
      arglist__182970 = cljs.core.next(arglist__182970);
      var p3 = cljs.core.first(arglist__182970);
      var ps = cljs.core.rest(arglist__182970);
      return G__182967__delegate(p1, p2, p3, ps);
    };
    G__182967.cljs$core$IFn$_invoke$arity$variadic = G__182967__delegate;
    return G__182967;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3404__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3404__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__182977__delegate = function(x, y, z, args) {
          var or__3404__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__182977 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182977__delegate.call(this, x, y, z, args);
        };
        G__182977.cljs$lang$maxFixedArity = 3;
        G__182977.cljs$lang$applyTo = function(arglist__182978) {
          var x = cljs.core.first(arglist__182978);
          arglist__182978 = cljs.core.next(arglist__182978);
          var y = cljs.core.first(arglist__182978);
          arglist__182978 = cljs.core.next(arglist__182978);
          var z = cljs.core.first(arglist__182978);
          var args = cljs.core.rest(arglist__182978);
          return G__182977__delegate(x, y, z, args);
        };
        G__182977.cljs$core$IFn$_invoke$arity$variadic = G__182977__delegate;
        return G__182977;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            var or__3404__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3404__auto____$2)) {
              return or__3404__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            var or__3404__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3404__auto____$2)) {
              return or__3404__auto____$2;
            } else {
              var or__3404__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3404__auto____$3)) {
                return or__3404__auto____$3;
              } else {
                var or__3404__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3404__auto____$4)) {
                  return or__3404__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__182979__delegate = function(x, y, z, args) {
          var or__3404__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__182971_SHARP_) {
              var or__3404__auto____$1 = p1.call(null, p1__182971_SHARP_);
              if (cljs.core.truth_(or__3404__auto____$1)) {
                return or__3404__auto____$1;
              } else {
                return p2.call(null, p1__182971_SHARP_);
              }
            }, args);
          }
        };
        var G__182979 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182979__delegate.call(this, x, y, z, args);
        };
        G__182979.cljs$lang$maxFixedArity = 3;
        G__182979.cljs$lang$applyTo = function(arglist__182980) {
          var x = cljs.core.first(arglist__182980);
          arglist__182980 = cljs.core.next(arglist__182980);
          var y = cljs.core.first(arglist__182980);
          arglist__182980 = cljs.core.next(arglist__182980);
          var z = cljs.core.first(arglist__182980);
          var args = cljs.core.rest(arglist__182980);
          return G__182979__delegate(x, y, z, args);
        };
        G__182979.cljs$core$IFn$_invoke$arity$variadic = G__182979__delegate;
        return G__182979;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            var or__3404__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3404__auto____$2)) {
              return or__3404__auto____$2;
            } else {
              var or__3404__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3404__auto____$3)) {
                return or__3404__auto____$3;
              } else {
                var or__3404__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3404__auto____$4)) {
                  return or__3404__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            var or__3404__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3404__auto____$2)) {
              return or__3404__auto____$2;
            } else {
              var or__3404__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3404__auto____$3)) {
                return or__3404__auto____$3;
              } else {
                var or__3404__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3404__auto____$4)) {
                  return or__3404__auto____$4;
                } else {
                  var or__3404__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3404__auto____$5)) {
                    return or__3404__auto____$5;
                  } else {
                    var or__3404__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3404__auto____$6)) {
                      return or__3404__auto____$6;
                    } else {
                      var or__3404__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3404__auto____$7)) {
                        return or__3404__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__182981__delegate = function(x, y, z, args) {
          var or__3404__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__182972_SHARP_) {
              var or__3404__auto____$1 = p1.call(null, p1__182972_SHARP_);
              if (cljs.core.truth_(or__3404__auto____$1)) {
                return or__3404__auto____$1;
              } else {
                var or__3404__auto____$2 = p2.call(null, p1__182972_SHARP_);
                if (cljs.core.truth_(or__3404__auto____$2)) {
                  return or__3404__auto____$2;
                } else {
                  return p3.call(null, p1__182972_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__182981 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__182981__delegate.call(this, x, y, z, args);
        };
        G__182981.cljs$lang$maxFixedArity = 3;
        G__182981.cljs$lang$applyTo = function(arglist__182982) {
          var x = cljs.core.first(arglist__182982);
          arglist__182982 = cljs.core.next(arglist__182982);
          var y = cljs.core.first(arglist__182982);
          arglist__182982 = cljs.core.next(arglist__182982);
          var z = cljs.core.first(arglist__182982);
          var args = cljs.core.rest(arglist__182982);
          return G__182981__delegate(x, y, z, args);
        };
        G__182981.cljs$core$IFn$_invoke$arity$variadic = G__182981__delegate;
        return G__182981;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__182983__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__182973_SHARP_) {
            return p1__182973_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__182974_SHARP_) {
            var or__3404__auto__ = p1__182974_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return p1__182974_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__182975_SHARP_) {
            var or__3404__auto__ = p1__182975_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              var or__3404__auto____$1 = p1__182975_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3404__auto____$1)) {
                return or__3404__auto____$1;
              } else {
                return p1__182975_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__182984__delegate = function(x, y, z, args) {
            var or__3404__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__182976_SHARP_) {
                return cljs.core.some.call(null, p1__182976_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__182984 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__182984__delegate.call(this, x, y, z, args);
          };
          G__182984.cljs$lang$maxFixedArity = 3;
          G__182984.cljs$lang$applyTo = function(arglist__182985) {
            var x = cljs.core.first(arglist__182985);
            arglist__182985 = cljs.core.next(arglist__182985);
            var y = cljs.core.first(arglist__182985);
            arglist__182985 = cljs.core.next(arglist__182985);
            var z = cljs.core.first(arglist__182985);
            var args = cljs.core.rest(arglist__182985);
            return G__182984__delegate(x, y, z, args);
          };
          G__182984.cljs$core$IFn$_invoke$arity$variadic = G__182984__delegate;
          return G__182984;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__182983 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__182983__delegate.call(this, p1, p2, p3, ps);
    };
    G__182983.cljs$lang$maxFixedArity = 3;
    G__182983.cljs$lang$applyTo = function(arglist__182986) {
      var p1 = cljs.core.first(arglist__182986);
      arglist__182986 = cljs.core.next(arglist__182986);
      var p2 = cljs.core.first(arglist__182986);
      arglist__182986 = cljs.core.next(arglist__182986);
      var p3 = cljs.core.first(arglist__182986);
      var ps = cljs.core.rest(arglist__182986);
      return G__182983__delegate(p1, p2, p3, ps);
    };
    G__182983.cljs$core$IFn$_invoke$arity$variadic = G__182983__delegate;
    return G__182983;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4246__auto___182988 = size;
          var i_182989 = 0;
          while (true) {
            if (i_182989 < n__4246__auto___182988) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_182989)));
              var G__182990 = i_182989 + 1;
              i_182989 = G__182990;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__182991__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__182987_SHARP_) {
        return cljs.core.apply.call(null, f, p1__182987_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__182991 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__182991__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__182991.cljs$lang$maxFixedArity = 4;
    G__182991.cljs$lang$applyTo = function(arglist__182992) {
      var f = cljs.core.first(arglist__182992);
      arglist__182992 = cljs.core.next(arglist__182992);
      var c1 = cljs.core.first(arglist__182992);
      arglist__182992 = cljs.core.next(arglist__182992);
      var c2 = cljs.core.first(arglist__182992);
      arglist__182992 = cljs.core.next(arglist__182992);
      var c3 = cljs.core.first(arglist__182992);
      var colls = cljs.core.rest(arglist__182992);
      return G__182991__delegate(f, c1, c2, c3, colls);
    };
    G__182991.cljs$core$IFn$_invoke$arity$variadic = G__182991__delegate;
    return G__182991;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__182993 = n__$1 - 1;
        var G__182994 = cljs.core.rest.call(null, s);
        n__$1 = G__182993;
        coll__$1 = G__182994;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__182995 = cljs.core.next.call(null, s);
      var G__182996 = cljs.core.next.call(null, lead);
      s = G__182995;
      lead = G__182996;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3392__auto__ = s;
        if (and__3392__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3392__auto__;
        }
      }())) {
        var G__182997 = pred__$1;
        var G__182998 = cljs.core.rest.call(null, s);
        pred__$1 = G__182997;
        coll__$1 = G__182998;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__182999__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__182999 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__182999__delegate.call(this, c1, c2, colls);
    };
    G__182999.cljs$lang$maxFixedArity = 2;
    G__182999.cljs$lang$applyTo = function(arglist__183000) {
      var c1 = cljs.core.first(arglist__183000);
      arglist__183000 = cljs.core.next(arglist__183000);
      var c2 = cljs.core.first(arglist__183000);
      var colls = cljs.core.rest(arglist__183000);
      return G__182999__delegate(c1, c2, colls);
    };
    G__182999.cljs$core$IFn$_invoke$arity$variadic = G__182999__delegate;
    return G__182999;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__183001__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__183001 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__183001__delegate.call(this, f, coll, colls);
    };
    G__183001.cljs$lang$maxFixedArity = 2;
    G__183001.cljs$lang$applyTo = function(arglist__183002) {
      var f = cljs.core.first(arglist__183002);
      arglist__183002 = cljs.core.next(arglist__183002);
      var coll = cljs.core.first(arglist__183002);
      var colls = cljs.core.rest(arglist__183002);
      return G__183001__delegate(f, coll, colls);
    };
    G__183001.cljs$core$IFn$_invoke$arity$variadic = G__183001__delegate;
    return G__183001;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4246__auto___183003 = size;
        var i_183004 = 0;
        while (true) {
          if (i_183004 < n__4246__auto___183003) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_183004)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_183004));
            } else {
            }
            var G__183005 = i_183004 + 1;
            i_183004 = G__183005;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__183006_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__183006_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__183008 = to;
      if (G__183008) {
        var bit__4041__auto__ = G__183008.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4041__auto__ || G__183008.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__183009__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__183009 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__183009__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__183009.cljs$lang$maxFixedArity = 4;
    G__183009.cljs$lang$applyTo = function(arglist__183010) {
      var f = cljs.core.first(arglist__183010);
      arglist__183010 = cljs.core.next(arglist__183010);
      var c1 = cljs.core.first(arglist__183010);
      arglist__183010 = cljs.core.next(arglist__183010);
      var c2 = cljs.core.first(arglist__183010);
      arglist__183010 = cljs.core.next(arglist__183010);
      var c3 = cljs.core.first(arglist__183010);
      var colls = cljs.core.rest(arglist__183010);
      return G__183009__delegate(f, c1, c2, c3, colls);
    };
    G__183009.cljs$core$IFn$_invoke$arity$variadic = G__183009__delegate;
    return G__183009;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__183012 = m__$1;
          if (G__183012) {
            var bit__4048__auto__ = G__183012.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4048__auto__ || G__183012.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__183012.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__183012);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__183012);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__183013 = sentinel;
            var G__183014 = m__$2;
            var G__183015 = cljs.core.next.call(null, ks__$1);
            sentinel = G__183013;
            m__$1 = G__183014;
            ks__$1 = G__183015;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__183016, v) {
  var vec__183018 = p__183016;
  var k = cljs.core.nth.call(null, vec__183018, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__183018, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__183019, f) {
    var vec__183029 = p__183019;
    var k = cljs.core.nth.call(null, vec__183029, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__183029, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__183020, f, a) {
    var vec__183030 = p__183020;
    var k = cljs.core.nth.call(null, vec__183030, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__183030, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__183021, f, a, b) {
    var vec__183031 = p__183021;
    var k = cljs.core.nth.call(null, vec__183031, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__183031, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__183022, f, a, b, c) {
    var vec__183032 = p__183022;
    var k = cljs.core.nth.call(null, vec__183032, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__183032, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__183034__delegate = function(m, p__183023, f, a, b, c, args) {
      var vec__183033 = p__183023;
      var k = cljs.core.nth.call(null, vec__183033, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__183033, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__183034 = function(m, p__183023, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__183034__delegate.call(this, m, p__183023, f, a, b, c, args);
    };
    G__183034.cljs$lang$maxFixedArity = 6;
    G__183034.cljs$lang$applyTo = function(arglist__183035) {
      var m = cljs.core.first(arglist__183035);
      arglist__183035 = cljs.core.next(arglist__183035);
      var p__183023 = cljs.core.first(arglist__183035);
      arglist__183035 = cljs.core.next(arglist__183035);
      var f = cljs.core.first(arglist__183035);
      arglist__183035 = cljs.core.next(arglist__183035);
      var a = cljs.core.first(arglist__183035);
      arglist__183035 = cljs.core.next(arglist__183035);
      var b = cljs.core.first(arglist__183035);
      arglist__183035 = cljs.core.next(arglist__183035);
      var c = cljs.core.first(arglist__183035);
      var args = cljs.core.rest(arglist__183035);
      return G__183034__delegate(m, p__183023, f, a, b, c, args);
    };
    G__183034.cljs$core$IFn$_invoke$arity$variadic = G__183034__delegate;
    return G__183034;
  }();
  update_in = function(m, p__183023, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__183023, f);
      case 4:
        return update_in__4.call(this, m, p__183023, f, a);
      case 5:
        return update_in__5.call(this, m, p__183023, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__183023, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__183023, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3969__auto__, writer__3970__auto__, opts__3971__auto__) {
  return cljs.core._write.call(null, writer__3970__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__183036 = ll - 5;
      var G__183037 = r;
      ll = G__183036;
      ret = G__183037;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__183038 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__183039 = level - 5;
          node = G__183038;
          level = G__183039;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__183041 = null;
  var G__183041__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__183041__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__183041 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183041__2.call(this, self__, k);
      case 3:
        return G__183041__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183041;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args183040) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183040)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__183042 = j + 1;
              var G__183043 = init__$2;
              j = G__183042;
              init__$1 = G__183043;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__183044 = i + step_init[0];
        i = G__183044;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4246__auto___183045 = len;
    var i_183046 = 0;
    while (true) {
      if (i_183046 < n__4246__auto___183045) {
        new_tail[i_183046] = self__.tail[i_183046];
        var G__183047 = i_183046 + 1;
        i_183046 = G__183047;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__183048 = i + 1;
        var G__183049 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__183048;
        out = G__183049;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__183050) {
    var args = cljs.core.seq(arglist__183050);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3711__auto__ = self__.end;
    var y__3712__auto__ = v_pos + 1;
    return x__3711__auto__ > y__3712__auto__ ? x__3711__auto__ : y__3712__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__183052 = null;
  var G__183052__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__183052__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__183052 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183052__2.call(this, self__, k);
      case 3:
        return G__183052__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183052;
}();
cljs.core.Subvec.prototype.apply = function(self__, args183051) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183051)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$ = true;
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__183053 = meta;
      var G__183054 = v.v;
      var G__183055 = v.start + start;
      var G__183056 = v.start + end;
      var G__183057 = __hash;
      meta = G__183053;
      v = G__183054;
      start = G__183055;
      end = G__183056;
      __hash = G__183057;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj183061 = {};
    return obj183061;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__183062 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__183063 = level - 5;
          node = G__183062;
          level = G__183063;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__183065 = null;
  var G__183065__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183065__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183065 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183065__2.call(this, self__, k);
      case 3:
        return G__183065__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183065;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args183064) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183064)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3404__auto__ = self__.rear;
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3404__auto__ = self__.front;
    if (cljs.core.truth_(or__3404__auto__)) {
      return or__3404__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__183066 = i + incr;
        i = G__183066;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__183067 = i + 1;
      var G__183068 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__183067;
      out = G__183068;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj183072 = {};
    return obj183072;
  }();
  var l = ks.length;
  var i_183073 = 0;
  while (true) {
    if (i_183073 < l) {
      var k_183074 = ks[i_183073];
      new_obj[k_183074] = obj[k_183074];
      var G__183075 = i_183073 + 1;
      i_183073 = G__183075;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__183078 = null;
  var G__183078__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183078__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183078 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183078__2.call(this, self__, k);
      case 3:
        return G__183078__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183078;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args183077) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183077)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__183079 = cljs.core.rest.call(null, keys__$1);
        var G__183080 = init__$2;
        keys__$1 = G__183079;
        init__$1 = G__183080;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__183076_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__183076_SHARP_, self__.strobj[p1__183076_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj183082 = {};
  return obj183082;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__183083 = i + 2;
          i = G__183083;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__183084 = i + 2;
          i = G__183084;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__183085 = i + 2;
          i = G__183085;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__183086 = i + 2;
          i = G__183086;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__183087 = i + 2;
          i = G__183087;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_183088 = 0;
  while (true) {
    if (i_183088 < l) {
      narr[i_183088] = arr[i_183088];
      var G__183089 = i_183088 + 1;
      i_183088 = G__183089;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj183092 = {};
    return obj183092;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__183093 = cljs.core.aclone.call(null, self__.arr);
          G__183093[idx + 1] = v;
          return G__183093;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__183094 = null;
  var G__183094__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183094__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183094 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183094__2.call(this, self__, k);
      case 3:
        return G__183094__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183094;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args183090) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183090)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__183095 = i + 2;
        var G__183096 = init__$2;
        i = G__183095;
        init__$1 = G__183096;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__183097 = s + 2;
            var G__183098 = d;
            s = G__183097;
            d = G__183098;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__183099 = s + 2;
              var G__183100 = d + 2;
              s = G__183099;
              d = G__183100;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__183101 = i + 2;
        var G__183102 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__183101;
        ret = G__183102;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__183103_183105 = self__.arr;
      G__183103_183105.pop();
      G__183103_183105.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__183104 = o;
      if (G__183104) {
        var bit__4048__auto__ = G__183104.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4048__auto__ || G__183104.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__183104.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__183104);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__183104);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__183106 = cljs.core.next.call(null, es);
          var G__183107 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__183106;
          tcoll__$2 = G__183107;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__183108 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__183109 = i + 2;
      out = G__183108;
      i = G__183109;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3969__auto__, writer__3970__auto__, opts__3971__auto__) {
  return cljs.core._write.call(null, writer__3970__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__183112 = cljs.core.aclone.call(null, arr);
    G__183112[i] = a;
    return G__183112;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__183113 = cljs.core.aclone.call(null, arr);
    G__183113[i] = a;
    G__183113[j] = b;
    return G__183113;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__183114 = i + 2;
        var G__183115 = init__$2;
        i = G__183114;
        init__$1 = G__183115;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_183116 = 0;
        var j_183117 = 0;
        while (true) {
          if (i_183116 < 32) {
            if ((self__.bitmap >>> i_183116 & 1) === 0) {
              var G__183118 = i_183116 + 1;
              var G__183119 = j_183117;
              i_183116 = G__183118;
              j_183117 = G__183119;
              continue;
            } else {
              nodes[i_183116] = !(self__.arr[j_183117] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_183117]), self__.arr[j_183117], self__.arr[j_183117 + 1], added_leaf_QMARK_) : self__.arr[j_183117 + 1];
              var G__183120 = i_183116 + 1;
              var G__183121 = j_183117 + 2;
              i_183116 = G__183120;
              j_183117 = G__183121;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_183122 = 0;
      var j_183123 = 0;
      while (true) {
        if (i_183122 < 32) {
          if ((self__.bitmap >>> i_183122 & 1) === 0) {
            var G__183124 = i_183122 + 1;
            var G__183125 = j_183123;
            i_183122 = G__183124;
            j_183123 = G__183125;
            continue;
          } else {
            nodes[i_183122] = !(self__.arr[j_183123] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_183123]), self__.arr[j_183123], self__.arr[j_183123 + 1], added_leaf_QMARK_) : self__.arr[j_183123 + 1];
            var G__183126 = i_183122 + 1;
            var G__183127 = j_183123 + 2;
            i_183122 = G__183126;
            j_183123 = G__183127;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__183128 = i + 1;
        var G__183129 = j + 2;
        var G__183130 = bitmap | 1 << i;
        i = G__183128;
        j = G__183129;
        bitmap = G__183130;
        continue;
      } else {
        var G__183131 = i + 1;
        var G__183132 = j;
        var G__183133 = bitmap;
        i = G__183131;
        j = G__183132;
        bitmap = G__183133;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__183134 = i + 1;
          var G__183135 = init__$2;
          i = G__183134;
          init__$1 = G__183135;
          continue;
        }
      } else {
        var G__183136 = i + 1;
        var G__183137 = init__$1;
        i = G__183136;
        init__$1 = G__183137;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__183138 = i + 2;
        i = G__183138;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__183139 = j + 2;
                j = G__183139;
                continue;
              }
            } else {
              var G__183140 = j + 2;
              j = G__183140;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__183141 = j + 1;
              j = G__183141;
              continue;
            }
          } else {
            var G__183142 = j + 1;
            j = G__183142;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj183145 = {};
    return obj183145;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__183146 = null;
  var G__183146__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183146__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183146 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183146__2.call(this, self__, k);
      case 3:
        return G__183146__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183146;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args183143) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183143)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__183147 = i + 1;
      var G__183148 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__183147;
      out = G__183148;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__183149 = o;
      if (G__183149) {
        var bit__4048__auto__ = G__183149.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4048__auto__ || G__183149.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__183149.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__183149);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__183149);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__183150 = cljs.core.next.call(null, es);
          var G__183151 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__183150;
          tcoll__$1 = G__183151;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__183152 = ascending_QMARK_ ? t.left : t.right;
      var G__183153 = cljs.core.conj.call(null, stack__$1, t);
      t = G__183152;
      stack__$1 = G__183153;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__183155 = null;
  var G__183155__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183155__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183155 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183155__2.call(this, self__, k);
      case 3:
        return G__183155__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183155;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args183154) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183154)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__183157 = null;
  var G__183157__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183157__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183157 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183157__2.call(this, self__, k);
      case 3:
        return G__183157__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183157;
}();
cljs.core.RedNode.prototype.apply = function(self__, args183156) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183156)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__183159 = null;
  var G__183159__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183159__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183159 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183159__2.call(this, self__, k);
      case 3:
        return G__183159__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183159;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args183158) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183158)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__183160 = t.left;
          t = G__183160;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__183161 = t.right;
            t = G__183161;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__183162 = cljs.core.conj.call(null, stack, t);
              var G__183163 = t.left;
              stack = G__183162;
              t = G__183163;
              continue;
            } else {
              var G__183164 = stack;
              var G__183165 = t.right;
              stack = G__183164;
              t = G__183165;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__183166 = cljs.core.conj.call(null, stack, t);
                var G__183167 = t.right;
                stack = G__183166;
                t = G__183167;
                continue;
              } else {
                var G__183168 = stack;
                var G__183169 = t.left;
                stack = G__183168;
                t = G__183169;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__183170 = cljs.core.nnext.call(null, in$);
        var G__183171 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__183170;
        out = G__183171;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__183172) {
    var keyvals = cljs.core.seq(arglist__183172);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__183173) {
    var keyvals = cljs.core.seq(arglist__183173);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj183177 = {};
      return obj183177;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__183178 = cljs.core.nnext.call(null, kvs);
        kvs = G__183178;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__183179) {
    var keyvals = cljs.core.seq(arglist__183179);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__183180 = cljs.core.nnext.call(null, in$);
        var G__183181 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__183180;
        out = G__183181;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__183182) {
    var keyvals = cljs.core.seq(arglist__183182);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__183183 = cljs.core.nnext.call(null, in$);
        var G__183184 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__183183;
        out = G__183184;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__183185) {
    var comparator = cljs.core.first(arglist__183185);
    var keyvals = cljs.core.rest(arglist__183185);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__183186 = self__.mseq;
    if (G__183186) {
      var bit__4048__auto__ = G__183186.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4048__auto__ || G__183186.cljs$core$INext$) {
        return true;
      } else {
        if (!G__183186.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__183186);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__183186);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__183187 = self__.mseq;
    if (G__183187) {
      var bit__4048__auto__ = G__183187.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4048__auto__ || G__183187.cljs$core$INext$) {
        return true;
      } else {
        if (!G__183187.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__183187);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__183187);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__183188 = self__.mseq;
    if (G__183188) {
      var bit__4048__auto__ = G__183188.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4048__auto__ || G__183188.cljs$core$INext$) {
        return true;
      } else {
        if (!G__183188.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__183188);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__183188);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__183189 = self__.mseq;
    if (G__183189) {
      var bit__4048__auto__ = G__183189.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4048__auto__ || G__183189.cljs$core$INext$) {
        return true;
      } else {
        if (!G__183189.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__183189);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__183189);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__183190_SHARP_, p2__183191_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3404__auto__ = p1__183190_SHARP_;
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__183191_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__183192) {
    var maps = cljs.core.seq(arglist__183192);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3404__auto__ = m1;
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__183193) {
    var f = cljs.core.first(arglist__183193);
    var maps = cljs.core.rest(arglist__183193);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__183194 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__183195 = cljs.core.next.call(null, keys);
      ret = G__183194;
      keys = G__183195;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__183198 = null;
  var G__183198__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183198__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183198 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183198__2.call(this, self__, k);
      case 3:
        return G__183198__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183198;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args183197) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183197)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__183196_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__183196_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__183199 = i + 1;
        var G__183200 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__183199;
        out = G__183200;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__183201 = i + 1;
        var G__183202 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__183201;
        out = G__183202;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__183204 = null;
  var G__183204__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__183204__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__183204 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183204__2.call(this, self__, k);
      case 3:
        return G__183204__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183204;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args183203) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183203)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__183207 = null;
  var G__183207__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__183207__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__183207 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__183207__2.call(this, self__, k);
      case 3:
        return G__183207__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__183207;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args183206) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args183206)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__183205_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__183205_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4240__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4240__auto__.length) {
        var G__183208 = i + 1;
        var G__183209 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__183208;
        res = G__183209;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__183210 = cljs.core._next.call(null, in$__$1);
            var G__183211 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__183210;
            out = G__183211;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__183212__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__183212 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__183212__delegate.call(this, keys);
    };
    G__183212.cljs$lang$maxFixedArity = 0;
    G__183212.cljs$lang$applyTo = function(arglist__183213) {
      var keys = cljs.core.seq(arglist__183213);
      return G__183212__delegate(keys);
    };
    G__183212.cljs$core$IFn$_invoke$arity$variadic = G__183212__delegate;
    return G__183212;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__183214) {
    var keys = cljs.core.seq(arglist__183214);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__183215) {
    var comparator = cljs.core.first(arglist__183215);
    var keys = cljs.core.rest(arglist__183215);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__183216_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__183216_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__183216_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__183223, seen__$1) {
        while (true) {
          var vec__183224 = p__183223;
          var f = cljs.core.nth.call(null, vec__183224, 0, null);
          var xs__$1 = vec__183224;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__183225 = cljs.core.rest.call(null, s);
              var G__183226 = seen__$1;
              p__183223 = G__183225;
              seen__$1 = G__183226;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__183227 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__183228 = cljs.core.next.call(null, s__$1);
      ret = G__183227;
      s__$1 = G__183228;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__183230 = x;
    if (G__183230) {
      var bit__4041__auto__ = G__183230.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4041__auto__ || G__183230.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__183231 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__183232 = cljs.core.next.call(null, ks);
      var G__183233 = cljs.core.next.call(null, vs);
      map = G__183231;
      ks = G__183232;
      vs = G__183233;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__183236__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__183234_SHARP_, p2__183235_SHARP_) {
        return max_key.call(null, k, p1__183234_SHARP_, p2__183235_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__183236 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__183236__delegate.call(this, k, x, y, more);
    };
    G__183236.cljs$lang$maxFixedArity = 3;
    G__183236.cljs$lang$applyTo = function(arglist__183237) {
      var k = cljs.core.first(arglist__183237);
      arglist__183237 = cljs.core.next(arglist__183237);
      var x = cljs.core.first(arglist__183237);
      arglist__183237 = cljs.core.next(arglist__183237);
      var y = cljs.core.first(arglist__183237);
      var more = cljs.core.rest(arglist__183237);
      return G__183236__delegate(k, x, y, more);
    };
    G__183236.cljs$core$IFn$_invoke$arity$variadic = G__183236__delegate;
    return G__183236;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__183240__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__183238_SHARP_, p2__183239_SHARP_) {
        return min_key.call(null, k, p1__183238_SHARP_, p2__183239_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__183240 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__183240__delegate.call(this, k, x, y, more);
    };
    G__183240.cljs$lang$maxFixedArity = 3;
    G__183240.cljs$lang$applyTo = function(arglist__183241) {
      var k = cljs.core.first(arglist__183241);
      arglist__183241 = cljs.core.next(arglist__183241);
      var x = cljs.core.first(arglist__183241);
      arglist__183241 = cljs.core.next(arglist__183241);
      var y = cljs.core.first(arglist__183241);
      var more = cljs.core.rest(arglist__183241);
      return G__183240__delegate(k, x, y, more);
    };
    G__183240.cljs$core$IFn$_invoke$arity$variadic = G__183240__delegate;
    return G__183240;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__183244 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__183244, 0, null);
        var s = vec__183244;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__183245 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__183245, 0, null);
      var s = vec__183245;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__183248 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__183248, 0, null);
        var s = vec__183248;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__183249 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__183249, 0, null);
      var s = vec__183249;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$ = true;
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__183250_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__183250_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__183261 = null;
      var G__183261__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__183261__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__183261__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__183261__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__183261__4 = function() {
        var G__183262__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__183262 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__183262__delegate.call(this, x, y, z, args);
        };
        G__183262.cljs$lang$maxFixedArity = 3;
        G__183262.cljs$lang$applyTo = function(arglist__183263) {
          var x = cljs.core.first(arglist__183263);
          arglist__183263 = cljs.core.next(arglist__183263);
          var y = cljs.core.first(arglist__183263);
          arglist__183263 = cljs.core.next(arglist__183263);
          var z = cljs.core.first(arglist__183263);
          var args = cljs.core.rest(arglist__183263);
          return G__183262__delegate(x, y, z, args);
        };
        G__183262.cljs$core$IFn$_invoke$arity$variadic = G__183262__delegate;
        return G__183262;
      }();
      G__183261 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__183261__0.call(this);
          case 1:
            return G__183261__1.call(this, x);
          case 2:
            return G__183261__2.call(this, x, y);
          case 3:
            return G__183261__3.call(this, x, y, z);
          default:
            return G__183261__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__183261.cljs$lang$maxFixedArity = 3;
      G__183261.cljs$lang$applyTo = G__183261__4.cljs$lang$applyTo;
      return G__183261;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__183264 = null;
      var G__183264__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__183264__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__183264__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__183264__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__183264__4 = function() {
        var G__183265__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__183265 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__183265__delegate.call(this, x, y, z, args);
        };
        G__183265.cljs$lang$maxFixedArity = 3;
        G__183265.cljs$lang$applyTo = function(arglist__183266) {
          var x = cljs.core.first(arglist__183266);
          arglist__183266 = cljs.core.next(arglist__183266);
          var y = cljs.core.first(arglist__183266);
          arglist__183266 = cljs.core.next(arglist__183266);
          var z = cljs.core.first(arglist__183266);
          var args = cljs.core.rest(arglist__183266);
          return G__183265__delegate(x, y, z, args);
        };
        G__183265.cljs$core$IFn$_invoke$arity$variadic = G__183265__delegate;
        return G__183265;
      }();
      G__183264 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__183264__0.call(this);
          case 1:
            return G__183264__1.call(this, x);
          case 2:
            return G__183264__2.call(this, x, y);
          case 3:
            return G__183264__3.call(this, x, y, z);
          default:
            return G__183264__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__183264.cljs$lang$maxFixedArity = 3;
      G__183264.cljs$lang$applyTo = G__183264__4.cljs$lang$applyTo;
      return G__183264;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__183267 = null;
      var G__183267__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__183267__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__183267__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__183267__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__183267__4 = function() {
        var G__183268__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__183268 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__183268__delegate.call(this, x, y, z, args);
        };
        G__183268.cljs$lang$maxFixedArity = 3;
        G__183268.cljs$lang$applyTo = function(arglist__183269) {
          var x = cljs.core.first(arglist__183269);
          arglist__183269 = cljs.core.next(arglist__183269);
          var y = cljs.core.first(arglist__183269);
          arglist__183269 = cljs.core.next(arglist__183269);
          var z = cljs.core.first(arglist__183269);
          var args = cljs.core.rest(arglist__183269);
          return G__183268__delegate(x, y, z, args);
        };
        G__183268.cljs$core$IFn$_invoke$arity$variadic = G__183268__delegate;
        return G__183268;
      }();
      G__183267 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__183267__0.call(this);
          case 1:
            return G__183267__1.call(this, x);
          case 2:
            return G__183267__2.call(this, x, y);
          case 3:
            return G__183267__3.call(this, x, y, z);
          default:
            return G__183267__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__183267.cljs$lang$maxFixedArity = 3;
      G__183267.cljs$lang$applyTo = G__183267__4.cljs$lang$applyTo;
      return G__183267;
    }();
  };
  var juxt__4 = function() {
    var G__183270__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__183271 = null;
        var G__183271__0 = function() {
          return cljs.core.reduce.call(null, function(p1__183251_SHARP_, p2__183252_SHARP_) {
            return cljs.core.conj.call(null, p1__183251_SHARP_, p2__183252_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__183271__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__183253_SHARP_, p2__183254_SHARP_) {
            return cljs.core.conj.call(null, p1__183253_SHARP_, p2__183254_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__183271__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__183255_SHARP_, p2__183256_SHARP_) {
            return cljs.core.conj.call(null, p1__183255_SHARP_, p2__183256_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__183271__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__183257_SHARP_, p2__183258_SHARP_) {
            return cljs.core.conj.call(null, p1__183257_SHARP_, p2__183258_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__183271__4 = function() {
          var G__183272__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__183259_SHARP_, p2__183260_SHARP_) {
              return cljs.core.conj.call(null, p1__183259_SHARP_, cljs.core.apply.call(null, p2__183260_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__183272 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__183272__delegate.call(this, x, y, z, args);
          };
          G__183272.cljs$lang$maxFixedArity = 3;
          G__183272.cljs$lang$applyTo = function(arglist__183273) {
            var x = cljs.core.first(arglist__183273);
            arglist__183273 = cljs.core.next(arglist__183273);
            var y = cljs.core.first(arglist__183273);
            arglist__183273 = cljs.core.next(arglist__183273);
            var z = cljs.core.first(arglist__183273);
            var args = cljs.core.rest(arglist__183273);
            return G__183272__delegate(x, y, z, args);
          };
          G__183272.cljs$core$IFn$_invoke$arity$variadic = G__183272__delegate;
          return G__183272;
        }();
        G__183271 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__183271__0.call(this);
            case 1:
              return G__183271__1.call(this, x);
            case 2:
              return G__183271__2.call(this, x, y);
            case 3:
              return G__183271__3.call(this, x, y, z);
            default:
              return G__183271__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__183271.cljs$lang$maxFixedArity = 3;
        G__183271.cljs$lang$applyTo = G__183271__4.cljs$lang$applyTo;
        return G__183271;
      }();
    };
    var G__183270 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__183270__delegate.call(this, f, g, h, fs);
    };
    G__183270.cljs$lang$maxFixedArity = 3;
    G__183270.cljs$lang$applyTo = function(arglist__183274) {
      var f = cljs.core.first(arglist__183274);
      arglist__183274 = cljs.core.next(arglist__183274);
      var g = cljs.core.first(arglist__183274);
      arglist__183274 = cljs.core.next(arglist__183274);
      var h = cljs.core.first(arglist__183274);
      var fs = cljs.core.rest(arglist__183274);
      return G__183270__delegate(f, g, h, fs);
    };
    G__183270.cljs$core$IFn$_invoke$arity$variadic = G__183270__delegate;
    return G__183270;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__183275 = cljs.core.next.call(null, coll);
        coll = G__183275;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__183276 = n - 1;
        var G__183277 = cljs.core.next.call(null, coll);
        n = G__183276;
        coll = G__183277;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__183279 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__183279, 0, null);
  var flags = cljs.core.nth.call(null, vec__183279, 1, null);
  var pattern = cljs.core.nth.call(null, vec__183279, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_183281 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_183282__$1 = cljs.core.next.call(null, coll);
      var n_183283 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_183282__$1 && (n_183283 == null || !(n_183283 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_183282__$1), writer, opts);
          var G__183284 = cljs.core.next.call(null, coll_183282__$1);
          var G__183285 = n_183283 - 1;
          coll_183282__$1 = G__183284;
          n_183283 = G__183285;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_183281;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__183290 = cljs.core.seq.call(null, ss);
    var chunk__183291 = null;
    var count__183292 = 0;
    var i__183293 = 0;
    while (true) {
      if (i__183293 < count__183292) {
        var s = cljs.core._nth.call(null, chunk__183291, i__183293);
        cljs.core._write.call(null, writer, s);
        var G__183294 = seq__183290;
        var G__183295 = chunk__183291;
        var G__183296 = count__183292;
        var G__183297 = i__183293 + 1;
        seq__183290 = G__183294;
        chunk__183291 = G__183295;
        count__183292 = G__183296;
        i__183293 = G__183297;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__183290);
        if (temp__4092__auto__) {
          var seq__183290__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__183290__$1)) {
            var c__4146__auto__ = cljs.core.chunk_first.call(null, seq__183290__$1);
            var G__183298 = cljs.core.chunk_rest.call(null, seq__183290__$1);
            var G__183299 = c__4146__auto__;
            var G__183300 = cljs.core.count.call(null, c__4146__auto__);
            var G__183301 = 0;
            seq__183290 = G__183298;
            chunk__183291 = G__183299;
            count__183292 = G__183300;
            i__183293 = G__183301;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__183290__$1);
            cljs.core._write.call(null, writer, s);
            var G__183302 = cljs.core.next.call(null, seq__183290__$1);
            var G__183303 = null;
            var G__183304 = 0;
            var G__183305 = 0;
            seq__183290 = G__183302;
            chunk__183291 = G__183303;
            count__183292 = G__183304;
            i__183293 = G__183305;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__183306) {
    var writer = cljs.core.first(arglist__183306);
    var ss = cljs.core.rest(arglist__183306);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj183308 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj183308;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3392__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = function() {
              var G__183314 = obj;
              if (G__183314) {
                var bit__4048__auto__ = G__183314.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4048__auto__ || G__183314.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__183314.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__183314);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__183314);
              }
            }();
            if (and__3392__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__183315 = obj;
              if (G__183315) {
                var bit__4041__auto__ = G__183315.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4041__auto__ || G__183315.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__183317 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__183317;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__183316 = obj;
                              if (G__183316) {
                                var bit__4048__auto__ = G__183316.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4048__auto__ || G__183316.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__183316.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__183316);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__183316);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__183322 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__183323 = null;
  var count__183324 = 0;
  var i__183325 = 0;
  while (true) {
    if (i__183325 < count__183324) {
      var obj = cljs.core._nth.call(null, chunk__183323, i__183325);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__183326 = seq__183322;
      var G__183327 = chunk__183323;
      var G__183328 = count__183324;
      var G__183329 = i__183325 + 1;
      seq__183322 = G__183326;
      chunk__183323 = G__183327;
      count__183324 = G__183328;
      i__183325 = G__183329;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__183322);
      if (temp__4092__auto__) {
        var seq__183322__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__183322__$1)) {
          var c__4146__auto__ = cljs.core.chunk_first.call(null, seq__183322__$1);
          var G__183330 = cljs.core.chunk_rest.call(null, seq__183322__$1);
          var G__183331 = c__4146__auto__;
          var G__183332 = cljs.core.count.call(null, c__4146__auto__);
          var G__183333 = 0;
          seq__183322 = G__183330;
          chunk__183323 = G__183331;
          count__183324 = G__183332;
          i__183325 = G__183333;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__183322__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__183334 = cljs.core.next.call(null, seq__183322__$1);
          var G__183335 = null;
          var G__183336 = 0;
          var G__183337 = 0;
          seq__183322 = G__183334;
          chunk__183323 = G__183335;
          count__183324 = G__183336;
          i__183325 = G__183337;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__183338) {
    var objs = cljs.core.seq(arglist__183338);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__183339) {
    var objs = cljs.core.seq(arglist__183339);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__183340) {
    var objs = cljs.core.seq(arglist__183340);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__183341) {
    var objs = cljs.core.seq(arglist__183341);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__183342) {
    var objs = cljs.core.seq(arglist__183342);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__183343) {
    var objs = cljs.core.seq(arglist__183343);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__183344) {
    var objs = cljs.core.seq(arglist__183344);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__183345) {
    var objs = cljs.core.seq(arglist__183345);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__183346 = cljs.core.seq.call(null, self__.watches);
  var chunk__183347 = null;
  var count__183348 = 0;
  var i__183349 = 0;
  while (true) {
    if (i__183349 < count__183348) {
      var vec__183350 = cljs.core._nth.call(null, chunk__183347, i__183349);
      var key = cljs.core.nth.call(null, vec__183350, 0, null);
      var f = cljs.core.nth.call(null, vec__183350, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__183352 = seq__183346;
      var G__183353 = chunk__183347;
      var G__183354 = count__183348;
      var G__183355 = i__183349 + 1;
      seq__183346 = G__183352;
      chunk__183347 = G__183353;
      count__183348 = G__183354;
      i__183349 = G__183355;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__183346);
      if (temp__4092__auto__) {
        var seq__183346__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__183346__$1)) {
          var c__4146__auto__ = cljs.core.chunk_first.call(null, seq__183346__$1);
          var G__183356 = cljs.core.chunk_rest.call(null, seq__183346__$1);
          var G__183357 = c__4146__auto__;
          var G__183358 = cljs.core.count.call(null, c__4146__auto__);
          var G__183359 = 0;
          seq__183346 = G__183356;
          chunk__183347 = G__183357;
          count__183348 = G__183358;
          i__183349 = G__183359;
          continue;
        } else {
          var vec__183351 = cljs.core.first.call(null, seq__183346__$1);
          var key = cljs.core.nth.call(null, vec__183351, 0, null);
          var f = cljs.core.nth.call(null, vec__183351, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__183360 = cljs.core.next.call(null, seq__183346__$1);
          var G__183361 = null;
          var G__183362 = 0;
          var G__183363 = 0;
          seq__183346 = G__183360;
          chunk__183347 = G__183361;
          count__183348 = G__183362;
          i__183349 = G__183363;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__183367__delegate = function(x, p__183364) {
      var map__183366 = p__183364;
      var map__183366__$1 = cljs.core.seq_QMARK_.call(null, map__183366) ? cljs.core.apply.call(null, cljs.core.hash_map, map__183366) : map__183366;
      var validator = cljs.core.get.call(null, map__183366__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__183366__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__183367 = function(x, var_args) {
      var p__183364 = null;
      if (arguments.length > 1) {
        p__183364 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__183367__delegate.call(this, x, p__183364);
    };
    G__183367.cljs$lang$maxFixedArity = 1;
    G__183367.cljs$lang$applyTo = function(arglist__183368) {
      var x = cljs.core.first(arglist__183368);
      var p__183364 = cljs.core.rest(arglist__183368);
      return G__183367__delegate(x, p__183364);
    };
    G__183367.cljs$core$IFn$_invoke$arity$variadic = G__183367__delegate;
    return G__183367;
  }();
  atom = function(x, var_args) {
    var p__183364 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_183369 = a.validator;
  if (validate_183369 == null) {
  } else {
    if (cljs.core.truth_(validate_183369.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_183370 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_183370, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__183371__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__183371 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__183371__delegate.call(this, a, f, x, y, z, more);
    };
    G__183371.cljs$lang$maxFixedArity = 5;
    G__183371.cljs$lang$applyTo = function(arglist__183372) {
      var a = cljs.core.first(arglist__183372);
      arglist__183372 = cljs.core.next(arglist__183372);
      var f = cljs.core.first(arglist__183372);
      arglist__183372 = cljs.core.next(arglist__183372);
      var x = cljs.core.first(arglist__183372);
      arglist__183372 = cljs.core.next(arglist__183372);
      var y = cljs.core.first(arglist__183372);
      arglist__183372 = cljs.core.next(arglist__183372);
      var z = cljs.core.first(arglist__183372);
      var more = cljs.core.rest(arglist__183372);
      return G__183371__delegate(a, f, x, y, z, more);
    };
    G__183371.cljs$core$IFn$_invoke$arity$variadic = G__183371__delegate;
    return G__183371;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__183373) {
    var iref = cljs.core.first(arglist__183373);
    arglist__183373 = cljs.core.next(arglist__183373);
    var f = cljs.core.first(arglist__183373);
    var args = cljs.core.rest(arglist__183373);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__183374) {
    var map__183375 = p__183374;
    var map__183375__$1 = cljs.core.seq_QMARK_.call(null, map__183375) ? cljs.core.apply.call(null, cljs.core.hash_map, map__183375) : map__183375;
    var curr_state = map__183375__$1;
    var done = cljs.core.get.call(null, map__183375__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj183377 = {};
  return obj183377;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__183379 = k;
    if (G__183379) {
      var bit__4048__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3404__auto__ = bit__4048__auto__;
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          return G__183379.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__183379.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__183379);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__183379);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__183393 = x;
      if (G__183393) {
        var bit__4048__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3404__auto__ = bit__4048__auto__;
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return G__183393.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__183393.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__183393);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__183393);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj183395 = {};
              return obj183395;
            }();
            var seq__183396_183406 = cljs.core.seq.call(null, x);
            var chunk__183397_183407 = null;
            var count__183398_183408 = 0;
            var i__183399_183409 = 0;
            while (true) {
              if (i__183399_183409 < count__183398_183408) {
                var vec__183400_183410 = cljs.core._nth.call(null, chunk__183397_183407, i__183399_183409);
                var k_183411 = cljs.core.nth.call(null, vec__183400_183410, 0, null);
                var v_183412 = cljs.core.nth.call(null, vec__183400_183410, 1, null);
                m[cljs.core.key__GT_js.call(null, k_183411)] = clj__GT_js.call(null, v_183412);
                var G__183413 = seq__183396_183406;
                var G__183414 = chunk__183397_183407;
                var G__183415 = count__183398_183408;
                var G__183416 = i__183399_183409 + 1;
                seq__183396_183406 = G__183413;
                chunk__183397_183407 = G__183414;
                count__183398_183408 = G__183415;
                i__183399_183409 = G__183416;
                continue;
              } else {
                var temp__4092__auto___183417 = cljs.core.seq.call(null, seq__183396_183406);
                if (temp__4092__auto___183417) {
                  var seq__183396_183418__$1 = temp__4092__auto___183417;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__183396_183418__$1)) {
                    var c__4146__auto___183419 = cljs.core.chunk_first.call(null, seq__183396_183418__$1);
                    var G__183420 = cljs.core.chunk_rest.call(null, seq__183396_183418__$1);
                    var G__183421 = c__4146__auto___183419;
                    var G__183422 = cljs.core.count.call(null, c__4146__auto___183419);
                    var G__183423 = 0;
                    seq__183396_183406 = G__183420;
                    chunk__183397_183407 = G__183421;
                    count__183398_183408 = G__183422;
                    i__183399_183409 = G__183423;
                    continue;
                  } else {
                    var vec__183401_183424 = cljs.core.first.call(null, seq__183396_183418__$1);
                    var k_183425 = cljs.core.nth.call(null, vec__183401_183424, 0, null);
                    var v_183426 = cljs.core.nth.call(null, vec__183401_183424, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_183425)] = clj__GT_js.call(null, v_183426);
                    var G__183427 = cljs.core.next.call(null, seq__183396_183418__$1);
                    var G__183428 = null;
                    var G__183429 = 0;
                    var G__183430 = 0;
                    seq__183396_183406 = G__183427;
                    chunk__183397_183407 = G__183428;
                    count__183398_183408 = G__183429;
                    i__183399_183409 = G__183430;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__183402_183431 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__183403_183432 = null;
              var count__183404_183433 = 0;
              var i__183405_183434 = 0;
              while (true) {
                if (i__183405_183434 < count__183404_183433) {
                  var x_183435__$1 = cljs.core._nth.call(null, chunk__183403_183432, i__183405_183434);
                  arr.push(x_183435__$1);
                  var G__183436 = seq__183402_183431;
                  var G__183437 = chunk__183403_183432;
                  var G__183438 = count__183404_183433;
                  var G__183439 = i__183405_183434 + 1;
                  seq__183402_183431 = G__183436;
                  chunk__183403_183432 = G__183437;
                  count__183404_183433 = G__183438;
                  i__183405_183434 = G__183439;
                  continue;
                } else {
                  var temp__4092__auto___183440 = cljs.core.seq.call(null, seq__183402_183431);
                  if (temp__4092__auto___183440) {
                    var seq__183402_183441__$1 = temp__4092__auto___183440;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__183402_183441__$1)) {
                      var c__4146__auto___183442 = cljs.core.chunk_first.call(null, seq__183402_183441__$1);
                      var G__183443 = cljs.core.chunk_rest.call(null, seq__183402_183441__$1);
                      var G__183444 = c__4146__auto___183442;
                      var G__183445 = cljs.core.count.call(null, c__4146__auto___183442);
                      var G__183446 = 0;
                      seq__183402_183431 = G__183443;
                      chunk__183403_183432 = G__183444;
                      count__183404_183433 = G__183445;
                      i__183405_183434 = G__183446;
                      continue;
                    } else {
                      var x_183447__$1 = cljs.core.first.call(null, seq__183402_183441__$1);
                      arr.push(x_183447__$1);
                      var G__183448 = cljs.core.next.call(null, seq__183402_183441__$1);
                      var G__183449 = null;
                      var G__183450 = 0;
                      var G__183451 = 0;
                      seq__183402_183431 = G__183448;
                      chunk__183403_183432 = G__183449;
                      count__183404_183433 = G__183450;
                      i__183405_183434 = G__183451;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj183453 = {};
  return obj183453;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__183474__delegate = function(x, opts) {
      if (function() {
        var G__183464 = x;
        if (G__183464) {
          var bit__4048__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3404__auto__ = bit__4048__auto__;
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return G__183464.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__183464.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__183464);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__183464);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__183465 = opts;
          var map__183465__$1 = cljs.core.seq_QMARK_.call(null, map__183465) ? cljs.core.apply.call(null, cljs.core.hash_map, map__183465) : map__183465;
          var keywordize_keys = cljs.core.get.call(null, map__183465__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__183465, map__183465__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4115__auto__ = function(map__183465, map__183465__$1, keywordize_keys, keyfn) {
                          return function iter__183470(s__183471) {
                            return new cljs.core.LazySeq(null, function(map__183465, map__183465__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__183471__$1 = s__183471;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__183471__$1);
                                  if (temp__4092__auto__) {
                                    var s__183471__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__183471__$2)) {
                                      var c__4113__auto__ = cljs.core.chunk_first.call(null, s__183471__$2);
                                      var size__4114__auto__ = cljs.core.count.call(null, c__4113__auto__);
                                      var b__183473 = cljs.core.chunk_buffer.call(null, size__4114__auto__);
                                      if (function() {
                                        var i__183472 = 0;
                                        while (true) {
                                          if (i__183472 < size__4114__auto__) {
                                            var k = cljs.core._nth.call(null, c__4113__auto__, i__183472);
                                            cljs.core.chunk_append.call(null, b__183473, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__183475 = i__183472 + 1;
                                            i__183472 = G__183475;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__183473), iter__183470.call(null, cljs.core.chunk_rest.call(null, s__183471__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__183473), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__183471__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__183470.call(null, cljs.core.rest.call(null, s__183471__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__183465, map__183465__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__183465, map__183465__$1, keywordize_keys, keyfn);
                        return iter__4115__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__183465, map__183465__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__183474 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__183474__delegate.call(this, x, opts);
    };
    G__183474.cljs$lang$maxFixedArity = 1;
    G__183474.cljs$lang$applyTo = function(arglist__183476) {
      var x = cljs.core.first(arglist__183476);
      var opts = cljs.core.rest(arglist__183476);
      return G__183474__delegate(x, opts);
    };
    G__183474.cljs$core$IFn$_invoke$arity$variadic = G__183474__delegate;
    return G__183474;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__183477__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__183477 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__183477__delegate.call(this, args);
    };
    G__183477.cljs$lang$maxFixedArity = 0;
    G__183477.cljs$lang$applyTo = function(arglist__183478) {
      var args = cljs.core.seq(arglist__183478);
      return G__183477__delegate(args);
    };
    G__183477.cljs$core$IFn$_invoke$arity$variadic = G__183477__delegate;
    return G__183477;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__183479 = ret;
        f = G__183479;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__183480__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__183480 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__183480__delegate.call(this, f, args);
    };
    G__183480.cljs$lang$maxFixedArity = 1;
    G__183480.cljs$lang$applyTo = function(arglist__183481) {
      var f = cljs.core.first(arglist__183481);
      var args = cljs.core.rest(arglist__183481);
      return G__183480__delegate(f, args);
    };
    G__183480.cljs$core$IFn$_invoke$arity$variadic = G__183480__delegate;
    return G__183480;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__183482) {
    var f = cljs.core.first(arglist__183482);
    var args = cljs.core.rest(arglist__183482);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3404__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3404__auto__) {
      return or__3404__auto__;
    } else {
      var or__3404__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3404__auto____$1) {
        return or__3404__auto____$1;
      } else {
        var and__3392__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3392__auto__) {
          var and__3392__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3392__auto____$1) {
            var and__3392__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3392__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__183483 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__183484 = i + 1;
                  ret = G__183483;
                  i = G__183484;
                  continue;
                }
                break;
              }
            } else {
              return and__3392__auto____$2;
            }
          } else {
            return and__3392__auto____$1;
          }
        } else {
          return and__3392__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3404__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3404__auto__)) {
      return or__3404__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__183485_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__183485_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__183485_SHARP_), cljs.core.second.call(null, p1__183485_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__183486_SHARP_, p2__183487_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__183486_SHARP_, p2__183487_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3404__auto__ = cljs.core.truth_(function() {
    var and__3392__auto__ = xprefs;
    if (cljs.core.truth_(and__3392__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3392__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    var or__3404__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__183488 = cljs.core.rest.call(null, ps);
          ps = G__183488;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3404__auto____$1)) {
      return or__3404__auto____$1;
    } else {
      var or__3404__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__183489 = cljs.core.rest.call(null, ps);
            ps = G__183489;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3404__auto____$2)) {
        return or__3404__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3404__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__183492) {
    var vec__183493 = p__183492;
    var k = cljs.core.nth.call(null, vec__183493, 0, null);
    var _ = cljs.core.nth.call(null, vec__183493, 1, null);
    var e = vec__183493;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3404__auto__ = be == null;
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj183495 = {};
  return obj183495;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._reset[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._reset["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._add_method[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._add_method["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._remove_method[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._remove_method["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._prefer_method[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._get_method[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._get_method["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._methods[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._methods["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._prefers[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._prefers["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._dispatch[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._dispatch["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__183496__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__183496 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__183496__delegate.call(this, _, args);
  };
  G__183496.cljs$lang$maxFixedArity = 1;
  G__183496.cljs$lang$applyTo = function(arglist__183497) {
    var _ = cljs.core.first(arglist__183497);
    var args = cljs.core.rest(arglist__183497);
    return G__183496__delegate(_, args);
  };
  G__183496.cljs$core$IFn$_invoke$arity$variadic = G__183496__delegate;
  return G__183496;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$ICloneable$ = true;
cljs.core.UUID.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.UUID(self__.uuid);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3969__auto__, writer__3970__auto__, opts__3971__auto__) {
  return cljs.core._write.call(null, writer__3970__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("cljs_uuid.core");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid.core.make_random = function make_random() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16);
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16);
  };
  return new cljs.core.UUID((new goog.string.StringBuffer(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null))).toString());
};
cljs_uuid.core.make_v4 = cljs_uuid.core.make_random;
cljs_uuid.core.make_random_string = function make_random_string() {
  return cljs_uuid.core.make_random.call(null).uuid;
};
goog.provide("chaperone.crossover.user");
goog.require("cljs.core");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.user.User = function(id, firstname, lastname, password, email, photo, last_logged_in, __meta, __extmap) {
  this.id = id;
  this.firstname = firstname;
  this.lastname = lastname;
  this.password = password;
  this.email = email;
  this.photo = photo;
  this.last_logged_in = last_logged_in;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 7) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3979__auto__) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, this__3979__auto____$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3984__auto__, k__3985__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3984__auto____$1, k__3985__auto__, null);
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3986__auto__, k186006, else__3987__auto__) {
  var self__ = this;
  var this__3986__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k186006, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k186006, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229))) {
      return self__.firstname;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k186006, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043))) {
        return self__.lastname;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k186006, new cljs.core.Keyword(null, "password", "password", 2230889997))) {
          return self__.password;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k186006, new cljs.core.Keyword(null, "email", "email", 1110523662))) {
            return self__.email;
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, k186006, new cljs.core.Keyword(null, "photo", "photo", 1120547236))) {
              return self__.photo;
            } else {
              if (cljs.core.keyword_identical_QMARK_.call(null, k186006, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907))) {
                return self__.last_logged_in;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return cljs.core.get.call(null, self__.__extmap, k186006, else__3987__auto__);
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3991__auto__, k__3992__auto__, G__186005) {
  var self__ = this;
  var this__3991__auto____$1 = this;
  var pred__186008 = cljs.core.keyword_identical_QMARK_;
  var expr__186009 = k__3992__auto__;
  if (cljs.core.truth_(pred__186008.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__186009))) {
    return new chaperone.crossover.user.User(G__186005, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__186008.call(null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), expr__186009))) {
      return new chaperone.crossover.user.User(self__.id, G__186005, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__186008.call(null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), expr__186009))) {
        return new chaperone.crossover.user.User(self__.id, self__.firstname, G__186005, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__186008.call(null, new cljs.core.Keyword(null, "password", "password", 2230889997), expr__186009))) {
          return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, G__186005, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__186008.call(null, new cljs.core.Keyword(null, "email", "email", 1110523662), expr__186009))) {
            return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, G__186005, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__186008.call(null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), expr__186009))) {
              return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, G__186005, self__.last_logged_in, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__186008.call(null, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), expr__186009))) {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, G__186005, self__.__meta, self__.__extmap, null);
              } else {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3992__auto__, G__186005), null);
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3998__auto__, writer__3999__auto__, opts__4000__auto__) {
  var self__ = this;
  var this__3998__auto____$1 = this;
  var pr_pair__4001__auto__ = function(keyval__4002__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, cljs.core.pr_writer, "", " ", "", opts__4000__auto__, keyval__4002__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, pr_pair__4001__auto__, "#chaperone.crossover.user.User{", ", ", "}", opts__4000__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3989__auto__, entry__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3990__auto__)) {
    return cljs.core._assoc.call(null, this__3989__auto____$1, cljs.core._nth.call(null, entry__3990__auto__, 0), cljs.core._nth.call(null, entry__3990__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3989__auto____$1, entry__3990__auto__);
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3996__auto__) {
  var self__ = this;
  var this__3996__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3988__auto__) {
  var self__ = this;
  var this__3988__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.user.User.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3980__auto__, other__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3392__auto__ = other__3981__auto__;
    if (cljs.core.truth_(and__3392__auto__)) {
      return this__3980__auto____$1.constructor === other__3981__auto__.constructor && cljs.core.equiv_map.call(null, this__3980__auto____$1, other__3981__auto__);
    } else {
      return and__3392__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3983__auto__, G__186005) {
  var self__ = this;
  var this__3983__auto____$1 = this;
  return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, G__186005, self__.__extmap, self__.__hash);
};
chaperone.crossover.user.User.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3982__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.user.User.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3993__auto__, k__3994__auto__) {
  var self__ = this;
  var this__3993__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), null, new cljs.core.Keyword(null, "email", "email", 1110523662), null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), null, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), null, new cljs.core.Keyword(null, "password", "password", 2230889997), null], null), null), k__3994__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3993__auto____$1), self__.__meta), k__3994__auto__);
  } else {
    return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3994__auto__)), null);
  }
};
chaperone.crossover.user.User.cljs$lang$type = true;
chaperone.crossover.user.User.cljs$lang$ctorPrSeq = function(this__4018__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.user/User");
};
chaperone.crossover.user.User.cljs$lang$ctorPrWriter = function(this__4018__auto__, writer__4019__auto__) {
  return cljs.core._write.call(null, writer__4019__auto__, "chaperone.crossover.user/User");
};
chaperone.crossover.user.__GT_User = function __GT_User(id, firstname, lastname, password, email, photo, last_logged_in) {
  return new chaperone.crossover.user.User(id, firstname, lastname, password, email, photo, last_logged_in);
};
chaperone.crossover.user.map__GT_User = function map__GT_User(G__186007) {
  return new chaperone.crossover.user.User((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__186007), (new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(G__186007), (new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(G__186007), (new cljs.core.Keyword(null, "password", "password", 2230889997)).cljs$core$IFn$_invoke$arity$1(G__186007), (new cljs.core.Keyword(null, "email", 
  "email", 1110523662)).cljs$core$IFn$_invoke$arity$1(G__186007), (new cljs.core.Keyword(null, "photo", "photo", 1120547236)).cljs$core$IFn$_invoke$arity$1(G__186007), (new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)).cljs$core$IFn$_invoke$arity$1(G__186007), null, cljs.core.dissoc.call(null, G__186007, new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), new cljs.core.Keyword(null, "lastname", "lastname", 
  3850225043), new cljs.core.Keyword(null, "password", "password", 2230889997), new cljs.core.Keyword(null, "email", "email", 1110523662), new cljs.core.Keyword(null, "photo", "photo", 1120547236), new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)));
};
chaperone.crossover.user.new_user = function() {
  var new_user__delegate = function(firstname, lastname, email, password, p__186011) {
    var map__186013 = p__186011;
    var map__186013__$1 = cljs.core.seq_QMARK_.call(null, map__186013) ? cljs.core.apply.call(null, cljs.core.hash_map, map__186013) : map__186013;
    var last_logged_in = cljs.core.get.call(null, map__186013__$1, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907));
    var photo = cljs.core.get.call(null, map__186013__$1, new cljs.core.Keyword(null, "photo", "photo", 1120547236));
    return chaperone.crossover.user.__GT_User.call(null, cljs_uuid.core.make_random_string.call(null), firstname, lastname, password, email, photo, last_logged_in);
  };
  var new_user = function(firstname, lastname, email, password, var_args) {
    var p__186011 = null;
    if (arguments.length > 4) {
      p__186011 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
    }
    return new_user__delegate.call(this, firstname, lastname, email, password, p__186011);
  };
  new_user.cljs$lang$maxFixedArity = 4;
  new_user.cljs$lang$applyTo = function(arglist__186014) {
    var firstname = cljs.core.first(arglist__186014);
    arglist__186014 = cljs.core.next(arglist__186014);
    var lastname = cljs.core.first(arglist__186014);
    arglist__186014 = cljs.core.next(arglist__186014);
    var email = cljs.core.first(arglist__186014);
    arglist__186014 = cljs.core.next(arglist__186014);
    var password = cljs.core.first(arglist__186014);
    var p__186011 = cljs.core.rest(arglist__186014);
    return new_user__delegate(firstname, lastname, email, password, p__186011);
  };
  new_user.cljs$core$IFn$_invoke$arity$variadic = new_user__delegate;
  return new_user;
}();
chaperone.crossover.user.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "chaperone.crossover.user.User", "chaperone.crossover.user.User", -826432028, null), chaperone.crossover.user.map__GT_User], null);
};
goog.provide("chaperone.crossover.rpc");
goog.require("cljs.core");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.rpc.Request = function(id, category, action, data, __meta, __extmap) {
  this.id = id;
  this.category = category;
  this.action = action;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3979__auto__) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, this__3979__auto____$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3984__auto__, k__3985__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3984__auto____$1, k__3985__auto__, null);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3986__auto__, k183499, else__3987__auto__) {
  var self__ = this;
  var this__3986__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k183499, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k183499, new cljs.core.Keyword(null, "category", "category", 1064415344))) {
      return self__.category;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k183499, new cljs.core.Keyword(null, "action", "action", 3885920680))) {
        return self__.action;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k183499, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
          return self__.data;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.get.call(null, self__.__extmap, k183499, else__3987__auto__);
          } else {
            return null;
          }
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3991__auto__, k__3992__auto__, G__183498) {
  var self__ = this;
  var this__3991__auto____$1 = this;
  var pred__183501 = cljs.core.keyword_identical_QMARK_;
  var expr__183502 = k__3992__auto__;
  if (cljs.core.truth_(pred__183501.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__183502))) {
    return new chaperone.crossover.rpc.Request(G__183498, self__.category, self__.action, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__183501.call(null, new cljs.core.Keyword(null, "category", "category", 1064415344), expr__183502))) {
      return new chaperone.crossover.rpc.Request(self__.id, G__183498, self__.action, self__.data, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__183501.call(null, new cljs.core.Keyword(null, "action", "action", 3885920680), expr__183502))) {
        return new chaperone.crossover.rpc.Request(self__.id, self__.category, G__183498, self__.data, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__183501.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__183502))) {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, G__183498, self__.__meta, self__.__extmap, null);
        } else {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3992__auto__, G__183498), null);
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3998__auto__, writer__3999__auto__, opts__4000__auto__) {
  var self__ = this;
  var this__3998__auto____$1 = this;
  var pr_pair__4001__auto__ = function(keyval__4002__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, cljs.core.pr_writer, "", " ", "", opts__4000__auto__, keyval__4002__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, pr_pair__4001__auto__, "#chaperone.crossover.rpc.Request{", ", ", "}", opts__4000__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3989__auto__, entry__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3990__auto__)) {
    return cljs.core._assoc.call(null, this__3989__auto____$1, cljs.core._nth.call(null, entry__3990__auto__, 0), cljs.core._nth.call(null, entry__3990__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3989__auto____$1, entry__3990__auto__);
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3996__auto__) {
  var self__ = this;
  var this__3996__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3988__auto__) {
  var self__ = this;
  var this__3988__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3980__auto__, other__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3392__auto__ = other__3981__auto__;
    if (cljs.core.truth_(and__3392__auto__)) {
      return this__3980__auto____$1.constructor === other__3981__auto__.constructor && cljs.core.equiv_map.call(null, this__3980__auto____$1, other__3981__auto__);
    } else {
      return and__3392__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3983__auto__, G__183498) {
  var self__ = this;
  var this__3983__auto____$1 = this;
  return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, G__183498, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3982__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3993__auto__, k__3994__auto__) {
  var self__ = this;
  var this__3993__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "action", "action", 3885920680), null, new cljs.core.Keyword(null, "id", "id", 1013907597), null, new cljs.core.Keyword(null, "category", "category", 1064415344), null], null), null), k__3994__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3993__auto____$1), self__.__meta), k__3994__auto__);
  } else {
    return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3994__auto__)), null);
  }
};
chaperone.crossover.rpc.Request.cljs$lang$type = true;
chaperone.crossover.rpc.Request.cljs$lang$ctorPrSeq = function(this__4018__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.Request.cljs$lang$ctorPrWriter = function(this__4018__auto__, writer__4019__auto__) {
  return cljs.core._write.call(null, writer__4019__auto__, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.__GT_Request = function __GT_Request(id, category, action, data) {
  return new chaperone.crossover.rpc.Request(id, category, action, data);
};
chaperone.crossover.rpc.map__GT_Request = function map__GT_Request(G__183500) {
  return new chaperone.crossover.rpc.Request((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__183500), (new cljs.core.Keyword(null, "category", "category", 1064415344)).cljs$core$IFn$_invoke$arity$1(G__183500), (new cljs.core.Keyword(null, "action", "action", 3885920680)).cljs$core$IFn$_invoke$arity$1(G__183500), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__183500), null, cljs.core.dissoc.call(null, G__183500, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), new cljs.core.Keyword(null, "category", "category", 1064415344), new cljs.core.Keyword(null, "action", "action", 3885920680), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.Response = function(request, data, __meta, __extmap) {
  this.request = request;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3979__auto__) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, this__3979__auto____$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3984__auto__, k__3985__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3984__auto____$1, k__3985__auto__, null);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3986__auto__, k183505, else__3987__auto__) {
  var self__ = this;
  var this__3986__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k183505, new cljs.core.Keyword(null, "request", "request", 2109597185))) {
    return self__.request;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k183505, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
      return self__.data;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k183505, else__3987__auto__);
      } else {
        return null;
      }
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3991__auto__, k__3992__auto__, G__183504) {
  var self__ = this;
  var this__3991__auto____$1 = this;
  var pred__183507 = cljs.core.keyword_identical_QMARK_;
  var expr__183508 = k__3992__auto__;
  if (cljs.core.truth_(pred__183507.call(null, new cljs.core.Keyword(null, "request", "request", 2109597185), expr__183508))) {
    return new chaperone.crossover.rpc.Response(G__183504, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__183507.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__183508))) {
      return new chaperone.crossover.rpc.Response(self__.request, G__183504, self__.__meta, self__.__extmap, null);
    } else {
      return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3992__auto__, G__183504), null);
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3998__auto__, writer__3999__auto__, opts__4000__auto__) {
  var self__ = this;
  var this__3998__auto____$1 = this;
  var pr_pair__4001__auto__ = function(keyval__4002__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, cljs.core.pr_writer, "", " ", "", opts__4000__auto__, keyval__4002__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, pr_pair__4001__auto__, "#chaperone.crossover.rpc.Response{", ", ", "}", opts__4000__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3989__auto__, entry__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3990__auto__)) {
    return cljs.core._assoc.call(null, this__3989__auto____$1, cljs.core._nth.call(null, entry__3990__auto__, 0), cljs.core._nth.call(null, entry__3990__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3989__auto____$1, entry__3990__auto__);
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3996__auto__) {
  var self__ = this;
  var this__3996__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3988__auto__) {
  var self__ = this;
  var this__3988__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3980__auto__, other__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3392__auto__ = other__3981__auto__;
    if (cljs.core.truth_(and__3392__auto__)) {
      return this__3980__auto____$1.constructor === other__3981__auto__.constructor && cljs.core.equiv_map.call(null, this__3980__auto____$1, other__3981__auto__);
    } else {
      return and__3392__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3983__auto__, G__183504) {
  var self__ = this;
  var this__3983__auto____$1 = this;
  return new chaperone.crossover.rpc.Response(self__.request, self__.data, G__183504, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3982__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3993__auto__, k__3994__auto__) {
  var self__ = this;
  var this__3993__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "request", "request", 2109597185), null], null), null), k__3994__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3993__auto____$1), self__.__meta), k__3994__auto__);
  } else {
    return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3994__auto__)), null);
  }
};
chaperone.crossover.rpc.Response.cljs$lang$type = true;
chaperone.crossover.rpc.Response.cljs$lang$ctorPrSeq = function(this__4018__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.Response.cljs$lang$ctorPrWriter = function(this__4018__auto__, writer__4019__auto__) {
  return cljs.core._write.call(null, writer__4019__auto__, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.__GT_Response = function __GT_Response(request, data) {
  return new chaperone.crossover.rpc.Response(request, data);
};
chaperone.crossover.rpc.map__GT_Response = function map__GT_Response(G__183506) {
  return new chaperone.crossover.rpc.Response((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(G__183506), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__183506), null, cljs.core.dissoc.call(null, G__183506, new cljs.core.Keyword(null, "request", "request", 2109597185), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.new_request = function new_request(category, action, data) {
  return chaperone.crossover.rpc.__GT_Request.call(null, cljs_uuid.core.make_random.call(null), category, action, data);
};
chaperone.crossover.rpc.new_response = function new_response(request, data) {
  return chaperone.crossover.rpc.__GT_Response.call(null, request, data);
};
chaperone.crossover.rpc.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "chaperone.crossover.rpc.Request", "chaperone.crossover.rpc.Request", -174529060, null), chaperone.crossover.rpc.map__GT_Request, new cljs.core.Symbol(null, "chaperone.crossover.rpc.Response", "chaperone.crossover.rpc.Response", 908805862, null), chaperone.crossover.rpc.map__GT_Response], null);
};
chaperone.crossover.rpc.all_edn_readers = function all_edn_readers() {
  return cljs.core.merge.call(null, chaperone.crossover.rpc.edn_readers.call(null), chaperone.crossover.user.edn_readers.call(null));
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj183511 = {};
  return obj183511;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3392__auto__ = reader;
    if (and__3392__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4025__auto__ = reader == null ? null : reader;
    return function() {
      var or__3404__auto__ = cljs.reader.read_char[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.reader.read_char["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3392__auto__ = reader;
    if (and__3392__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4025__auto__ = reader == null ? null : reader;
    return function() {
      var or__3404__auto__ = cljs.reader.unread[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.reader.unread["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3404__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__183512) {
    var rdr = cljs.core.first(arglist__183512);
    var msg = cljs.core.rest(arglist__183512);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3392__auto__ = !(ch === "#");
  if (and__3392__auto__) {
    var and__3392__auto____$1 = !(ch === "'");
    if (and__3392__auto____$1) {
      var and__3392__auto____$2 = !(ch === ":");
      if (and__3392__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3392__auto____$2;
      }
    } else {
      return and__3392__auto____$1;
    }
  } else {
    return and__3392__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__183513 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__183514 = cljs.reader.read_char.call(null, rdr);
      sb = G__183513;
      ch = G__183514;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__183515 = cljs.reader.read_char.call(null, rdr);
      ch = G__183515;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__183516 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__183516;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__183517 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__183517;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3404__auto__ = ch == null;
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3404__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__183518 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__183519 = cljs.reader.read_char.call(null, reader);
      buffer = G__183518;
      ch = G__183519;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__183520 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__183521 = cljs.reader.read_char.call(null, reader);
        buffer = G__183520;
        ch = G__183521;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__183522 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__183523 = cljs.reader.read_char.call(null, reader);
            buffer = G__183522;
            ch = G__183523;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__183525 = o;
    if (G__183525) {
      var bit__4048__auto__ = G__183525.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4048__auto__ || G__183525.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__183525.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__183525);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__183525);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__183526 = reader;
        var G__183527 = eof_is_error;
        var G__183528 = sentinel;
        var G__183529 = is_recursive;
        reader = G__183526;
        eof_is_error = G__183527;
        sentinel = G__183528;
        is_recursive = G__183529;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__183530 = cljs.reader.read_comment.call(null, reader, ch);
          var G__183531 = eof_is_error;
          var G__183532 = sentinel;
          var G__183533 = is_recursive;
          reader = G__183530;
          eof_is_error = G__183531;
          sentinel = G__183532;
          is_recursive = G__183533;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__183534 = reader;
              var G__183535 = eof_is_error;
              var G__183536 = sentinel;
              var G__183537 = is_recursive;
              reader = G__183534;
              eof_is_error = G__183535;
              sentinel = G__183536;
              is_recursive = G__183537;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__183538 = b.append("0");
            b = G__183538;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__183540 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__183540, 0, null);
  var years = cljs.core.nth.call(null, vec__183540, 1, null);
  var months = cljs.core.nth.call(null, vec__183540, 2, null);
  var days = cljs.core.nth.call(null, vec__183540, 3, null);
  var hours = cljs.core.nth.call(null, vec__183540, 4, null);
  var minutes = cljs.core.nth.call(null, vec__183540, 5, null);
  var seconds = cljs.core.nth.call(null, vec__183540, 6, null);
  var fraction = cljs.core.nth.call(null, vec__183540, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__183540, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__183540, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__183540, 10, null);
  var v = vec__183540;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__183542 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__183542, 0, null);
    var months = cljs.core.nth.call(null, vec__183542, 1, null);
    var days = cljs.core.nth.call(null, vec__183542, 2, null);
    var hours = cljs.core.nth.call(null, vec__183542, 3, null);
    var minutes = cljs.core.nth.call(null, vec__183542, 4, null);
    var seconds = cljs.core.nth.call(null, vec__183542, 5, null);
    var ms = cljs.core.nth.call(null, vec__183542, 6, null);
    var offset = cljs.core.nth.call(null, vec__183542, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__183555_183567 = cljs.core.seq.call(null, form);
    var chunk__183556_183568 = null;
    var count__183557_183569 = 0;
    var i__183558_183570 = 0;
    while (true) {
      if (i__183558_183570 < count__183557_183569) {
        var x_183571 = cljs.core._nth.call(null, chunk__183556_183568, i__183558_183570);
        arr.push(x_183571);
        var G__183572 = seq__183555_183567;
        var G__183573 = chunk__183556_183568;
        var G__183574 = count__183557_183569;
        var G__183575 = i__183558_183570 + 1;
        seq__183555_183567 = G__183572;
        chunk__183556_183568 = G__183573;
        count__183557_183569 = G__183574;
        i__183558_183570 = G__183575;
        continue;
      } else {
        var temp__4092__auto___183576 = cljs.core.seq.call(null, seq__183555_183567);
        if (temp__4092__auto___183576) {
          var seq__183555_183577__$1 = temp__4092__auto___183576;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__183555_183577__$1)) {
            var c__4146__auto___183578 = cljs.core.chunk_first.call(null, seq__183555_183577__$1);
            var G__183579 = cljs.core.chunk_rest.call(null, seq__183555_183577__$1);
            var G__183580 = c__4146__auto___183578;
            var G__183581 = cljs.core.count.call(null, c__4146__auto___183578);
            var G__183582 = 0;
            seq__183555_183567 = G__183579;
            chunk__183556_183568 = G__183580;
            count__183557_183569 = G__183581;
            i__183558_183570 = G__183582;
            continue;
          } else {
            var x_183583 = cljs.core.first.call(null, seq__183555_183577__$1);
            arr.push(x_183583);
            var G__183584 = cljs.core.next.call(null, seq__183555_183577__$1);
            var G__183585 = null;
            var G__183586 = 0;
            var G__183587 = 0;
            seq__183555_183567 = G__183584;
            chunk__183556_183568 = G__183585;
            count__183557_183569 = G__183586;
            i__183558_183570 = G__183587;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj183560 = {};
        return obj183560;
      }();
      var seq__183561_183588 = cljs.core.seq.call(null, form);
      var chunk__183562_183589 = null;
      var count__183563_183590 = 0;
      var i__183564_183591 = 0;
      while (true) {
        if (i__183564_183591 < count__183563_183590) {
          var vec__183565_183592 = cljs.core._nth.call(null, chunk__183562_183589, i__183564_183591);
          var k_183593 = cljs.core.nth.call(null, vec__183565_183592, 0, null);
          var v_183594 = cljs.core.nth.call(null, vec__183565_183592, 1, null);
          obj[cljs.core.name.call(null, k_183593)] = v_183594;
          var G__183595 = seq__183561_183588;
          var G__183596 = chunk__183562_183589;
          var G__183597 = count__183563_183590;
          var G__183598 = i__183564_183591 + 1;
          seq__183561_183588 = G__183595;
          chunk__183562_183589 = G__183596;
          count__183563_183590 = G__183597;
          i__183564_183591 = G__183598;
          continue;
        } else {
          var temp__4092__auto___183599 = cljs.core.seq.call(null, seq__183561_183588);
          if (temp__4092__auto___183599) {
            var seq__183561_183600__$1 = temp__4092__auto___183599;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__183561_183600__$1)) {
              var c__4146__auto___183601 = cljs.core.chunk_first.call(null, seq__183561_183600__$1);
              var G__183602 = cljs.core.chunk_rest.call(null, seq__183561_183600__$1);
              var G__183603 = c__4146__auto___183601;
              var G__183604 = cljs.core.count.call(null, c__4146__auto___183601);
              var G__183605 = 0;
              seq__183561_183588 = G__183602;
              chunk__183562_183589 = G__183603;
              count__183563_183590 = G__183604;
              i__183564_183591 = G__183605;
              continue;
            } else {
              var vec__183566_183606 = cljs.core.first.call(null, seq__183561_183600__$1);
              var k_183607 = cljs.core.nth.call(null, vec__183566_183606, 0, null);
              var v_183608 = cljs.core.nth.call(null, vec__183566_183606, 1, null);
              obj[cljs.core.name.call(null, k_183607)] = v_183608;
              var G__183609 = cljs.core.next.call(null, seq__183561_183600__$1);
              var G__183610 = null;
              var G__183611 = 0;
              var G__183612 = 0;
              seq__183561_183588 = G__183609;
              chunk__183562_183589 = G__183610;
              count__183563_183590 = G__183611;
              i__183564_183591 = G__183612;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj185551 = {};
  return obj185551;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3392__auto__ = port;
    if (and__3392__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4025__auto__ = port == null ? null : port;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj185553 = {};
  return obj185553;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3392__auto__ = port;
    if (and__3392__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4025__auto__ = port == null ? null : port;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj185555 = {};
  return obj185555;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3392__auto__ = chan;
    if (and__3392__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4025__auto__ = chan == null ? null : chan;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj185557 = {};
  return obj185557;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3392__auto__ = h;
    if (and__3392__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4025__auto__ = h == null ? null : h;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3392__auto__ = h;
    if (and__3392__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4025__auto__ = h == null ? null : h;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj185559 = {};
  return obj185559;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3392__auto__ = b;
    if (and__3392__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4025__auto__ = b == null ? null : b;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3392__auto__ = b;
    if (and__3392__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4025__auto__ = b == null ? null : b;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3392__auto__ = b;
    if (and__3392__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4025__auto__ = b == null ? null : b;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t185577 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t185577 = function(f, fn_handler, meta185578) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta185578 = meta185578;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t185577.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t185577.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t185577";
    cljs.core.async.impl.ioc_helpers.t185577.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.ioc-helpers/t185577");
    };
    cljs.core.async.impl.ioc_helpers.t185577.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t185577.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t185577.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t185577.prototype.cljs$core$IMeta$_meta$arity$1 = function(_185579) {
      var self__ = this;
      var _185579__$1 = this;
      return self__.meta185578;
    };
    cljs.core.async.impl.ioc_helpers.t185577.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_185579, meta185578__$1) {
      var self__ = this;
      var _185579__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t185577(self__.f, self__.fn_handler, meta185578__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t185577 = function __GT_t185577(f__$1, fn_handler__$1, meta185578) {
      return new cljs.core.async.impl.ioc_helpers.t185577(f__$1, fn_handler__$1, meta185578);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t185577(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e185581) {
    if (e185581 instanceof Object) {
      var ex = e185581;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e185581;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_185584_185586 = state;
    statearr_185584_185586[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_185584_185586[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_185585_185587 = state;
    statearr_185585_185587[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_185585_185587[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_185590_185592 = state;
    statearr_185590_185592[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_185590_185592[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_185591_185593 = state;
    statearr_185591_185593[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_185591_185593[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__185594) {
    var map__185599 = p__185594;
    var map__185599__$1 = cljs.core.seq_QMARK_.call(null, map__185599) ? cljs.core.apply.call(null, cljs.core.hash_map, map__185599) : map__185599;
    var opts = map__185599__$1;
    var statearr_185600_185603 = state;
    statearr_185600_185603[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_185601_185604 = state;
      statearr_185601_185604[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_185602_185605 = state;
      statearr_185602_185605[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__185594 = null;
    if (arguments.length > 3) {
      p__185594 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__185594);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__185606) {
    var state = cljs.core.first(arglist__185606);
    arglist__185606 = cljs.core.next(arglist__185606);
    var cont_block = cljs.core.first(arglist__185606);
    arglist__185606 = cljs.core.next(arglist__185606);
    var ports = cljs.core.first(arglist__185606);
    var p__185594 = cljs.core.rest(arglist__185606);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__185594);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__185571 = cnt + 1;
      cnt = G__185571;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4246__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4246__auto__) {
      var v_185572 = this$.pop();
      if (keep_QMARK_.call(null, v_185572)) {
        this$.unshift(v_185572);
      } else {
      }
      var G__185573 = x + 1;
      x = G__185573;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_185560 = 0;
  while (true) {
    var m_185561 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_185561 == null) {
    } else {
      m_185561.call(null);
      if (count_185560 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__185562 = count_185560 + 1;
        count_185560 = G__185562;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3392__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3392__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3392__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t185566 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t185566 = function(val, box, meta185567) {
      this.val = val;
      this.box = box;
      this.meta185567 = meta185567;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t185566.cljs$lang$type = true;
    cljs.core.async.impl.channels.t185566.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t185566";
    cljs.core.async.impl.channels.t185566.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.channels/t185566");
    };
    cljs.core.async.impl.channels.t185566.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t185566.prototype.cljs$core$IMeta$_meta$arity$1 = function(_185568) {
      var self__ = this;
      var _185568__$1 = this;
      return self__.meta185567;
    };
    cljs.core.async.impl.channels.t185566.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_185568, meta185567__$1) {
      var self__ = this;
      var _185568__$1 = this;
      return new cljs.core.async.impl.channels.t185566(self__.val, self__.box, meta185567__$1);
    };
    cljs.core.async.impl.channels.__GT_t185566 = function __GT_t185566(val__$1, box__$1, meta185567) {
      return new cljs.core.async.impl.channels.t185566(val__$1, box__$1, meta185567);
    };
  }
  return new cljs.core.async.impl.channels.t185566(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3969__auto__, writer__3970__auto__, opts__3971__auto__) {
  return cljs.core._write.call(null, writer__3970__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_185569 = self__.takes.pop();
      if (taker_185569 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_185569)) {
          var take_cb_185570 = cljs.core.async.impl.protocols.commit.call(null, taker_185569);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_185570, taker_185569) {
            return function() {
              return take_cb_185570.call(null, null);
            };
          }(take_cb_185570, taker_185569));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__185526 = level + 1;
        level = G__185526;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_185527 = 0;
    while (true) {
      if (i_185527 < arr.length) {
        arr[i_185527] = null;
        var G__185528 = i_185527 + 1;
        i_185527 = G__185528;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__185529 = x_SINGLEQUOTE_;
                x__$1 = G__185529;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__185530 = x__$1;
        var G__185531 = k;
        var G__185532 = level - 1;
        var G__185533 = update;
        x = G__185530;
        k = G__185531;
        level = G__185532;
        update = G__185533;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_185534 = self__.level + 1;
      while (true) {
        if (i_185534 <= new_level + 1) {
          update[i_185534] = self__.header;
          var G__185535 = i_185534 + 1;
          i_185534 = G__185535;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_185536 = 0;
    while (true) {
      if (i_185536 <= self__.level) {
        var links_185537 = update[i_185536].forward;
        if (links_185537[i_185536] === x__$1) {
          links_185537[i_185536] = x__$1.forward[i_185536];
          var G__185538 = i_185536 + 1;
          i_185536 = G__185538;
          continue;
        } else {
          var G__185539 = i_185536 + 1;
          i_185536 = G__185539;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__185540 = x_SINGLEQUOTE_;
              x__$1 = G__185540;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__185541 = nx;
        var G__185542 = level__$1 - 1;
        x = G__185541;
        level__$1 = G__185542;
        continue;
      } else {
        var G__185543 = x;
        var G__185544 = level__$1 - 1;
        x = G__185543;
        level__$1 = G__185544;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__185545 = x_SINGLEQUOTE_;
              x__$1 = G__185545;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__185546 = nx;
        var G__185547 = level__$1 - 1;
        x = G__185546;
        level__$1 = G__185547;
        continue;
      } else {
        var G__185548 = x;
        var G__185549 = level__$1 - 1;
        x = G__185548;
        level__$1 = G__185549;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3404__auto__ = cljs.core.truth_(function() {
    var and__3392__auto__ = me;
    if (cljs.core.truth_(and__3392__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3392__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t183616 !== "undefined") {
  } else {
    cljs.core.async.t183616 = function(f, fn_handler, meta183617) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta183617 = meta183617;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t183616.cljs$lang$type = true;
    cljs.core.async.t183616.cljs$lang$ctorStr = "cljs.core.async/t183616";
    cljs.core.async.t183616.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t183616");
    };
    cljs.core.async.t183616.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t183616.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t183616.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t183616.prototype.cljs$core$IMeta$_meta$arity$1 = function(_183618) {
      var self__ = this;
      var _183618__$1 = this;
      return self__.meta183617;
    };
    cljs.core.async.t183616.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_183618, meta183617__$1) {
      var self__ = this;
      var _183618__$1 = this;
      return new cljs.core.async.t183616(self__.f, self__.fn_handler, meta183617__$1);
    };
    cljs.core.async.__GT_t183616 = function __GT_t183616(f__$1, fn_handler__$1, meta183617) {
      return new cljs.core.async.t183616(f__$1, fn_handler__$1, meta183617);
    };
  }
  return new cljs.core.async.t183616(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_183619 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_183619);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_183619);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3392__auto__ = ret;
      if (cljs.core.truth_(and__3392__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3392__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4246__auto___183620 = n;
  var x_183621 = 0;
  while (true) {
    if (x_183621 < n__4246__auto___183620) {
      a[x_183621] = 0;
      var G__183622 = x_183621 + 1;
      x_183621 = G__183622;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__183623 = i + 1;
      i = G__183623;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t183627 !== "undefined") {
  } else {
    cljs.core.async.t183627 = function(flag, alt_flag, meta183628) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta183628 = meta183628;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t183627.cljs$lang$type = true;
    cljs.core.async.t183627.cljs$lang$ctorStr = "cljs.core.async/t183627";
    cljs.core.async.t183627.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t183627");
    };
    cljs.core.async.t183627.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t183627.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t183627.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t183627.prototype.cljs$core$IMeta$_meta$arity$1 = function(_183629) {
      var self__ = this;
      var _183629__$1 = this;
      return self__.meta183628;
    };
    cljs.core.async.t183627.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_183629, meta183628__$1) {
      var self__ = this;
      var _183629__$1 = this;
      return new cljs.core.async.t183627(self__.flag, self__.alt_flag, meta183628__$1);
    };
    cljs.core.async.__GT_t183627 = function __GT_t183627(flag__$1, alt_flag__$1, meta183628) {
      return new cljs.core.async.t183627(flag__$1, alt_flag__$1, meta183628);
    };
  }
  return new cljs.core.async.t183627(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t183633 !== "undefined") {
  } else {
    cljs.core.async.t183633 = function(cb, flag, alt_handler, meta183634) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta183634 = meta183634;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t183633.cljs$lang$type = true;
    cljs.core.async.t183633.cljs$lang$ctorStr = "cljs.core.async/t183633";
    cljs.core.async.t183633.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t183633");
    };
    cljs.core.async.t183633.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t183633.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t183633.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t183633.prototype.cljs$core$IMeta$_meta$arity$1 = function(_183635) {
      var self__ = this;
      var _183635__$1 = this;
      return self__.meta183634;
    };
    cljs.core.async.t183633.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_183635, meta183634__$1) {
      var self__ = this;
      var _183635__$1 = this;
      return new cljs.core.async.t183633(self__.cb, self__.flag, self__.alt_handler, meta183634__$1);
    };
    cljs.core.async.__GT_t183633 = function __GT_t183633(cb__$1, flag__$1, alt_handler__$1, meta183634) {
      return new cljs.core.async.t183633(cb__$1, flag__$1, alt_handler__$1, meta183634);
    };
  }
  return new cljs.core.async.t183633(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__183636_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__183636_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3404__auto__ = wport;
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__183637 = i + 1;
          i = G__183637;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3404__auto__ = ret;
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3392__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3392__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3392__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__183638) {
    var map__183640 = p__183638;
    var map__183640__$1 = cljs.core.seq_QMARK_.call(null, map__183640) ? cljs.core.apply.call(null, cljs.core.hash_map, map__183640) : map__183640;
    var opts = map__183640__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__183638 = null;
    if (arguments.length > 1) {
      p__183638 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__183638);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__183641) {
    var ports = cljs.core.first(arglist__183641);
    var p__183638 = cljs.core.rest(arglist__183641);
    return alts_BANG___delegate(ports, p__183638);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t183649 !== "undefined") {
  } else {
    cljs.core.async.t183649 = function(ch, f, map_LT_, meta183650) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta183650 = meta183650;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t183649.cljs$lang$type = true;
    cljs.core.async.t183649.cljs$lang$ctorStr = "cljs.core.async/t183649";
    cljs.core.async.t183649.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t183649");
    };
    cljs.core.async.t183649.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t183649.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t183649.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t183649.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t183652 !== "undefined") {
        } else {
          cljs.core.async.t183652 = function(fn1, _, meta183650, ch, f, map_LT_, meta183653) {
            this.fn1 = fn1;
            this._ = _;
            this.meta183650 = meta183650;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta183653 = meta183653;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t183652.cljs$lang$type = true;
          cljs.core.async.t183652.cljs$lang$ctorStr = "cljs.core.async/t183652";
          cljs.core.async.t183652.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
            return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t183652");
          };
          cljs.core.async.t183652.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t183652.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t183652.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t183652.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__183642_SHARP_) {
                return f1.call(null, p1__183642_SHARP_ == null ? null : self__.f.call(null, p1__183642_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t183652.prototype.cljs$core$IMeta$_meta$arity$1 = function(_183654) {
            var self__ = this;
            var _183654__$1 = this;
            return self__.meta183653;
          };
          cljs.core.async.t183652.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_183654, meta183653__$1) {
            var self__ = this;
            var _183654__$1 = this;
            return new cljs.core.async.t183652(self__.fn1, self__._, self__.meta183650, self__.ch, self__.f, self__.map_LT_, meta183653__$1);
          };
          cljs.core.async.__GT_t183652 = function __GT_t183652(fn1__$1, ___$2, meta183650__$1, ch__$2, f__$2, map_LT___$2, meta183653) {
            return new cljs.core.async.t183652(fn1__$1, ___$2, meta183650__$1, ch__$2, f__$2, map_LT___$2, meta183653);
          };
        }
        return new cljs.core.async.t183652(fn1, ___$1, self__.meta183650, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3392__auto__ = ret;
        if (cljs.core.truth_(and__3392__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3392__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t183649.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t183649.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t183649.prototype.cljs$core$IMeta$_meta$arity$1 = function(_183651) {
      var self__ = this;
      var _183651__$1 = this;
      return self__.meta183650;
    };
    cljs.core.async.t183649.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_183651, meta183650__$1) {
      var self__ = this;
      var _183651__$1 = this;
      return new cljs.core.async.t183649(self__.ch, self__.f, self__.map_LT_, meta183650__$1);
    };
    cljs.core.async.__GT_t183649 = function __GT_t183649(ch__$1, f__$1, map_LT___$1, meta183650) {
      return new cljs.core.async.t183649(ch__$1, f__$1, map_LT___$1, meta183650);
    };
  }
  return new cljs.core.async.t183649(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t183658 !== "undefined") {
  } else {
    cljs.core.async.t183658 = function(ch, f, map_GT_, meta183659) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta183659 = meta183659;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t183658.cljs$lang$type = true;
    cljs.core.async.t183658.cljs$lang$ctorStr = "cljs.core.async/t183658";
    cljs.core.async.t183658.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t183658");
    };
    cljs.core.async.t183658.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t183658.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t183658.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t183658.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t183658.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t183658.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t183658.prototype.cljs$core$IMeta$_meta$arity$1 = function(_183660) {
      var self__ = this;
      var _183660__$1 = this;
      return self__.meta183659;
    };
    cljs.core.async.t183658.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_183660, meta183659__$1) {
      var self__ = this;
      var _183660__$1 = this;
      return new cljs.core.async.t183658(self__.ch, self__.f, self__.map_GT_, meta183659__$1);
    };
    cljs.core.async.__GT_t183658 = function __GT_t183658(ch__$1, f__$1, map_GT___$1, meta183659) {
      return new cljs.core.async.t183658(ch__$1, f__$1, map_GT___$1, meta183659);
    };
  }
  return new cljs.core.async.t183658(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t183664 !== "undefined") {
  } else {
    cljs.core.async.t183664 = function(ch, p, filter_GT_, meta183665) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta183665 = meta183665;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t183664.cljs$lang$type = true;
    cljs.core.async.t183664.cljs$lang$ctorStr = "cljs.core.async/t183664";
    cljs.core.async.t183664.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t183664");
    };
    cljs.core.async.t183664.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t183664.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t183664.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t183664.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t183664.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t183664.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t183664.prototype.cljs$core$IMeta$_meta$arity$1 = function(_183666) {
      var self__ = this;
      var _183666__$1 = this;
      return self__.meta183665;
    };
    cljs.core.async.t183664.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_183666, meta183665__$1) {
      var self__ = this;
      var _183666__$1 = this;
      return new cljs.core.async.t183664(self__.ch, self__.p, self__.filter_GT_, meta183665__$1);
    };
    cljs.core.async.__GT_t183664 = function __GT_t183664(ch__$1, p__$1, filter_GT___$1, meta183665) {
      return new cljs.core.async.t183664(ch__$1, p__$1, filter_GT___$1, meta183665);
    };
  }
  return new cljs.core.async.t183664(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5882__auto___183741 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_183724) {
          var state_val_183725 = state_183724[1];
          if (state_val_183725 === 1) {
            var state_183724__$1 = state_183724;
            var statearr_183726_183742 = state_183724__$1;
            statearr_183726_183742[2] = null;
            statearr_183726_183742[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_183725 === 2) {
              var state_183724__$1 = state_183724;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_183724__$1, 4, ch);
            } else {
              if (state_val_183725 === 3) {
                var inst_183722 = state_183724[2];
                var state_183724__$1 = state_183724;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_183724__$1, inst_183722);
              } else {
                if (state_val_183725 === 4) {
                  var inst_183706 = state_183724[5];
                  var inst_183706__$1 = state_183724[2];
                  var inst_183707 = inst_183706__$1 == null;
                  var state_183724__$1 = function() {
                    var statearr_183727 = state_183724;
                    statearr_183727[5] = inst_183706__$1;
                    return statearr_183727;
                  }();
                  if (cljs.core.truth_(inst_183707)) {
                    var statearr_183728_183743 = state_183724__$1;
                    statearr_183728_183743[1] = 5;
                  } else {
                    var statearr_183729_183744 = state_183724__$1;
                    statearr_183729_183744[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_183725 === 5) {
                    var inst_183709 = cljs.core.async.close_BANG_.call(null, out);
                    var state_183724__$1 = state_183724;
                    var statearr_183730_183745 = state_183724__$1;
                    statearr_183730_183745[2] = inst_183709;
                    statearr_183730_183745[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_183725 === 6) {
                      var inst_183706 = state_183724[5];
                      var inst_183711 = p.call(null, inst_183706);
                      var state_183724__$1 = state_183724;
                      if (cljs.core.truth_(inst_183711)) {
                        var statearr_183731_183746 = state_183724__$1;
                        statearr_183731_183746[1] = 8;
                      } else {
                        var statearr_183732_183747 = state_183724__$1;
                        statearr_183732_183747[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_183725 === 7) {
                        var inst_183720 = state_183724[2];
                        var state_183724__$1 = state_183724;
                        var statearr_183733_183748 = state_183724__$1;
                        statearr_183733_183748[2] = inst_183720;
                        statearr_183733_183748[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_183725 === 8) {
                          var inst_183706 = state_183724[5];
                          var state_183724__$1 = state_183724;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_183724__$1, 11, out, inst_183706);
                        } else {
                          if (state_val_183725 === 9) {
                            var state_183724__$1 = state_183724;
                            var statearr_183734_183749 = state_183724__$1;
                            statearr_183734_183749[2] = null;
                            statearr_183734_183749[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_183725 === 10) {
                              var inst_183717 = state_183724[2];
                              var state_183724__$1 = function() {
                                var statearr_183735 = state_183724;
                                statearr_183735[6] = inst_183717;
                                return statearr_183735;
                              }();
                              var statearr_183736_183750 = state_183724__$1;
                              statearr_183736_183750[2] = null;
                              statearr_183736_183750[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_183725 === 11) {
                                var inst_183714 = state_183724[2];
                                var state_183724__$1 = state_183724;
                                var statearr_183737_183751 = state_183724__$1;
                                statearr_183737_183751[2] = inst_183714;
                                statearr_183737_183751[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_183739 = [null, null, null, null, null, null, null];
              statearr_183739[0] = state_machine__5833__auto__;
              statearr_183739[1] = 1;
              return statearr_183739;
            };
            var state_machine__5833__auto____1 = function(state_183724) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_183724);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_183724) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_183724);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_183740 = f__5883__auto__.call(null);
        statearr_183740[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___183741;
        return statearr_183740;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_183899) {
        var state_val_183900 = state_183899[1];
        if (state_val_183900 === 1) {
          var state_183899__$1 = state_183899;
          var statearr_183901_183934 = state_183899__$1;
          statearr_183901_183934[2] = null;
          statearr_183901_183934[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_183900 === 2) {
            var state_183899__$1 = state_183899;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_183899__$1, 4, in$);
          } else {
            if (state_val_183900 === 3) {
              var inst_183897 = state_183899[2];
              var state_183899__$1 = state_183899;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_183899__$1, inst_183897);
            } else {
              if (state_val_183900 === 4) {
                var inst_183845 = state_183899[5];
                var inst_183845__$1 = state_183899[2];
                var inst_183846 = inst_183845__$1 == null;
                var state_183899__$1 = function() {
                  var statearr_183902 = state_183899;
                  statearr_183902[5] = inst_183845__$1;
                  return statearr_183902;
                }();
                if (cljs.core.truth_(inst_183846)) {
                  var statearr_183903_183935 = state_183899__$1;
                  statearr_183903_183935[1] = 5;
                } else {
                  var statearr_183904_183936 = state_183899__$1;
                  statearr_183904_183936[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_183900 === 5) {
                  var inst_183848 = cljs.core.async.close_BANG_.call(null, out);
                  var state_183899__$1 = state_183899;
                  var statearr_183905_183937 = state_183899__$1;
                  statearr_183905_183937[2] = inst_183848;
                  statearr_183905_183937[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_183900 === 6) {
                    var inst_183845 = state_183899[5];
                    var inst_183850 = f.call(null, inst_183845);
                    var inst_183855 = cljs.core.seq.call(null, inst_183850);
                    var inst_183856 = inst_183855;
                    var inst_183857 = null;
                    var inst_183858 = 0;
                    var inst_183859 = 0;
                    var state_183899__$1 = function() {
                      var statearr_183906 = state_183899;
                      statearr_183906[6] = inst_183859;
                      statearr_183906[7] = inst_183858;
                      statearr_183906[8] = inst_183856;
                      statearr_183906[9] = inst_183857;
                      return statearr_183906;
                    }();
                    var statearr_183907_183938 = state_183899__$1;
                    statearr_183907_183938[2] = null;
                    statearr_183907_183938[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_183900 === 7) {
                      var inst_183895 = state_183899[2];
                      var state_183899__$1 = state_183899;
                      var statearr_183908_183939 = state_183899__$1;
                      statearr_183908_183939[2] = inst_183895;
                      statearr_183908_183939[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_183900 === 8) {
                        var inst_183859 = state_183899[6];
                        var inst_183858 = state_183899[7];
                        var inst_183861 = inst_183859 < inst_183858;
                        var inst_183862 = inst_183861;
                        var state_183899__$1 = state_183899;
                        if (cljs.core.truth_(inst_183862)) {
                          var statearr_183909_183940 = state_183899__$1;
                          statearr_183909_183940[1] = 10;
                        } else {
                          var statearr_183910_183941 = state_183899__$1;
                          statearr_183910_183941[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_183900 === 9) {
                          var inst_183892 = state_183899[2];
                          var state_183899__$1 = function() {
                            var statearr_183911 = state_183899;
                            statearr_183911[10] = inst_183892;
                            return statearr_183911;
                          }();
                          var statearr_183912_183942 = state_183899__$1;
                          statearr_183912_183942[2] = null;
                          statearr_183912_183942[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_183900 === 10) {
                            var inst_183859 = state_183899[6];
                            var inst_183857 = state_183899[9];
                            var inst_183864 = cljs.core._nth.call(null, inst_183857, inst_183859);
                            var state_183899__$1 = state_183899;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_183899__$1, 13, out, inst_183864);
                          } else {
                            if (state_val_183900 === 11) {
                              var inst_183870 = state_183899[11];
                              var inst_183856 = state_183899[8];
                              var inst_183870__$1 = cljs.core.seq.call(null, inst_183856);
                              var state_183899__$1 = function() {
                                var statearr_183916 = state_183899;
                                statearr_183916[11] = inst_183870__$1;
                                return statearr_183916;
                              }();
                              if (inst_183870__$1) {
                                var statearr_183917_183943 = state_183899__$1;
                                statearr_183917_183943[1] = 14;
                              } else {
                                var statearr_183918_183944 = state_183899__$1;
                                statearr_183918_183944[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_183900 === 12) {
                                var inst_183890 = state_183899[2];
                                var state_183899__$1 = state_183899;
                                var statearr_183919_183945 = state_183899__$1;
                                statearr_183919_183945[2] = inst_183890;
                                statearr_183919_183945[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_183900 === 13) {
                                  var inst_183859 = state_183899[6];
                                  var inst_183858 = state_183899[7];
                                  var inst_183856 = state_183899[8];
                                  var inst_183857 = state_183899[9];
                                  var inst_183866 = state_183899[2];
                                  var inst_183867 = inst_183859 + 1;
                                  var tmp183913 = inst_183858;
                                  var tmp183914 = inst_183856;
                                  var tmp183915 = inst_183857;
                                  var inst_183856__$1 = tmp183914;
                                  var inst_183857__$1 = tmp183915;
                                  var inst_183858__$1 = tmp183913;
                                  var inst_183859__$1 = inst_183867;
                                  var state_183899__$1 = function() {
                                    var statearr_183920 = state_183899;
                                    statearr_183920[12] = inst_183866;
                                    statearr_183920[6] = inst_183859__$1;
                                    statearr_183920[7] = inst_183858__$1;
                                    statearr_183920[8] = inst_183856__$1;
                                    statearr_183920[9] = inst_183857__$1;
                                    return statearr_183920;
                                  }();
                                  var statearr_183921_183946 = state_183899__$1;
                                  statearr_183921_183946[2] = null;
                                  statearr_183921_183946[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_183900 === 14) {
                                    var inst_183870 = state_183899[11];
                                    var inst_183872 = cljs.core.chunked_seq_QMARK_.call(null, inst_183870);
                                    var state_183899__$1 = state_183899;
                                    if (inst_183872) {
                                      var statearr_183922_183947 = state_183899__$1;
                                      statearr_183922_183947[1] = 17;
                                    } else {
                                      var statearr_183923_183948 = state_183899__$1;
                                      statearr_183923_183948[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_183900 === 15) {
                                      var state_183899__$1 = state_183899;
                                      var statearr_183924_183949 = state_183899__$1;
                                      statearr_183924_183949[2] = null;
                                      statearr_183924_183949[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_183900 === 16) {
                                        var inst_183888 = state_183899[2];
                                        var state_183899__$1 = state_183899;
                                        var statearr_183925_183950 = state_183899__$1;
                                        statearr_183925_183950[2] = inst_183888;
                                        statearr_183925_183950[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_183900 === 17) {
                                          var inst_183870 = state_183899[11];
                                          var inst_183874 = cljs.core.chunk_first.call(null, inst_183870);
                                          var inst_183875 = cljs.core.chunk_rest.call(null, inst_183870);
                                          var inst_183876 = cljs.core.count.call(null, inst_183874);
                                          var inst_183856 = inst_183875;
                                          var inst_183857 = inst_183874;
                                          var inst_183858 = inst_183876;
                                          var inst_183859 = 0;
                                          var state_183899__$1 = function() {
                                            var statearr_183926 = state_183899;
                                            statearr_183926[6] = inst_183859;
                                            statearr_183926[7] = inst_183858;
                                            statearr_183926[8] = inst_183856;
                                            statearr_183926[9] = inst_183857;
                                            return statearr_183926;
                                          }();
                                          var statearr_183927_183951 = state_183899__$1;
                                          statearr_183927_183951[2] = null;
                                          statearr_183927_183951[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_183900 === 18) {
                                            var inst_183870 = state_183899[11];
                                            var inst_183879 = cljs.core.first.call(null, inst_183870);
                                            var state_183899__$1 = state_183899;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_183899__$1, 20, out, inst_183879);
                                          } else {
                                            if (state_val_183900 === 19) {
                                              var inst_183885 = state_183899[2];
                                              var state_183899__$1 = state_183899;
                                              var statearr_183928_183952 = state_183899__$1;
                                              statearr_183928_183952[2] = inst_183885;
                                              statearr_183928_183952[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_183900 === 20) {
                                                var inst_183870 = state_183899[11];
                                                var inst_183881 = state_183899[2];
                                                var inst_183882 = cljs.core.next.call(null, inst_183870);
                                                var inst_183856 = inst_183882;
                                                var inst_183857 = null;
                                                var inst_183858 = 0;
                                                var inst_183859 = 0;
                                                var state_183899__$1 = function() {
                                                  var statearr_183929 = state_183899;
                                                  statearr_183929[13] = inst_183881;
                                                  statearr_183929[6] = inst_183859;
                                                  statearr_183929[7] = inst_183858;
                                                  statearr_183929[8] = inst_183856;
                                                  statearr_183929[9] = inst_183857;
                                                  return statearr_183929;
                                                }();
                                                var statearr_183930_183953 = state_183899__$1;
                                                statearr_183930_183953[2] = null;
                                                statearr_183930_183953[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_183932 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_183932[0] = state_machine__5833__auto__;
            statearr_183932[1] = 1;
            return statearr_183932;
          };
          var state_machine__5833__auto____1 = function(state_183899) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_183899);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_183899) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_183899);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_183933 = f__5883__auto__.call(null);
      statearr_183933[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_183933;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5882__auto___184026 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_184009) {
          var state_val_184010 = state_184009[1];
          if (state_val_184010 === 1) {
            var state_184009__$1 = state_184009;
            var statearr_184011_184027 = state_184009__$1;
            statearr_184011_184027[2] = null;
            statearr_184011_184027[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_184010 === 2) {
              var state_184009__$1 = state_184009;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_184009__$1, 4, from);
            } else {
              if (state_val_184010 === 3) {
                var inst_184007 = state_184009[2];
                var state_184009__$1 = state_184009;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_184009__$1, inst_184007);
              } else {
                if (state_val_184010 === 4) {
                  var inst_183992 = state_184009[5];
                  var inst_183992__$1 = state_184009[2];
                  var inst_183993 = inst_183992__$1 == null;
                  var state_184009__$1 = function() {
                    var statearr_184012 = state_184009;
                    statearr_184012[5] = inst_183992__$1;
                    return statearr_184012;
                  }();
                  if (cljs.core.truth_(inst_183993)) {
                    var statearr_184013_184028 = state_184009__$1;
                    statearr_184013_184028[1] = 5;
                  } else {
                    var statearr_184014_184029 = state_184009__$1;
                    statearr_184014_184029[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_184010 === 5) {
                    var state_184009__$1 = state_184009;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_184015_184030 = state_184009__$1;
                      statearr_184015_184030[1] = 8;
                    } else {
                      var statearr_184016_184031 = state_184009__$1;
                      statearr_184016_184031[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_184010 === 6) {
                      var inst_183992 = state_184009[5];
                      var state_184009__$1 = state_184009;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_184009__$1, 11, to, inst_183992);
                    } else {
                      if (state_val_184010 === 7) {
                        var inst_184005 = state_184009[2];
                        var state_184009__$1 = state_184009;
                        var statearr_184017_184032 = state_184009__$1;
                        statearr_184017_184032[2] = inst_184005;
                        statearr_184017_184032[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_184010 === 8) {
                          var inst_183996 = cljs.core.async.close_BANG_.call(null, to);
                          var state_184009__$1 = state_184009;
                          var statearr_184018_184033 = state_184009__$1;
                          statearr_184018_184033[2] = inst_183996;
                          statearr_184018_184033[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_184010 === 9) {
                            var state_184009__$1 = state_184009;
                            var statearr_184019_184034 = state_184009__$1;
                            statearr_184019_184034[2] = null;
                            statearr_184019_184034[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_184010 === 10) {
                              var inst_183999 = state_184009[2];
                              var state_184009__$1 = state_184009;
                              var statearr_184020_184035 = state_184009__$1;
                              statearr_184020_184035[2] = inst_183999;
                              statearr_184020_184035[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_184010 === 11) {
                                var inst_184002 = state_184009[2];
                                var state_184009__$1 = function() {
                                  var statearr_184021 = state_184009;
                                  statearr_184021[6] = inst_184002;
                                  return statearr_184021;
                                }();
                                var statearr_184022_184036 = state_184009__$1;
                                statearr_184022_184036[2] = null;
                                statearr_184022_184036[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_184024 = [null, null, null, null, null, null, null];
              statearr_184024[0] = state_machine__5833__auto__;
              statearr_184024[1] = 1;
              return statearr_184024;
            };
            var state_machine__5833__auto____1 = function(state_184009) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_184009);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_184009) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_184009);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_184025 = f__5883__auto__.call(null);
        statearr_184025[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___184026;
        return statearr_184025;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5882__auto___184115 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_184097) {
          var state_val_184098 = state_184097[1];
          if (state_val_184098 === 1) {
            var state_184097__$1 = state_184097;
            var statearr_184099_184116 = state_184097__$1;
            statearr_184099_184116[2] = null;
            statearr_184099_184116[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_184098 === 2) {
              var state_184097__$1 = state_184097;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_184097__$1, 4, ch);
            } else {
              if (state_val_184098 === 3) {
                var inst_184095 = state_184097[2];
                var state_184097__$1 = state_184097;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_184097__$1, inst_184095);
              } else {
                if (state_val_184098 === 4) {
                  var inst_184078 = state_184097[5];
                  var inst_184078__$1 = state_184097[2];
                  var inst_184079 = inst_184078__$1 == null;
                  var state_184097__$1 = function() {
                    var statearr_184100 = state_184097;
                    statearr_184100[5] = inst_184078__$1;
                    return statearr_184100;
                  }();
                  if (cljs.core.truth_(inst_184079)) {
                    var statearr_184101_184117 = state_184097__$1;
                    statearr_184101_184117[1] = 5;
                  } else {
                    var statearr_184102_184118 = state_184097__$1;
                    statearr_184102_184118[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_184098 === 5) {
                    var inst_184081 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_184082 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_184097__$1 = function() {
                      var statearr_184103 = state_184097;
                      statearr_184103[6] = inst_184081;
                      return statearr_184103;
                    }();
                    var statearr_184104_184119 = state_184097__$1;
                    statearr_184104_184119[2] = inst_184082;
                    statearr_184104_184119[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_184098 === 6) {
                      var inst_184078 = state_184097[5];
                      var inst_184084 = p.call(null, inst_184078);
                      var state_184097__$1 = state_184097;
                      if (cljs.core.truth_(inst_184084)) {
                        var statearr_184105_184120 = state_184097__$1;
                        statearr_184105_184120[1] = 9;
                      } else {
                        var statearr_184106_184121 = state_184097__$1;
                        statearr_184106_184121[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_184098 === 7) {
                        var inst_184093 = state_184097[2];
                        var state_184097__$1 = state_184097;
                        var statearr_184107_184122 = state_184097__$1;
                        statearr_184107_184122[2] = inst_184093;
                        statearr_184107_184122[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_184098 === 8) {
                          var inst_184090 = state_184097[2];
                          var state_184097__$1 = function() {
                            var statearr_184108 = state_184097;
                            statearr_184108[7] = inst_184090;
                            return statearr_184108;
                          }();
                          var statearr_184109_184123 = state_184097__$1;
                          statearr_184109_184123[2] = null;
                          statearr_184109_184123[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_184098 === 9) {
                            var state_184097__$1 = state_184097;
                            var statearr_184110_184124 = state_184097__$1;
                            statearr_184110_184124[2] = tc;
                            statearr_184110_184124[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_184098 === 10) {
                              var state_184097__$1 = state_184097;
                              var statearr_184111_184125 = state_184097__$1;
                              statearr_184111_184125[2] = fc;
                              statearr_184111_184125[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_184098 === 11) {
                                var inst_184078 = state_184097[5];
                                var inst_184088 = state_184097[2];
                                var state_184097__$1 = state_184097;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_184097__$1, 8, inst_184088, inst_184078);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_184113 = [null, null, null, null, null, null, null, null];
              statearr_184113[0] = state_machine__5833__auto__;
              statearr_184113[1] = 1;
              return statearr_184113;
            };
            var state_machine__5833__auto____1 = function(state_184097) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_184097);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_184097) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_184097);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_184114 = f__5883__auto__.call(null);
        statearr_184114[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___184115;
        return statearr_184114;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_184168) {
        var state_val_184169 = state_184168[1];
        if (state_val_184169 === 7) {
          var inst_184164 = state_184168[2];
          var state_184168__$1 = state_184168;
          var statearr_184170_184182 = state_184168__$1;
          statearr_184170_184182[2] = inst_184164;
          statearr_184170_184182[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_184169 === 6) {
            var inst_184154 = state_184168[5];
            var inst_184157 = state_184168[6];
            var inst_184161 = f.call(null, inst_184154, inst_184157);
            var inst_184154__$1 = inst_184161;
            var state_184168__$1 = function() {
              var statearr_184171 = state_184168;
              statearr_184171[5] = inst_184154__$1;
              return statearr_184171;
            }();
            var statearr_184172_184183 = state_184168__$1;
            statearr_184172_184183[2] = null;
            statearr_184172_184183[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_184169 === 5) {
              var inst_184154 = state_184168[5];
              var state_184168__$1 = state_184168;
              var statearr_184173_184184 = state_184168__$1;
              statearr_184173_184184[2] = inst_184154;
              statearr_184173_184184[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_184169 === 4) {
                var inst_184157 = state_184168[6];
                var inst_184157__$1 = state_184168[2];
                var inst_184158 = inst_184157__$1 == null;
                var state_184168__$1 = function() {
                  var statearr_184174 = state_184168;
                  statearr_184174[6] = inst_184157__$1;
                  return statearr_184174;
                }();
                if (cljs.core.truth_(inst_184158)) {
                  var statearr_184175_184185 = state_184168__$1;
                  statearr_184175_184185[1] = 5;
                } else {
                  var statearr_184176_184186 = state_184168__$1;
                  statearr_184176_184186[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_184169 === 3) {
                  var inst_184166 = state_184168[2];
                  var state_184168__$1 = state_184168;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_184168__$1, inst_184166);
                } else {
                  if (state_val_184169 === 2) {
                    var state_184168__$1 = state_184168;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_184168__$1, 4, ch);
                  } else {
                    if (state_val_184169 === 1) {
                      var inst_184154 = init;
                      var state_184168__$1 = function() {
                        var statearr_184177 = state_184168;
                        statearr_184177[5] = inst_184154;
                        return statearr_184177;
                      }();
                      var statearr_184178_184187 = state_184168__$1;
                      statearr_184178_184187[2] = null;
                      statearr_184178_184187[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_184180 = [null, null, null, null, null, null, null];
            statearr_184180[0] = state_machine__5833__auto__;
            statearr_184180[1] = 1;
            return statearr_184180;
          };
          var state_machine__5833__auto____1 = function(state_184168) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_184168);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_184168) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_184168);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_184181 = f__5883__auto__.call(null);
      statearr_184181[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_184181;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_184245) {
          var state_val_184246 = state_184245[1];
          if (state_val_184246 === 1) {
            var inst_184225 = cljs.core.seq.call(null, coll);
            var inst_184226 = inst_184225;
            var state_184245__$1 = function() {
              var statearr_184247 = state_184245;
              statearr_184247[5] = inst_184226;
              return statearr_184247;
            }();
            var statearr_184248_184262 = state_184245__$1;
            statearr_184248_184262[2] = null;
            statearr_184248_184262[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_184246 === 2) {
              var inst_184226 = state_184245[5];
              var state_184245__$1 = state_184245;
              if (cljs.core.truth_(inst_184226)) {
                var statearr_184249_184263 = state_184245__$1;
                statearr_184249_184263[1] = 4;
              } else {
                var statearr_184250_184264 = state_184245__$1;
                statearr_184250_184264[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_184246 === 3) {
                var inst_184243 = state_184245[2];
                var state_184245__$1 = state_184245;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_184245__$1, inst_184243);
              } else {
                if (state_val_184246 === 4) {
                  var inst_184226 = state_184245[5];
                  var inst_184229 = cljs.core.first.call(null, inst_184226);
                  var state_184245__$1 = state_184245;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_184245__$1, 7, ch, inst_184229);
                } else {
                  if (state_val_184246 === 5) {
                    var state_184245__$1 = state_184245;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_184251_184265 = state_184245__$1;
                      statearr_184251_184265[1] = 8;
                    } else {
                      var statearr_184252_184266 = state_184245__$1;
                      statearr_184252_184266[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_184246 === 6) {
                      var inst_184241 = state_184245[2];
                      var state_184245__$1 = state_184245;
                      var statearr_184253_184267 = state_184245__$1;
                      statearr_184253_184267[2] = inst_184241;
                      statearr_184253_184267[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_184246 === 7) {
                        var inst_184226 = state_184245[5];
                        var inst_184231 = state_184245[2];
                        var inst_184232 = cljs.core.next.call(null, inst_184226);
                        var inst_184226__$1 = inst_184232;
                        var state_184245__$1 = function() {
                          var statearr_184254 = state_184245;
                          statearr_184254[5] = inst_184226__$1;
                          statearr_184254[6] = inst_184231;
                          return statearr_184254;
                        }();
                        var statearr_184255_184268 = state_184245__$1;
                        statearr_184255_184268[2] = null;
                        statearr_184255_184268[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_184246 === 8) {
                          var inst_184236 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_184245__$1 = state_184245;
                          var statearr_184256_184269 = state_184245__$1;
                          statearr_184256_184269[2] = inst_184236;
                          statearr_184256_184269[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_184246 === 9) {
                            var state_184245__$1 = state_184245;
                            var statearr_184257_184270 = state_184245__$1;
                            statearr_184257_184270[2] = null;
                            statearr_184257_184270[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_184246 === 10) {
                              var inst_184239 = state_184245[2];
                              var state_184245__$1 = state_184245;
                              var statearr_184258_184271 = state_184245__$1;
                              statearr_184258_184271[2] = inst_184239;
                              statearr_184258_184271[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_184260 = [null, null, null, null, null, null, null];
              statearr_184260[0] = state_machine__5833__auto__;
              statearr_184260[1] = 1;
              return statearr_184260;
            };
            var state_machine__5833__auto____1 = function(state_184245) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_184245);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_184245) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_184245);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_184261 = f__5883__auto__.call(null);
        statearr_184261[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
        return statearr_184261;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return c__5882__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj184273 = {};
  return obj184273;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3392__auto__ = _;
    if (and__3392__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4025__auto__ = _ == null ? null : _;
    return function() {
      var or__3404__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj184275 = {};
  return obj184275;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t184488 !== "undefined") {
    } else {
      cljs.core.async.t184488 = function(cs, ch, mult, meta184489) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta184489 = meta184489;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t184488.cljs$lang$type = true;
      cljs.core.async.t184488.cljs$lang$ctorStr = "cljs.core.async/t184488";
      cljs.core.async.t184488.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
          return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t184488");
        };
      }(cs);
      cljs.core.async.t184488.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t184488.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t184488.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t184488.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t184488.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t184488.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t184488.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_184490) {
          var self__ = this;
          var _184490__$1 = this;
          return self__.meta184489;
        };
      }(cs);
      cljs.core.async.t184488.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_184490, meta184489__$1) {
          var self__ = this;
          var _184490__$1 = this;
          return new cljs.core.async.t184488(self__.cs, self__.ch, self__.mult, meta184489__$1);
        };
      }(cs);
      cljs.core.async.__GT_t184488 = function(cs) {
        return function __GT_t184488(cs__$1, ch__$1, mult__$1, meta184489) {
          return new cljs.core.async.t184488(cs__$1, ch__$1, mult__$1, meta184489);
        };
      }(cs);
    }
    return new cljs.core.async.t184488(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5882__auto___184700 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_184618) {
        var state_val_184619 = state_184618[1];
        if (state_val_184619 === 32) {
          try {
            var inst_184569 = state_184618[5];
            var inst_184493 = state_184618[6];
            var inst_184575 = cljs.core.async.put_BANG_.call(null, inst_184569, inst_184493, done);
            var state_184618__$1 = state_184618;
            var statearr_184622_184701 = state_184618__$1;
            statearr_184622_184701[2] = inst_184575;
            statearr_184622_184701[1] = 30;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } catch (e184620) {
            if (e184620 instanceof Object) {
              var ex__5826__auto__ = e184620;
              var statearr_184621_184702 = state_184618;
              statearr_184621_184702[1] = 31;
              statearr_184621_184702[2] = ex__5826__auto__;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e184620;
              } else {
                return null;
              }
            }
          }
        } else {
          if (state_val_184619 === 1) {
            var state_184618__$1 = state_184618;
            var statearr_184623_184703 = state_184618__$1;
            statearr_184623_184703[2] = null;
            statearr_184623_184703[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_184619 === 33) {
              var inst_184581 = state_184618[7];
              var inst_184583 = cljs.core.chunked_seq_QMARK_.call(null, inst_184581);
              var state_184618__$1 = state_184618;
              if (inst_184583) {
                var statearr_184624_184704 = state_184618__$1;
                statearr_184624_184704[1] = 36;
              } else {
                var statearr_184625_184705 = state_184618__$1;
                statearr_184625_184705[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_184619 === 2) {
                var state_184618__$1 = state_184618;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_184618__$1, 4, ch);
              } else {
                if (state_val_184619 === 34) {
                  var state_184618__$1 = state_184618;
                  var statearr_184626_184706 = state_184618__$1;
                  statearr_184626_184706[2] = null;
                  statearr_184626_184706[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_184619 === 3) {
                    var inst_184616 = state_184618[2];
                    var state_184618__$1 = state_184618;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_184618__$1, inst_184616);
                  } else {
                    if (state_val_184619 === 35) {
                      var inst_184605 = state_184618[2];
                      var state_184618__$1 = state_184618;
                      var statearr_184627_184707 = state_184618__$1;
                      statearr_184627_184707[2] = inst_184605;
                      statearr_184627_184707[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_184619 === 4) {
                        var inst_184493 = state_184618[6];
                        var inst_184493__$1 = state_184618[2];
                        var inst_184494 = inst_184493__$1 == null;
                        var state_184618__$1 = function() {
                          var statearr_184628 = state_184618;
                          statearr_184628[6] = inst_184493__$1;
                          return statearr_184628;
                        }();
                        if (cljs.core.truth_(inst_184494)) {
                          var statearr_184629_184708 = state_184618__$1;
                          statearr_184629_184708[1] = 5;
                        } else {
                          var statearr_184630_184709 = state_184618__$1;
                          statearr_184630_184709[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_184619 === 36) {
                          var inst_184581 = state_184618[7];
                          var inst_184585 = cljs.core.chunk_first.call(null, inst_184581);
                          var inst_184586 = cljs.core.chunk_rest.call(null, inst_184581);
                          var inst_184587 = cljs.core.count.call(null, inst_184585);
                          var inst_184561 = inst_184586;
                          var inst_184562 = inst_184585;
                          var inst_184563 = inst_184587;
                          var inst_184564 = 0;
                          var state_184618__$1 = function() {
                            var statearr_184631 = state_184618;
                            statearr_184631[8] = inst_184561;
                            statearr_184631[9] = inst_184562;
                            statearr_184631[10] = inst_184563;
                            statearr_184631[11] = inst_184564;
                            return statearr_184631;
                          }();
                          var statearr_184632_184710 = state_184618__$1;
                          statearr_184632_184710[2] = null;
                          statearr_184632_184710[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_184619 === 5) {
                            var inst_184500 = cljs.core.deref.call(null, cs);
                            var inst_184501 = cljs.core.seq.call(null, inst_184500);
                            var inst_184502 = inst_184501;
                            var inst_184503 = null;
                            var inst_184504 = 0;
                            var inst_184505 = 0;
                            var state_184618__$1 = function() {
                              var statearr_184633 = state_184618;
                              statearr_184633[12] = inst_184502;
                              statearr_184633[13] = inst_184505;
                              statearr_184633[14] = inst_184503;
                              statearr_184633[15] = inst_184504;
                              return statearr_184633;
                            }();
                            var statearr_184634_184711 = state_184618__$1;
                            statearr_184634_184711[2] = null;
                            statearr_184634_184711[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_184619 === 37) {
                              var inst_184581 = state_184618[7];
                              var inst_184590 = cljs.core.first.call(null, inst_184581);
                              var state_184618__$1 = function() {
                                var statearr_184635 = state_184618;
                                statearr_184635[16] = inst_184590;
                                return statearr_184635;
                              }();
                              var statearr_184636_184712 = state_184618__$1;
                              statearr_184636_184712[2] = null;
                              statearr_184636_184712[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_184619 === 6) {
                                var inst_184552 = cljs.core.deref.call(null, cs);
                                var inst_184553 = cljs.core.keys.call(null, inst_184552);
                                var inst_184554 = cljs.core.count.call(null, inst_184553);
                                var inst_184555 = cljs.core.reset_BANG_.call(null, dctr, inst_184554);
                                var inst_184560 = cljs.core.seq.call(null, inst_184553);
                                var inst_184561 = inst_184560;
                                var inst_184562 = null;
                                var inst_184563 = 0;
                                var inst_184564 = 0;
                                var state_184618__$1 = function() {
                                  var statearr_184637 = state_184618;
                                  statearr_184637[17] = inst_184555;
                                  statearr_184637[8] = inst_184561;
                                  statearr_184637[9] = inst_184562;
                                  statearr_184637[10] = inst_184563;
                                  statearr_184637[11] = inst_184564;
                                  return statearr_184637;
                                }();
                                var statearr_184638_184713 = state_184618__$1;
                                statearr_184638_184713[2] = null;
                                statearr_184638_184713[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_184619 === 38) {
                                  var inst_184602 = state_184618[2];
                                  var state_184618__$1 = state_184618;
                                  var statearr_184639_184714 = state_184618__$1;
                                  statearr_184639_184714[2] = inst_184602;
                                  statearr_184639_184714[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_184619 === 7) {
                                    var inst_184614 = state_184618[2];
                                    var state_184618__$1 = state_184618;
                                    var statearr_184640_184715 = state_184618__$1;
                                    statearr_184640_184715[2] = inst_184614;
                                    statearr_184640_184715[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_184619 === 39) {
                                      var inst_184581 = state_184618[7];
                                      var inst_184598 = state_184618[2];
                                      var inst_184599 = cljs.core.next.call(null, inst_184581);
                                      var inst_184561 = inst_184599;
                                      var inst_184562 = null;
                                      var inst_184563 = 0;
                                      var inst_184564 = 0;
                                      var state_184618__$1 = function() {
                                        var statearr_184641 = state_184618;
                                        statearr_184641[18] = inst_184598;
                                        statearr_184641[8] = inst_184561;
                                        statearr_184641[9] = inst_184562;
                                        statearr_184641[10] = inst_184563;
                                        statearr_184641[11] = inst_184564;
                                        return statearr_184641;
                                      }();
                                      var statearr_184642_184716 = state_184618__$1;
                                      statearr_184642_184716[2] = null;
                                      statearr_184642_184716[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_184619 === 8) {
                                        var inst_184505 = state_184618[13];
                                        var inst_184504 = state_184618[15];
                                        var inst_184507 = inst_184505 < inst_184504;
                                        var inst_184508 = inst_184507;
                                        var state_184618__$1 = state_184618;
                                        if (cljs.core.truth_(inst_184508)) {
                                          var statearr_184643_184717 = state_184618__$1;
                                          statearr_184643_184717[1] = 10;
                                        } else {
                                          var statearr_184644_184718 = state_184618__$1;
                                          statearr_184644_184718[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_184619 === 40) {
                                          var inst_184590 = state_184618[16];
                                          var inst_184591 = state_184618[2];
                                          var inst_184592 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_184593 = cljs.core.async.untap_STAR_.call(null, m, inst_184590);
                                          var state_184618__$1 = function() {
                                            var statearr_184645 = state_184618;
                                            statearr_184645[19] = inst_184592;
                                            statearr_184645[20] = inst_184591;
                                            return statearr_184645;
                                          }();
                                          var statearr_184646_184719 = state_184618__$1;
                                          statearr_184646_184719[2] = inst_184593;
                                          statearr_184646_184719[1] = 39;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_184619 === 9) {
                                            var inst_184550 = state_184618[2];
                                            var state_184618__$1 = state_184618;
                                            var statearr_184647_184720 = state_184618__$1;
                                            statearr_184647_184720[2] = inst_184550;
                                            statearr_184647_184720[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_184619 === 41) {
                                              try {
                                                var inst_184590 = state_184618[16];
                                                var inst_184493 = state_184618[6];
                                                var inst_184596 = cljs.core.async.put_BANG_.call(null, inst_184590, inst_184493, done);
                                                var state_184618__$1 = state_184618;
                                                var statearr_184650_184721 = state_184618__$1;
                                                statearr_184650_184721[2] = inst_184596;
                                                statearr_184650_184721[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } catch (e184648) {
                                                if (e184648 instanceof Object) {
                                                  var ex__5826__auto__ = e184648;
                                                  var statearr_184649_184722 = state_184618;
                                                  statearr_184649_184722[1] = 40;
                                                  statearr_184649_184722[2] = ex__5826__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                    throw e184648;
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            } else {
                                              if (state_val_184619 === 10) {
                                                var inst_184505 = state_184618[13];
                                                var inst_184503 = state_184618[14];
                                                var inst_184511 = cljs.core._nth.call(null, inst_184503, inst_184505);
                                                var inst_184512 = cljs.core.nth.call(null, inst_184511, 0, null);
                                                var inst_184513 = cljs.core.nth.call(null, inst_184511, 1, null);
                                                var state_184618__$1 = function() {
                                                  var statearr_184651 = state_184618;
                                                  statearr_184651[21] = inst_184512;
                                                  return statearr_184651;
                                                }();
                                                if (cljs.core.truth_(inst_184513)) {
                                                  var statearr_184652_184723 = state_184618__$1;
                                                  statearr_184652_184723[1] = 13;
                                                } else {
                                                  var statearr_184653_184724 = state_184618__$1;
                                                  statearr_184653_184724[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_184619 === 42) {
                                                  var inst_184611 = state_184618[2];
                                                  var state_184618__$1 = function() {
                                                    var statearr_184654 = state_184618;
                                                    statearr_184654[22] = inst_184611;
                                                    return statearr_184654;
                                                  }();
                                                  var statearr_184655_184725 = state_184618__$1;
                                                  statearr_184655_184725[2] = null;
                                                  statearr_184655_184725[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_184619 === 11) {
                                                    var inst_184522 = state_184618[23];
                                                    var inst_184502 = state_184618[12];
                                                    var inst_184522__$1 = cljs.core.seq.call(null, inst_184502);
                                                    var state_184618__$1 = function() {
                                                      var statearr_184656 = state_184618;
                                                      statearr_184656[23] = inst_184522__$1;
                                                      return statearr_184656;
                                                    }();
                                                    if (inst_184522__$1) {
                                                      var statearr_184657_184726 = state_184618__$1;
                                                      statearr_184657_184726[1] = 16;
                                                    } else {
                                                      var statearr_184658_184727 = state_184618__$1;
                                                      statearr_184658_184727[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_184619 === 12) {
                                                      var inst_184548 = state_184618[2];
                                                      var state_184618__$1 = state_184618;
                                                      var statearr_184659_184728 = state_184618__$1;
                                                      statearr_184659_184728[2] = inst_184548;
                                                      statearr_184659_184728[1] = 9;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_184619 === 13) {
                                                        var inst_184512 = state_184618[21];
                                                        var inst_184515 = cljs.core.async.close_BANG_.call(null, inst_184512);
                                                        var state_184618__$1 = state_184618;
                                                        var statearr_184663_184729 = state_184618__$1;
                                                        statearr_184663_184729[2] = inst_184515;
                                                        statearr_184663_184729[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_184619 === 14) {
                                                          var state_184618__$1 = state_184618;
                                                          var statearr_184664_184730 = state_184618__$1;
                                                          statearr_184664_184730[2] = null;
                                                          statearr_184664_184730[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_184619 === 15) {
                                                            var inst_184502 = state_184618[12];
                                                            var inst_184505 = state_184618[13];
                                                            var inst_184503 = state_184618[14];
                                                            var inst_184504 = state_184618[15];
                                                            var inst_184518 = state_184618[2];
                                                            var inst_184519 = inst_184505 + 1;
                                                            var tmp184660 = inst_184502;
                                                            var tmp184661 = inst_184503;
                                                            var tmp184662 = inst_184504;
                                                            var inst_184502__$1 = tmp184660;
                                                            var inst_184503__$1 = tmp184661;
                                                            var inst_184504__$1 = tmp184662;
                                                            var inst_184505__$1 = inst_184519;
                                                            var state_184618__$1 = function() {
                                                              var statearr_184665 = state_184618;
                                                              statearr_184665[24] = inst_184518;
                                                              statearr_184665[12] = inst_184502__$1;
                                                              statearr_184665[13] = inst_184505__$1;
                                                              statearr_184665[14] = inst_184503__$1;
                                                              statearr_184665[15] = inst_184504__$1;
                                                              return statearr_184665;
                                                            }();
                                                            var statearr_184666_184731 = state_184618__$1;
                                                            statearr_184666_184731[2] = null;
                                                            statearr_184666_184731[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_184619 === 16) {
                                                              var inst_184522 = state_184618[23];
                                                              var inst_184524 = cljs.core.chunked_seq_QMARK_.call(null, inst_184522);
                                                              var state_184618__$1 = state_184618;
                                                              if (inst_184524) {
                                                                var statearr_184667_184732 = state_184618__$1;
                                                                statearr_184667_184732[1] = 19;
                                                              } else {
                                                                var statearr_184668_184733 = state_184618__$1;
                                                                statearr_184668_184733[1] = 20;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_184619 === 17) {
                                                                var state_184618__$1 = state_184618;
                                                                var statearr_184669_184734 = state_184618__$1;
                                                                statearr_184669_184734[2] = null;
                                                                statearr_184669_184734[1] = 18;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_184619 === 18) {
                                                                  var inst_184546 = state_184618[2];
                                                                  var state_184618__$1 = state_184618;
                                                                  var statearr_184670_184735 = state_184618__$1;
                                                                  statearr_184670_184735[2] = inst_184546;
                                                                  statearr_184670_184735[1] = 12;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_184619 === 19) {
                                                                    var inst_184522 = state_184618[23];
                                                                    var inst_184526 = cljs.core.chunk_first.call(null, inst_184522);
                                                                    var inst_184527 = cljs.core.chunk_rest.call(null, inst_184522);
                                                                    var inst_184528 = cljs.core.count.call(null, inst_184526);
                                                                    var inst_184502 = inst_184527;
                                                                    var inst_184503 = inst_184526;
                                                                    var inst_184504 = inst_184528;
                                                                    var inst_184505 = 0;
                                                                    var state_184618__$1 = function() {
                                                                      var statearr_184671 = state_184618;
                                                                      statearr_184671[12] = inst_184502;
                                                                      statearr_184671[13] = inst_184505;
                                                                      statearr_184671[14] = inst_184503;
                                                                      statearr_184671[15] = inst_184504;
                                                                      return statearr_184671;
                                                                    }();
                                                                    var statearr_184672_184736 = state_184618__$1;
                                                                    statearr_184672_184736[2] = null;
                                                                    statearr_184672_184736[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_184619 === 20) {
                                                                      var inst_184522 = state_184618[23];
                                                                      var inst_184532 = cljs.core.first.call(null, inst_184522);
                                                                      var inst_184533 = cljs.core.nth.call(null, inst_184532, 0, null);
                                                                      var inst_184534 = cljs.core.nth.call(null, inst_184532, 1, null);
                                                                      var state_184618__$1 = function() {
                                                                        var statearr_184673 = state_184618;
                                                                        statearr_184673[25] = inst_184533;
                                                                        return statearr_184673;
                                                                      }();
                                                                      if (cljs.core.truth_(inst_184534)) {
                                                                        var statearr_184674_184737 = state_184618__$1;
                                                                        statearr_184674_184737[1] = 22;
                                                                      } else {
                                                                        var statearr_184675_184738 = state_184618__$1;
                                                                        statearr_184675_184738[1] = 23;
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_184619 === 21) {
                                                                        var inst_184543 = state_184618[2];
                                                                        var state_184618__$1 = state_184618;
                                                                        var statearr_184676_184739 = state_184618__$1;
                                                                        statearr_184676_184739[2] = inst_184543;
                                                                        statearr_184676_184739[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_184619 === 22) {
                                                                          var inst_184533 = state_184618[25];
                                                                          var inst_184536 = cljs.core.async.close_BANG_.call(null, inst_184533);
                                                                          var state_184618__$1 = state_184618;
                                                                          var statearr_184677_184740 = state_184618__$1;
                                                                          statearr_184677_184740[2] = inst_184536;
                                                                          statearr_184677_184740[1] = 24;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_184619 === 23) {
                                                                            var state_184618__$1 = state_184618;
                                                                            var statearr_184678_184741 = state_184618__$1;
                                                                            statearr_184678_184741[2] = null;
                                                                            statearr_184678_184741[1] = 24;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_184619 === 24) {
                                                                              var inst_184522 = state_184618[23];
                                                                              var inst_184539 = state_184618[2];
                                                                              var inst_184540 = cljs.core.next.call(null, inst_184522);
                                                                              var inst_184502 = inst_184540;
                                                                              var inst_184503 = null;
                                                                              var inst_184504 = 0;
                                                                              var inst_184505 = 0;
                                                                              var state_184618__$1 = function() {
                                                                                var statearr_184679 = state_184618;
                                                                                statearr_184679[26] = inst_184539;
                                                                                statearr_184679[12] = inst_184502;
                                                                                statearr_184679[13] = inst_184505;
                                                                                statearr_184679[14] = inst_184503;
                                                                                statearr_184679[15] = inst_184504;
                                                                                return statearr_184679;
                                                                              }();
                                                                              var statearr_184680_184742 = state_184618__$1;
                                                                              statearr_184680_184742[2] = null;
                                                                              statearr_184680_184742[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_184619 === 25) {
                                                                                var inst_184563 = state_184618[10];
                                                                                var inst_184564 = state_184618[11];
                                                                                var inst_184566 = inst_184564 < inst_184563;
                                                                                var inst_184567 = inst_184566;
                                                                                var state_184618__$1 = state_184618;
                                                                                if (cljs.core.truth_(inst_184567)) {
                                                                                  var statearr_184681_184743 = state_184618__$1;
                                                                                  statearr_184681_184743[1] = 27;
                                                                                } else {
                                                                                  var statearr_184682_184744 = state_184618__$1;
                                                                                  statearr_184682_184744[1] = 28;
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_184619 === 26) {
                                                                                  var inst_184609 = state_184618[2];
                                                                                  var state_184618__$1 = function() {
                                                                                    var statearr_184683 = state_184618;
                                                                                    statearr_184683[27] = inst_184609;
                                                                                    return statearr_184683;
                                                                                  }();
                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_184618__$1, 42, dchan);
                                                                                } else {
                                                                                  if (state_val_184619 === 27) {
                                                                                    var inst_184562 = state_184618[9];
                                                                                    var inst_184564 = state_184618[11];
                                                                                    var inst_184569 = cljs.core._nth.call(null, inst_184562, inst_184564);
                                                                                    var state_184618__$1 = function() {
                                                                                      var statearr_184684 = state_184618;
                                                                                      statearr_184684[5] = inst_184569;
                                                                                      return statearr_184684;
                                                                                    }();
                                                                                    var statearr_184685_184745 = state_184618__$1;
                                                                                    statearr_184685_184745[2] = null;
                                                                                    statearr_184685_184745[1] = 32;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_184619 === 28) {
                                                                                      var inst_184581 = state_184618[7];
                                                                                      var inst_184561 = state_184618[8];
                                                                                      var inst_184581__$1 = cljs.core.seq.call(null, inst_184561);
                                                                                      var state_184618__$1 = function() {
                                                                                        var statearr_184689 = state_184618;
                                                                                        statearr_184689[7] = inst_184581__$1;
                                                                                        return statearr_184689;
                                                                                      }();
                                                                                      if (inst_184581__$1) {
                                                                                        var statearr_184690_184746 = state_184618__$1;
                                                                                        statearr_184690_184746[1] = 33;
                                                                                      } else {
                                                                                        var statearr_184691_184747 = state_184618__$1;
                                                                                        statearr_184691_184747[1] = 34;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_184619 === 29) {
                                                                                        var inst_184607 = state_184618[2];
                                                                                        var state_184618__$1 = state_184618;
                                                                                        var statearr_184692_184748 = state_184618__$1;
                                                                                        statearr_184692_184748[2] = inst_184607;
                                                                                        statearr_184692_184748[1] = 26;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_184619 === 30) {
                                                                                          var inst_184561 = state_184618[8];
                                                                                          var inst_184562 = state_184618[9];
                                                                                          var inst_184563 = state_184618[10];
                                                                                          var inst_184564 = state_184618[11];
                                                                                          var inst_184577 = state_184618[2];
                                                                                          var inst_184578 = inst_184564 + 1;
                                                                                          var tmp184686 = inst_184561;
                                                                                          var tmp184687 = inst_184562;
                                                                                          var tmp184688 = inst_184563;
                                                                                          var inst_184561__$1 = tmp184686;
                                                                                          var inst_184562__$1 = tmp184687;
                                                                                          var inst_184563__$1 = tmp184688;
                                                                                          var inst_184564__$1 = inst_184578;
                                                                                          var state_184618__$1 = function() {
                                                                                            var statearr_184693 = state_184618;
                                                                                            statearr_184693[28] = inst_184577;
                                                                                            statearr_184693[8] = inst_184561__$1;
                                                                                            statearr_184693[9] = inst_184562__$1;
                                                                                            statearr_184693[10] = inst_184563__$1;
                                                                                            statearr_184693[11] = inst_184564__$1;
                                                                                            return statearr_184693;
                                                                                          }();
                                                                                          var statearr_184694_184749 = state_184618__$1;
                                                                                          statearr_184694_184749[2] = null;
                                                                                          statearr_184694_184749[1] = 25;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_184619 === 31) {
                                                                                            var inst_184569 = state_184618[5];
                                                                                            var inst_184570 = state_184618[2];
                                                                                            var inst_184571 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                            var inst_184572 = cljs.core.async.untap_STAR_.call(null, m, inst_184569);
                                                                                            var state_184618__$1 = function() {
                                                                                              var statearr_184695 = state_184618;
                                                                                              statearr_184695[29] = inst_184571;
                                                                                              statearr_184695[30] = inst_184570;
                                                                                              return statearr_184695;
                                                                                            }();
                                                                                            var statearr_184696_184750 = state_184618__$1;
                                                                                            statearr_184696_184750[2] = inst_184572;
                                                                                            statearr_184696_184750[1] = 30;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            return null;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_184698 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_184698[0] = state_machine__5833__auto__;
            statearr_184698[1] = 1;
            return statearr_184698;
          };
          var state_machine__5833__auto____1 = function(state_184618) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_184618);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_184618) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_184618);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_184699 = f__5883__auto__.call(null);
      statearr_184699[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___184700;
      return statearr_184699;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj184752 = {};
  return obj184752;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t184858 !== "undefined") {
    } else {
      cljs.core.async.t184858 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta184859) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta184859 = meta184859;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t184858.cljs$lang$type = true;
      cljs.core.async.t184858.cljs$lang$ctorStr = "cljs.core.async/t184858";
      cljs.core.async.t184858.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
          return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t184858");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t184858.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t184858.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t184858.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t184858.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t184858.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t184858.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t184858.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t184858.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t184858.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_184860) {
          var self__ = this;
          var _184860__$1 = this;
          return self__.meta184859;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t184858.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_184860, meta184859__$1) {
          var self__ = this;
          var _184860__$1 = this;
          return new cljs.core.async.t184858(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta184859__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t184858 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t184858(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta184859) {
          return new cljs.core.async.t184858(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta184859);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t184858(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__5882__auto___184963 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_184925) {
        var state_val_184926 = state_184925[1];
        if (state_val_184926 === 1) {
          var inst_184864 = state_184925[5];
          var inst_184864__$1 = calc_state.call(null);
          var inst_184865 = cljs.core.seq_QMARK_.call(null, inst_184864__$1);
          var state_184925__$1 = function() {
            var statearr_184927 = state_184925;
            statearr_184927[5] = inst_184864__$1;
            return statearr_184927;
          }();
          if (inst_184865) {
            var statearr_184928_184964 = state_184925__$1;
            statearr_184928_184964[1] = 2;
          } else {
            var statearr_184929_184965 = state_184925__$1;
            statearr_184929_184965[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_184926 === 2) {
            var inst_184864 = state_184925[5];
            var inst_184867 = cljs.core.apply.call(null, cljs.core.hash_map, inst_184864);
            var state_184925__$1 = state_184925;
            var statearr_184930_184966 = state_184925__$1;
            statearr_184930_184966[2] = inst_184867;
            statearr_184930_184966[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_184926 === 3) {
              var inst_184864 = state_184925[5];
              var state_184925__$1 = state_184925;
              var statearr_184931_184967 = state_184925__$1;
              statearr_184931_184967[2] = inst_184864;
              statearr_184931_184967[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_184926 === 4) {
                var inst_184864 = state_184925[5];
                var inst_184870 = state_184925[2];
                var inst_184871 = cljs.core.get.call(null, inst_184870, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_184872 = cljs.core.get.call(null, inst_184870, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_184873 = cljs.core.get.call(null, inst_184870, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_184874 = inst_184864;
                var state_184925__$1 = function() {
                  var statearr_184932 = state_184925;
                  statearr_184932[6] = inst_184874;
                  statearr_184932[7] = inst_184873;
                  statearr_184932[8] = inst_184871;
                  statearr_184932[9] = inst_184872;
                  return statearr_184932;
                }();
                var statearr_184933_184968 = state_184925__$1;
                statearr_184933_184968[2] = null;
                statearr_184933_184968[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_184926 === 5) {
                  var inst_184874 = state_184925[6];
                  var inst_184877 = cljs.core.seq_QMARK_.call(null, inst_184874);
                  var state_184925__$1 = state_184925;
                  if (inst_184877) {
                    var statearr_184934_184969 = state_184925__$1;
                    statearr_184934_184969[1] = 7;
                  } else {
                    var statearr_184935_184970 = state_184925__$1;
                    statearr_184935_184970[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_184926 === 6) {
                    var inst_184923 = state_184925[2];
                    var state_184925__$1 = state_184925;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_184925__$1, inst_184923);
                  } else {
                    if (state_val_184926 === 7) {
                      var inst_184874 = state_184925[6];
                      var inst_184879 = cljs.core.apply.call(null, cljs.core.hash_map, inst_184874);
                      var state_184925__$1 = state_184925;
                      var statearr_184936_184971 = state_184925__$1;
                      statearr_184936_184971[2] = inst_184879;
                      statearr_184936_184971[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_184926 === 8) {
                        var inst_184874 = state_184925[6];
                        var state_184925__$1 = state_184925;
                        var statearr_184937_184972 = state_184925__$1;
                        statearr_184937_184972[2] = inst_184874;
                        statearr_184937_184972[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_184926 === 9) {
                          var inst_184882 = state_184925[10];
                          var inst_184882__$1 = state_184925[2];
                          var inst_184883 = cljs.core.get.call(null, inst_184882__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_184884 = cljs.core.get.call(null, inst_184882__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_184885 = cljs.core.get.call(null, inst_184882__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_184925__$1 = function() {
                            var statearr_184938 = state_184925;
                            statearr_184938[11] = inst_184885;
                            statearr_184938[12] = inst_184884;
                            statearr_184938[10] = inst_184882__$1;
                            return statearr_184938;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_184925__$1, 10, inst_184883);
                        } else {
                          if (state_val_184926 === 10) {
                            var inst_184889 = state_184925[13];
                            var inst_184890 = state_184925[14];
                            var inst_184888 = state_184925[2];
                            var inst_184889__$1 = cljs.core.nth.call(null, inst_184888, 0, null);
                            var inst_184890__$1 = cljs.core.nth.call(null, inst_184888, 1, null);
                            var inst_184891 = inst_184889__$1 == null;
                            var inst_184892 = cljs.core._EQ_.call(null, inst_184890__$1, change);
                            var inst_184893 = inst_184891 || inst_184892;
                            var state_184925__$1 = function() {
                              var statearr_184939 = state_184925;
                              statearr_184939[13] = inst_184889__$1;
                              statearr_184939[14] = inst_184890__$1;
                              return statearr_184939;
                            }();
                            if (cljs.core.truth_(inst_184893)) {
                              var statearr_184940_184973 = state_184925__$1;
                              statearr_184940_184973[1] = 11;
                            } else {
                              var statearr_184941_184974 = state_184925__$1;
                              statearr_184941_184974[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_184926 === 11) {
                              var inst_184889 = state_184925[13];
                              var inst_184895 = inst_184889 == null;
                              var state_184925__$1 = state_184925;
                              if (cljs.core.truth_(inst_184895)) {
                                var statearr_184942_184975 = state_184925__$1;
                                statearr_184942_184975[1] = 14;
                              } else {
                                var statearr_184943_184976 = state_184925__$1;
                                statearr_184943_184976[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_184926 === 12) {
                                var inst_184885 = state_184925[11];
                                var inst_184904 = state_184925[15];
                                var inst_184890 = state_184925[14];
                                var inst_184904__$1 = inst_184885.call(null, inst_184890);
                                var state_184925__$1 = function() {
                                  var statearr_184944 = state_184925;
                                  statearr_184944[15] = inst_184904__$1;
                                  return statearr_184944;
                                }();
                                if (cljs.core.truth_(inst_184904__$1)) {
                                  var statearr_184945_184977 = state_184925__$1;
                                  statearr_184945_184977[1] = 17;
                                } else {
                                  var statearr_184946_184978 = state_184925__$1;
                                  statearr_184946_184978[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_184926 === 13) {
                                  var inst_184921 = state_184925[2];
                                  var state_184925__$1 = state_184925;
                                  var statearr_184947_184979 = state_184925__$1;
                                  statearr_184947_184979[2] = inst_184921;
                                  statearr_184947_184979[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_184926 === 14) {
                                    var inst_184890 = state_184925[14];
                                    var inst_184897 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_184890);
                                    var state_184925__$1 = state_184925;
                                    var statearr_184948_184980 = state_184925__$1;
                                    statearr_184948_184980[2] = inst_184897;
                                    statearr_184948_184980[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_184926 === 15) {
                                      var state_184925__$1 = state_184925;
                                      var statearr_184949_184981 = state_184925__$1;
                                      statearr_184949_184981[2] = null;
                                      statearr_184949_184981[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_184926 === 16) {
                                        var inst_184900 = state_184925[2];
                                        var inst_184901 = calc_state.call(null);
                                        var inst_184874 = inst_184901;
                                        var state_184925__$1 = function() {
                                          var statearr_184950 = state_184925;
                                          statearr_184950[6] = inst_184874;
                                          statearr_184950[16] = inst_184900;
                                          return statearr_184950;
                                        }();
                                        var statearr_184951_184982 = state_184925__$1;
                                        statearr_184951_184982[2] = null;
                                        statearr_184951_184982[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_184926 === 17) {
                                          var inst_184904 = state_184925[15];
                                          var state_184925__$1 = state_184925;
                                          var statearr_184952_184983 = state_184925__$1;
                                          statearr_184952_184983[2] = inst_184904;
                                          statearr_184952_184983[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_184926 === 18) {
                                            var inst_184885 = state_184925[11];
                                            var inst_184884 = state_184925[12];
                                            var inst_184890 = state_184925[14];
                                            var inst_184907 = cljs.core.empty_QMARK_.call(null, inst_184885);
                                            var inst_184908 = inst_184884.call(null, inst_184890);
                                            var inst_184909 = cljs.core.not.call(null, inst_184908);
                                            var inst_184910 = inst_184907 && inst_184909;
                                            var state_184925__$1 = state_184925;
                                            var statearr_184953_184984 = state_184925__$1;
                                            statearr_184953_184984[2] = inst_184910;
                                            statearr_184953_184984[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_184926 === 19) {
                                              var inst_184912 = state_184925[2];
                                              var state_184925__$1 = state_184925;
                                              if (cljs.core.truth_(inst_184912)) {
                                                var statearr_184954_184985 = state_184925__$1;
                                                statearr_184954_184985[1] = 20;
                                              } else {
                                                var statearr_184955_184986 = state_184925__$1;
                                                statearr_184955_184986[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_184926 === 20) {
                                                var inst_184889 = state_184925[13];
                                                var state_184925__$1 = state_184925;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_184925__$1, 23, out, inst_184889);
                                              } else {
                                                if (state_val_184926 === 21) {
                                                  var state_184925__$1 = state_184925;
                                                  var statearr_184956_184987 = state_184925__$1;
                                                  statearr_184956_184987[2] = null;
                                                  statearr_184956_184987[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_184926 === 22) {
                                                    var inst_184882 = state_184925[10];
                                                    var inst_184918 = state_184925[2];
                                                    var inst_184874 = inst_184882;
                                                    var state_184925__$1 = function() {
                                                      var statearr_184957 = state_184925;
                                                      statearr_184957[6] = inst_184874;
                                                      statearr_184957[17] = inst_184918;
                                                      return statearr_184957;
                                                    }();
                                                    var statearr_184958_184988 = state_184925__$1;
                                                    statearr_184958_184988[2] = null;
                                                    statearr_184958_184988[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_184926 === 23) {
                                                      var inst_184915 = state_184925[2];
                                                      var state_184925__$1 = state_184925;
                                                      var statearr_184959_184989 = state_184925__$1;
                                                      statearr_184959_184989[2] = inst_184915;
                                                      statearr_184959_184989[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_184961 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_184961[0] = state_machine__5833__auto__;
            statearr_184961[1] = 1;
            return statearr_184961;
          };
          var state_machine__5833__auto____1 = function(state_184925) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_184925);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_184925) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_184925);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_184962 = f__5883__auto__.call(null);
      statearr_184962[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___184963;
      return statearr_184962;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj184991 = {};
  return obj184991;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3392__auto__ = p;
    if (and__3392__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4025__auto__ = p == null ? null : p;
    return function() {
      var or__3404__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3392__auto__ = p;
    if (and__3392__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4025__auto__ = p == null ? null : p;
    return function() {
      var or__3404__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3392__auto__ = p;
      if (and__3392__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4025__auto__ = p == null ? null : p;
      return function() {
        var or__3404__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3392__auto__ = p;
      if (and__3392__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4025__auto__ = p == null ? null : p;
      return function() {
        var or__3404__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3404__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3404__auto__, mults) {
            return function(p1__184992_SHARP_) {
              if (cljs.core.truth_(p1__184992_SHARP_.call(null, topic))) {
                return p1__184992_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__184992_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3404__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t185116 !== "undefined") {
      } else {
        cljs.core.async.t185116 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta185117) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta185117 = meta185117;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t185116.cljs$lang$type = true;
        cljs.core.async.t185116.cljs$lang$ctorStr = "cljs.core.async/t185116";
        cljs.core.async.t185116.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
            return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t185116");
          };
        }(mults, ensure_mult);
        cljs.core.async.t185116.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t185116.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t185116.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t185116.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t185116.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t185116.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t185116.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t185116.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_185118) {
            var self__ = this;
            var _185118__$1 = this;
            return self__.meta185117;
          };
        }(mults, ensure_mult);
        cljs.core.async.t185116.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_185118, meta185117__$1) {
            var self__ = this;
            var _185118__$1 = this;
            return new cljs.core.async.t185116(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta185117__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t185116 = function(mults, ensure_mult) {
          return function __GT_t185116(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta185117) {
            return new cljs.core.async.t185116(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta185117);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t185116(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5882__auto___185239 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_185191) {
          var state_val_185192 = state_185191[1];
          if (state_val_185192 === 1) {
            var state_185191__$1 = state_185191;
            var statearr_185193_185240 = state_185191__$1;
            statearr_185193_185240[2] = null;
            statearr_185193_185240[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_185192 === 2) {
              var state_185191__$1 = state_185191;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_185191__$1, 4, ch);
            } else {
              if (state_val_185192 === 3) {
                var inst_185189 = state_185191[2];
                var state_185191__$1 = state_185191;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_185191__$1, inst_185189);
              } else {
                if (state_val_185192 === 4) {
                  var inst_185121 = state_185191[5];
                  var inst_185121__$1 = state_185191[2];
                  var inst_185122 = inst_185121__$1 == null;
                  var state_185191__$1 = function() {
                    var statearr_185194 = state_185191;
                    statearr_185194[5] = inst_185121__$1;
                    return statearr_185194;
                  }();
                  if (cljs.core.truth_(inst_185122)) {
                    var statearr_185195_185241 = state_185191__$1;
                    statearr_185195_185241[1] = 5;
                  } else {
                    var statearr_185196_185242 = state_185191__$1;
                    statearr_185196_185242[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_185192 === 5) {
                    var inst_185128 = cljs.core.deref.call(null, mults);
                    var inst_185129 = cljs.core.vals.call(null, inst_185128);
                    var inst_185130 = cljs.core.seq.call(null, inst_185129);
                    var inst_185131 = inst_185130;
                    var inst_185132 = null;
                    var inst_185133 = 0;
                    var inst_185134 = 0;
                    var state_185191__$1 = function() {
                      var statearr_185197 = state_185191;
                      statearr_185197[6] = inst_185133;
                      statearr_185197[7] = inst_185134;
                      statearr_185197[8] = inst_185132;
                      statearr_185197[9] = inst_185131;
                      return statearr_185197;
                    }();
                    var statearr_185198_185243 = state_185191__$1;
                    statearr_185198_185243[2] = null;
                    statearr_185198_185243[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_185192 === 6) {
                      var inst_185121 = state_185191[5];
                      var inst_185171 = state_185191[10];
                      var inst_185169 = state_185191[11];
                      var inst_185169__$1 = topic_fn.call(null, inst_185121);
                      var inst_185170 = cljs.core.deref.call(null, mults);
                      var inst_185171__$1 = cljs.core.get.call(null, inst_185170, inst_185169__$1);
                      var state_185191__$1 = function() {
                        var statearr_185199 = state_185191;
                        statearr_185199[10] = inst_185171__$1;
                        statearr_185199[11] = inst_185169__$1;
                        return statearr_185199;
                      }();
                      if (cljs.core.truth_(inst_185171__$1)) {
                        var statearr_185200_185244 = state_185191__$1;
                        statearr_185200_185244[1] = 19;
                      } else {
                        var statearr_185201_185245 = state_185191__$1;
                        statearr_185201_185245[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_185192 === 7) {
                        var inst_185187 = state_185191[2];
                        var state_185191__$1 = state_185191;
                        var statearr_185202_185246 = state_185191__$1;
                        statearr_185202_185246[2] = inst_185187;
                        statearr_185202_185246[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_185192 === 8) {
                          var inst_185133 = state_185191[6];
                          var inst_185134 = state_185191[7];
                          var inst_185136 = inst_185134 < inst_185133;
                          var inst_185137 = inst_185136;
                          var state_185191__$1 = state_185191;
                          if (cljs.core.truth_(inst_185137)) {
                            var statearr_185206_185247 = state_185191__$1;
                            statearr_185206_185247[1] = 10;
                          } else {
                            var statearr_185207_185248 = state_185191__$1;
                            statearr_185207_185248[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_185192 === 9) {
                            var inst_185167 = state_185191[2];
                            var state_185191__$1 = state_185191;
                            var statearr_185208_185249 = state_185191__$1;
                            statearr_185208_185249[2] = inst_185167;
                            statearr_185208_185249[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_185192 === 10) {
                              var inst_185133 = state_185191[6];
                              var inst_185134 = state_185191[7];
                              var inst_185132 = state_185191[8];
                              var inst_185131 = state_185191[9];
                              var inst_185139 = cljs.core._nth.call(null, inst_185132, inst_185134);
                              var inst_185140 = cljs.core.async.muxch_STAR_.call(null, inst_185139);
                              var inst_185141 = cljs.core.async.close_BANG_.call(null, inst_185140);
                              var inst_185142 = inst_185134 + 1;
                              var tmp185203 = inst_185133;
                              var tmp185204 = inst_185132;
                              var tmp185205 = inst_185131;
                              var inst_185131__$1 = tmp185205;
                              var inst_185132__$1 = tmp185204;
                              var inst_185133__$1 = tmp185203;
                              var inst_185134__$1 = inst_185142;
                              var state_185191__$1 = function() {
                                var statearr_185209 = state_185191;
                                statearr_185209[6] = inst_185133__$1;
                                statearr_185209[7] = inst_185134__$1;
                                statearr_185209[12] = inst_185141;
                                statearr_185209[8] = inst_185132__$1;
                                statearr_185209[9] = inst_185131__$1;
                                return statearr_185209;
                              }();
                              var statearr_185210_185250 = state_185191__$1;
                              statearr_185210_185250[2] = null;
                              statearr_185210_185250[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_185192 === 11) {
                                var inst_185145 = state_185191[13];
                                var inst_185131 = state_185191[9];
                                var inst_185145__$1 = cljs.core.seq.call(null, inst_185131);
                                var state_185191__$1 = function() {
                                  var statearr_185211 = state_185191;
                                  statearr_185211[13] = inst_185145__$1;
                                  return statearr_185211;
                                }();
                                if (inst_185145__$1) {
                                  var statearr_185212_185251 = state_185191__$1;
                                  statearr_185212_185251[1] = 13;
                                } else {
                                  var statearr_185213_185252 = state_185191__$1;
                                  statearr_185213_185252[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_185192 === 12) {
                                  var inst_185165 = state_185191[2];
                                  var state_185191__$1 = state_185191;
                                  var statearr_185214_185253 = state_185191__$1;
                                  statearr_185214_185253[2] = inst_185165;
                                  statearr_185214_185253[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_185192 === 13) {
                                    var inst_185145 = state_185191[13];
                                    var inst_185147 = cljs.core.chunked_seq_QMARK_.call(null, inst_185145);
                                    var state_185191__$1 = state_185191;
                                    if (inst_185147) {
                                      var statearr_185215_185254 = state_185191__$1;
                                      statearr_185215_185254[1] = 16;
                                    } else {
                                      var statearr_185216_185255 = state_185191__$1;
                                      statearr_185216_185255[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_185192 === 14) {
                                      var state_185191__$1 = state_185191;
                                      var statearr_185217_185256 = state_185191__$1;
                                      statearr_185217_185256[2] = null;
                                      statearr_185217_185256[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_185192 === 15) {
                                        var inst_185163 = state_185191[2];
                                        var state_185191__$1 = state_185191;
                                        var statearr_185218_185257 = state_185191__$1;
                                        statearr_185218_185257[2] = inst_185163;
                                        statearr_185218_185257[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_185192 === 16) {
                                          var inst_185145 = state_185191[13];
                                          var inst_185149 = cljs.core.chunk_first.call(null, inst_185145);
                                          var inst_185150 = cljs.core.chunk_rest.call(null, inst_185145);
                                          var inst_185151 = cljs.core.count.call(null, inst_185149);
                                          var inst_185131 = inst_185150;
                                          var inst_185132 = inst_185149;
                                          var inst_185133 = inst_185151;
                                          var inst_185134 = 0;
                                          var state_185191__$1 = function() {
                                            var statearr_185219 = state_185191;
                                            statearr_185219[6] = inst_185133;
                                            statearr_185219[7] = inst_185134;
                                            statearr_185219[8] = inst_185132;
                                            statearr_185219[9] = inst_185131;
                                            return statearr_185219;
                                          }();
                                          var statearr_185220_185258 = state_185191__$1;
                                          statearr_185220_185258[2] = null;
                                          statearr_185220_185258[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_185192 === 17) {
                                            var inst_185145 = state_185191[13];
                                            var inst_185154 = cljs.core.first.call(null, inst_185145);
                                            var inst_185155 = cljs.core.async.muxch_STAR_.call(null, inst_185154);
                                            var inst_185156 = cljs.core.async.close_BANG_.call(null, inst_185155);
                                            var inst_185157 = cljs.core.next.call(null, inst_185145);
                                            var inst_185131 = inst_185157;
                                            var inst_185132 = null;
                                            var inst_185133 = 0;
                                            var inst_185134 = 0;
                                            var state_185191__$1 = function() {
                                              var statearr_185221 = state_185191;
                                              statearr_185221[14] = inst_185156;
                                              statearr_185221[6] = inst_185133;
                                              statearr_185221[7] = inst_185134;
                                              statearr_185221[8] = inst_185132;
                                              statearr_185221[9] = inst_185131;
                                              return statearr_185221;
                                            }();
                                            var statearr_185222_185259 = state_185191__$1;
                                            statearr_185222_185259[2] = null;
                                            statearr_185222_185259[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_185192 === 18) {
                                              var inst_185160 = state_185191[2];
                                              var state_185191__$1 = state_185191;
                                              var statearr_185223_185260 = state_185191__$1;
                                              statearr_185223_185260[2] = inst_185160;
                                              statearr_185223_185260[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_185192 === 19) {
                                                var state_185191__$1 = state_185191;
                                                var statearr_185224_185261 = state_185191__$1;
                                                statearr_185224_185261[2] = null;
                                                statearr_185224_185261[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_185192 === 20) {
                                                  var state_185191__$1 = state_185191;
                                                  var statearr_185225_185262 = state_185191__$1;
                                                  statearr_185225_185262[2] = null;
                                                  statearr_185225_185262[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_185192 === 21) {
                                                    var inst_185184 = state_185191[2];
                                                    var state_185191__$1 = function() {
                                                      var statearr_185226 = state_185191;
                                                      statearr_185226[15] = inst_185184;
                                                      return statearr_185226;
                                                    }();
                                                    var statearr_185227_185263 = state_185191__$1;
                                                    statearr_185227_185263[2] = null;
                                                    statearr_185227_185263[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_185192 === 22) {
                                                      var inst_185181 = state_185191[2];
                                                      var state_185191__$1 = state_185191;
                                                      var statearr_185228_185264 = state_185191__$1;
                                                      statearr_185228_185264[2] = inst_185181;
                                                      statearr_185228_185264[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_185192 === 23) {
                                                        var inst_185169 = state_185191[11];
                                                        var inst_185173 = state_185191[2];
                                                        var inst_185174 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_185169);
                                                        var state_185191__$1 = function() {
                                                          var statearr_185229 = state_185191;
                                                          statearr_185229[16] = inst_185173;
                                                          return statearr_185229;
                                                        }();
                                                        var statearr_185230_185265 = state_185191__$1;
                                                        statearr_185230_185265[2] = inst_185174;
                                                        statearr_185230_185265[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_185192 === 24) {
                                                          try {
                                                            var inst_185121 = state_185191[5];
                                                            var inst_185171 = state_185191[10];
                                                            var inst_185177 = cljs.core.async.muxch_STAR_.call(null, inst_185171);
                                                            var state_185191__$1 = state_185191;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_185191__$1, 25, inst_185177, inst_185121);
                                                          } catch (e185231) {
                                                            if (e185231 instanceof Object) {
                                                              var ex__5826__auto__ = e185231;
                                                              var statearr_185232_185266 = state_185191;
                                                              statearr_185232_185266[1] = 23;
                                                              statearr_185232_185266[2] = ex__5826__auto__;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                throw e185231;
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        } else {
                                                          if (state_val_185192 === 25) {
                                                            try {
                                                              var inst_185179 = state_185191[2];
                                                              var state_185191__$1 = state_185191;
                                                              var statearr_185235_185267 = state_185191__$1;
                                                              statearr_185235_185267[2] = inst_185179;
                                                              statearr_185235_185267[1] = 22;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } catch (e185233) {
                                                              if (e185233 instanceof Object) {
                                                                var ex__5826__auto__ = e185233;
                                                                var statearr_185234_185268 = state_185191;
                                                                statearr_185234_185268[1] = 23;
                                                                statearr_185234_185268[2] = ex__5826__auto__;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                  throw e185233;
                                                                } else {
                                                                  return null;
                                                                }
                                                              }
                                                            }
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_185237 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_185237[0] = state_machine__5833__auto__;
              statearr_185237[1] = 1;
              return statearr_185237;
            };
            var state_machine__5833__auto____1 = function(state_185191) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_185191);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_185191) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_185191);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_185238 = f__5883__auto__.call(null);
        statearr_185238[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___185239;
        return statearr_185238;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5882__auto___185399 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_185371) {
          var state_val_185372 = state_185371[1];
          if (state_val_185372 === 1) {
            var state_185371__$1 = state_185371;
            var statearr_185373_185400 = state_185371__$1;
            statearr_185373_185400[2] = null;
            statearr_185373_185400[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_185372 === 2) {
              var inst_185335 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_185336 = 0;
              var state_185371__$1 = function() {
                var statearr_185374 = state_185371;
                statearr_185374[5] = inst_185336;
                statearr_185374[6] = inst_185335;
                return statearr_185374;
              }();
              var statearr_185375_185401 = state_185371__$1;
              statearr_185375_185401[2] = null;
              statearr_185375_185401[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_185372 === 3) {
                var inst_185369 = state_185371[2];
                var state_185371__$1 = state_185371;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_185371__$1, inst_185369);
              } else {
                if (state_val_185372 === 4) {
                  var inst_185336 = state_185371[5];
                  var inst_185338 = inst_185336 < cnt;
                  var state_185371__$1 = state_185371;
                  if (cljs.core.truth_(inst_185338)) {
                    var statearr_185376_185402 = state_185371__$1;
                    statearr_185376_185402[1] = 6;
                  } else {
                    var statearr_185377_185403 = state_185371__$1;
                    statearr_185377_185403[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_185372 === 5) {
                    var inst_185355 = state_185371[2];
                    var state_185371__$1 = function() {
                      var statearr_185378 = state_185371;
                      statearr_185378[7] = inst_185355;
                      return statearr_185378;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_185371__$1, 12, dchan);
                  } else {
                    if (state_val_185372 === 6) {
                      var state_185371__$1 = state_185371;
                      var statearr_185379_185404 = state_185371__$1;
                      statearr_185379_185404[2] = null;
                      statearr_185379_185404[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_185372 === 7) {
                        var state_185371__$1 = state_185371;
                        var statearr_185380_185405 = state_185371__$1;
                        statearr_185380_185405[2] = null;
                        statearr_185380_185405[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_185372 === 8) {
                          var inst_185353 = state_185371[2];
                          var state_185371__$1 = state_185371;
                          var statearr_185381_185406 = state_185371__$1;
                          statearr_185381_185406[2] = inst_185353;
                          statearr_185381_185406[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_185372 === 9) {
                            var inst_185336 = state_185371[5];
                            var inst_185348 = state_185371[2];
                            var inst_185349 = inst_185336 + 1;
                            var inst_185336__$1 = inst_185349;
                            var state_185371__$1 = function() {
                              var statearr_185382 = state_185371;
                              statearr_185382[5] = inst_185336__$1;
                              statearr_185382[8] = inst_185348;
                              return statearr_185382;
                            }();
                            var statearr_185383_185407 = state_185371__$1;
                            statearr_185383_185407[2] = null;
                            statearr_185383_185407[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_185372 === 10) {
                              var inst_185340 = state_185371[2];
                              var inst_185341 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_185371__$1 = function() {
                                var statearr_185384 = state_185371;
                                statearr_185384[9] = inst_185340;
                                return statearr_185384;
                              }();
                              var statearr_185385_185408 = state_185371__$1;
                              statearr_185385_185408[2] = inst_185341;
                              statearr_185385_185408[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_185372 === 11) {
                                try {
                                  var inst_185336 = state_185371[5];
                                  var inst_185344 = chs__$1.call(null, inst_185336);
                                  var inst_185345 = done.call(null, inst_185336);
                                  var inst_185346 = cljs.core.async.take_BANG_.call(null, inst_185344, inst_185345);
                                  var state_185371__$1 = state_185371;
                                  var statearr_185388_185409 = state_185371__$1;
                                  statearr_185388_185409[2] = inst_185346;
                                  statearr_185388_185409[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } catch (e185386) {
                                  if (e185386 instanceof Object) {
                                    var ex__5826__auto__ = e185386;
                                    var statearr_185387_185410 = state_185371;
                                    statearr_185387_185410[1] = 10;
                                    statearr_185387_185410[2] = ex__5826__auto__;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                      throw e185386;
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              } else {
                                if (state_val_185372 === 12) {
                                  var inst_185357 = state_185371[10];
                                  var inst_185357__$1 = state_185371[2];
                                  var inst_185358 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_185357__$1);
                                  var state_185371__$1 = function() {
                                    var statearr_185389 = state_185371;
                                    statearr_185389[10] = inst_185357__$1;
                                    return statearr_185389;
                                  }();
                                  if (cljs.core.truth_(inst_185358)) {
                                    var statearr_185390_185411 = state_185371__$1;
                                    statearr_185390_185411[1] = 13;
                                  } else {
                                    var statearr_185391_185412 = state_185371__$1;
                                    statearr_185391_185412[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_185372 === 13) {
                                    var inst_185360 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_185371__$1 = state_185371;
                                    var statearr_185392_185413 = state_185371__$1;
                                    statearr_185392_185413[2] = inst_185360;
                                    statearr_185392_185413[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_185372 === 14) {
                                      var inst_185357 = state_185371[10];
                                      var inst_185362 = cljs.core.apply.call(null, f, inst_185357);
                                      var state_185371__$1 = state_185371;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_185371__$1, 16, out, inst_185362);
                                    } else {
                                      if (state_val_185372 === 15) {
                                        var inst_185367 = state_185371[2];
                                        var state_185371__$1 = state_185371;
                                        var statearr_185393_185414 = state_185371__$1;
                                        statearr_185393_185414[2] = inst_185367;
                                        statearr_185393_185414[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_185372 === 16) {
                                          var inst_185364 = state_185371[2];
                                          var state_185371__$1 = function() {
                                            var statearr_185394 = state_185371;
                                            statearr_185394[11] = inst_185364;
                                            return statearr_185394;
                                          }();
                                          var statearr_185395_185415 = state_185371__$1;
                                          statearr_185395_185415[2] = null;
                                          statearr_185395_185415[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_185397 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_185397[0] = state_machine__5833__auto__;
              statearr_185397[1] = 1;
              return statearr_185397;
            };
            var state_machine__5833__auto____1 = function(state_185371) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_185371);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_185371) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_185371);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_185398 = f__5883__auto__.call(null);
        statearr_185398[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___185399;
        return statearr_185398;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5882__auto___185515 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_185495) {
          var state_val_185496 = state_185495[1];
          if (state_val_185496 === 1) {
            var inst_185466 = cljs.core.vec.call(null, chs);
            var inst_185467 = inst_185466;
            var state_185495__$1 = function() {
              var statearr_185497 = state_185495;
              statearr_185497[5] = inst_185467;
              return statearr_185497;
            }();
            var statearr_185498_185516 = state_185495__$1;
            statearr_185498_185516[2] = null;
            statearr_185498_185516[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_185496 === 2) {
              var inst_185467 = state_185495[5];
              var inst_185469 = cljs.core.count.call(null, inst_185467);
              var inst_185470 = inst_185469 > 0;
              var state_185495__$1 = state_185495;
              if (cljs.core.truth_(inst_185470)) {
                var statearr_185499_185517 = state_185495__$1;
                statearr_185499_185517[1] = 4;
              } else {
                var statearr_185500_185518 = state_185495__$1;
                statearr_185500_185518[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_185496 === 3) {
                var inst_185493 = state_185495[2];
                var state_185495__$1 = state_185495;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_185495__$1, inst_185493);
              } else {
                if (state_val_185496 === 4) {
                  var inst_185467 = state_185495[5];
                  var state_185495__$1 = state_185495;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_185495__$1, 7, inst_185467);
                } else {
                  if (state_val_185496 === 5) {
                    var inst_185489 = cljs.core.async.close_BANG_.call(null, out);
                    var state_185495__$1 = state_185495;
                    var statearr_185501_185519 = state_185495__$1;
                    statearr_185501_185519[2] = inst_185489;
                    statearr_185501_185519[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_185496 === 6) {
                      var inst_185491 = state_185495[2];
                      var state_185495__$1 = state_185495;
                      var statearr_185502_185520 = state_185495__$1;
                      statearr_185502_185520[2] = inst_185491;
                      statearr_185502_185520[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_185496 === 7) {
                        var inst_185474 = state_185495[6];
                        var inst_185475 = state_185495[7];
                        var inst_185474__$1 = state_185495[2];
                        var inst_185475__$1 = cljs.core.nth.call(null, inst_185474__$1, 0, null);
                        var inst_185476 = cljs.core.nth.call(null, inst_185474__$1, 1, null);
                        var inst_185477 = inst_185475__$1 == null;
                        var state_185495__$1 = function() {
                          var statearr_185503 = state_185495;
                          statearr_185503[6] = inst_185474__$1;
                          statearr_185503[7] = inst_185475__$1;
                          statearr_185503[8] = inst_185476;
                          return statearr_185503;
                        }();
                        if (cljs.core.truth_(inst_185477)) {
                          var statearr_185504_185521 = state_185495__$1;
                          statearr_185504_185521[1] = 8;
                        } else {
                          var statearr_185505_185522 = state_185495__$1;
                          statearr_185505_185522[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_185496 === 8) {
                          var inst_185474 = state_185495[6];
                          var inst_185475 = state_185495[7];
                          var inst_185476 = state_185495[8];
                          var inst_185467 = state_185495[5];
                          var inst_185479 = function() {
                            var c = inst_185476;
                            var v = inst_185475;
                            var vec__185472 = inst_185474;
                            var cs = inst_185467;
                            return function(c, v, vec__185472, cs, inst_185474, inst_185475, inst_185476, inst_185467, state_val_185496) {
                              return function(p1__185416_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__185416_SHARP_);
                              };
                            }(c, v, vec__185472, cs, inst_185474, inst_185475, inst_185476, inst_185467, state_val_185496);
                          }();
                          var inst_185480 = cljs.core.filterv.call(null, inst_185479, inst_185467);
                          var inst_185467__$1 = inst_185480;
                          var state_185495__$1 = function() {
                            var statearr_185506 = state_185495;
                            statearr_185506[5] = inst_185467__$1;
                            return statearr_185506;
                          }();
                          var statearr_185507_185523 = state_185495__$1;
                          statearr_185507_185523[2] = null;
                          statearr_185507_185523[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_185496 === 9) {
                            var inst_185475 = state_185495[7];
                            var state_185495__$1 = state_185495;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_185495__$1, 11, out, inst_185475);
                          } else {
                            if (state_val_185496 === 10) {
                              var inst_185487 = state_185495[2];
                              var state_185495__$1 = state_185495;
                              var statearr_185509_185524 = state_185495__$1;
                              statearr_185509_185524[2] = inst_185487;
                              statearr_185509_185524[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_185496 === 11) {
                                var inst_185467 = state_185495[5];
                                var inst_185484 = state_185495[2];
                                var tmp185508 = inst_185467;
                                var inst_185467__$1 = tmp185508;
                                var state_185495__$1 = function() {
                                  var statearr_185510 = state_185495;
                                  statearr_185510[9] = inst_185484;
                                  statearr_185510[5] = inst_185467__$1;
                                  return statearr_185510;
                                }();
                                var statearr_185511_185525 = state_185495__$1;
                                statearr_185511_185525[2] = null;
                                statearr_185511_185525[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_185513 = [null, null, null, null, null, null, null, null, null, null];
              statearr_185513[0] = state_machine__5833__auto__;
              statearr_185513[1] = 1;
              return statearr_185513;
            };
            var state_machine__5833__auto____1 = function(state_185495) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_185495);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_185495) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_185495);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_185514 = f__5883__auto__.call(null);
        statearr_185514[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___185515;
        return statearr_185514;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("chaperone.websocket");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc.Response");
goog.require("chaperone.crossover.rpc.Request");
goog.require("chaperone.crossover.rpc");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
chaperone.websocket.create_sub_system = function create_sub_system(system, host, port) {
  var sub_system = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "host", "host", 1017112858), host, new cljs.core.Keyword(null, "port", "port", 1017351155), port, new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), 
  new cljs.core.Keyword(null, "edn-readers", "edn-readers", 2679897956), chaperone.crossover.rpc.all_edn_readers.call(null)], null);
  return cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), sub_system);
};
chaperone.websocket.sub_system = function sub_system(system) {
  return(new cljs.core.Keyword(null, "websocket", "websocket", 784338745)).cljs$core$IFn$_invoke$arity$1(system);
};
chaperone.websocket.respond_BANG_ = function respond_BANG_(web_sockets, response) {
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_sockets);
  var rpc_id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(response));
  var rpc_chan = cljs.core.get.call(null, cljs.core.deref.call(null, rpc_map), rpc_id);
  cljs.core.async.put_BANG_.call(null, rpc_chan, response);
  cljs.core.async.close_BANG_.call(null, rpc_chan);
  return cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.dissoc, rpc_id);
};
chaperone.websocket.start_request_chan_listen_BANG_ = function start_request_chan_listen_BANG_(web_socket) {
  var socket = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(web_socket);
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_181938) {
        var state_val_181939 = state_181938[1];
        if (state_val_181939 === 8) {
          var inst_181930 = state_181938[2];
          var inst_181923 = inst_181930;
          var state_181938__$1 = function() {
            var statearr_181940 = state_181938;
            statearr_181940[5] = inst_181923;
            return statearr_181940;
          }();
          var statearr_181941_181952 = state_181938__$1;
          statearr_181941_181952[2] = null;
          statearr_181941_181952[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_181939 === 7) {
            var inst_181934 = state_181938[2];
            var state_181938__$1 = state_181938;
            var statearr_181942_181953 = state_181938__$1;
            statearr_181942_181953[2] = inst_181934;
            statearr_181942_181953[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_181939 === 6) {
              var state_181938__$1 = state_181938;
              var statearr_181943_181954 = state_181938__$1;
              statearr_181943_181954[2] = null;
              statearr_181943_181954[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_181939 === 5) {
                var inst_181928 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_181938__$1 = state_181938;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_181938__$1, 8, inst_181928);
              } else {
                if (state_val_181939 === 4) {
                  var inst_181936 = state_181938[2];
                  var state_181938__$1 = state_181938;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_181938__$1, inst_181936);
                } else {
                  if (state_val_181939 === 3) {
                    var inst_181923 = state_181938[5];
                    var inst_181925 = cljs.core.pr_str.call(null, inst_181923);
                    var inst_181926 = socket.send(inst_181925);
                    var state_181938__$1 = function() {
                      var statearr_181944 = state_181938;
                      statearr_181944[6] = inst_181926;
                      return statearr_181944;
                    }();
                    if (cljs.core.truth_(inst_181923)) {
                      var statearr_181945_181955 = state_181938__$1;
                      statearr_181945_181955[1] = 5;
                    } else {
                      var statearr_181946_181956 = state_181938__$1;
                      statearr_181946_181956[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_181939 === 2) {
                      var inst_181922 = state_181938[2];
                      var inst_181923 = inst_181922;
                      var state_181938__$1 = function() {
                        var statearr_181947 = state_181938;
                        statearr_181947[5] = inst_181923;
                        return statearr_181947;
                      }();
                      var statearr_181948_181957 = state_181938__$1;
                      statearr_181948_181957[2] = null;
                      statearr_181948_181957[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_181939 === 1) {
                        var inst_181920 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
                        var state_181938__$1 = state_181938;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_181938__$1, 2, inst_181920);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_181950 = [null, null, null, null, null, null, null];
            statearr_181950[0] = state_machine__5833__auto__;
            statearr_181950[1] = 1;
            return statearr_181950;
          };
          var state_machine__5833__auto____1 = function(state_181938) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_181938);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_181938) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_181938);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_181951 = f__5883__auto__.call(null);
      statearr_181951[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_181951;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
chaperone.websocket.start_response_chan_listen_BANG_ = function start_response_chan_listen_BANG_(web_socket) {
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_182008) {
        var state_val_182009 = state_182008[1];
        if (state_val_182009 === 8) {
          var inst_182000 = state_182008[2];
          var inst_181993 = inst_182000;
          var state_182008__$1 = function() {
            var statearr_182010 = state_182008;
            statearr_182010[5] = inst_181993;
            return statearr_182010;
          }();
          var statearr_182011_182022 = state_182008__$1;
          statearr_182011_182022[2] = null;
          statearr_182011_182022[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_182009 === 7) {
            var inst_182004 = state_182008[2];
            var state_182008__$1 = state_182008;
            var statearr_182012_182023 = state_182008__$1;
            statearr_182012_182023[2] = inst_182004;
            statearr_182012_182023[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_182009 === 6) {
              var state_182008__$1 = state_182008;
              var statearr_182013_182024 = state_182008__$1;
              statearr_182013_182024[2] = null;
              statearr_182013_182024[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_182009 === 5) {
                var inst_181998 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_182008__$1 = state_182008;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_182008__$1, 8, inst_181998);
              } else {
                if (state_val_182009 === 4) {
                  var inst_182006 = state_182008[2];
                  var state_182008__$1 = state_182008;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_182008__$1, inst_182006);
                } else {
                  if (state_val_182009 === 3) {
                    var inst_181993 = state_182008[5];
                    var inst_181995 = cljs.reader.read_string.call(null, inst_181993);
                    var inst_181996 = chaperone.websocket.respond_BANG_.call(null, web_socket, inst_181995);
                    var state_182008__$1 = function() {
                      var statearr_182014 = state_182008;
                      statearr_182014[6] = inst_181996;
                      return statearr_182014;
                    }();
                    if (cljs.core.truth_(inst_181993)) {
                      var statearr_182015_182025 = state_182008__$1;
                      statearr_182015_182025[1] = 5;
                    } else {
                      var statearr_182016_182026 = state_182008__$1;
                      statearr_182016_182026[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_182009 === 2) {
                      var inst_181992 = state_182008[2];
                      var inst_181993 = inst_181992;
                      var state_182008__$1 = function() {
                        var statearr_182017 = state_182008;
                        statearr_182017[5] = inst_181993;
                        return statearr_182017;
                      }();
                      var statearr_182018_182027 = state_182008__$1;
                      statearr_182018_182027[2] = null;
                      statearr_182018_182027[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_182009 === 1) {
                        var inst_181990 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket);
                        var state_182008__$1 = state_182008;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_182008__$1, 2, inst_181990);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_182020 = [null, null, null, null, null, null, null];
            statearr_182020[0] = state_machine__5833__auto__;
            statearr_182020[1] = 1;
            return statearr_182020;
          };
          var state_machine__5833__auto____1 = function(state_182008) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_182008);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_182008) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_182008);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_182021 = f__5883__auto__.call(null);
      statearr_182021[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_182021;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
chaperone.websocket.connect_websocket_BANG_ = function connect_websocket_BANG_(web_socket, socket_connected) {
  var ws_url = [cljs.core.str("ws://"), cljs.core.str((new cljs.core.Keyword(null, "host", "host", 1017112858)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str(":"), cljs.core.str((new cljs.core.Keyword(null, "port", "port", 1017351155)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str("/rpc")].join("");
  var socket = new WebSocket(ws_url);
  console.log("Connecting to WS: ", ws_url);
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onopen"], null), function() {
    console.log("Connected!");
    return cljs.core.async.put_BANG_.call(null, socket_connected, true);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onerror"], null), function(e) {
    return console.error("Websocket Error: ", e);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onmessage"], null), function(e) {
    console.log("On Message: ", purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
    return cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket), purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
  });
  return socket;
};
chaperone.websocket.start_BANG_ = function start_BANG_(system) {
  var seq__182044_182060 = cljs.core.seq.call(null, chaperone.crossover.rpc.all_edn_readers.call(null));
  var chunk__182045_182061 = null;
  var count__182046_182062 = 0;
  var i__182047_182063 = 0;
  while (true) {
    if (i__182047_182063 < count__182046_182062) {
      var vec__182048_182064 = cljs.core._nth.call(null, chunk__182045_182061, i__182047_182063);
      var tag_182065 = cljs.core.nth.call(null, vec__182048_182064, 0, null);
      var f_182066 = cljs.core.nth.call(null, vec__182048_182064, 1, null);
      cljs.reader.register_tag_parser_BANG_.call(null, tag_182065, f_182066);
      var G__182067 = seq__182044_182060;
      var G__182068 = chunk__182045_182061;
      var G__182069 = count__182046_182062;
      var G__182070 = i__182047_182063 + 1;
      seq__182044_182060 = G__182067;
      chunk__182045_182061 = G__182068;
      count__182046_182062 = G__182069;
      i__182047_182063 = G__182070;
      continue;
    } else {
      var temp__4092__auto___182071 = cljs.core.seq.call(null, seq__182044_182060);
      if (temp__4092__auto___182071) {
        var seq__182044_182072__$1 = temp__4092__auto___182071;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__182044_182072__$1)) {
          var c__4146__auto___182073 = cljs.core.chunk_first.call(null, seq__182044_182072__$1);
          var G__182074 = cljs.core.chunk_rest.call(null, seq__182044_182072__$1);
          var G__182075 = c__4146__auto___182073;
          var G__182076 = cljs.core.count.call(null, c__4146__auto___182073);
          var G__182077 = 0;
          seq__182044_182060 = G__182074;
          chunk__182045_182061 = G__182075;
          count__182046_182062 = G__182076;
          i__182047_182063 = G__182077;
          continue;
        } else {
          var vec__182049_182078 = cljs.core.first.call(null, seq__182044_182072__$1);
          var tag_182079 = cljs.core.nth.call(null, vec__182049_182078, 0, null);
          var f_182080 = cljs.core.nth.call(null, vec__182049_182078, 1, null);
          cljs.reader.register_tag_parser_BANG_.call(null, tag_182079, f_182080);
          var G__182081 = cljs.core.next.call(null, seq__182044_182072__$1);
          var G__182082 = null;
          var G__182083 = 0;
          var G__182084 = 0;
          seq__182044_182060 = G__182081;
          chunk__182045_182061 = G__182082;
          count__182046_182062 = G__182083;
          i__182047_182063 = G__182084;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  var socket_connected = cljs.core.async.timeout.call(null, 1E4);
  var socket = chaperone.websocket.connect_websocket_BANG_.call(null, web_socket, socket_connected);
  var web_socket__$1 = cljs.core.assoc.call(null, web_socket, new cljs.core.Keyword(null, "socket", "socket", 4411822821), socket);
  chaperone.websocket.start_response_chan_listen_BANG_.call(null, web_socket__$1);
  var system__$1 = cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), web_socket__$1);
  var c__5882__auto___182085 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_182054) {
        var state_val_182055 = state_182054[1];
        if (state_val_182055 === 2) {
          var inst_182051 = state_182054[2];
          var inst_182052 = chaperone.websocket.start_request_chan_listen_BANG_.call(null, web_socket__$1);
          var state_182054__$1 = function() {
            var statearr_182056 = state_182054;
            statearr_182056[5] = inst_182051;
            return statearr_182056;
          }();
          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_182054__$1, inst_182052);
        } else {
          if (state_val_182055 === 1) {
            var state_182054__$1 = state_182054;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_182054__$1, 2, socket_connected);
          } else {
            return null;
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_182058 = [null, null, null, null, null, null];
            statearr_182058[0] = state_machine__5833__auto__;
            statearr_182058[1] = 1;
            return statearr_182058;
          };
          var state_machine__5833__auto____1 = function(state_182054) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_182054);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_182054) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_182054);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_182059 = f__5883__auto__.call(null);
      statearr_182059[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___182085;
      return statearr_182059;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return system__$1;
};
chaperone.websocket.stop_BANG_ = function stop_BANG_(system) {
  var web_socket_182086 = chaperone.websocket.sub_system.call(null, system);
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket_182086));
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket_182086));
  return system;
};
chaperone.websocket.send_BANG_ = function send_BANG_(web_socket, request) {
  var id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(request);
  var request_chan = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
  var result_chan = cljs.core.async.chan.call(null);
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_socket);
  cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.assoc, id, result_chan);
  cljs.core.async.put_BANG_.call(null, request_chan, request);
  return result_chan;
};
goog.provide("purnam.common");
goog.require("cljs.core");
purnam.common.flags = function() {
  var obj185929 = {};
  return obj185929;
}();
purnam.common.get_context = function get_context() {
  return purnam.common._STAR_pure_context_STAR_;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__185930 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__185930;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__185934 = cljs.core._EQ_;
    var expr__185935 = limit;
    if (cljs.core.truth_(pred__185934.call(null, 1, expr__185935))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__185934.call(null, 2, expr__185935))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__185937 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__185938 = limit__$1 - 1;
            var G__185939 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__185937;
            limit__$1 = G__185938;
            parts = G__185939;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__185940 = index - 1;
        index = G__185940;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___185941 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___185941)) {
        var replacement_185942 = temp__4090__auto___185941;
        buffer.append([cljs.core.str(replacement_185942)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__185943 = index + 1;
      index = G__185943;
      continue;
    }
    break;
  }
};
goog.provide("purnam.native$");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("purnam.common");
goog.require("purnam.common");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.native$.nested_val = function nested_val(p__185607, val) {
  var vec__185611 = p__185607;
  var k = cljs.core.nth.call(null, vec__185611, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__185611, 1);
  if (k == null) {
    return val;
  } else {
    var o = function() {
      var obj185613 = {};
      return obj185613;
    }();
    o[k] = nested_val.call(null, ks, val);
    return o;
  }
};
purnam.native$.nested_delete = function nested_delete(p__185614, val) {
  var vec__185616 = p__185614;
  var k = cljs.core.nth.call(null, vec__185616, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__185616, 1);
  if (ks == null) {
    delete val[k];
  } else {
    nested_delete.call(null, ks, val);
  }
  return val;
};
purnam.native$.aset_in = function() {
  var aset_in = null;
  var aset_in__2 = function(var$, arr) {
    return aset_in.call(null, var$, arr, null);
  };
  var aset_in__3 = function(var$, arr, val) {
    var vec__185618 = arr;
    var k = cljs.core.nth.call(null, vec__185618, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__185618, 1);
    if (k == null) {
    } else {
      if (cljs.core.empty_QMARK_.call(null, ks)) {
        if (cljs.core.truth_(val)) {
          var$[k] = val;
        } else {
          delete var$[k];
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var temp__4090__auto___185619 = var$[k];
          if (cljs.core.truth_(temp__4090__auto___185619)) {
            var svar_185620 = temp__4090__auto___185619;
            aset_in.call(null, svar_185620, ks, val);
          } else {
            if (cljs.core.truth_(val)) {
              var$[k] = purnam.native$.nested_val.call(null, ks, val);
            } else {
            }
          }
        } else {
        }
      }
    }
    return var$;
  };
  aset_in = function(var$, arr, val) {
    switch(arguments.length) {
      case 2:
        return aset_in__2.call(this, var$, arr);
      case 3:
        return aset_in__3.call(this, var$, arr, val);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset_in.cljs$core$IFn$_invoke$arity$2 = aset_in__2;
  aset_in.cljs$core$IFn$_invoke$arity$3 = aset_in__3;
  return aset_in;
}();
purnam.native$.aget_in = function() {
  var aget_in = null;
  var aget_in__1 = function(var$) {
    return var$;
  };
  var aget_in__2 = function(var$, arr) {
    if (var$ == null) {
      return null;
    } else {
      if (cljs.core.empty_QMARK_.call(null, arr)) {
        return var$;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return aget_in.call(null, var$[cljs.core.first.call(null, arr)], cljs.core.next.call(null, arr));
        } else {
          return null;
        }
      }
    }
  };
  aget_in = function(var$, arr) {
    switch(arguments.length) {
      case 1:
        return aget_in__1.call(this, var$);
      case 2:
        return aget_in__2.call(this, var$, arr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget_in.cljs$core$IFn$_invoke$arity$1 = aget_in__1;
  aget_in.cljs$core$IFn$_invoke$arity$2 = aget_in__2;
  return aget_in;
}();
purnam.native$.js_strkey = function js_strkey(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(x)].join("");
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_obj_name = function js_obj_name(this$) {
  var temp__4090__auto__ = cljs.core.re_find.call(null, /^function (\w+)/, [cljs.core.str(this$)].join(""));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__185622 = temp__4090__auto__;
    var _ = cljs.core.nth.call(null, vec__185622, 0, null);
    var n = cljs.core.nth.call(null, vec__185622, 1, null);
    return n;
  } else {
    return "Object";
  }
};
purnam.native$.js_type = function js_type(o) {
  var ty = cljs.core.type.call(null, o);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3392__auto__ = ty;
    if (cljs.core.truth_(and__3392__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3392__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(o);
  return ty__$1;
};
purnam.native$.js_lookup = function() {
  var js_lookup = null;
  var js_lookup__2 = function(o, k) {
    return o[purnam.native$.js_strkey.call(null, k)];
  };
  var js_lookup__3 = function(o, k, not_found) {
    var s = purnam.native$.js_strkey.call(null, k);
    var temp__4090__auto__ = o[s];
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return res;
    } else {
      return not_found;
    }
  };
  js_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return js_lookup__2.call(this, o, k);
      case 3:
        return js_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_lookup.cljs$core$IFn$_invoke$arity$2 = js_lookup__2;
  js_lookup.cljs$core$IFn$_invoke$arity$3 = js_lookup__3;
  return js_lookup;
}();
purnam.native$.js_range = function js_range(n) {
  var res = new Array(n);
  var i = 0;
  while (true) {
    if (i < n) {
      res.push(i);
      var G__185623 = i + 1;
      i = G__185623;
      continue;
    } else {
      return res;
    }
    break;
  }
};
purnam.native$.js_assoc = function() {
  var js_assoc = null;
  var js_assoc__3 = function(o, k, v) {
    o[purnam.native$.js_strkey.call(null, k)] = v;
    return o;
  };
  var js_assoc__4 = function() {
    var G__185624__delegate = function(o, k, v, more) {
      while (true) {
        js_assoc.call(null, o, k, v);
        if (cljs.core.truth_(more)) {
          var G__185625 = o;
          var G__185626 = cljs.core.first.call(null, more);
          var G__185627 = cljs.core.second.call(null, more);
          var G__185628 = cljs.core.nnext.call(null, more);
          o = G__185625;
          k = G__185626;
          v = G__185627;
          more = G__185628;
          continue;
        } else {
          return o;
        }
        break;
      }
    };
    var G__185624 = function(o, k, v, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__185624__delegate.call(this, o, k, v, more);
    };
    G__185624.cljs$lang$maxFixedArity = 3;
    G__185624.cljs$lang$applyTo = function(arglist__185629) {
      var o = cljs.core.first(arglist__185629);
      arglist__185629 = cljs.core.next(arglist__185629);
      var k = cljs.core.first(arglist__185629);
      arglist__185629 = cljs.core.next(arglist__185629);
      var v = cljs.core.first(arglist__185629);
      var more = cljs.core.rest(arglist__185629);
      return G__185624__delegate(o, k, v, more);
    };
    G__185624.cljs$core$IFn$_invoke$arity$variadic = G__185624__delegate;
    return G__185624;
  }();
  js_assoc = function(o, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return js_assoc__3.call(this, o, k, v);
      default:
        return js_assoc__4.cljs$core$IFn$_invoke$arity$variadic(o, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_assoc.cljs$lang$maxFixedArity = 3;
  js_assoc.cljs$lang$applyTo = js_assoc__4.cljs$lang$applyTo;
  js_assoc.cljs$core$IFn$_invoke$arity$3 = js_assoc__3;
  js_assoc.cljs$core$IFn$_invoke$arity$variadic = js_assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return js_assoc;
}();
purnam.native$.js_dissoc = function() {
  var js_dissoc__delegate = function(o, k, more) {
    while (true) {
      delete o[purnam.native$.js_strkey.call(null, k)];
      if (cljs.core.truth_(more)) {
        var G__185630 = o;
        var G__185631 = cljs.core.first.call(null, more);
        var G__185632 = cljs.core.next.call(null, more);
        o = G__185630;
        k = G__185631;
        more = G__185632;
        continue;
      } else {
        return o;
      }
      break;
    }
  };
  var js_dissoc = function(o, k, var_args) {
    var more = null;
    if (arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return js_dissoc__delegate.call(this, o, k, more);
  };
  js_dissoc.cljs$lang$maxFixedArity = 2;
  js_dissoc.cljs$lang$applyTo = function(arglist__185633) {
    var o = cljs.core.first(arglist__185633);
    arglist__185633 = cljs.core.next(arglist__185633);
    var k = cljs.core.first(arglist__185633);
    var more = cljs.core.rest(arglist__185633);
    return js_dissoc__delegate(o, k, more);
  };
  js_dissoc.cljs$core$IFn$_invoke$arity$variadic = js_dissoc__delegate;
  return js_dissoc;
}();
purnam.native$.js_empty = function js_empty(o) {
  var G__185639_185644 = goog.typeOf(o);
  if (cljs.core._EQ_.call(null, "array", G__185639_185644)) {
    o["length"] = 0;
  } else {
    if (cljs.core._EQ_.call(null, "object", G__185639_185644)) {
      var seq__185640_185645 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o));
      var chunk__185641_185646 = null;
      var count__185642_185647 = 0;
      var i__185643_185648 = 0;
      while (true) {
        if (i__185643_185648 < count__185642_185647) {
          var k_185649 = cljs.core._nth.call(null, chunk__185641_185646, i__185643_185648);
          delete o[k_185649];
          var G__185650 = seq__185640_185645;
          var G__185651 = chunk__185641_185646;
          var G__185652 = count__185642_185647;
          var G__185653 = i__185643_185648 + 1;
          seq__185640_185645 = G__185650;
          chunk__185641_185646 = G__185651;
          count__185642_185647 = G__185652;
          i__185643_185648 = G__185653;
          continue;
        } else {
          var temp__4092__auto___185654 = cljs.core.seq.call(null, seq__185640_185645);
          if (temp__4092__auto___185654) {
            var seq__185640_185655__$1 = temp__4092__auto___185654;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__185640_185655__$1)) {
              var c__4146__auto___185656 = cljs.core.chunk_first.call(null, seq__185640_185655__$1);
              var G__185657 = cljs.core.chunk_rest.call(null, seq__185640_185655__$1);
              var G__185658 = c__4146__auto___185656;
              var G__185659 = cljs.core.count.call(null, c__4146__auto___185656);
              var G__185660 = 0;
              seq__185640_185645 = G__185657;
              chunk__185641_185646 = G__185658;
              count__185642_185647 = G__185659;
              i__185643_185648 = G__185660;
              continue;
            } else {
              var k_185661 = cljs.core.first.call(null, seq__185640_185655__$1);
              delete o[k_185661];
              var G__185662 = cljs.core.next.call(null, seq__185640_185655__$1);
              var G__185663 = null;
              var G__185664 = 0;
              var G__185665 = 0;
              seq__185640_185645 = G__185662;
              chunk__185641_185646 = G__185663;
              count__185642_185647 = G__185664;
              i__185643_185648 = G__185665;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(goog.typeOf(o))].join(""));
      } else {
      }
    }
  }
  return o;
};
purnam.native$.js_merge = function() {
  var js_merge = null;
  var js_merge__2 = function(o1, o2) {
    var seq__185670_185674 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__185671_185675 = null;
    var count__185672_185676 = 0;
    var i__185673_185677 = 0;
    while (true) {
      if (i__185673_185677 < count__185672_185676) {
        var k_185678 = cljs.core._nth.call(null, chunk__185671_185675, i__185673_185677);
        o1[k_185678] = o2[k_185678];
        var G__185679 = seq__185670_185674;
        var G__185680 = chunk__185671_185675;
        var G__185681 = count__185672_185676;
        var G__185682 = i__185673_185677 + 1;
        seq__185670_185674 = G__185679;
        chunk__185671_185675 = G__185680;
        count__185672_185676 = G__185681;
        i__185673_185677 = G__185682;
        continue;
      } else {
        var temp__4092__auto___185683 = cljs.core.seq.call(null, seq__185670_185674);
        if (temp__4092__auto___185683) {
          var seq__185670_185684__$1 = temp__4092__auto___185683;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__185670_185684__$1)) {
            var c__4146__auto___185685 = cljs.core.chunk_first.call(null, seq__185670_185684__$1);
            var G__185686 = cljs.core.chunk_rest.call(null, seq__185670_185684__$1);
            var G__185687 = c__4146__auto___185685;
            var G__185688 = cljs.core.count.call(null, c__4146__auto___185685);
            var G__185689 = 0;
            seq__185670_185674 = G__185686;
            chunk__185671_185675 = G__185687;
            count__185672_185676 = G__185688;
            i__185673_185677 = G__185689;
            continue;
          } else {
            var k_185690 = cljs.core.first.call(null, seq__185670_185684__$1);
            o1[k_185690] = o2[k_185690];
            var G__185691 = cljs.core.next.call(null, seq__185670_185684__$1);
            var G__185692 = null;
            var G__185693 = 0;
            var G__185694 = 0;
            seq__185670_185674 = G__185691;
            chunk__185671_185675 = G__185692;
            count__185672_185676 = G__185693;
            i__185673_185677 = G__185694;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge__3 = function() {
    var G__185695__delegate = function(o1, o2, more) {
      return cljs.core.apply.call(null, js_merge, js_merge.call(null, o1, o2), more);
    };
    var G__185695 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__185695__delegate.call(this, o1, o2, more);
    };
    G__185695.cljs$lang$maxFixedArity = 2;
    G__185695.cljs$lang$applyTo = function(arglist__185696) {
      var o1 = cljs.core.first(arglist__185696);
      arglist__185696 = cljs.core.next(arglist__185696);
      var o2 = cljs.core.first(arglist__185696);
      var more = cljs.core.rest(arglist__185696);
      return G__185695__delegate(o1, o2, more);
    };
    G__185695.cljs$core$IFn$_invoke$arity$variadic = G__185695__delegate;
    return G__185695;
  }();
  js_merge = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge__2.call(this, o1, o2);
      default:
        return js_merge__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge.cljs$lang$maxFixedArity = 2;
  js_merge.cljs$lang$applyTo = js_merge__3.cljs$lang$applyTo;
  js_merge.cljs$core$IFn$_invoke$arity$2 = js_merge__2;
  js_merge.cljs$core$IFn$_invoke$arity$variadic = js_merge__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge;
}();
purnam.native$.js_merge_nil = function() {
  var js_merge_nil = null;
  var js_merge_nil__2 = function(o1, o2) {
    var seq__185701_185705 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__185702_185706 = null;
    var count__185703_185707 = 0;
    var i__185704_185708 = 0;
    while (true) {
      if (i__185704_185708 < count__185703_185707) {
        var k_185709 = cljs.core._nth.call(null, chunk__185702_185706, i__185704_185708);
        if (cljs.core.not.call(null, o1[k_185709])) {
          o1[k_185709] = o2[k_185709];
        } else {
        }
        var G__185710 = seq__185701_185705;
        var G__185711 = chunk__185702_185706;
        var G__185712 = count__185703_185707;
        var G__185713 = i__185704_185708 + 1;
        seq__185701_185705 = G__185710;
        chunk__185702_185706 = G__185711;
        count__185703_185707 = G__185712;
        i__185704_185708 = G__185713;
        continue;
      } else {
        var temp__4092__auto___185714 = cljs.core.seq.call(null, seq__185701_185705);
        if (temp__4092__auto___185714) {
          var seq__185701_185715__$1 = temp__4092__auto___185714;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__185701_185715__$1)) {
            var c__4146__auto___185716 = cljs.core.chunk_first.call(null, seq__185701_185715__$1);
            var G__185717 = cljs.core.chunk_rest.call(null, seq__185701_185715__$1);
            var G__185718 = c__4146__auto___185716;
            var G__185719 = cljs.core.count.call(null, c__4146__auto___185716);
            var G__185720 = 0;
            seq__185701_185705 = G__185717;
            chunk__185702_185706 = G__185718;
            count__185703_185707 = G__185719;
            i__185704_185708 = G__185720;
            continue;
          } else {
            var k_185721 = cljs.core.first.call(null, seq__185701_185715__$1);
            if (cljs.core.not.call(null, o1[k_185721])) {
              o1[k_185721] = o2[k_185721];
            } else {
            }
            var G__185722 = cljs.core.next.call(null, seq__185701_185715__$1);
            var G__185723 = null;
            var G__185724 = 0;
            var G__185725 = 0;
            seq__185701_185705 = G__185722;
            chunk__185702_185706 = G__185723;
            count__185703_185707 = G__185724;
            i__185704_185708 = G__185725;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge_nil__3 = function() {
    var G__185726__delegate = function(o1, o2, more) {
      while (true) {
        js_merge_nil.call(null, o1, o2);
        if (cljs.core.truth_(more)) {
          var G__185727 = js_merge_nil.call(null, o1, o2);
          var G__185728 = cljs.core.first.call(null, more);
          var G__185729 = cljs.core.next.call(null, more);
          o1 = G__185727;
          o2 = G__185728;
          more = G__185729;
          continue;
        } else {
          return o1;
        }
        break;
      }
    };
    var G__185726 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__185726__delegate.call(this, o1, o2, more);
    };
    G__185726.cljs$lang$maxFixedArity = 2;
    G__185726.cljs$lang$applyTo = function(arglist__185730) {
      var o1 = cljs.core.first(arglist__185730);
      arglist__185730 = cljs.core.next(arglist__185730);
      var o2 = cljs.core.first(arglist__185730);
      var more = cljs.core.rest(arglist__185730);
      return G__185726__delegate(o1, o2, more);
    };
    G__185726.cljs$core$IFn$_invoke$arity$variadic = G__185726__delegate;
    return G__185726;
  }();
  js_merge_nil = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge_nil__2.call(this, o1, o2);
      default:
        return js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge_nil.cljs$lang$maxFixedArity = 2;
  js_merge_nil.cljs$lang$applyTo = js_merge_nil__3.cljs$lang$applyTo;
  js_merge_nil.cljs$core$IFn$_invoke$arity$2 = js_merge_nil__2;
  js_merge_nil.cljs$core$IFn$_invoke$arity$variadic = js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge_nil;
}();
purnam.native$.js_replace = function js_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_merge.call(null, o1, o2);
};
purnam.native$.js_equals = function js_equals(v1, v2) {
  if (cljs.core._EQ_.call(null, v1, v2)) {
    return true;
  } else {
    var t1 = goog.typeOf(v1);
    var t2 = goog.typeOf(v2);
    if (cljs.core._EQ_.call(null, "array", t1, t2)) {
      return goog.array.equals(v1, v2, js_equals);
    } else {
      if (cljs.core._EQ_.call(null, "object", t1, t2)) {
        var ks1 = cljs.core.js_keys.call(null, v1).sort();
        var ks2 = cljs.core.js_keys.call(null, v2).sort();
        if (cljs.core.truth_(goog.array.equals(ks1, ks2))) {
          return goog.array.every(ks1, function(k) {
            return js_equals.call(null, v1[k], v2[k]);
          });
        } else {
          return false;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
  }
};
purnam.native$.js_copy = function js_copy(o) {
  return goog.object.clone(o);
};
purnam.native$.js_initial_value = function js_initial_value(v) {
  var t = goog.typeOf(v);
  if (cljs.core._EQ_.call(null, t, "object")) {
    var obj185734 = {};
    return obj185734;
  } else {
    if (cljs.core._EQ_.call(null, t, "array")) {
      return[];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return v;
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_deep_extend = function() {
  var js_deep_extend = null;
  var js_deep_extend__2 = function(to, from) {
    var visited = [from];
    var visitedlu = [to];
    js_deep_extend.call(null, to, from, visited, visitedlu);
    return to;
  };
  var js_deep_extend__4 = function(to, from, visited, visitedlu) {
    var seq__185739_185743 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, from));
    var chunk__185740_185744 = null;
    var count__185741_185745 = 0;
    var i__185742_185746 = 0;
    while (true) {
      if (i__185742_185746 < count__185741_185745) {
        var k_185747 = cljs.core._nth.call(null, chunk__185740_185744, i__185742_185746);
        var v_185748 = from[k_185747];
        var vn_185749 = purnam.native$.js_initial_value.call(null, v_185748);
        if (cljs.core.not_EQ_.call(null, v_185748, vn_185749)) {
          var i_185750 = visited.indexOf(v_185748);
          if (cljs.core._EQ_.call(null, -1, i_185750)) {
            visited.push(v_185748);
            visitedlu.push(vn_185749);
            js_deep_extend.call(null, vn_185749, v_185748, visited, visitedlu);
            to[k_185747] = vn_185749;
          } else {
            to[k_185747] = visitedlu[i_185750];
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            to[k_185747] = v_185748;
          } else {
          }
        }
        var G__185751 = seq__185739_185743;
        var G__185752 = chunk__185740_185744;
        var G__185753 = count__185741_185745;
        var G__185754 = i__185742_185746 + 1;
        seq__185739_185743 = G__185751;
        chunk__185740_185744 = G__185752;
        count__185741_185745 = G__185753;
        i__185742_185746 = G__185754;
        continue;
      } else {
        var temp__4092__auto___185755 = cljs.core.seq.call(null, seq__185739_185743);
        if (temp__4092__auto___185755) {
          var seq__185739_185756__$1 = temp__4092__auto___185755;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__185739_185756__$1)) {
            var c__4146__auto___185757 = cljs.core.chunk_first.call(null, seq__185739_185756__$1);
            var G__185758 = cljs.core.chunk_rest.call(null, seq__185739_185756__$1);
            var G__185759 = c__4146__auto___185757;
            var G__185760 = cljs.core.count.call(null, c__4146__auto___185757);
            var G__185761 = 0;
            seq__185739_185743 = G__185758;
            chunk__185740_185744 = G__185759;
            count__185741_185745 = G__185760;
            i__185742_185746 = G__185761;
            continue;
          } else {
            var k_185762 = cljs.core.first.call(null, seq__185739_185756__$1);
            var v_185763 = from[k_185762];
            var vn_185764 = purnam.native$.js_initial_value.call(null, v_185763);
            if (cljs.core.not_EQ_.call(null, v_185763, vn_185764)) {
              var i_185765 = visited.indexOf(v_185763);
              if (cljs.core._EQ_.call(null, -1, i_185765)) {
                visited.push(v_185763);
                visitedlu.push(vn_185764);
                js_deep_extend.call(null, vn_185764, v_185763, visited, visitedlu);
                to[k_185762] = vn_185764;
              } else {
                to[k_185762] = visitedlu[i_185765];
              }
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                to[k_185762] = v_185763;
              } else {
              }
            }
            var G__185766 = cljs.core.next.call(null, seq__185739_185756__$1);
            var G__185767 = null;
            var G__185768 = 0;
            var G__185769 = 0;
            seq__185739_185743 = G__185766;
            chunk__185740_185744 = G__185767;
            count__185741_185745 = G__185768;
            i__185742_185746 = G__185769;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return to;
  };
  js_deep_extend = function(to, from, visited, visitedlu) {
    switch(arguments.length) {
      case 2:
        return js_deep_extend__2.call(this, to, from);
      case 4:
        return js_deep_extend__4.call(this, to, from, visited, visitedlu);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_deep_extend.cljs$core$IFn$_invoke$arity$2 = js_deep_extend__2;
  js_deep_extend.cljs$core$IFn$_invoke$arity$4 = js_deep_extend__4;
  return js_deep_extend;
}();
purnam.native$.js_deep_copy = function js_deep_copy(value) {
  var vn = purnam.native$.js_initial_value.call(null, value);
  if (cljs.core.not_EQ_.call(null, value, vn)) {
    return purnam.native$.js_deep_extend.call(null, vn, value);
  } else {
    return value;
  }
};
purnam.native$.js_deep_replace = function js_deep_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_deep_extend.call(null, o1, o2);
};
purnam.native$.js_map_STAR_ = function() {
  var js_map_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var seq__185775_185779 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__185776_185780 = null;
    var count__185777_185781 = 0;
    var i__185778_185782 = 0;
    while (true) {
      if (i__185778_185782 < count__185777_185781) {
        var i_185783 = cljs.core._nth.call(null, chunk__185776_185780, i__185778_185782);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__185775_185779, chunk__185776_185780, count__185777_185781, i__185778_185782, i_185783) {
          return function(p1__185770_SHARP_) {
            return p1__185770_SHARP_[i_185783];
          };
        }(seq__185775_185779, chunk__185776_185780, count__185777_185781, i__185778_185782, i_185783), args)));
        var G__185784 = seq__185775_185779;
        var G__185785 = chunk__185776_185780;
        var G__185786 = count__185777_185781;
        var G__185787 = i__185778_185782 + 1;
        seq__185775_185779 = G__185784;
        chunk__185776_185780 = G__185785;
        count__185777_185781 = G__185786;
        i__185778_185782 = G__185787;
        continue;
      } else {
        var temp__4092__auto___185788 = cljs.core.seq.call(null, seq__185775_185779);
        if (temp__4092__auto___185788) {
          var seq__185775_185789__$1 = temp__4092__auto___185788;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__185775_185789__$1)) {
            var c__4146__auto___185790 = cljs.core.chunk_first.call(null, seq__185775_185789__$1);
            var G__185791 = cljs.core.chunk_rest.call(null, seq__185775_185789__$1);
            var G__185792 = c__4146__auto___185790;
            var G__185793 = cljs.core.count.call(null, c__4146__auto___185790);
            var G__185794 = 0;
            seq__185775_185779 = G__185791;
            chunk__185776_185780 = G__185792;
            count__185777_185781 = G__185793;
            i__185778_185782 = G__185794;
            continue;
          } else {
            var i_185795 = cljs.core.first.call(null, seq__185775_185789__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__185775_185779, chunk__185776_185780, count__185777_185781, i__185778_185782, i_185795, seq__185775_185789__$1, temp__4092__auto___185788) {
              return function(p1__185770_SHARP_) {
                return p1__185770_SHARP_[i_185795];
              };
            }(seq__185775_185779, chunk__185776_185780, count__185777_185781, i__185778_185782, i_185795, seq__185775_185789__$1, temp__4092__auto___185788), args)));
            var G__185796 = cljs.core.next.call(null, seq__185775_185789__$1);
            var G__185797 = null;
            var G__185798 = 0;
            var G__185799 = 0;
            seq__185775_185779 = G__185796;
            chunk__185776_185780 = G__185797;
            count__185777_185781 = G__185798;
            i__185778_185782 = G__185799;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map_STAR___delegate.call(this, f, args);
  };
  js_map_STAR_.cljs$lang$maxFixedArity = 1;
  js_map_STAR_.cljs$lang$applyTo = function(arglist__185800) {
    var f = cljs.core.first(arglist__185800);
    var args = cljs.core.rest(arglist__185800);
    return js_map_STAR___delegate(f, args);
  };
  js_map_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_map_STAR___delegate;
  return js_map_STAR_;
}();
purnam.native$.js_mapcat_STAR_ = function() {
  var js_mapcat_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__185801_SHARP_) {
            return p1__185801_SHARP_[i];
          };
        }(i, output__$1), args));
        var G__185802 = i + 1;
        var G__185803 = output__$1.concat(res);
        i = G__185802;
        output__$1 = G__185803;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat_STAR___delegate.call(this, f, args);
  };
  js_mapcat_STAR_.cljs$lang$maxFixedArity = 1;
  js_mapcat_STAR_.cljs$lang$applyTo = function(arglist__185804) {
    var f = cljs.core.first(arglist__185804);
    var args = cljs.core.rest(arglist__185804);
    return js_mapcat_STAR___delegate(f, args);
  };
  js_mapcat_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_mapcat_STAR___delegate;
  return js_mapcat_STAR_;
}();
purnam.native$.js_map = function() {
  var js_map__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var seq__185810_185814 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__185811_185815 = null;
    var count__185812_185816 = 0;
    var i__185813_185817 = 0;
    while (true) {
      if (i__185813_185817 < count__185812_185816) {
        var i_185818 = cljs.core._nth.call(null, chunk__185811_185815, i__185813_185817);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__185810_185814, chunk__185811_185815, count__185812_185816, i__185813_185817, i_185818) {
          return function(p1__185805_SHARP_) {
            return cljs.core.nth.call(null, p1__185805_SHARP_, i_185818);
          };
        }(seq__185810_185814, chunk__185811_185815, count__185812_185816, i__185813_185817, i_185818), args)));
        var G__185819 = seq__185810_185814;
        var G__185820 = chunk__185811_185815;
        var G__185821 = count__185812_185816;
        var G__185822 = i__185813_185817 + 1;
        seq__185810_185814 = G__185819;
        chunk__185811_185815 = G__185820;
        count__185812_185816 = G__185821;
        i__185813_185817 = G__185822;
        continue;
      } else {
        var temp__4092__auto___185823 = cljs.core.seq.call(null, seq__185810_185814);
        if (temp__4092__auto___185823) {
          var seq__185810_185824__$1 = temp__4092__auto___185823;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__185810_185824__$1)) {
            var c__4146__auto___185825 = cljs.core.chunk_first.call(null, seq__185810_185824__$1);
            var G__185826 = cljs.core.chunk_rest.call(null, seq__185810_185824__$1);
            var G__185827 = c__4146__auto___185825;
            var G__185828 = cljs.core.count.call(null, c__4146__auto___185825);
            var G__185829 = 0;
            seq__185810_185814 = G__185826;
            chunk__185811_185815 = G__185827;
            count__185812_185816 = G__185828;
            i__185813_185817 = G__185829;
            continue;
          } else {
            var i_185830 = cljs.core.first.call(null, seq__185810_185824__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__185810_185814, chunk__185811_185815, count__185812_185816, i__185813_185817, i_185830, seq__185810_185824__$1, temp__4092__auto___185823) {
              return function(p1__185805_SHARP_) {
                return cljs.core.nth.call(null, p1__185805_SHARP_, i_185830);
              };
            }(seq__185810_185814, chunk__185811_185815, count__185812_185816, i__185813_185817, i_185830, seq__185810_185824__$1, temp__4092__auto___185823), args)));
            var G__185831 = cljs.core.next.call(null, seq__185810_185824__$1);
            var G__185832 = null;
            var G__185833 = 0;
            var G__185834 = 0;
            seq__185810_185814 = G__185831;
            chunk__185811_185815 = G__185832;
            count__185812_185816 = G__185833;
            i__185813_185817 = G__185834;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map__delegate.call(this, f, args);
  };
  js_map.cljs$lang$maxFixedArity = 1;
  js_map.cljs$lang$applyTo = function(arglist__185835) {
    var f = cljs.core.first(arglist__185835);
    var args = cljs.core.rest(arglist__185835);
    return js_map__delegate(f, args);
  };
  js_map.cljs$core$IFn$_invoke$arity$variadic = js_map__delegate;
  return js_map;
}();
purnam.native$.js_mapcat = function() {
  var js_mapcat__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__185836_SHARP_) {
            return cljs.core.nth.call(null, p1__185836_SHARP_, i);
          };
        }(i, output__$1), args));
        var G__185837 = i + 1;
        var G__185838 = output__$1.concat(res);
        i = G__185837;
        output__$1 = G__185838;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat__delegate.call(this, f, args);
  };
  js_mapcat.cljs$lang$maxFixedArity = 1;
  js_mapcat.cljs$lang$applyTo = function(arglist__185839) {
    var f = cljs.core.first(arglist__185839);
    var args = cljs.core.rest(arglist__185839);
    return js_mapcat__delegate(f, args);
  };
  js_mapcat.cljs$core$IFn$_invoke$arity$variadic = js_mapcat__delegate;
  return js_mapcat;
}();
purnam.native$.js_concat = function() {
  var js_concat__delegate = function(args) {
    var output = [];
    var seq__185852_185864 = cljs.core.seq.call(null, args);
    var chunk__185857_185865 = null;
    var count__185858_185866 = 0;
    var i__185859_185867 = 0;
    while (true) {
      if (i__185859_185867 < count__185858_185866) {
        var ar_185868 = cljs.core._nth.call(null, chunk__185857_185865, i__185859_185867);
        var seq__185860_185869 = cljs.core.seq.call(null, ar_185868);
        var chunk__185861_185870 = null;
        var count__185862_185871 = 0;
        var i__185863_185872 = 0;
        while (true) {
          if (i__185863_185872 < count__185862_185871) {
            var v_185873 = cljs.core._nth.call(null, chunk__185861_185870, i__185863_185872);
            output.push(v_185873);
            var G__185874 = seq__185860_185869;
            var G__185875 = chunk__185861_185870;
            var G__185876 = count__185862_185871;
            var G__185877 = i__185863_185872 + 1;
            seq__185860_185869 = G__185874;
            chunk__185861_185870 = G__185875;
            count__185862_185871 = G__185876;
            i__185863_185872 = G__185877;
            continue;
          } else {
            var temp__4092__auto___185878 = cljs.core.seq.call(null, seq__185860_185869);
            if (temp__4092__auto___185878) {
              var seq__185860_185879__$1 = temp__4092__auto___185878;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__185860_185879__$1)) {
                var c__4146__auto___185880 = cljs.core.chunk_first.call(null, seq__185860_185879__$1);
                var G__185881 = cljs.core.chunk_rest.call(null, seq__185860_185879__$1);
                var G__185882 = c__4146__auto___185880;
                var G__185883 = cljs.core.count.call(null, c__4146__auto___185880);
                var G__185884 = 0;
                seq__185860_185869 = G__185881;
                chunk__185861_185870 = G__185882;
                count__185862_185871 = G__185883;
                i__185863_185872 = G__185884;
                continue;
              } else {
                var v_185885 = cljs.core.first.call(null, seq__185860_185879__$1);
                output.push(v_185885);
                var G__185886 = cljs.core.next.call(null, seq__185860_185879__$1);
                var G__185887 = null;
                var G__185888 = 0;
                var G__185889 = 0;
                seq__185860_185869 = G__185886;
                chunk__185861_185870 = G__185887;
                count__185862_185871 = G__185888;
                i__185863_185872 = G__185889;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__185890 = seq__185852_185864;
        var G__185891 = chunk__185857_185865;
        var G__185892 = count__185858_185866;
        var G__185893 = i__185859_185867 + 1;
        seq__185852_185864 = G__185890;
        chunk__185857_185865 = G__185891;
        count__185858_185866 = G__185892;
        i__185859_185867 = G__185893;
        continue;
      } else {
        var temp__4092__auto___185894 = cljs.core.seq.call(null, seq__185852_185864);
        if (temp__4092__auto___185894) {
          var seq__185852_185895__$1 = temp__4092__auto___185894;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__185852_185895__$1)) {
            var c__4146__auto___185896 = cljs.core.chunk_first.call(null, seq__185852_185895__$1);
            var G__185897 = cljs.core.chunk_rest.call(null, seq__185852_185895__$1);
            var G__185898 = c__4146__auto___185896;
            var G__185899 = cljs.core.count.call(null, c__4146__auto___185896);
            var G__185900 = 0;
            seq__185852_185864 = G__185897;
            chunk__185857_185865 = G__185898;
            count__185858_185866 = G__185899;
            i__185859_185867 = G__185900;
            continue;
          } else {
            var ar_185901 = cljs.core.first.call(null, seq__185852_185895__$1);
            var seq__185853_185902 = cljs.core.seq.call(null, ar_185901);
            var chunk__185854_185903 = null;
            var count__185855_185904 = 0;
            var i__185856_185905 = 0;
            while (true) {
              if (i__185856_185905 < count__185855_185904) {
                var v_185906 = cljs.core._nth.call(null, chunk__185854_185903, i__185856_185905);
                output.push(v_185906);
                var G__185907 = seq__185853_185902;
                var G__185908 = chunk__185854_185903;
                var G__185909 = count__185855_185904;
                var G__185910 = i__185856_185905 + 1;
                seq__185853_185902 = G__185907;
                chunk__185854_185903 = G__185908;
                count__185855_185904 = G__185909;
                i__185856_185905 = G__185910;
                continue;
              } else {
                var temp__4092__auto___185911__$1 = cljs.core.seq.call(null, seq__185853_185902);
                if (temp__4092__auto___185911__$1) {
                  var seq__185853_185912__$1 = temp__4092__auto___185911__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__185853_185912__$1)) {
                    var c__4146__auto___185913 = cljs.core.chunk_first.call(null, seq__185853_185912__$1);
                    var G__185914 = cljs.core.chunk_rest.call(null, seq__185853_185912__$1);
                    var G__185915 = c__4146__auto___185913;
                    var G__185916 = cljs.core.count.call(null, c__4146__auto___185913);
                    var G__185917 = 0;
                    seq__185853_185902 = G__185914;
                    chunk__185854_185903 = G__185915;
                    count__185855_185904 = G__185916;
                    i__185856_185905 = G__185917;
                    continue;
                  } else {
                    var v_185918 = cljs.core.first.call(null, seq__185853_185912__$1);
                    output.push(v_185918);
                    var G__185919 = cljs.core.next.call(null, seq__185853_185912__$1);
                    var G__185920 = null;
                    var G__185921 = 0;
                    var G__185922 = 0;
                    seq__185853_185902 = G__185919;
                    chunk__185854_185903 = G__185920;
                    count__185855_185904 = G__185921;
                    i__185856_185905 = G__185922;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__185923 = cljs.core.next.call(null, seq__185852_185895__$1);
            var G__185924 = null;
            var G__185925 = 0;
            var G__185926 = 0;
            seq__185852_185864 = G__185923;
            chunk__185857_185865 = G__185924;
            count__185858_185866 = G__185925;
            i__185859_185867 = G__185926;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return js_concat__delegate.call(this, args);
  };
  js_concat.cljs$lang$maxFixedArity = 0;
  js_concat.cljs$lang$applyTo = function(arglist__185927) {
    var args = cljs.core.seq(arglist__185927);
    return js_concat__delegate(args);
  };
  js_concat.cljs$core$IFn$_invoke$arity$variadic = js_concat__delegate;
  return js_concat;
}();
purnam.native$.js_LT__ = function js_LT__(obj) {
  return cljs.core.clj__GT_js.call(null, obj);
};
purnam.native$.log = function() {
  var log = null;
  var log__1 = function(x) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x)].join(""), x);
    } else {
      console.log([cljs.core.str(x)].join(""));
    }
    return x;
  };
  var log__2 = function(x, y) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""), y);
    } else {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""));
    }
    return y;
  };
  log = function(x, y) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, x);
      case 2:
        return log__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log;
}();
purnam.native$.augment_fn_string = function augment_fn_string(func) {
  if (typeof func === "string") {
    return function(x) {
      return purnam.native$.aget_in.call(null, x, clojure.string.split.call(null, func, /\./));
    };
  } else {
    return func;
  }
};
purnam.native$.check_fn = function() {
  var check_fn = null;
  var check_fn__1 = function(chk) {
    return function(x) {
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, x);
      } else {
        return cljs.core._EQ_.call(null, x, chk);
      }
    };
  };
  var check_fn__2 = function(func, chk) {
    return function(x) {
      var res = func.call(null, x);
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, res);
      } else {
        return cljs.core._EQ_.call(null, res, chk);
      }
    };
  };
  check_fn = function(func, chk) {
    switch(arguments.length) {
      case 1:
        return check_fn__1.call(this, func);
      case 2:
        return check_fn__2.call(this, func, chk);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_fn.cljs$core$IFn$_invoke$arity$1 = check_fn__1;
  check_fn.cljs$core$IFn$_invoke$arity$2 = check_fn__2;
  return check_fn;
}();
goog.provide("test_helper");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
test_helper.mock_websocket = function mock_websocket() {
  return purnam.native$.aset_in.call(null, window, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["WebSocket"], null), function(url) {
    var G__182380 = function() {
      var obj182383 = {};
      return obj182383;
    }();
    return G__182380;
  });
};
test_helper.init_tests = function init_tests() {
  test_helper.mock_websocket.call(null);
  return beforeEach(function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, this, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["addMatchers"];
    return fn_SHARP_.call(obj_SHARP_, function() {
      var G__182388 = function() {
        var obj182391 = {};
        return obj182391;
      }();
      G__182388["toSatisfy"] = function(expected, tactual, texpected) {
        var actual = purnam.native$.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["actual"], null));
        var actualText = [cljs.core.str(actual)].join("");
        var actualText__$1 = cljs.core._EQ_.call(null, actualText, "[object Object]") ? function() {
          var ks = function() {
            var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
            var fn_SHARP___$1 = obj_SHARP___$1["getKeys"];
            return fn_SHARP___$1.call(obj_SHARP___$1, actual);
          }();
          var vs = function() {
            var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
            var fn_SHARP___$1 = obj_SHARP___$1["getValues"];
            return fn_SHARP___$1.call(obj_SHARP___$1, actual);
          }();
          return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(ks, vs, actual, actualText) {
            return function(x, y) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null);
            };
          }(ks, vs, actual, actualText), ks, vs));
        }() : actualText;
        var notText = cljs.core.truth_(purnam.native$.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["isNot"], null))) ? "Not " : "";
        this["message"] = function() {
          return[cljs.core.str("Expression: "), cljs.core.str(tactual), cljs.core.str("\n  Expected: "), cljs.core.str(notText), cljs.core.str(texpected), cljs.core.str("\n  Actual: "), cljs.core.str(actualText__$1)].join("");
        };
        if (cljs.core._EQ_.call(null, function() {
          var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, cljs.core.PersistentVector.EMPTY);
          var fn_SHARP___$1 = obj_SHARP___$1["typeOf"];
          return fn_SHARP___$1.call(obj_SHARP___$1, expected);
        }(), "array")) {
          return purnam.native$.js_equals.call(null, expected, actual);
        } else {
          if (cljs.core.fn_QMARK_.call(null, expected)) {
            return expected.call(null, actual);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              var or__3404__auto__ = cljs.core._EQ_.call(null, expected, actual);
              if (or__3404__auto__) {
                return or__3404__auto__;
              } else {
                return purnam.native$.js_equals.call(null, expected, actual);
              }
            } else {
              return null;
            }
          }
        }
      };
      return G__182388;
    }());
  });
};
goog.provide("chaperone.messagebox");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chaperone.messagebox.create_sub_system = function create_sub_system(system) {
  var sub_system = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773), cljs.core.async.chan.call(null)], null);
  return cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "messagebox", "messagebox", 3618152406), sub_system);
};
chaperone.messagebox.sub_system = function sub_system(system) {
  return(new cljs.core.Keyword(null, "messagebox", "messagebox", 3618152406)).cljs$core$IFn$_invoke$arity$1(system);
};
chaperone.messagebox.send_message_BANG_ = function send_message_BANG_(messagebox, level, message) {
  var message_queue = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(messagebox);
  return cljs.core.async.put_BANG_.call(null, message_queue, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "level", "level", 1116770038), level, new cljs.core.Keyword(null, "message", "message", 1968829305), message], null));
};
goog.provide("chaperone.core");
goog.require("cljs.core");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
chaperone.core.create_system = function create_system(host, port) {
  var context = cljs.core.PersistentArrayMap.EMPTY;
  return chaperone.messagebox.create_sub_system.call(null, chaperone.websocket.create_sub_system.call(null, context, host, port));
};
chaperone.core.start_BANG_ = function start_BANG_(system) {
  console.log("Starting the system");
  return chaperone.websocket.start_BANG_.call(null, system);
};
chaperone.core.stop_BANG_ = function stop_BANG_(system) {
  console.log("Stopping the system");
  return chaperone.websocket.stop_BANG_.call(null, system);
};
goog.provide("chaperone.ng.core");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("chaperone.core");
goog.require("chaperone.core");
chaperone.ng.core.chaperone_app = angular.module("chaperone.app", ["ngRoute"]);
chaperone.ng.core.chaperone_app_System = ["$location", function($location) {
  return chaperone.core.start_BANG_.call(null, chaperone.core.create_system.call(null, function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["host"];
    return fn_SHARP_.call(obj_SHARP_);
  }(), function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["port"];
    return fn_SHARP_.call(obj_SHARP_);
  }()));
}];
angular.module("chaperone.app").factory("System", chaperone.ng.core.chaperone_app_System);
angular.module("chaperone.app").config(["$routeProvider", function($routeProvider) {
  var G__182191 = $routeProvider;
  G__182191.when("/admin/users/add", function() {
    var G__182192 = function() {
      var obj182195 = {};
      return obj182195;
    }();
    G__182192["templateUrl"] = "/public/partials/admin/user/add-user-form.html";
    G__182192["controller"] = "AdminUserCtrl";
    return G__182192;
  }());
  G__182191.when("/admin/users/edit/:id", function() {
    var G__182196 = function() {
      var obj182199 = {};
      return obj182199;
    }();
    G__182196["templateUrl"] = "/public/partials/admin/user/edit-user-form.html";
    G__182196["controller"] = "AdminUserCtrl";
    return G__182196;
  }());
  G__182191.when("/admin/users/list", function() {
    var G__182200 = function() {
      var obj182203 = {};
      return obj182203;
    }();
    G__182200["templateUrl"] = "/public/partials/admin/user/list.html";
    G__182200["controller"] = "AdminUserCtrl";
    return G__182200;
  }());
  G__182191.otherwise(function() {
    var G__182204 = function() {
      var obj182207 = {};
      return obj182207;
    }();
    G__182204["templateUrl"] = "/public/partials/index.html";
    return G__182204;
  }());
  return G__182191;
}]);
goog.provide("jayq.core");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
jayq.core.crate_meta = function crate_meta(func) {
  return func.prototype._crateGroup;
};
jayq.core.__GT_selector = function __GT_selector(sel) {
  if (typeof sel === "string") {
    return sel;
  } else {
    if (cljs.core.fn_QMARK_.call(null, sel)) {
      var temp__4090__auto__ = jayq.core.crate_meta.call(null, sel);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var cm = temp__4090__auto__;
        return[cljs.core.str("[crateGroup\x3d"), cljs.core.str(cm), cljs.core.str("]")].join("");
      } else {
        return sel;
      }
    } else {
      if (sel instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, sel);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return sel;
        } else {
          return null;
        }
      }
    }
  }
};
jayq.core.$ = function() {
  var $ = null;
  var $__1 = function(sel) {
    return jQuery(jayq.core.__GT_selector.call(null, sel));
  };
  var $__2 = function(sel, context) {
    return jQuery(jayq.core.__GT_selector.call(null, sel), context);
  };
  $ = function(sel, context) {
    switch(arguments.length) {
      case 1:
        return $__1.call(this, sel);
      case 2:
        return $__2.call(this, sel, context);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  $.cljs$core$IFn$_invoke$arity$1 = $__1;
  $.cljs$core$IFn$_invoke$arity$2 = $__2;
  return $;
}();
jQuery.prototype.cljs$core$IFn$ = true;
jQuery.prototype.call = function() {
  var G__185945 = null;
  var G__185945__2 = function(self__, k) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__185945__3 = function(self__, k, not_found) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__185945 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__185945__2.call(this, self__, k);
      case 3:
        return G__185945__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__185945;
}();
jQuery.prototype.apply = function(self__, args185944) {
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args185944)));
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
jQuery.prototype.cljs$core$IReduce$ = true;
jQuery.prototype.cljs$core$IReduce$_reduce$arity$2 = function(this$, f) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f);
};
jQuery.prototype.cljs$core$IReduce$_reduce$arity$3 = function(this$, f, start) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f, start);
};
jQuery.prototype.cljs$core$ILookup$ = true;
jQuery.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var this$__$1 = this;
  var or__3404__auto__ = this$__$1.slice(k, k + 1);
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, k, not_found);
};
jQuery.prototype.cljs$core$ISequential$ = true;
jQuery.prototype.cljs$core$IIndexed$ = true;
jQuery.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    if (void 0 === not_found) {
      return null;
    } else {
      return not_found;
    }
  }
};
jQuery.prototype.cljs$core$ICounted$ = true;
jQuery.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.length;
};
jQuery.prototype.cljs$core$ISeq$ = true;
jQuery.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.get(0);
};
jQuery.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.count.call(null, this$__$1) > 1) {
    return this$__$1.slice(1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
jQuery.prototype.cljs$core$ISeqable$ = true;
jQuery.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.truth_(this$__$1.get(0))) {
    return this$__$1;
  } else {
    return null;
  }
};
jayq.core.anim = function anim($elem, props, dur) {
  return $elem.animate(cljs.core.clj__GT_js.call(null, props), dur);
};
jayq.core.text = function() {
  var text = null;
  var text__1 = function($elem) {
    return $elem.text();
  };
  var text__2 = function($elem, txt) {
    return $elem.text(txt);
  };
  text = function($elem, txt) {
    switch(arguments.length) {
      case 1:
        return text__1.call(this, $elem);
      case 2:
        return text__2.call(this, $elem, txt);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  text.cljs$core$IFn$_invoke$arity$1 = text__1;
  text.cljs$core$IFn$_invoke$arity$2 = text__2;
  return text;
}();
jayq.core.css = function() {
  var css = null;
  var css__2 = function($elem, opts) {
    return $elem.css(cljs.core.clj__GT_js.call(null, opts));
  };
  var css__3 = function($elem, p, v) {
    return $elem.css(cljs.core.name.call(null, p), v);
  };
  css = function($elem, p, v) {
    switch(arguments.length) {
      case 2:
        return css__2.call(this, $elem, p);
      case 3:
        return css__3.call(this, $elem, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  css.cljs$core$IFn$_invoke$arity$2 = css__2;
  css.cljs$core$IFn$_invoke$arity$3 = css__3;
  return css;
}();
jayq.core.attr = function() {
  var attr = null;
  var attr__2 = function($elem, x) {
    return $elem.attr(cljs.core.clj__GT_js.call(null, x));
  };
  var attr__3 = function($elem, n, v) {
    return $elem.attr(cljs.core.name.call(null, n), v);
  };
  attr = function($elem, n, v) {
    switch(arguments.length) {
      case 2:
        return attr__2.call(this, $elem, n);
      case 3:
        return attr__3.call(this, $elem, n, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  attr.cljs$core$IFn$_invoke$arity$2 = attr__2;
  attr.cljs$core$IFn$_invoke$arity$3 = attr__3;
  return attr;
}();
jayq.core.prop = function() {
  var prop = null;
  var prop__2 = function($elem, x) {
    return $elem.prop(cljs.core.clj__GT_js.call(null, x));
  };
  var prop__3 = function($elem, n, v) {
    return $elem.prop(cljs.core.name.call(null, n), v);
  };
  prop = function($elem, n, v) {
    switch(arguments.length) {
      case 2:
        return prop__2.call(this, $elem, n);
      case 3:
        return prop__3.call(this, $elem, n, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prop.cljs$core$IFn$_invoke$arity$2 = prop__2;
  prop.cljs$core$IFn$_invoke$arity$3 = prop__3;
  return prop;
}();
jayq.core.remove_attr = function remove_attr($elem, a) {
  return $elem.removeAttr(cljs.core.name.call(null, a));
};
jayq.core.remove_prop = function remove_prop($elem, a) {
  return $elem.removeProp(cljs.core.name.call(null, a));
};
jayq.core.data = function() {
  var data = null;
  var data__1 = function($elem) {
    return $elem.data();
  };
  var data__2 = function($elem, k) {
    return $elem.data(cljs.core.clj__GT_js.call(null, k));
  };
  var data__3 = function($elem, k, v) {
    return $elem.data(cljs.core.name.call(null, k), cljs.core.clj__GT_js.call(null, v));
  };
  data = function($elem, k, v) {
    switch(arguments.length) {
      case 1:
        return data__1.call(this, $elem);
      case 2:
        return data__2.call(this, $elem, k);
      case 3:
        return data__3.call(this, $elem, k, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  data.cljs$core$IFn$_invoke$arity$1 = data__1;
  data.cljs$core$IFn$_invoke$arity$2 = data__2;
  data.cljs$core$IFn$_invoke$arity$3 = data__3;
  return data;
}();
jayq.core.add_class = function add_class($elem, cl) {
  return $elem.addClass(cljs.core.name.call(null, cl));
};
jayq.core.remove_class = function remove_class($elem, cl) {
  return $elem.removeClass(cljs.core.name.call(null, cl));
};
jayq.core.toggle_class = function toggle_class($elem, cl) {
  return $elem.toggleClass(cljs.core.name.call(null, cl));
};
jayq.core.has_class = function has_class($elem, cl) {
  return $elem.hasClass(cljs.core.name.call(null, cl));
};
jayq.core.is = function is($elem, selector) {
  return $elem.is(jayq.core.__GT_selector.call(null, selector));
};
jayq.core.after = function after($elem, content) {
  return $elem.after(content);
};
jayq.core.before = function before($elem, content) {
  return $elem.before(content);
};
jayq.core.append = function append($elem, content) {
  return $elem.append(content);
};
jayq.core.prepend = function prepend($elem, content) {
  return $elem.prepend(content);
};
jayq.core.append_to = function append_to($elem, target) {
  return $elem.appendTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.prepend_to = function prepend_to($elem, target) {
  return $elem.prependTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_before = function insert_before($elem, target) {
  return $elem.insertBefore(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_after = function insert_after($elem, target) {
  return $elem.insertAfter(jayq.core.__GT_selector.call(null, target));
};
jayq.core.replace_with = function replace_with($elem, content) {
  return $elem.replaceWith(content);
};
jayq.core.remove = function remove($elem) {
  return $elem.remove();
};
jayq.core.hide = function() {
  var hide__delegate = function($elem, p__185946) {
    var vec__185948 = p__185946;
    var speed = cljs.core.nth.call(null, vec__185948, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__185948, 1, null);
    return $elem.hide(speed, on_finish);
  };
  var hide = function($elem, var_args) {
    var p__185946 = null;
    if (arguments.length > 1) {
      p__185946 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hide__delegate.call(this, $elem, p__185946);
  };
  hide.cljs$lang$maxFixedArity = 1;
  hide.cljs$lang$applyTo = function(arglist__185949) {
    var $elem = cljs.core.first(arglist__185949);
    var p__185946 = cljs.core.rest(arglist__185949);
    return hide__delegate($elem, p__185946);
  };
  hide.cljs$core$IFn$_invoke$arity$variadic = hide__delegate;
  return hide;
}();
jayq.core.show = function() {
  var show__delegate = function($elem, p__185950) {
    var vec__185952 = p__185950;
    var speed = cljs.core.nth.call(null, vec__185952, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__185952, 1, null);
    return $elem.show(speed, on_finish);
  };
  var show = function($elem, var_args) {
    var p__185950 = null;
    if (arguments.length > 1) {
      p__185950 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return show__delegate.call(this, $elem, p__185950);
  };
  show.cljs$lang$maxFixedArity = 1;
  show.cljs$lang$applyTo = function(arglist__185953) {
    var $elem = cljs.core.first(arglist__185953);
    var p__185950 = cljs.core.rest(arglist__185953);
    return show__delegate($elem, p__185950);
  };
  show.cljs$core$IFn$_invoke$arity$variadic = show__delegate;
  return show;
}();
jayq.core.toggle = function() {
  var toggle__delegate = function($elem, p__185954) {
    var vec__185956 = p__185954;
    var speed = cljs.core.nth.call(null, vec__185956, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__185956, 1, null);
    return $elem.toggle(speed, on_finish);
  };
  var toggle = function($elem, var_args) {
    var p__185954 = null;
    if (arguments.length > 1) {
      p__185954 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return toggle__delegate.call(this, $elem, p__185954);
  };
  toggle.cljs$lang$maxFixedArity = 1;
  toggle.cljs$lang$applyTo = function(arglist__185957) {
    var $elem = cljs.core.first(arglist__185957);
    var p__185954 = cljs.core.rest(arglist__185957);
    return toggle__delegate($elem, p__185954);
  };
  toggle.cljs$core$IFn$_invoke$arity$variadic = toggle__delegate;
  return toggle;
}();
jayq.core.fade_out = function() {
  var fade_out__delegate = function($elem, p__185958) {
    var vec__185960 = p__185958;
    var speed = cljs.core.nth.call(null, vec__185960, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__185960, 1, null);
    return $elem.fadeOut(speed, on_finish);
  };
  var fade_out = function($elem, var_args) {
    var p__185958 = null;
    if (arguments.length > 1) {
      p__185958 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fade_out__delegate.call(this, $elem, p__185958);
  };
  fade_out.cljs$lang$maxFixedArity = 1;
  fade_out.cljs$lang$applyTo = function(arglist__185961) {
    var $elem = cljs.core.first(arglist__185961);
    var p__185958 = cljs.core.rest(arglist__185961);
    return fade_out__delegate($elem, p__185958);
  };
  fade_out.cljs$core$IFn$_invoke$arity$variadic = fade_out__delegate;
  return fade_out;
}();
jayq.core.fade_in = function() {
  var fade_in__delegate = function($elem, p__185962) {
    var vec__185964 = p__185962;
    var speed = cljs.core.nth.call(null, vec__185964, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__185964, 1, null);
    return $elem.fadeIn(speed, on_finish);
  };
  var fade_in = function($elem, var_args) {
    var p__185962 = null;
    if (arguments.length > 1) {
      p__185962 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fade_in__delegate.call(this, $elem, p__185962);
  };
  fade_in.cljs$lang$maxFixedArity = 1;
  fade_in.cljs$lang$applyTo = function(arglist__185965) {
    var $elem = cljs.core.first(arglist__185965);
    var p__185962 = cljs.core.rest(arglist__185965);
    return fade_in__delegate($elem, p__185962);
  };
  fade_in.cljs$core$IFn$_invoke$arity$variadic = fade_in__delegate;
  return fade_in;
}();
jayq.core.slide_up = function() {
  var slide_up__delegate = function($elem, p__185966) {
    var vec__185968 = p__185966;
    var speed = cljs.core.nth.call(null, vec__185968, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__185968, 1, null);
    return $elem.slideUp(speed, on_finish);
  };
  var slide_up = function($elem, var_args) {
    var p__185966 = null;
    if (arguments.length > 1) {
      p__185966 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return slide_up__delegate.call(this, $elem, p__185966);
  };
  slide_up.cljs$lang$maxFixedArity = 1;
  slide_up.cljs$lang$applyTo = function(arglist__185969) {
    var $elem = cljs.core.first(arglist__185969);
    var p__185966 = cljs.core.rest(arglist__185969);
    return slide_up__delegate($elem, p__185966);
  };
  slide_up.cljs$core$IFn$_invoke$arity$variadic = slide_up__delegate;
  return slide_up;
}();
jayq.core.slide_down = function() {
  var slide_down__delegate = function($elem, p__185970) {
    var vec__185972 = p__185970;
    var speed = cljs.core.nth.call(null, vec__185972, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__185972, 1, null);
    return $elem.slideDown(speed, on_finish);
  };
  var slide_down = function($elem, var_args) {
    var p__185970 = null;
    if (arguments.length > 1) {
      p__185970 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return slide_down__delegate.call(this, $elem, p__185970);
  };
  slide_down.cljs$lang$maxFixedArity = 1;
  slide_down.cljs$lang$applyTo = function(arglist__185973) {
    var $elem = cljs.core.first(arglist__185973);
    var p__185970 = cljs.core.rest(arglist__185973);
    return slide_down__delegate($elem, p__185970);
  };
  slide_down.cljs$core$IFn$_invoke$arity$variadic = slide_down__delegate;
  return slide_down;
}();
jayq.core.siblings = function() {
  var siblings = null;
  var siblings__1 = function($elem) {
    return $elem.siblings();
  };
  var siblings__2 = function($elem, selector) {
    return $elem.siblings(cljs.core.name.call(null, selector));
  };
  siblings = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return siblings__1.call(this, $elem);
      case 2:
        return siblings__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  siblings.cljs$core$IFn$_invoke$arity$1 = siblings__1;
  siblings.cljs$core$IFn$_invoke$arity$2 = siblings__2;
  return siblings;
}();
jayq.core.parent = function parent($elem) {
  return $elem.parent();
};
jayq.core.parents = function() {
  var parents = null;
  var parents__1 = function($elem) {
    return $elem.parents();
  };
  var parents__2 = function($elem, selector) {
    return $elem.parents(cljs.core.name.call(null, selector));
  };
  parents = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, $elem);
      case 2:
        return parents__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
jayq.core.parents_until = function() {
  var parents_until = null;
  var parents_until__1 = function($elem) {
    return $elem.parentsUntil();
  };
  var parents_until__2 = function($elem, selector) {
    return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var parents_until__3 = function($elem, selector, filtr) {
    return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  parents_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return parents_until__1.call(this, $elem);
      case 2:
        return parents_until__2.call(this, $elem, selector);
      case 3:
        return parents_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents_until.cljs$core$IFn$_invoke$arity$1 = parents_until__1;
  parents_until.cljs$core$IFn$_invoke$arity$2 = parents_until__2;
  parents_until.cljs$core$IFn$_invoke$arity$3 = parents_until__3;
  return parents_until;
}();
jayq.core.children = function() {
  var children = null;
  var children__1 = function($elem) {
    return $elem.children();
  };
  var children__2 = function($elem, selector) {
    return $elem.children(cljs.core.name.call(null, selector));
  };
  children = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return children__1.call(this, $elem);
      case 2:
        return children__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  children.cljs$core$IFn$_invoke$arity$1 = children__1;
  children.cljs$core$IFn$_invoke$arity$2 = children__2;
  return children;
}();
jayq.core.next = function() {
  var next = null;
  var next__1 = function($elem) {
    return $elem.next();
  };
  var next__2 = function($elem, selector) {
    return $elem.next(cljs.core.name.call(null, selector));
  };
  next = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return next__1.call(this, $elem);
      case 2:
        return next__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next.cljs$core$IFn$_invoke$arity$1 = next__1;
  next.cljs$core$IFn$_invoke$arity$2 = next__2;
  return next;
}();
jayq.core.prev = function() {
  var prev = null;
  var prev__1 = function($elem) {
    return $elem.prev();
  };
  var prev__2 = function($elem, selector) {
    return $elem.prev(cljs.core.name.call(null, selector));
  };
  prev = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return prev__1.call(this, $elem);
      case 2:
        return prev__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev.cljs$core$IFn$_invoke$arity$1 = prev__1;
  prev.cljs$core$IFn$_invoke$arity$2 = prev__2;
  return prev;
}();
jayq.core.next_all = function() {
  var next_all = null;
  var next_all__1 = function($elem) {
    return $elem.nextAll();
  };
  var next_all__2 = function($elem, selector) {
    return $elem.nextAll(cljs.core.name.call(null, selector));
  };
  next_all = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return next_all__1.call(this, $elem);
      case 2:
        return next_all__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next_all.cljs$core$IFn$_invoke$arity$1 = next_all__1;
  next_all.cljs$core$IFn$_invoke$arity$2 = next_all__2;
  return next_all;
}();
jayq.core.prev_all = function() {
  var prev_all = null;
  var prev_all__1 = function($elem) {
    return $elem.prevAll();
  };
  var prev_all__2 = function($elem, selector) {
    return $elem.prevAll(cljs.core.name.call(null, selector));
  };
  prev_all = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return prev_all__1.call(this, $elem);
      case 2:
        return prev_all__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev_all.cljs$core$IFn$_invoke$arity$1 = prev_all__1;
  prev_all.cljs$core$IFn$_invoke$arity$2 = prev_all__2;
  return prev_all;
}();
jayq.core.next_until = function() {
  var next_until = null;
  var next_until__1 = function($elem) {
    return $elem.nextUntil();
  };
  var next_until__2 = function($elem, selector) {
    return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var next_until__3 = function($elem, selector, filtr) {
    return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  next_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return next_until__1.call(this, $elem);
      case 2:
        return next_until__2.call(this, $elem, selector);
      case 3:
        return next_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next_until.cljs$core$IFn$_invoke$arity$1 = next_until__1;
  next_until.cljs$core$IFn$_invoke$arity$2 = next_until__2;
  next_until.cljs$core$IFn$_invoke$arity$3 = next_until__3;
  return next_until;
}();
jayq.core.prev_until = function() {
  var prev_until = null;
  var prev_until__1 = function($elem) {
    return $elem.prevUntil();
  };
  var prev_until__2 = function($elem, selector) {
    return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var prev_until__3 = function($elem, selector, filtr) {
    return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  prev_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return prev_until__1.call(this, $elem);
      case 2:
        return prev_until__2.call(this, $elem, selector);
      case 3:
        return prev_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev_until.cljs$core$IFn$_invoke$arity$1 = prev_until__1;
  prev_until.cljs$core$IFn$_invoke$arity$2 = prev_until__2;
  prev_until.cljs$core$IFn$_invoke$arity$3 = prev_until__3;
  return prev_until;
}();
jayq.core.find = function find($elem, selector) {
  return $elem.find(cljs.core.name.call(null, selector));
};
jayq.core.closest = function() {
  var closest__delegate = function($elem, selector, p__185974) {
    var vec__185976 = p__185974;
    var context = cljs.core.nth.call(null, vec__185976, 0, null);
    return $elem.closest(jayq.core.__GT_selector.call(null, selector), context);
  };
  var closest = function($elem, selector, var_args) {
    var p__185974 = null;
    if (arguments.length > 2) {
      p__185974 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return closest__delegate.call(this, $elem, selector, p__185974);
  };
  closest.cljs$lang$maxFixedArity = 2;
  closest.cljs$lang$applyTo = function(arglist__185977) {
    var $elem = cljs.core.first(arglist__185977);
    arglist__185977 = cljs.core.next(arglist__185977);
    var selector = cljs.core.first(arglist__185977);
    var p__185974 = cljs.core.rest(arglist__185977);
    return closest__delegate($elem, selector, p__185974);
  };
  closest.cljs$core$IFn$_invoke$arity$variadic = closest__delegate;
  return closest;
}();
jayq.core.clone = function clone($elem) {
  return $elem.clone();
};
jayq.core.html = function() {
  var html = null;
  var html__1 = function($elem) {
    return $elem.html();
  };
  var html__2 = function($elem, v) {
    return $elem.html(v);
  };
  html = function($elem, v) {
    switch(arguments.length) {
      case 1:
        return html__1.call(this, $elem);
      case 2:
        return html__2.call(this, $elem, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  html.cljs$core$IFn$_invoke$arity$1 = html__1;
  html.cljs$core$IFn$_invoke$arity$2 = html__2;
  return html;
}();
jayq.core.inner = jayq.core.html;
jayq.core.empty = function empty($elem) {
  return $elem.empty();
};
jayq.core.val = function() {
  var val = null;
  var val__1 = function($elem) {
    return $elem.val();
  };
  var val__2 = function($elem, v) {
    return $elem.val(v);
  };
  val = function($elem, v) {
    switch(arguments.length) {
      case 1:
        return val__1.call(this, $elem);
      case 2:
        return val__2.call(this, $elem, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  val.cljs$core$IFn$_invoke$arity$1 = val__1;
  val.cljs$core$IFn$_invoke$arity$2 = val__2;
  return val;
}();
jayq.core.serialize = function serialize($elem) {
  return $elem.serialize();
};
jayq.core.queue = function() {
  var queue = null;
  var queue__1 = function($elem) {
    return $elem.queue();
  };
  var queue__2 = function($elem, x) {
    return $elem.queue(x);
  };
  var queue__3 = function($elem, x, y) {
    return $elem.queue(x, y);
  };
  queue = function($elem, x, y) {
    switch(arguments.length) {
      case 1:
        return queue__1.call(this, $elem);
      case 2:
        return queue__2.call(this, $elem, x);
      case 3:
        return queue__3.call(this, $elem, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  queue.cljs$core$IFn$_invoke$arity$1 = queue__1;
  queue.cljs$core$IFn$_invoke$arity$2 = queue__2;
  queue.cljs$core$IFn$_invoke$arity$3 = queue__3;
  return queue;
}();
jayq.core.dequeue = function() {
  var dequeue = null;
  var dequeue__1 = function($elem) {
    return $elem.dequeue();
  };
  var dequeue__2 = function($elem, queue_name) {
    return $elem.dequeue(queue_name);
  };
  dequeue = function($elem, queue_name) {
    switch(arguments.length) {
      case 1:
        return dequeue__1.call(this, $elem);
      case 2:
        return dequeue__2.call(this, $elem, queue_name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dequeue.cljs$core$IFn$_invoke$arity$1 = dequeue__1;
  dequeue.cljs$core$IFn$_invoke$arity$2 = dequeue__2;
  return dequeue;
}();
jayq.core.document_ready = function document_ready(func) {
  return jayq.core.$.call(null, document).ready(func);
};
jayq.core.mimetype_converter = function mimetype_converter(s) {
  return cljs.reader.read_string.call(null, [cljs.core.str(s)].join(""));
};
jQuery.ajaxSetup(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "accepts", "accepts", 4131250141), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "edn", "edn", 1014004513), "application/edn, text/edn", new cljs.core.Keyword(null, "clojure", "clojure", 1880188502), "application/clojure, text/clojure"], null), new cljs.core.Keyword(null, "contents", "contents", 4741549708), new cljs.core.PersistentArrayMap(null, 1, ["clojure", 
/edn|clojure/], null), new cljs.core.Keyword(null, "converters", "converters", 3057163845), new cljs.core.PersistentArrayMap(null, 2, ["text edn", jayq.core.mimetype_converter, "text clojure", jayq.core.mimetype_converter], null)], null)));
jayq.core.clj_content_type_QMARK_ = function clj_content_type_QMARK_(x) {
  return cljs.core.re_find.call(null, /^(text|application)\/(clojure|edn)/, x);
};
jayq.core.__GT_content_type = function __GT_content_type(ct) {
  if (typeof ct === "string") {
    return ct;
  } else {
    if (ct instanceof cljs.core.Keyword) {
      return cljs.core.subs.call(null, [cljs.core.str(ct)].join(""), 1);
    } else {
      return null;
    }
  }
};
jayq.core.preprocess_request = function preprocess_request(p__185980) {
  var map__185982 = p__185980;
  var map__185982__$1 = cljs.core.seq_QMARK_.call(null, map__185982) ? cljs.core.apply.call(null, cljs.core.hash_map, map__185982) : map__185982;
  var request = map__185982__$1;
  var contentType = cljs.core.get.call(null, map__185982__$1, new cljs.core.Keyword(null, "contentType", "contentType", 624772805));
  var data = cljs.core.get.call(null, map__185982__$1, new cljs.core.Keyword(null, "data", "data", 1016980252));
  var ct = jayq.core.__GT_content_type.call(null, contentType);
  return function(p1__185979_SHARP_) {
    if (cljs.core.truth_(jayq.core.clj_content_type_QMARK_.call(null, ct))) {
      return cljs.core.assoc.call(null, p1__185979_SHARP_, new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.pr_str.call(null, data));
    } else {
      return p1__185979_SHARP_;
    }
  }.call(null, function(p1__185978_SHARP_) {
    if (cljs.core.truth_(ct)) {
      return cljs.core.assoc.call(null, p1__185978_SHARP_, new cljs.core.Keyword(null, "contentType", "contentType", 624772805), ct);
    } else {
      return p1__185978_SHARP_;
    }
  }.call(null, request));
};
jayq.core.__GT_ajax_settings = function __GT_ajax_settings(request) {
  return cljs.core.clj__GT_js.call(null, jayq.core.preprocess_request.call(null, request));
};
jayq.core.ajax = function() {
  var ajax = null;
  var ajax__1 = function(settings) {
    return jQuery.ajax(jayq.core.__GT_ajax_settings.call(null, settings));
  };
  var ajax__2 = function(url, settings) {
    return jQuery.ajax(url, jayq.core.__GT_ajax_settings.call(null, settings));
  };
  ajax = function(url, settings) {
    switch(arguments.length) {
      case 1:
        return ajax__1.call(this, url);
      case 2:
        return ajax__2.call(this, url, settings);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax.cljs$core$IFn$_invoke$arity$1 = ajax__1;
  ajax.cljs$core$IFn$_invoke$arity$2 = ajax__2;
  return ajax;
}();
jayq.core.xhr = function xhr(p__185983, content, callback) {
  var vec__185985 = p__185983;
  var method = cljs.core.nth.call(null, vec__185985, 0, null);
  var uri = cljs.core.nth.call(null, vec__185985, 1, null);
  var params = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), clojure.string.upper_case.call(null, cljs.core.name.call(null, method)), new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.clj__GT_js.call(null, content), new cljs.core.Keyword(null, "success", "success", 3441701749), callback], null));
  return jQuery.ajax(uri, params);
};
jayq.core.read = function read($elem) {
  return cljs.reader.read_string.call(null, jayq.core.html.call(null, $elem));
};
jayq.core.bind = function bind($elem, ev, func) {
  return $elem.bind(cljs.core.name.call(null, ev), func);
};
jayq.core.unbind = function() {
  var unbind__delegate = function($elem, ev, p__185986) {
    var vec__185988 = p__185986;
    var func = cljs.core.nth.call(null, vec__185988, 0, null);
    return $elem.unbind(cljs.core.name.call(null, ev), func);
  };
  var unbind = function($elem, ev, var_args) {
    var p__185986 = null;
    if (arguments.length > 2) {
      p__185986 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return unbind__delegate.call(this, $elem, ev, p__185986);
  };
  unbind.cljs$lang$maxFixedArity = 2;
  unbind.cljs$lang$applyTo = function(arglist__185989) {
    var $elem = cljs.core.first(arglist__185989);
    arglist__185989 = cljs.core.next(arglist__185989);
    var ev = cljs.core.first(arglist__185989);
    var p__185986 = cljs.core.rest(arglist__185989);
    return unbind__delegate($elem, ev, p__185986);
  };
  unbind.cljs$core$IFn$_invoke$arity$variadic = unbind__delegate;
  return unbind;
}();
jayq.core.trigger = function trigger($elem, ev) {
  return $elem.trigger(cljs.core.name.call(null, ev));
};
jayq.core.delegate = function delegate($elem, sel, ev, func) {
  return $elem.delegate(jayq.core.__GT_selector.call(null, sel), cljs.core.name.call(null, ev), func);
};
jayq.core.__GT_event = function __GT_event(e) {
  if (cljs.core.coll_QMARK_.call(null, e)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.name, e));
  } else {
    return cljs.core.clj__GT_js.call(null, e);
  }
};
jayq.core.on = function() {
  var on__delegate = function($elem, events, p__185990) {
    var vec__185992 = p__185990;
    var sel = cljs.core.nth.call(null, vec__185992, 0, null);
    var data = cljs.core.nth.call(null, vec__185992, 1, null);
    var handler = cljs.core.nth.call(null, vec__185992, 2, null);
    return $elem.on(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
  };
  var on = function($elem, events, var_args) {
    var p__185990 = null;
    if (arguments.length > 2) {
      p__185990 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return on__delegate.call(this, $elem, events, p__185990);
  };
  on.cljs$lang$maxFixedArity = 2;
  on.cljs$lang$applyTo = function(arglist__185993) {
    var $elem = cljs.core.first(arglist__185993);
    arglist__185993 = cljs.core.next(arglist__185993);
    var events = cljs.core.first(arglist__185993);
    var p__185990 = cljs.core.rest(arglist__185993);
    return on__delegate($elem, events, p__185990);
  };
  on.cljs$core$IFn$_invoke$arity$variadic = on__delegate;
  return on;
}();
jayq.core.one = function() {
  var one__delegate = function($elem, events, p__185994) {
    var vec__185996 = p__185994;
    var sel = cljs.core.nth.call(null, vec__185996, 0, null);
    var data = cljs.core.nth.call(null, vec__185996, 1, null);
    var handler = cljs.core.nth.call(null, vec__185996, 2, null);
    return $elem.one(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
  };
  var one = function($elem, events, var_args) {
    var p__185994 = null;
    if (arguments.length > 2) {
      p__185994 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return one__delegate.call(this, $elem, events, p__185994);
  };
  one.cljs$lang$maxFixedArity = 2;
  one.cljs$lang$applyTo = function(arglist__185997) {
    var $elem = cljs.core.first(arglist__185997);
    arglist__185997 = cljs.core.next(arglist__185997);
    var events = cljs.core.first(arglist__185997);
    var p__185994 = cljs.core.rest(arglist__185997);
    return one__delegate($elem, events, p__185994);
  };
  one.cljs$core$IFn$_invoke$arity$variadic = one__delegate;
  return one;
}();
jayq.core.off = function() {
  var off__delegate = function($elem, events, p__185998) {
    var vec__186000 = p__185998;
    var sel = cljs.core.nth.call(null, vec__186000, 0, null);
    var handler = cljs.core.nth.call(null, vec__186000, 1, null);
    return $elem.off(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), handler);
  };
  var off = function($elem, events, var_args) {
    var p__185998 = null;
    if (arguments.length > 2) {
      p__185998 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return off__delegate.call(this, $elem, events, p__185998);
  };
  off.cljs$lang$maxFixedArity = 2;
  off.cljs$lang$applyTo = function(arglist__186001) {
    var $elem = cljs.core.first(arglist__186001);
    arglist__186001 = cljs.core.next(arglist__186001);
    var events = cljs.core.first(arglist__186001);
    var p__185998 = cljs.core.rest(arglist__186001);
    return off__delegate($elem, events, p__185998);
  };
  off.cljs$core$IFn$_invoke$arity$variadic = off__delegate;
  return off;
}();
jayq.core.prevent = function prevent(e) {
  return e.preventDefault();
};
jayq.core.height = function() {
  var height = null;
  var height__1 = function($elem) {
    return $elem.height();
  };
  var height__2 = function($elem, x) {
    return $elem.height(x);
  };
  height = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return height__1.call(this, $elem);
      case 2:
        return height__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  height.cljs$core$IFn$_invoke$arity$1 = height__1;
  height.cljs$core$IFn$_invoke$arity$2 = height__2;
  return height;
}();
jayq.core.width = function() {
  var width = null;
  var width__1 = function($elem) {
    return $elem.width();
  };
  var width__2 = function($elem, x) {
    return $elem.width(x);
  };
  width = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return width__1.call(this, $elem);
      case 2:
        return width__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  width.cljs$core$IFn$_invoke$arity$1 = width__1;
  width.cljs$core$IFn$_invoke$arity$2 = width__2;
  return width;
}();
jayq.core.inner_height = function inner_height($elem) {
  return $elem.innerHeight();
};
jayq.core.inner_width = function inner_width($elem) {
  return $elem.innerWidth();
};
jayq.core.outer_height = function outer_height($elem) {
  return $elem.outerHeight();
};
jayq.core.outer_width = function outer_width($elem) {
  return $elem.outerWidth();
};
jayq.core.offset = function() {
  var offset = null;
  var offset__1 = function($elem) {
    return cljs.core.js__GT_clj.call(null, $elem.offset(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
  };
  var offset__2 = function($elem, coords) {
    return cljs.core.clj__GT_js.call(null, coords).offset();
  };
  offset = function($elem, coords) {
    switch(arguments.length) {
      case 1:
        return offset__1.call(this, $elem);
      case 2:
        return offset__2.call(this, $elem, coords);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  offset.cljs$core$IFn$_invoke$arity$1 = offset__1;
  offset.cljs$core$IFn$_invoke$arity$2 = offset__2;
  return offset;
}();
jayq.core.offset_parent = function offset_parent($elem) {
  return $elem.offsetParent();
};
jayq.core.position = function position($elem) {
  return cljs.core.js__GT_clj.call(null, $elem.position(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
};
jayq.core.scroll_left = function() {
  var scroll_left = null;
  var scroll_left__1 = function($elem) {
    return $elem.scrollLeft();
  };
  var scroll_left__2 = function($elem, x) {
    return $elem.scrollLeft(x);
  };
  scroll_left = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return scroll_left__1.call(this, $elem);
      case 2:
        return scroll_left__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll_left.cljs$core$IFn$_invoke$arity$1 = scroll_left__1;
  scroll_left.cljs$core$IFn$_invoke$arity$2 = scroll_left__2;
  return scroll_left;
}();
jayq.core.scroll_top = function() {
  var scroll_top = null;
  var scroll_top__1 = function($elem) {
    return $elem.scrollTop();
  };
  var scroll_top__2 = function($elem, x) {
    return $elem.scrollTop(x);
  };
  scroll_top = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return scroll_top__1.call(this, $elem);
      case 2:
        return scroll_top__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll_top.cljs$core$IFn$_invoke$arity$1 = scroll_top__1;
  scroll_top.cljs$core$IFn$_invoke$arity$2 = scroll_top__2;
  return scroll_top;
}();
jayq.core.$deferred = $.Deferred;
jayq.core.$when = $.when;
jayq.core.then = function() {
  var then = null;
  var then__3 = function(deferred, done_fn, fail_fn) {
    return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn));
  };
  var then__4 = function(deferred, done_fn, fail_fn, progress_fn) {
    return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn), cljs.core.clj__GT_js.call(null, progress_fn));
  };
  then = function(deferred, done_fn, fail_fn, progress_fn) {
    switch(arguments.length) {
      case 3:
        return then__3.call(this, deferred, done_fn, fail_fn);
      case 4:
        return then__4.call(this, deferred, done_fn, fail_fn, progress_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  then.cljs$core$IFn$_invoke$arity$3 = then__3;
  then.cljs$core$IFn$_invoke$arity$4 = then__4;
  return then;
}();
jayq.core.done = function() {
  var done__delegate = function(deferred, fns_args) {
    return deferred.done.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var done = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return done__delegate.call(this, deferred, fns_args);
  };
  done.cljs$lang$maxFixedArity = 1;
  done.cljs$lang$applyTo = function(arglist__186002) {
    var deferred = cljs.core.first(arglist__186002);
    var fns_args = cljs.core.rest(arglist__186002);
    return done__delegate(deferred, fns_args);
  };
  done.cljs$core$IFn$_invoke$arity$variadic = done__delegate;
  return done;
}();
jayq.core.fail = function() {
  var fail__delegate = function(deferred, fns_args) {
    return deferred.fail.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var fail = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fail__delegate.call(this, deferred, fns_args);
  };
  fail.cljs$lang$maxFixedArity = 1;
  fail.cljs$lang$applyTo = function(arglist__186003) {
    var deferred = cljs.core.first(arglist__186003);
    var fns_args = cljs.core.rest(arglist__186003);
    return fail__delegate(deferred, fns_args);
  };
  fail.cljs$core$IFn$_invoke$arity$variadic = fail__delegate;
  return fail;
}();
jayq.core.progress = function progress(deferred, fns_args) {
  return deferred.progress(cljs.core.clj__GT_js.call(null, fns_args));
};
jayq.core.promise = function() {
  var promise = null;
  var promise__1 = function(deferred) {
    return deferred.promise();
  };
  var promise__2 = function(deferred, type) {
    return deferred.promise(type);
  };
  var promise__3 = function(deferred, type, target) {
    return deferred.promise(type, target);
  };
  promise = function(deferred, type, target) {
    switch(arguments.length) {
      case 1:
        return promise__1.call(this, deferred);
      case 2:
        return promise__2.call(this, deferred, type);
      case 3:
        return promise__3.call(this, deferred, type, target);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  promise.cljs$core$IFn$_invoke$arity$1 = promise__1;
  promise.cljs$core$IFn$_invoke$arity$2 = promise__2;
  promise.cljs$core$IFn$_invoke$arity$3 = promise__3;
  return promise;
}();
jayq.core.always = function() {
  var always__delegate = function(deferred, fns_args) {
    return deferred.always.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var always = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return always__delegate.call(this, deferred, fns_args);
  };
  always.cljs$lang$maxFixedArity = 1;
  always.cljs$lang$applyTo = function(arglist__186004) {
    var deferred = cljs.core.first(arglist__186004);
    var fns_args = cljs.core.rest(arglist__186004);
    return always__delegate(deferred, fns_args);
  };
  always.cljs$core$IFn$_invoke$arity$variadic = always__delegate;
  return always;
}();
jayq.core.reject = function reject(deferred, args) {
  return deferred.reject(args);
};
jayq.core.reject_with = function reject_with(deferred, context, args) {
  return deferred.rejectWith(context, args);
};
jayq.core.notify = function notify(deferred, args) {
  return deferred.notify(args);
};
jayq.core.notify_with = function notify_with(deferred, context, args) {
  return deferred.notifyWith(context, args);
};
jayq.core.resolve = function resolve(deferred, args) {
  return deferred.resolve(args);
};
jayq.core.resolve_with = function resolve_with(deferred, context, args) {
  return deferred.resolveWith(context, args);
};
jayq.core.pipe = function() {
  var pipe = null;
  var pipe__2 = function(deferred, done_filter) {
    return deferred.pipe(done_filter);
  };
  var pipe__3 = function(deferred, done_filter, fail_filter) {
    return deferred.pipe(done_filter, fail_filter);
  };
  var pipe__4 = function(deferred, done_filter, fail_filter, progress_filter) {
    return deferred.pipe(done_filter, fail_filter, progress_filter);
  };
  pipe = function(deferred, done_filter, fail_filter, progress_filter) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, deferred, done_filter);
      case 3:
        return pipe__3.call(this, deferred, done_filter, fail_filter);
      case 4:
        return pipe__4.call(this, deferred, done_filter, fail_filter, progress_filter);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  pipe.cljs$core$IFn$_invoke$arity$4 = pipe__4;
  return pipe;
}();
jayq.core.state = function state(deferred) {
  return cljs.core.keyword.call(null, deferred.state());
};
jayq.core.deferred_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", 4374474914), jayq.core.$when, new cljs.core.Keyword(null, "bind", "bind", 1016928175), function(x, f) {
  var dfd = jayq.core.$deferred.call(null);
  jayq.core.done.call(null, x, function(v) {
    return jayq.core.done.call(null, f.call(null, v), cljs.core.partial.call(null, jayq.core.resolve, dfd));
  });
  return jayq.core.promise.call(null, dfd);
}, new cljs.core.Keyword(null, "zero", "zero", 1017639450), cljs.core.identity], null);
jayq.core.ajax_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", 4374474914), cljs.core.identity, new cljs.core.Keyword(null, "bind", "bind", 1016928175), function(x, f) {
  return jayq.core.done.call(null, jayq.core.ajax.call(null, x), f);
}, new cljs.core.Keyword(null, "zero", "zero", 1017639450), cljs.core.identity], null);
goog.provide("chaperone.ng.directive");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("purnam.native$");
goog.require("clojure.string");
goog.require("purnam.native$");
goog.require("jayq.core");
goog.require("jayq.core");
goog.require("chaperone.ng.core");
chaperone.ng.directive.chaperone_app_clickRow = ["$location", function($location) {
  var link = function(scope, row, attr) {
    var row__$1 = jayq.core.$.call(null, row);
    return jayq.core.on.call(null, row__$1, new cljs.core.Keyword(null, "click", "click", 1108654330), function(row__$1) {
      return function(e) {
        var href = jayq.core.attr.call(null, jayq.core.find.call(null, row__$1, new cljs.core.Keyword(null, "a", "a", 1013904339)), new cljs.core.Keyword(null, "href", "href", 1017115293));
        return scope.$apply(function(href, row__$1) {
          return function() {
            var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
            var fn_SHARP_ = obj_SHARP_["path"];
            return fn_SHARP_.call(obj_SHARP_, clojure.string.replace_first.call(null, href, "#", ""));
          };
        }(href, row__$1));
      };
    }(row__$1));
  };
  var G__182253 = function() {
    var obj182256 = {};
    return obj182256;
  }();
  G__182253["link"] = link;
  return G__182253;
}];
angular.module("chaperone.app").directive("clickRow", chaperone.ng.directive.chaperone_app_clickRow);
chaperone.ng.directive.chaperone_app_submitButton = [function() {
  var G__182257 = function() {
    var obj182260 = {};
    return obj182260;
  }();
  G__182257["templateUrl"] = "/public/directives/submit.html";
  G__182257["restrict"] = "E";
  return G__182257;
}];
angular.module("chaperone.app").directive("submitButton", chaperone.ng.directive.chaperone_app_submitButton);
goog.provide("chaperone.ng.directive_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.ng.directive");
goog.require("jayq.core");
goog.require("jayq.core");
test_helper.init_tests.call(null);
var spec_182472 = function() {
  var obj182471 = {};
  return obj182471;
}();
describe("Click Row Directive", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$compile", "$location", "$rootScope", function($compile, $location, $rootScope) {
    spec_182472["$compile"] = $compile;
    spec_182472["$rootScope"] = $rootScope;
    return spec_182472["$location"] = $location;
  }]));
  it("when using row-click directive, the path should be the href location when the row is clicked", function() {
    var table = function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_182472, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["$compile"];
      return fn_SHARP_.call(obj_SHARP_, "\x3ctable\x3e\x3ctbody\x3e\x3ctr click-row\x3e\x3ctd\x3e\x3ca href\x3d'/link'\x3elink\x3c/a\x3e\x3c/td\x3e\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e");
    }().call(null, purnam.native$.aget_in.call(null, spec_182472, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null)));
    var obj_SHARP__182473 = purnam.native$.aget_in.call(null, spec_182472, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null));
    var fn_SHARP__182474 = obj_SHARP__182473["$digest"];
    fn_SHARP__182474.call(obj_SHARP__182473);
    jayq.core.trigger.call(null, jayq.core.find.call(null, jayq.core.$.call(null, table), new cljs.core.Keyword(null, "tr", "tr", 1013907952)), new cljs.core.Keyword(null, "click", "click", 1108654330));
    return expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_182472, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$location"], null));
      var fn_SHARP_ = obj_SHARP_["path"];
      return fn_SHARP_.call(obj_SHARP_);
    }()).toSatisfy("/link", '(let [obj# (purnam.native/aget-in spec ["$location"]) fn# (aget obj# "path")] (.call fn# obj#))', "/link");
  });
  return null;
});
var spec_182477 = function() {
  var obj182476 = {};
  return obj182476;
}();
describe("Submit button directive", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$compile", "$rootScope", "$templateCache", function($compile, $rootScope, $templateCache) {
    spec_182477["$compile"] = $compile;
    spec_182477["$rootScope"] = $rootScope;
    return spec_182477["$templateCache"] = $templateCache;
  }]));
  it("should show a submit button with a glyph on it", function() {
    var submit = function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_182477, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["$compile"];
      return fn_SHARP_.call(obj_SHARP_, "\x3csubmit-button/\x3e");
    }().call(null, purnam.native$.aget_in.call(null, spec_182477, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null)));
    var obj_SHARP__182478 = purnam.native$.aget_in.call(null, spec_182477, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null));
    var fn_SHARP__182479 = obj_SHARP__182478["$digest"];
    fn_SHARP__182479.call(obj_SHARP__182478);
    var html = jayq.core.html.call(null, jayq.core.$.call(null, submit));
    expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, html, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["indexOf"];
      return fn_SHARP_.call(obj_SHARP_, '\x3cbutton type\x3d"submit"');
    }()).not.toSatisfy(-1, '(let [obj# (purnam.native/aget-in html []) fn# (aget obj# "indexOf")] (.call fn# obj# "\x3cbutton type\x3d\\"submit\\""))', "-1");
    return expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, html, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["indexOf"];
      return fn_SHARP_.call(obj_SHARP_, "glyphicon-floppy-save");
    }()).not.toSatisfy(-1, '(let [obj# (purnam.native/aget-in html []) fn# (aget obj# "indexOf")] (.call fn# obj# "glyphicon-floppy-save"))', "-1");
  });
  return null;
});
goog.provide("chaperone.websocket_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("test_helper");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.websocket");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.rpc");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.core");
goog.require("chaperone.core");
test_helper.init_tests.call(null);
var spec_182401 = function() {
  var obj182400 = {};
  return obj182400;
}();
describe("Websocket subsystem", function() {
  it("should have the websocket subsystem", function() {
    var system = chaperone.core.create_system.call(null, "localhost", 8080);
    return expect(cljs.core.map_QMARK_.call(null, chaperone.websocket.sub_system.call(null, system))).toSatisfy(true, "(map? (sub-system system))", "true");
  });
  return null;
});
var spec_182405 = function() {
  var obj182404 = {};
  return obj182404;
}();
var system_182406 = chaperone.core.create_system.call(null, "localhost", 8080);
var ws_system_182407 = chaperone.websocket.sub_system.call(null, system_182406);
var ws_chan_182408 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(ws_system_182407);
var rpc_map_182409 = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(ws_system_182407);
describe("Websocket RPC (Not started)", function() {
  it("Should take a RPC request, put it in the websocket channel, and setup the response channel handler", function() {
    var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "request-category", "request-category", 2279649774), new cljs.core.Keyword(null, "request-action", "request-action", 1648081574), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", 1014010321), "value"], null));
    var result = cljs.core.atom.call(null, false);
    cljs.core.async.take_BANG_.call(null, ws_chan_182408, function(p1__182402_SHARP_) {
      return cljs.core.reset_BANG_.call(null, result, p1__182402_SHARP_);
    });
    runs(function() {
      return chaperone.websocket.send_BANG_.call(null, ws_system_182407, request);
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, result);
    }, "No value placed in Websocket channel", 1E3);
    return runs(function() {
      return expect(cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, rpc_map_182409), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, result)))).toSatisfy(true, "(contains? (clojure.core/deref rpc-map) (:id (clojure.core/deref result)))", "true");
    });
  });
  return null;
});
var spec_182416 = function() {
  var obj182411 = {};
  return obj182411;
}();
var system_182417 = chaperone.websocket.start_BANG_.call(null, chaperone.core.create_system.call(null, "localhost", 8080));
var ws_system_182418 = chaperone.websocket.sub_system.call(null, system_182417);
var rpc_map_182419 = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(ws_system_182418);
var response_chan_182420 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(ws_system_182418);
var socket_182421 = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(ws_system_182418);
describe("Websocket RPC (Started)", function() {
  it("Should send back a response on the returned request channel, when a response is sent back", function() {
    var obj_SHARP__182422 = purnam.native$.aget_in.call(null, socket_182421, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP__182423 = obj_SHARP__182422["onopen"];
    fn_SHARP__182423.call(obj_SHARP__182422);
    var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "thing", "thing", 1124235360), new cljs.core.Keyword(null, "do-thing", "do-thing", 4623549598), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", 1014010321), "value"], null));
    var ws_complete = cljs.core.atom.call(null, false);
    var response = chaperone.crossover.rpc.new_response.call(null, request, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "data", "data", 1016980252), "oooer"], null));
    var response_result = cljs.core.atom.call(null, false);
    runs(function() {
      purnam.native$.aset_in.call(null, socket_182421, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["send"], null), function(v) {
        return cljs.core.reset_BANG_.call(null, ws_complete, v);
      });
      return cljs.core.async.take_BANG_.call(null, chaperone.websocket.send_BANG_.call(null, ws_system_182418, request), function(v) {
        return cljs.core.reset_BANG_.call(null, response_result, v);
      });
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, ws_complete);
    }, "No value placed in Websocket channel", 1E3);
    runs(function() {
      var socket__$1 = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(ws_system_182418);
      var obj_SHARP_ = purnam.native$.aget_in.call(null, socket__$1, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["onmessage"];
      return fn_SHARP_.call(obj_SHARP_, function() {
        var G__182412 = function() {
          var obj182415 = {};
          return obj182415;
        }();
        G__182412["data"] = cljs.core.pr_str.call(null, response);
        return G__182412;
      }());
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, response_result);
    }, "No value returned on RPC's channel", 1E3);
    return runs(function() {
      expect(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, response_result)), request)).toSatisfy(true, "(\x3d (-\x3e (clojure.core/deref response-result) :request) request)", "true");
      return expect(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, response_result)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "data", "data", 1016980252), "oooer"], null))).toSatisfy(true, '(\x3d (:data (clojure.core/deref response-result)) {:data "oooer"})', "true");
    });
  });
  return null;
});
goog.provide("purnam.types.clojure");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.types.clojure.obj_only = function obj_only(o, method) {
  if (cljs.core.type.call(null, o) === Object) {
    return null;
  } else {
    throw new TypeError([cljs.core.str(purnam.native$.js_type.call(null, o)), cljs.core.str(" does not implement '"), cljs.core.str(cljs.core.name.call(null, method)), cljs.core.str("'")].join(""));
  }
};
cljs.core.ISeqable["object"] = true;
cljs.core._seq["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "seq", "seq", 1014018001));
  return cljs.core.map.call(null, function(k) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, o, k)], null);
  }, cljs.core.js_keys.call(null, o));
};
cljs.core.ICounted["array"] = true;
cljs.core._count["array"] = function(a) {
  return a.length;
};
cljs.core.ICounted["object"] = true;
cljs.core._count["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "count", "count", 1108755585));
  return cljs.core.js_keys.call(null, o).length;
};
cljs.core.ILookup["array"] = true;
cljs.core._lookup["array"] = function() {
  var G__186015 = null;
  var G__186015__2 = function(a, k) {
    return purnam.native$.js_lookup.call(null, a, k);
  };
  var G__186015__3 = function(a, k, not_found) {
    return purnam.native$.js_lookup.call(null, a, k, not_found);
  };
  G__186015 = function(a, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__186015__2.call(this, a, k);
      case 3:
        return G__186015__3.call(this, a, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__186015;
}();
cljs.core.ILookup["object"] = true;
cljs.core._lookup["object"] = function() {
  var G__186016 = null;
  var G__186016__2 = function(o, k) {
    return purnam.native$.js_lookup.call(null, o, k);
  };
  var G__186016__3 = function(o, k, not_found) {
    return purnam.native$.js_lookup.call(null, o, k, not_found);
  };
  G__186016 = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__186016__2.call(this, o, k);
      case 3:
        return G__186016__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__186016;
}();
cljs.core.ITransientAssociative["array"] = true;
cljs.core._assoc_BANG_["array"] = function(o, i, v) {
  return purnam.native$.js_assoc.call(null, o, i, v);
};
cljs.core.ITransientAssociative["object"] = true;
cljs.core._assoc_BANG_["object"] = function(o, k, v) {
  return purnam.native$.js_assoc.call(null, o, k, v);
};
cljs.core.ITransientCollection["array"] = true;
cljs.core._conj_BANG_["array"] = function(a, v) {
  a.push(v);
  return a;
};
cljs.core._persistent_BANG_["array"] = function(a) {
  return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, a);
};
cljs.core.ITransientCollection["object"] = true;
cljs.core._conj_BANG_["object"] = function(o, p__186017) {
  var vec__186018 = p__186017;
  var k = cljs.core.nth.call(null, vec__186018, 0, null);
  var v = cljs.core.nth.call(null, vec__186018, 1, null);
  return purnam.native$.js_assoc.call(null, o, k, v);
};
cljs.core._persistent_BANG_["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "persistent!", "persistent!", 4015339484));
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__186019) {
    var vec__186020 = p__186019;
    var k = cljs.core.nth.call(null, vec__186020, 0, null);
    var v = cljs.core.nth.call(null, vec__186020, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
  }, o));
};
cljs.core.IEmptyableCollection["array"] = true;
cljs.core._empty["array"] = function(a) {
  return[];
};
cljs.core.IEmptyableCollection["object"] = true;
cljs.core._empty["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
  var obj186022 = {};
  return obj186022;
};
cljs.core.IAssociative["array"] = true;
cljs.core._assoc["array"] = function() {
  var G__186023__delegate = function(o, more) {
    return purnam.native$.js_copy_assoc.call(null, o, more);
  };
  var G__186023 = function(o, var_args) {
    var more = null;
    if (arguments.length > 1) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__186023__delegate.call(this, o, more);
  };
  G__186023.cljs$lang$maxFixedArity = 1;
  G__186023.cljs$lang$applyTo = function(arglist__186024) {
    var o = cljs.core.first(arglist__186024);
    var more = cljs.core.rest(arglist__186024);
    return G__186023__delegate(o, more);
  };
  G__186023.cljs$core$IFn$_invoke$arity$variadic = G__186023__delegate;
  return G__186023;
}();
cljs.core.IAssociative["object"] = true;
cljs.core._assoc["object"] = function() {
  var G__186025__delegate = function(o, more) {
    return purnam.native$.js_copy_assoc.call(null, o, more);
  };
  var G__186025 = function(o, var_args) {
    var more = null;
    if (arguments.length > 1) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__186025__delegate.call(this, o, more);
  };
  G__186025.cljs$lang$maxFixedArity = 1;
  G__186025.cljs$lang$applyTo = function(arglist__186026) {
    var o = cljs.core.first(arglist__186026);
    var more = cljs.core.rest(arglist__186026);
    return G__186025__delegate(o, more);
  };
  G__186025.cljs$core$IFn$_invoke$arity$variadic = G__186025__delegate;
  return G__186025;
}();
purnam.types.clojure.js_conj_object_BANG_ = function js_conj_object_BANG_(output, p__186027) {
  while (true) {
    var vec__186030 = p__186027;
    var vec__186031 = cljs.core.nth.call(null, vec__186030, 0, null);
    var k = cljs.core.nth.call(null, vec__186031, 0, null);
    var v = cljs.core.nth.call(null, vec__186031, 1, null);
    var ps = cljs.core.nthnext.call(null, vec__186030, 1);
    if (cljs.core.not.call(null, k)) {
      return output;
    } else {
      var G__186032 = purnam.native$.js_assoc.call(null, output, k, v);
      var G__186033 = ps;
      output = G__186032;
      p__186027 = G__186033;
      continue;
    }
    break;
  }
};
purnam.types.clojure.js_conj_array_BANG_ = function js_conj_array_BANG_(output, p__186034) {
  while (true) {
    var vec__186036 = p__186034;
    var v = cljs.core.nth.call(null, vec__186036, 0, null);
    var vs = cljs.core.nthnext.call(null, vec__186036, 1);
    if (cljs.core.not.call(null, v)) {
      return output;
    } else {
      var G__186037 = function() {
        output.push(v);
        return output;
      }();
      var G__186038 = vs;
      output = G__186037;
      p__186034 = G__186038;
      continue;
    }
    break;
  }
};
purnam.types.clojure.js_conj_object = function js_conj_object(parent, pairs) {
  var o = goog.object.clone(parent);
  return purnam.types.clojure.js_conj_object_BANG_.call(null, o, pairs);
};
purnam.types.clojure.js_conj_array = function js_conj_array(parent, values) {
  var a = goog.array.clone(parent);
  purnam.types.clojure.js_conj_array_BANG_.call(null, a, values);
  return a;
};
cljs.core.ICollection["array"] = true;
cljs.core._conj["array"] = function() {
  var G__186039__delegate = function(parent, values) {
    return purnam.types.clojure.js_conj_array.call(null, parent, values);
  };
  var G__186039 = function(parent, var_args) {
    var values = null;
    if (arguments.length > 1) {
      values = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__186039__delegate.call(this, parent, values);
  };
  G__186039.cljs$lang$maxFixedArity = 1;
  G__186039.cljs$lang$applyTo = function(arglist__186040) {
    var parent = cljs.core.first(arglist__186040);
    var values = cljs.core.rest(arglist__186040);
    return G__186039__delegate(parent, values);
  };
  G__186039.cljs$core$IFn$_invoke$arity$variadic = G__186039__delegate;
  return G__186039;
}();
cljs.core.ICollection["object"] = true;
cljs.core._conj["object"] = function() {
  var G__186041__delegate = function(parent, pairs) {
    return purnam.types.clojure.js_conj_object.call(null, parent, pairs);
  };
  var G__186041 = function(parent, var_args) {
    var pairs = null;
    if (arguments.length > 1) {
      pairs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__186041__delegate.call(this, parent, pairs);
  };
  G__186041.cljs$lang$maxFixedArity = 1;
  G__186041.cljs$lang$applyTo = function(arglist__186042) {
    var parent = cljs.core.first(arglist__186042);
    var pairs = cljs.core.rest(arglist__186042);
    return G__186041__delegate(parent, pairs);
  };
  G__186041.cljs$core$IFn$_invoke$arity$variadic = G__186041__delegate;
  return G__186041;
}();
cljs.core.ITransientMap["object"] = true;
cljs.core._dissoc_BANG_["object"] = function(o, k) {
  goog.object.remove(o, purnam.native$.js_strkey.call(null, k));
  return o;
};
cljs.core.IMap["object"] = true;
cljs.core._dissoc["object"] = function(parent, k) {
  purnam.types.clojure.obj_only.call(null, parent, new cljs.core.Keyword(null, "dissoc", "dissoc", 3977329067));
  var o = function() {
    var obj186044 = {};
    return obj186044;
  }();
  goog.object.extend(o, parent);
  return cljs.core.dissoc_BANG_.call(null, o, k);
};
cljs.core.IAssociative["object"] = true;
cljs.core._assoc["object"] = function(o, k, v) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "assoc", "assoc", 1107025799));
  return cljs.core.conj.call(null, o, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
};
goog.provide("chaperone.ng.messagebox");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("purnam.types.clojure");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("chaperone.ng.core");
chaperone.ng.messagebox.add_message_BANG_ = function add_message_BANG_($scope, $timeout, message) {
  var js_message = cljs.core.clj__GT_js.call(null, message);
  $scope.$apply(function() {
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), cljs.core.clj__GT_js.call(null, cljs.core.cons.call(null, js_message, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null)))));
  });
  return $timeout.call(null, function() {
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), cljs.core.clj__GT_js.call(null, cljs.core.remove.call(null, function(p1__182311_SHARP_) {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, angular, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["equals"];
      return fn_SHARP_.call(obj_SHARP_, js_message, p1__182311_SHARP_);
    }, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null)))));
  }, 4E3);
};
chaperone.ng.messagebox.start_message_queue_listening_BANG_ = function start_message_queue_listening_BANG_(system, $scope, $timeout) {
  var mb = chaperone.messagebox.sub_system.call(null, system);
  var queue = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(mb);
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_182356) {
        var state_val_182357 = state_182356[1];
        if (state_val_182357 === 8) {
          var inst_182348 = state_182356[2];
          var inst_182343 = inst_182348;
          var state_182356__$1 = function() {
            var statearr_182358 = state_182356;
            statearr_182358[5] = inst_182343;
            return statearr_182358;
          }();
          var statearr_182359_182370 = state_182356__$1;
          statearr_182359_182370[2] = null;
          statearr_182359_182370[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_182357 === 7) {
            var inst_182352 = state_182356[2];
            var state_182356__$1 = state_182356;
            var statearr_182360_182371 = state_182356__$1;
            statearr_182360_182371[2] = inst_182352;
            statearr_182360_182371[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_182357 === 6) {
              var state_182356__$1 = state_182356;
              var statearr_182361_182372 = state_182356__$1;
              statearr_182361_182372[2] = null;
              statearr_182361_182372[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_182357 === 5) {
                var state_182356__$1 = state_182356;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_182356__$1, 8, queue);
              } else {
                if (state_val_182357 === 4) {
                  var inst_182354 = state_182356[2];
                  var state_182356__$1 = state_182356;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_182356__$1, inst_182354);
                } else {
                  if (state_val_182357 === 3) {
                    var inst_182343 = state_182356[5];
                    var inst_182345 = chaperone.ng.messagebox.add_message_BANG_.call(null, $scope, $timeout, inst_182343);
                    var state_182356__$1 = function() {
                      var statearr_182362 = state_182356;
                      statearr_182362[6] = inst_182345;
                      return statearr_182362;
                    }();
                    if (cljs.core.truth_(inst_182343)) {
                      var statearr_182363_182373 = state_182356__$1;
                      statearr_182363_182373[1] = 5;
                    } else {
                      var statearr_182364_182374 = state_182356__$1;
                      statearr_182364_182374[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_182357 === 2) {
                      var inst_182342 = state_182356[2];
                      var inst_182343 = inst_182342;
                      var state_182356__$1 = function() {
                        var statearr_182365 = state_182356;
                        statearr_182365[5] = inst_182343;
                        return statearr_182365;
                      }();
                      var statearr_182366_182375 = state_182356__$1;
                      statearr_182366_182375[2] = null;
                      statearr_182366_182375[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_182357 === 1) {
                        var state_182356__$1 = state_182356;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_182356__$1, 2, queue);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_182368 = [null, null, null, null, null, null, null];
            statearr_182368[0] = state_machine__5833__auto__;
            statearr_182368[1] = 1;
            return statearr_182368;
          };
          var state_machine__5833__auto____1 = function(state_182356) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_182356);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_182356) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_182356);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_182369 = f__5883__auto__.call(null);
      statearr_182369[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_182369;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
chaperone.ng.messagebox.chaperone_app_MessageBoxCtrl = ["$scope", "$timeout", "System", function($scope, $timeout, System) {
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["init"], null), function() {
    purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), []);
    return chaperone.ng.messagebox.start_message_queue_listening_BANG_.call(null, System, $scope, $timeout);
  });
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messageClass"], null), function(level) {
    return[cljs.core.str("alert-"), cljs.core.str(level)].join("");
  });
}];
angular.module("chaperone.app").controller("MessageBoxCtrl", chaperone.ng.messagebox.chaperone_app_MessageBoxCtrl);
goog.provide("chaperone.ng.messagebox_test");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("purnam.types.clojure");
goog.require("chaperone.ng.messagebox");
test_helper.init_tests.call(null);
var spec_182441 = function() {
  var obj182428 = {};
  return obj182428;
}();
describe("MessageBoxCtrl", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["System", "$controller", "$timeout", "$rootScope", function(System, $controller, $timeout, $rootScope) {
    spec_182441["$scope"] = $controller.call(null, "MessageBoxCtrl", function() {
      var G__182429 = function() {
        var obj182432 = {};
        return obj182432;
      }();
      G__182429["$scope"] = function() {
        var obj_SHARP_ = purnam.native$.aget_in.call(null, $rootScope, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP_ = obj_SHARP_["$new"];
        return fn_SHARP_.call(obj_SHARP_);
      }();
      return G__182429;
    }());
    spec_182441["System"] = System;
    return spec_182441["$timeout"] = $timeout;
  }]));
  it("Should have an empty array in scope on init", function() {
    var obj_SHARP__182442 = purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__182443 = obj_SHARP__182442["init"];
    fn_SHARP__182443.call(obj_SHARP__182442);
    return expect(purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
  });
  it("should put the message in the array when it is added", function() {
    var obj_SHARP__182444 = purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__182445 = obj_SHARP__182444["init"];
    fn_SHARP__182445.call(obj_SHARP__182444);
    runs(function() {
      expect(purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return!cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)));
    }, "Messages doesn't get the message", 1E3);
    runs(function() {
      expect(cljs.core.first.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(function() {
        var G__182433 = function() {
          var obj182436 = {};
          return obj182436;
        }();
        G__182433["message"] = "Hello World!";
        G__182433["level"] = "info";
        return G__182433;
      }(), '(first (purnam.native/aget-in spec ["$scope" "messages"]))', '(obj :level "info" :message "Hello World!")');
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "warning", "warning", 2138350350), "Hello World!");
    });
    waitsFor(function() {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))), 2);
    }, "Messages should have a second message", 1E3);
    return runs(function() {
      return expect(cljs.core.first.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(function() {
        var G__182437 = function() {
          var obj182440 = {};
          return obj182440;
        }();
        G__182437["message"] = "Hello World!";
        G__182437["level"] = "warning";
        return G__182437;
      }(), '(first (purnam.native/aget-in spec ["$scope" "messages"]))', '(obj :level "warning" :message "Hello World!")');
    });
  });
  it("should remove a message from the array after 4 seconds", function() {
    var obj_SHARP__182446 = purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__182447 = obj_SHARP__182446["init"];
    fn_SHARP__182447.call(obj_SHARP__182446);
    runs(function() {
      expect(purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return!cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)));
    }, "Messages doesn't get the message", 1E3);
    return runs(function() {
      var obj_SHARP__182448 = purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$timeout"], null));
      var fn_SHARP__182449 = obj_SHARP__182448["flush"];
      fn_SHARP__182449.call(obj_SHARP__182448);
      return expect(cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(true, '(empty? (purnam.native/aget-in spec ["$scope" "messages"]))', "true");
    });
  });
  it("should return the correct class for a messagebox by it's level", function() {
    return expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_182441, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP_ = obj_SHARP_["messageClass"];
      return fn_SHARP_.call(obj_SHARP_, "success");
    }()).toSatisfy("alert-success", '(let [obj# (purnam.native/aget-in spec ["$scope"]) fn# (aget obj# "messageClass")] (.call fn# obj# "success"))', "alert-success");
  });
  return null;
});
goog.provide("chaperone.messagebox_test");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("chaperone.messagebox");
goog.require("test_helper");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.messagebox");
goog.require("chaperone.core");
goog.require("chaperone.core");
test_helper.init_tests.call(null);
var spec_182398 = function() {
  var obj182397 = {};
  return obj182397;
}();
describe("Message queuing", function() {
  it("should put a message in the queue", function() {
    var system = chaperone.core.create_system.call(null, "localhost", 80);
    var mb = chaperone.messagebox.sub_system.call(null, system);
    var chan = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(mb);
    var result = cljs.core.atom.call(null, false);
    runs(function() {
      cljs.core.async.take_BANG_.call(null, chan, function(p1__182395_SHARP_) {
        return cljs.core.reset_BANG_.call(null, result, p1__182395_SHARP_);
      });
      return chaperone.messagebox.send_message_BANG_.call(null, mb, new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, result);
    }, "No value in the message queue", 2E3);
    return runs(function() {
      return expect(cljs.core.deref.call(null, result)).toSatisfy(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "level", "level", 1116770038), new cljs.core.Keyword(null, "info", "info", 1017141280), new cljs.core.Keyword(null, "message", "message", 1968829305), "Hello World!"], null), "(clojure.core/deref result)", '{:level :info, :message "Hello World!"}');
    });
  });
  return null;
});
goog.provide("chaperone.rpc");
goog.require("cljs.core");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
chaperone.rpc.send_request = function send_request(system, category, action, data) {
  var request = chaperone.crossover.rpc.new_request.call(null, category, action, data);
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  return chaperone.websocket.send_BANG_.call(null, web_socket, request);
};
goog.provide("chaperone.user");
goog.require("cljs.core");
goog.require("chaperone.crossover.user.User");
goog.require("chaperone.rpc");
goog.require("chaperone.rpc");
chaperone.user.save_user = function save_user(system, user) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "save", "save", 1017427183), user);
};
chaperone.user.list_users = function list_users(system) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "list", "list", 1017226256), cljs.core.PersistentArrayMap.EMPTY);
};
chaperone.user.get_user_by_id = function get_user_by_id(system, id) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "load", "load", 1017231448), id);
};
goog.provide("chaperone.ng.core_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.core");
test_helper.init_tests.call(null);
var spec_182426 = function() {
  var obj182425 = {};
  return obj182425;
}();
describe("Test the System service factory", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["System", function(System) {
    return spec_182426["System"] = System;
  }]));
  it("Should be a map", function() {
    return expect(cljs.core.map_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_182426, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null)))).toSatisfy(true, '(map? (purnam.native/aget-in spec ["System"]))', "true");
  });
  it("Should have a websocket key", function() {
    return expect(cljs.core.contains_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_182426, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null)), new cljs.core.Keyword(null, "websocket", "websocket", 784338745))).toSatisfy(true, '(contains? (purnam.native/aget-in spec ["System"]) :websocket)', "true");
  });
  return null;
});
goog.provide("chaperone.ng.admin.user");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("chaperone.messagebox");
goog.require("chaperone.crossover.user");
goog.require("chaperone.messagebox");
goog.require("chaperone.ng.core");
goog.require("chaperone.crossover.user");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("purnam.native$");
goog.require("chaperone.ng.core");
chaperone.ng.admin.user.chaperone_app_AdminUserCtrl = ["$scope", "$location", "$routeParams", "System", function($scope, $location, $routeParams, System) {
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initAddUserForm"], null), function() {
    var user = chaperone.crossover.user.new_user.call(null, "", "", "", "");
    purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null), user);
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user));
  });
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initEditUserForm"], null), function() {
    var chan = chaperone.user.get_user_by_id.call(null, System, purnam.native$.aget_in.call(null, $routeParams, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["id"], null)));
    var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_182267) {
          var state_val_182268 = state_182267[1];
          if (state_val_182268 === 2) {
            var inst_182262 = state_182267[2];
            var inst_182263 = (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(inst_182262);
            var inst_182264 = function() {
              var user = inst_182263;
              var response = inst_182262;
              return function(user, response, inst_182262, inst_182263, state_val_182268) {
                return function() {
                  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null), user);
                  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user));
                };
              }(user, response, inst_182262, inst_182263, state_val_182268);
            }();
            var inst_182265 = $scope.$apply(inst_182264);
            var state_182267__$1 = state_182267;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_182267__$1, inst_182265);
          } else {
            if (state_val_182268 === 1) {
              var state_182267__$1 = state_182267;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_182267__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_182270 = [null, null, null, null, null];
              statearr_182270[0] = state_machine__5833__auto__;
              statearr_182270[1] = 1;
              return statearr_182270;
            };
            var state_machine__5833__auto____1 = function(state_182267) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_182267);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_182267) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_182267);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_182271 = f__5883__auto__.call(null);
        statearr_182271[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
        return statearr_182271;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return c__5882__auto__;
  });
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["saveUser"], null), function() {
    var data = cljs.core.merge.call(null, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null)), cljs.core.js__GT_clj.call(null, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null)), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true));
    var user = chaperone.crossover.user.map__GT_User.call(null, data);
    var chan = chaperone.user.save_user.call(null, System, user);
    var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_182279) {
          var state_val_182280 = state_182279[1];
          if (state_val_182280 === 2) {
            var inst_182273 = state_182279[2];
            var inst_182274 = chaperone.messagebox.sub_system.call(null, System);
            var inst_182275 = chaperone.messagebox.send_message_BANG_.call(null, inst_182274, new cljs.core.Keyword(null, "success", "success", 3441701749), "User has been saved successfully");
            var inst_182276 = function() {
              var mb = inst_182274;
              var result = inst_182273;
              return function(mb, result, inst_182273, inst_182274, inst_182275, state_val_182280) {
                return function() {
                  var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
                  var fn_SHARP_ = obj_SHARP_["path"];
                  return fn_SHARP_.call(obj_SHARP_, "/admin/users/list");
                };
              }(mb, result, inst_182273, inst_182274, inst_182275, state_val_182280);
            }();
            var inst_182277 = $scope.$apply(inst_182276);
            var state_182279__$1 = function() {
              var statearr_182281 = state_182279;
              statearr_182281[5] = inst_182275;
              return statearr_182281;
            }();
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_182279__$1, inst_182277);
          } else {
            if (state_val_182280 === 1) {
              var state_182279__$1 = state_182279;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_182279__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_182283 = [null, null, null, null, null, null];
              statearr_182283[0] = state_machine__5833__auto__;
              statearr_182283[1] = 1;
              return statearr_182283;
            };
            var state_machine__5833__auto____1 = function(state_182279) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_182279);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_182279) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_182279);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_182284 = f__5883__auto__.call(null);
        statearr_182284[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
        return statearr_182284;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return c__5882__auto__;
  });
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initListUsers"], null), function() {
    var chan = chaperone.user.list_users.call(null, System);
    var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_182290) {
          var state_val_182291 = state_182290[1];
          if (state_val_182291 === 2) {
            var inst_182286 = state_182290[2];
            var inst_182287 = function() {
              var result = inst_182286;
              return function(result, inst_182286, state_val_182291) {
                return function() {
                  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["userList"], null), cljs.core.clj__GT_js.call(null, (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(result)));
                };
              }(result, inst_182286, state_val_182291);
            }();
            var inst_182288 = $scope.$apply(inst_182287);
            var state_182290__$1 = state_182290;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_182290__$1, inst_182288);
          } else {
            if (state_val_182291 === 1) {
              var state_182290__$1 = state_182290;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_182290__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_182293 = [null, null, null, null, null];
              statearr_182293[0] = state_machine__5833__auto__;
              statearr_182293[1] = 1;
              return statearr_182293;
            };
            var state_machine__5833__auto____1 = function(state_182290) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_182290);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_182290) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_182290);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_182294 = f__5883__auto__.call(null);
        statearr_182294[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
        return statearr_182294;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return c__5882__auto__;
  });
}];
angular.module("chaperone.app").controller("AdminUserCtrl", chaperone.ng.admin.user.chaperone_app_AdminUserCtrl);
goog.provide("chaperone.core_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.core");
goog.require("chaperone.core");
goog.require("purnam.native$");
goog.require("test_helper");
test_helper.init_tests.call(null);
var spec_182394 = function() {
  var obj182393 = {};
  return obj182393;
}();
describe("Create the system", function() {
  it("Should return a map", function() {
    return expect(true).toSatisfy(cljs.core.map_QMARK_.call(null, chaperone.core.create_system.call(null, "localhost", 80)), "true", '(map? (create-system "localhost" 80))');
  });
  return null;
});
goog.provide("chaperone.ng.admin.user_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("test_helper");
goog.require("chaperone.user");
goog.require("chaperone.ng.admin.user");
goog.require("test_helper");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.user");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.admin.user");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.user");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("purnam.native$");
test_helper.init_tests.call(null);
var spec_182459 = function() {
  var obj182451 = {};
  return obj182451;
}();
describe("Testing AdminUserCtrl", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$controller", "$routeParams", "$location", "$rootScope", function($controller, $routeParams, $location, $rootScope) {
    spec_182459["$scope"] = $controller.call(null, "AdminUserCtrl", function() {
      var G__182452 = function() {
        var obj182455 = {};
        return obj182455;
      }();
      G__182452["$scope"] = function() {
        var obj_SHARP_ = purnam.native$.aget_in.call(null, $rootScope, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP_ = obj_SHARP_["$new"];
        return fn_SHARP_.call(obj_SHARP_);
      }();
      G__182452["$location"] = $location;
      return G__182452;
    }());
    spec_182459["$location"] = $location;
    return spec_182459["$routeParams"] = $routeParams;
  }]));
  it("Should create a new user into scope, when a non existent usersid is used", function() {
    var obj_SHARP__182460 = purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__182461 = obj_SHARP__182460["initAddUserForm"];
    fn_SHARP__182461.call(obj_SHARP__182460);
    expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "firstname"])', "");
    expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "lastname"])', "");
    expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "email"])', "");
    return expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "password"])', "");
  });
  it("Should change the location when a user is saved", function() {
    var obj_SHARP__182462 = purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__182463 = obj_SHARP__182462["initAddUserForm"];
    fn_SHARP__182463.call(obj_SHARP__182462);
    purnam.native$.aset_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null), "John");
    purnam.native$.aset_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null), "Doe");
    purnam.native$.aset_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null), "email@email.com");
    purnam.native$.aset_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null), "password");
    var ws_chan = cljs.core.async.chan.call(null);
    var save_user182456 = chaperone.user.save_user;
    try {
      chaperone.user.save_user = function(system, user) {
        return ws_chan;
      };
      var obj_SHARP__182464 = purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__182465 = obj_SHARP__182464["saveUser"];
      fn_SHARP__182465.call(obj_SHARP__182464);
      runs(function() {
        return cljs.core.async.put_BANG_.call(null, ws_chan, cljs.core.PersistentArrayMap.EMPTY);
      });
      return waitsFor(function() {
        return cljs.core._EQ_.call(null, function() {
          var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$location"], null));
          var fn_SHARP_ = obj_SHARP_["path"];
          return fn_SHARP_.call(obj_SHARP_);
        }(), "/admin/users/list");
      }, "Location never gets set", 1E3);
    } finally {
      chaperone.user.save_user = save_user182456;
    }
  });
  it("Should load a list of users in scope", function() {
    var ws_chan = cljs.core.async.chan.call(null);
    var list_users182457 = chaperone.user.list_users;
    try {
      chaperone.user.list_users = function(system) {
        cljs.core.async.put_BANG_.call(null, ws_chan, chaperone.crossover.rpc.new_response.call(null, chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "list", "list", 1017226256), cljs.core.PersistentArrayMap.EMPTY), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [chaperone.crossover.user.new_user.call(null, "M", "M", "E", "P")], null)));
        return ws_chan;
      };
      var obj_SHARP__182466 = purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__182467 = obj_SHARP__182466["initListUsers"];
      fn_SHARP__182467.call(obj_SHARP__182466);
      waitsFor(function() {
        return purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList"], null));
      }, "User list never gets set", 1E3);
      return runs(function() {
        expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "length"], null))).toSatisfy(1, '(purnam.native/aget-in spec ["$scope" "userList" "length"])', "1");
        expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "firstname"], null))).toSatisfy("M", '(purnam.native/aget-in spec ["$scope" "userList" "0" "firstname"])', "M");
        expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "lastname"], null))).toSatisfy("M", '(purnam.native/aget-in spec ["$scope" "userList" "0" "lastname"])', "M");
        expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "email"], null))).toSatisfy("E", '(purnam.native/aget-in spec ["$scope" "userList" "0" "email"])', "E");
        return expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "password"], null))).toSatisfy("P", '(purnam.native/aget-in spec ["$scope" "userList" "0" "password"])', "P");
      });
    } finally {
      chaperone.user.list_users = list_users182457;
    }
  });
  it("Should load a user of a specific id", function() {
    var ws_chan = cljs.core.async.chan.call(null);
    var test_user = chaperone.crossover.user.new_user.call(null, "M", "M", "E", "P");
    purnam.native$.aset_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$routeParams", "id"], null), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user));
    var get_user_by_id182458 = chaperone.user.get_user_by_id;
    try {
      chaperone.user.get_user_by_id = function(system, id) {
        cljs.core.async.put_BANG_.call(null, ws_chan, chaperone.crossover.rpc.new_response.call(null, chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "load", "load", 1017231448), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user)), test_user));
        return ws_chan;
      };
      var obj_SHARP__182468 = purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__182469 = obj_SHARP__182468["initEditUserForm"];
      fn_SHARP__182469.call(obj_SHARP__182468);
      waitsFor(function() {
        return purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user"], null));
      }, "User never gets set ", 1E3);
      return runs(function() {
        expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "id"], null))).toSatisfy((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "id"])', "(:id test-user)");
        expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null))).toSatisfy((new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "firstname"])', "(:firstname test-user)");
        expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null))).toSatisfy((new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "lastname"])', "(:lastname test-user)");
        return expect(purnam.native$.aget_in.call(null, spec_182459, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null))).toSatisfy((new cljs.core.Keyword(null, "email", "email", 1110523662)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "email"])', "(:email test-user)");
      });
    } finally {
      chaperone.user.get_user_by_id = get_user_by_id182458;
    }
  });
  return null;
});

//# sourceMappingURL=main.js.map