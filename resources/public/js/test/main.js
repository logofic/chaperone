var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2138";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__125138__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__125138 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__125138__delegate.call(this, args);
    };
    G__125138.cljs$lang$maxFixedArity = 0;
    G__125138.cljs$lang$applyTo = function(arglist__125139) {
      var args = cljs.core.seq(arglist__125139);
      return G__125138__delegate(args);
    };
    G__125138.cljs$core$IFn$_invoke$arity$variadic = G__125138__delegate;
    return G__125138;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3392__auto__ = ty;
    if (cljs.core.truth_(and__3392__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3392__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4246__auto___125140 = len;
  var i_125141 = 0;
  while (true) {
    if (i_125141 < n__4246__auto___125140) {
      new_arr[i_125141] = arr[i_125141];
      var G__125142 = i_125141 + 1;
      i_125141 = G__125142;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__125143__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__125143 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125143__delegate.call(this, array, i, idxs);
    };
    G__125143.cljs$lang$maxFixedArity = 2;
    G__125143.cljs$lang$applyTo = function(arglist__125144) {
      var array = cljs.core.first(arglist__125144);
      arglist__125144 = cljs.core.next(arglist__125144);
      var i = cljs.core.first(arglist__125144);
      var idxs = cljs.core.rest(arglist__125144);
      return G__125143__delegate(array, i, idxs);
    };
    G__125143.cljs$core$IFn$_invoke$arity$variadic = G__125143__delegate;
    return G__125143;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__125145__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__125145 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__125145__delegate.call(this, array, idx, idx2, idxv);
    };
    G__125145.cljs$lang$maxFixedArity = 3;
    G__125145.cljs$lang$applyTo = function(arglist__125146) {
      var array = cljs.core.first(arglist__125146);
      arglist__125146 = cljs.core.next(arglist__125146);
      var idx = cljs.core.first(arglist__125146);
      arglist__125146 = cljs.core.next(arglist__125146);
      var idx2 = cljs.core.first(arglist__125146);
      var idxv = cljs.core.rest(arglist__125146);
      return G__125145__delegate(array, idx, idx2, idxv);
    };
    G__125145.cljs$core$IFn$_invoke$arity$variadic = G__125145__delegate;
    return G__125145;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj125148 = {};
  return obj125148;
}();
cljs.core.IFn = function() {
  var obj125150 = {};
  return obj125150;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3392__auto__ = this$;
      if (and__3392__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4025__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3404__auto__ = cljs.core._invoke[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._invoke["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj125152 = {};
  return obj125152;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3392__auto__ = value;
    if (and__3392__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4025__auto__ = value == null ? null : value;
    return function() {
      var or__3404__auto__ = cljs.core._clone[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._clone["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj125154 = {};
  return obj125154;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._count[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._count["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj125156 = {};
  return obj125156;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._empty[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._empty["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj125158 = {};
  return obj125158;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._conj[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._conj["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj125160 = {};
  return obj125160;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3392__auto__ = coll;
      if (and__3392__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4025__auto__ = coll == null ? null : coll;
      return function() {
        var or__3404__auto__ = cljs.core._nth[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._nth["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3392__auto__ = coll;
      if (and__3392__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4025__auto__ = coll == null ? null : coll;
      return function() {
        var or__3404__auto__ = cljs.core._nth[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._nth["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj125162 = {};
  return obj125162;
}();
cljs.core.ISeq = function() {
  var obj125164 = {};
  return obj125164;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._first[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._first["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._rest[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._rest["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj125166 = {};
  return obj125166;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._next[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._next["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj125168 = {};
  return obj125168;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3392__auto__ = o;
      if (and__3392__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4025__auto__ = o == null ? null : o;
      return function() {
        var or__3404__auto__ = cljs.core._lookup[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._lookup["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3392__auto__ = o;
      if (and__3392__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4025__auto__ = o == null ? null : o;
      return function() {
        var or__3404__auto__ = cljs.core._lookup[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._lookup["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj125170 = {};
  return obj125170;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._assoc[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._assoc["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj125172 = {};
  return obj125172;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._dissoc[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._dissoc["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj125174 = {};
  return obj125174;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._key[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._key["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._val[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._val["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj125176 = {};
  return obj125176;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._disjoin[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._disjoin["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj125178 = {};
  return obj125178;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._peek[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._peek["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._pop[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._pop["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj125180 = {};
  return obj125180;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._assoc_n[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj125182 = {};
  return obj125182;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._deref[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._deref["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj125184 = {};
  return obj125184;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj125186 = {};
  return obj125186;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._meta[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._meta["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj125188 = {};
  return obj125188;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._with_meta[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._with_meta["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj125190 = {};
  return obj125190;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3392__auto__ = coll;
      if (and__3392__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4025__auto__ = coll == null ? null : coll;
      return function() {
        var or__3404__auto__ = cljs.core._reduce[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._reduce["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3392__auto__ = coll;
      if (and__3392__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4025__auto__ = coll == null ? null : coll;
      return function() {
        var or__3404__auto__ = cljs.core._reduce[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core._reduce["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj125192 = {};
  return obj125192;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj125194 = {};
  return obj125194;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._equiv[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._equiv["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj125196 = {};
  return obj125196;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._hash[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._hash["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj125198 = {};
  return obj125198;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._seq[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._seq["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj125200 = {};
  return obj125200;
}();
cljs.core.IList = function() {
  var obj125202 = {};
  return obj125202;
}();
cljs.core.IRecord = function() {
  var obj125204 = {};
  return obj125204;
}();
cljs.core.IReversible = function() {
  var obj125206 = {};
  return obj125206;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._rseq[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._rseq["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj125208 = {};
  return obj125208;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._entry_key[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._entry_key["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._comparator[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._comparator["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj125210 = {};
  return obj125210;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3392__auto__ = writer;
    if (and__3392__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4025__auto__ = writer == null ? null : writer;
    return function() {
      var or__3404__auto__ = cljs.core._write[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._write["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3392__auto__ = writer;
    if (and__3392__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4025__auto__ = writer == null ? null : writer;
    return function() {
      var or__3404__auto__ = cljs.core._flush[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._flush["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj125212 = {};
  return obj125212;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3392__auto__ = o;
    if (and__3392__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4025__auto__ = o == null ? null : o;
    return function() {
      var or__3404__auto__ = cljs.core._pr_writer[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj125214 = {};
  return obj125214;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3392__auto__ = d;
    if (and__3392__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4025__auto__ = d == null ? null : d;
    return function() {
      var or__3404__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj125216 = {};
  return obj125216;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3392__auto__ = this$;
    if (and__3392__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4025__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3404__auto__ = cljs.core._notify_watches[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3392__auto__ = this$;
    if (and__3392__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4025__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3404__auto__ = cljs.core._add_watch[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._add_watch["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3392__auto__ = this$;
    if (and__3392__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4025__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3404__auto__ = cljs.core._remove_watch[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj125218 = {};
  return obj125218;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._as_transient[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._as_transient["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj125220 = {};
  return obj125220;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj125222 = {};
  return obj125222;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj125224 = {};
  return obj125224;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj125226 = {};
  return obj125226;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj125228 = {};
  return obj125228;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3392__auto__ = tcoll;
    if (and__3392__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4025__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3404__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj125230 = {};
  return obj125230;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._compare[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._compare["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj125232 = {};
  return obj125232;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._drop_first[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._drop_first["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj125234 = {};
  return obj125234;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._chunked_first[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj125236 = {};
  return obj125236;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3392__auto__ = coll;
    if (and__3392__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4025__auto__ = coll == null ? null : coll;
    return function() {
      var or__3404__auto__ = cljs.core._chunked_next[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj125238 = {};
  return obj125238;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._name[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._name["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._namespace[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._namespace["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3392__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3392__auto__) {
        return b.ns;
      } else {
        return and__3392__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3815__auto__ = self__._hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__125240 = null;
  var G__125240__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__125240__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__125240 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125240__2.call(this, self__, coll);
      case 3:
        return G__125240__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125240;
}();
cljs.core.Symbol.prototype.apply = function(self__, args125239) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125239)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.cljs$core$ICloneable$ = true;
cljs.core.Symbol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, self__._meta);
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__125242 = coll;
      if (G__125242) {
        var bit__4041__auto__ = G__125242.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4041__auto__ || G__125242.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__125244 = coll;
      if (G__125244) {
        var bit__4041__auto__ = G__125244.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4041__auto__ || G__125244.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__125246 = coll;
      if (G__125246) {
        var bit__4041__auto__ = G__125246.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4041__auto__ || G__125246.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__125248 = coll;
      if (G__125248) {
        var bit__4041__auto__ = G__125248.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4041__auto__ || G__125248.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__125249__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__125250 = y;
            var G__125251 = cljs.core.first.call(null, more);
            var G__125252 = cljs.core.next.call(null, more);
            x = G__125250;
            y = G__125251;
            more = G__125252;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__125249 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125249__delegate.call(this, x, y, more);
    };
    G__125249.cljs$lang$maxFixedArity = 2;
    G__125249.cljs$lang$applyTo = function(arglist__125253) {
      var x = cljs.core.first(arglist__125253);
      arglist__125253 = cljs.core.next(arglist__125253);
      var y = cljs.core.first(arglist__125253);
      var more = cljs.core.rest(arglist__125253);
      return G__125249__delegate(x, y, more);
    };
    G__125249.cljs$core$IFn$_invoke$arity$variadic = G__125249__delegate;
    return G__125249;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__125254 = nval;
            var G__125255 = n + 1;
            val = G__125254;
            n = G__125255;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__125256 = nval;
          var G__125257 = n + 1;
          val__$1 = G__125256;
          n = G__125257;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__125258 = nval;
          var G__125259 = n + 1;
          val__$1 = G__125258;
          n = G__125259;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__125260 = nval;
            var G__125261 = n + 1;
            val = G__125260;
            n = G__125261;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__125262 = nval;
          var G__125263 = n + 1;
          val__$1 = G__125262;
          n = G__125263;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__125264 = nval;
          var G__125265 = n + 1;
          val__$1 = G__125264;
          n = G__125265;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__125267 = x;
  if (G__125267) {
    var bit__4048__auto__ = G__125267.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4048__auto__ || G__125267.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__125267.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__125267);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__125267);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__125269 = x;
  if (G__125269) {
    var bit__4048__auto__ = G__125269.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4048__auto__ || G__125269.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__125269.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__125269);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__125269);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__125270 = sn;
      s = G__125270;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__125271__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__125272 = conj.call(null, coll, x);
          var G__125273 = cljs.core.first.call(null, xs);
          var G__125274 = cljs.core.next.call(null, xs);
          coll = G__125272;
          x = G__125273;
          xs = G__125274;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__125271 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125271__delegate.call(this, coll, x, xs);
    };
    G__125271.cljs$lang$maxFixedArity = 2;
    G__125271.cljs$lang$applyTo = function(arglist__125275) {
      var coll = cljs.core.first(arglist__125275);
      arglist__125275 = cljs.core.next(arglist__125275);
      var x = cljs.core.first(arglist__125275);
      var xs = cljs.core.rest(arglist__125275);
      return G__125271__delegate(coll, x, xs);
    };
    G__125271.cljs$core$IFn$_invoke$arity$variadic = G__125271__delegate;
    return G__125271;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__125276 = cljs.core.next.call(null, s);
      var G__125277 = acc + 1;
      s = G__125276;
      acc = G__125277;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__125279 = coll;
      if (G__125279) {
        var bit__4041__auto__ = G__125279.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4041__auto__ || G__125279.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__125280 = cljs.core.next.call(null, coll);
              var G__125281 = n - 1;
              coll = G__125280;
              n = G__125281;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__125282 = cljs.core.next.call(null, coll);
              var G__125283 = n - 1;
              var G__125284 = not_found;
              coll = G__125282;
              n = G__125283;
              not_found = G__125284;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__125289 = coll;
        if (G__125289) {
          var bit__4041__auto__ = G__125289.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4041__auto__ || G__125289.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__125290 = coll;
                  if (G__125290) {
                    var bit__4048__auto__ = G__125290.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4048__auto__ || G__125290.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__125290.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__125290);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__125290);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__125291 = coll;
        if (G__125291) {
          var bit__4041__auto__ = G__125291.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4041__auto__ || G__125291.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__125292 = coll;
                  if (G__125292) {
                    var bit__4048__auto__ = G__125292.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4048__auto__ || G__125292.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__125292.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__125292);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__125292);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__125295 = o;
        if (G__125295) {
          var bit__4041__auto__ = G__125295.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4041__auto__ || G__125295.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__125296 = o;
        if (G__125296) {
          var bit__4041__auto__ = G__125296.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4041__auto__ || G__125296.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__125297__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__125298 = ret;
          var G__125299 = cljs.core.first.call(null, kvs);
          var G__125300 = cljs.core.second.call(null, kvs);
          var G__125301 = cljs.core.nnext.call(null, kvs);
          coll = G__125298;
          k = G__125299;
          v = G__125300;
          kvs = G__125301;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__125297 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__125297__delegate.call(this, coll, k, v, kvs);
    };
    G__125297.cljs$lang$maxFixedArity = 3;
    G__125297.cljs$lang$applyTo = function(arglist__125302) {
      var coll = cljs.core.first(arglist__125302);
      arglist__125302 = cljs.core.next(arglist__125302);
      var k = cljs.core.first(arglist__125302);
      arglist__125302 = cljs.core.next(arglist__125302);
      var v = cljs.core.first(arglist__125302);
      var kvs = cljs.core.rest(arglist__125302);
      return G__125297__delegate(coll, k, v, kvs);
    };
    G__125297.cljs$core$IFn$_invoke$arity$variadic = G__125297__delegate;
    return G__125297;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__125303__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__125304 = ret;
            var G__125305 = cljs.core.first.call(null, ks);
            var G__125306 = cljs.core.next.call(null, ks);
            coll = G__125304;
            k = G__125305;
            ks = G__125306;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__125303 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125303__delegate.call(this, coll, k, ks);
    };
    G__125303.cljs$lang$maxFixedArity = 2;
    G__125303.cljs$lang$applyTo = function(arglist__125307) {
      var coll = cljs.core.first(arglist__125307);
      arglist__125307 = cljs.core.next(arglist__125307);
      var k = cljs.core.first(arglist__125307);
      var ks = cljs.core.rest(arglist__125307);
      return G__125303__delegate(coll, k, ks);
    };
    G__125303.cljs$core$IFn$_invoke$arity$variadic = G__125303__delegate;
    return G__125303;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3404__auto__ = goog.isFunction(f);
  if (or__3404__auto__) {
    return or__3404__auto__;
  } else {
    var G__125311 = f;
    if (G__125311) {
      var bit__4048__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3404__auto____$1 = bit__4048__auto__;
        if (cljs.core.truth_(or__3404__auto____$1)) {
          return or__3404__auto____$1;
        } else {
          return G__125311.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__125311.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__125311);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__125311);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__125319 = o;
    if (G__125319) {
      var bit__4048__auto__ = G__125319.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4048__auto__ || G__125319.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__125319.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__125319);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__125319);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t125320 !== "undefined") {
      } else {
        cljs.core.t125320 = function(meta, o, with_meta, meta125321) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta125321 = meta125321;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t125320.cljs$lang$type = true;
        cljs.core.t125320.cljs$lang$ctorStr = "cljs.core/t125320";
        cljs.core.t125320.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
          return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/t125320");
        };
        cljs.core.t125320.prototype.call = function() {
          var G__125324__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__125324 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__125324__delegate.call(this, self__, args);
          };
          G__125324.cljs$lang$maxFixedArity = 1;
          G__125324.cljs$lang$applyTo = function(arglist__125325) {
            var self__ = cljs.core.first(arglist__125325);
            var args = cljs.core.rest(arglist__125325);
            return G__125324__delegate(self__, args);
          };
          G__125324.cljs$core$IFn$_invoke$arity$variadic = G__125324__delegate;
          return G__125324;
        }();
        cljs.core.t125320.prototype.apply = function(self__, args125323) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125323)));
        };
        cljs.core.t125320.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__125326__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__125326 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__125326__delegate.call(this, args);
          };
          G__125326.cljs$lang$maxFixedArity = 0;
          G__125326.cljs$lang$applyTo = function(arglist__125327) {
            var args = cljs.core.seq(arglist__125327);
            return G__125326__delegate(args);
          };
          G__125326.cljs$core$IFn$_invoke$arity$variadic = G__125326__delegate;
          return G__125326;
        }();
        cljs.core.t125320.prototype.cljs$core$Fn$ = true;
        cljs.core.t125320.prototype.cljs$core$IMeta$_meta$arity$1 = function(_125322) {
          var self__ = this;
          var _125322__$1 = this;
          return self__.meta125321;
        };
        cljs.core.t125320.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_125322, meta125321__$1) {
          var self__ = this;
          var _125322__$1 = this;
          return new cljs.core.t125320(self__.meta, self__.o, self__.with_meta, meta125321__$1);
        };
        cljs.core.__GT_t125320 = function __GT_t125320(meta__$1, o__$1, with_meta__$1, meta125321) {
          return new cljs.core.t125320(meta__$1, o__$1, with_meta__$1, meta125321);
        };
      }
      return new cljs.core.t125320(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3392__auto__ = !(o == null);
    if (and__3392__auto__) {
      var G__125331 = o;
      if (G__125331) {
        var bit__4048__auto__ = G__125331.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4048__auto__ || G__125331.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__125331.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__125331);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__125331);
      }
    } else {
      return and__3392__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__125332__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__125333 = ret;
            var G__125334 = cljs.core.first.call(null, ks);
            var G__125335 = cljs.core.next.call(null, ks);
            coll = G__125333;
            k = G__125334;
            ks = G__125335;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__125332 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125332__delegate.call(this, coll, k, ks);
    };
    G__125332.cljs$lang$maxFixedArity = 2;
    G__125332.cljs$lang$applyTo = function(arglist__125336) {
      var coll = cljs.core.first(arglist__125336);
      arglist__125336 = cljs.core.next(arglist__125336);
      var k = cljs.core.first(arglist__125336);
      var ks = cljs.core.rest(arglist__125336);
      return G__125332__delegate(coll, k, ks);
    };
    G__125332.cljs$core$IFn$_invoke$arity$variadic = G__125332__delegate;
    return G__125332;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj125338 = {};
  return obj125338;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj125342 = {};
      return obj125342;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__125344 = o;
    if (G__125344) {
      var bit__4041__auto__ = G__125344.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4041__auto__ || G__125344.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__125346 = x;
    if (G__125346) {
      var bit__4048__auto__ = G__125346.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4048__auto__ || G__125346.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__125346.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__125346);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__125346);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__125348 = x;
    if (G__125348) {
      var bit__4048__auto__ = G__125348.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4048__auto__ || G__125348.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__125348.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__125348);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__125348);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__125350 = x;
  if (G__125350) {
    var bit__4048__auto__ = G__125350.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4048__auto__ || G__125350.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__125350.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__125350);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__125350);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__125352 = x;
  if (G__125352) {
    var bit__4048__auto__ = G__125352.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4048__auto__ || G__125352.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__125352.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__125352);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__125352);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__125354 = x;
  if (G__125354) {
    var bit__4048__auto__ = G__125354.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4048__auto__ || G__125354.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__125354.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__125354);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__125354);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__125356 = x;
  if (G__125356) {
    var bit__4048__auto__ = G__125356.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4048__auto__ || G__125356.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__125356.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__125356);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__125356);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__125358 = x;
    if (G__125358) {
      var bit__4048__auto__ = G__125358.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4048__auto__ || G__125358.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__125358.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__125358);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__125358);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__125360 = x;
  if (G__125360) {
    var bit__4048__auto__ = G__125360.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4048__auto__ || G__125360.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__125360.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__125360);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__125360);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__125362 = x;
  if (G__125362) {
    var bit__4041__auto__ = G__125362.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4041__auto__ || G__125362.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj125366 = {};
    return obj125366;
  };
  var js_obj__1 = function() {
    var G__125367__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__125367 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__125367__delegate.call(this, keyvals);
    };
    G__125367.cljs$lang$maxFixedArity = 0;
    G__125367.cljs$lang$applyTo = function(arglist__125368) {
      var keyvals = cljs.core.seq(arglist__125368);
      return G__125367__delegate(keyvals);
    };
    G__125367.cljs$core$IFn$_invoke$arity$variadic = G__125367__delegate;
    return G__125367;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__125369 = i__$1 + 1;
      var G__125370 = j__$1 + 1;
      var G__125371 = len__$1 - 1;
      i__$1 = G__125369;
      j__$1 = G__125370;
      len__$1 = G__125371;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__125372 = i__$1 - 1;
      var G__125373 = j__$1 - 1;
      var G__125374 = len__$1 - 1;
      i__$1 = G__125372;
      j__$1 = G__125373;
      len__$1 = G__125374;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj125376 = {};
  return obj125376;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__125378 = s;
    if (G__125378) {
      var bit__4048__auto__ = G__125378.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4048__auto__ || G__125378.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__125378.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__125378);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__125378);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__125380 = s;
  if (G__125380) {
    var bit__4048__auto__ = G__125380.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4048__auto__ || G__125380.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__125380.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__125380);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__125380);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3404__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3404__auto__) {
    return or__3404__auto__;
  } else {
    var G__125384 = f;
    if (G__125384) {
      var bit__4048__auto__ = G__125384.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4048__auto__ || G__125384.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__125384.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__125384);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__125384);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__125385__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__125386 = cljs.core.conj.call(null, s, x__$1);
              var G__125387 = etc;
              s = G__125386;
              xs = G__125387;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__125385 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125385__delegate.call(this, x, y, more);
    };
    G__125385.cljs$lang$maxFixedArity = 2;
    G__125385.cljs$lang$applyTo = function(arglist__125388) {
      var x = cljs.core.first(arglist__125388);
      arglist__125388 = cljs.core.next(arglist__125388);
      var y = cljs.core.first(arglist__125388);
      var more = cljs.core.rest(arglist__125388);
      return G__125385__delegate(x, y, more);
    };
    G__125385.cljs$core$IFn$_invoke$arity$variadic = G__125385__delegate;
    return G__125385;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3404__auto__ = cljs.core.seq.call(null, coll);
    if (or__3404__auto__) {
      return or__3404__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__125390 = x;
            if (G__125390) {
              var bit__4041__auto__ = G__125390.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4041__auto__ || G__125390.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__125391 = xs;
        var G__125392 = ys;
        var G__125393 = len;
        var G__125394 = n + 1;
        xs = G__125391;
        ys = G__125392;
        len = G__125393;
        n = G__125394;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__125395 = nval;
          var G__125396 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__125395;
          coll__$1 = G__125396;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__125399 = coll;
      if (G__125399) {
        var bit__4041__auto__ = G__125399.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4041__auto__ || G__125399.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__125400 = coll;
      if (G__125400) {
        var bit__4041__auto__ = G__125400.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4041__auto__ || G__125400.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__125401__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__125401 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125401__delegate.call(this, x, y, more);
    };
    G__125401.cljs$lang$maxFixedArity = 2;
    G__125401.cljs$lang$applyTo = function(arglist__125402) {
      var x = cljs.core.first(arglist__125402);
      arglist__125402 = cljs.core.next(arglist__125402);
      var y = cljs.core.first(arglist__125402);
      var more = cljs.core.rest(arglist__125402);
      return G__125401__delegate(x, y, more);
    };
    G__125401.cljs$core$IFn$_invoke$arity$variadic = G__125401__delegate;
    return G__125401;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__125403__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__125403 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125403__delegate.call(this, x, y, more);
    };
    G__125403.cljs$lang$maxFixedArity = 2;
    G__125403.cljs$lang$applyTo = function(arglist__125404) {
      var x = cljs.core.first(arglist__125404);
      arglist__125404 = cljs.core.next(arglist__125404);
      var y = cljs.core.first(arglist__125404);
      var more = cljs.core.rest(arglist__125404);
      return G__125403__delegate(x, y, more);
    };
    G__125403.cljs$core$IFn$_invoke$arity$variadic = G__125403__delegate;
    return G__125403;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__125405__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__125405 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125405__delegate.call(this, x, y, more);
    };
    G__125405.cljs$lang$maxFixedArity = 2;
    G__125405.cljs$lang$applyTo = function(arglist__125406) {
      var x = cljs.core.first(arglist__125406);
      arglist__125406 = cljs.core.next(arglist__125406);
      var y = cljs.core.first(arglist__125406);
      var more = cljs.core.rest(arglist__125406);
      return G__125405__delegate(x, y, more);
    };
    G__125405.cljs$core$IFn$_invoke$arity$variadic = G__125405__delegate;
    return G__125405;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__125407__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__125407 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125407__delegate.call(this, x, y, more);
    };
    G__125407.cljs$lang$maxFixedArity = 2;
    G__125407.cljs$lang$applyTo = function(arglist__125408) {
      var x = cljs.core.first(arglist__125408);
      arglist__125408 = cljs.core.next(arglist__125408);
      var y = cljs.core.first(arglist__125408);
      var more = cljs.core.rest(arglist__125408);
      return G__125407__delegate(x, y, more);
    };
    G__125407.cljs$core$IFn$_invoke$arity$variadic = G__125407__delegate;
    return G__125407;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__125409__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__125410 = y;
            var G__125411 = cljs.core.first.call(null, more);
            var G__125412 = cljs.core.next.call(null, more);
            x = G__125410;
            y = G__125411;
            more = G__125412;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__125409 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125409__delegate.call(this, x, y, more);
    };
    G__125409.cljs$lang$maxFixedArity = 2;
    G__125409.cljs$lang$applyTo = function(arglist__125413) {
      var x = cljs.core.first(arglist__125413);
      arglist__125413 = cljs.core.next(arglist__125413);
      var y = cljs.core.first(arglist__125413);
      var more = cljs.core.rest(arglist__125413);
      return G__125409__delegate(x, y, more);
    };
    G__125409.cljs$core$IFn$_invoke$arity$variadic = G__125409__delegate;
    return G__125409;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__125414__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__125415 = y;
            var G__125416 = cljs.core.first.call(null, more);
            var G__125417 = cljs.core.next.call(null, more);
            x = G__125415;
            y = G__125416;
            more = G__125417;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__125414 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125414__delegate.call(this, x, y, more);
    };
    G__125414.cljs$lang$maxFixedArity = 2;
    G__125414.cljs$lang$applyTo = function(arglist__125418) {
      var x = cljs.core.first(arglist__125418);
      arglist__125418 = cljs.core.next(arglist__125418);
      var y = cljs.core.first(arglist__125418);
      var more = cljs.core.rest(arglist__125418);
      return G__125414__delegate(x, y, more);
    };
    G__125414.cljs$core$IFn$_invoke$arity$variadic = G__125414__delegate;
    return G__125414;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__125419__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__125420 = y;
            var G__125421 = cljs.core.first.call(null, more);
            var G__125422 = cljs.core.next.call(null, more);
            x = G__125420;
            y = G__125421;
            more = G__125422;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__125419 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125419__delegate.call(this, x, y, more);
    };
    G__125419.cljs$lang$maxFixedArity = 2;
    G__125419.cljs$lang$applyTo = function(arglist__125423) {
      var x = cljs.core.first(arglist__125423);
      arglist__125423 = cljs.core.next(arglist__125423);
      var y = cljs.core.first(arglist__125423);
      var more = cljs.core.rest(arglist__125423);
      return G__125419__delegate(x, y, more);
    };
    G__125419.cljs$core$IFn$_invoke$arity$variadic = G__125419__delegate;
    return G__125419;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__125424__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__125425 = y;
            var G__125426 = cljs.core.first.call(null, more);
            var G__125427 = cljs.core.next.call(null, more);
            x = G__125425;
            y = G__125426;
            more = G__125427;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__125424 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125424__delegate.call(this, x, y, more);
    };
    G__125424.cljs$lang$maxFixedArity = 2;
    G__125424.cljs$lang$applyTo = function(arglist__125428) {
      var x = cljs.core.first(arglist__125428);
      arglist__125428 = cljs.core.next(arglist__125428);
      var y = cljs.core.first(arglist__125428);
      var more = cljs.core.rest(arglist__125428);
      return G__125424__delegate(x, y, more);
    };
    G__125424.cljs$core$IFn$_invoke$arity$variadic = G__125424__delegate;
    return G__125424;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3711__auto__ = x;
    var y__3712__auto__ = y;
    return x__3711__auto__ > y__3712__auto__ ? x__3711__auto__ : y__3712__auto__;
  };
  var max__3 = function() {
    var G__125429__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3711__auto__ = x;
        var y__3712__auto__ = y;
        return x__3711__auto__ > y__3712__auto__ ? x__3711__auto__ : y__3712__auto__;
      }(), more);
    };
    var G__125429 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125429__delegate.call(this, x, y, more);
    };
    G__125429.cljs$lang$maxFixedArity = 2;
    G__125429.cljs$lang$applyTo = function(arglist__125430) {
      var x = cljs.core.first(arglist__125430);
      arglist__125430 = cljs.core.next(arglist__125430);
      var y = cljs.core.first(arglist__125430);
      var more = cljs.core.rest(arglist__125430);
      return G__125429__delegate(x, y, more);
    };
    G__125429.cljs$core$IFn$_invoke$arity$variadic = G__125429__delegate;
    return G__125429;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3718__auto__ = x;
    var y__3719__auto__ = y;
    return x__3718__auto__ < y__3719__auto__ ? x__3718__auto__ : y__3719__auto__;
  };
  var min__3 = function() {
    var G__125431__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3718__auto__ = x;
        var y__3719__auto__ = y;
        return x__3718__auto__ < y__3719__auto__ ? x__3718__auto__ : y__3719__auto__;
      }(), more);
    };
    var G__125431 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125431__delegate.call(this, x, y, more);
    };
    G__125431.cljs$lang$maxFixedArity = 2;
    G__125431.cljs$lang$applyTo = function(arglist__125432) {
      var x = cljs.core.first(arglist__125432);
      arglist__125432 = cljs.core.next(arglist__125432);
      var y = cljs.core.first(arglist__125432);
      var more = cljs.core.rest(arglist__125432);
      return G__125431__delegate(x, y, more);
    };
    G__125431.cljs$core$IFn$_invoke$arity$variadic = G__125431__delegate;
    return G__125431;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__125433__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__125433 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125433__delegate.call(this, x, y, more);
    };
    G__125433.cljs$lang$maxFixedArity = 2;
    G__125433.cljs$lang$applyTo = function(arglist__125434) {
      var x = cljs.core.first(arglist__125434);
      arglist__125434 = cljs.core.next(arglist__125434);
      var y = cljs.core.first(arglist__125434);
      var more = cljs.core.rest(arglist__125434);
      return G__125433__delegate(x, y, more);
    };
    G__125433.cljs$core$IFn$_invoke$arity$variadic = G__125433__delegate;
    return G__125433;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__125435__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__125435 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125435__delegate.call(this, x, y, more);
    };
    G__125435.cljs$lang$maxFixedArity = 2;
    G__125435.cljs$lang$applyTo = function(arglist__125436) {
      var x = cljs.core.first(arglist__125436);
      arglist__125436 = cljs.core.next(arglist__125436);
      var y = cljs.core.first(arglist__125436);
      var more = cljs.core.rest(arglist__125436);
      return G__125435__delegate(x, y, more);
    };
    G__125435.cljs$core$IFn$_invoke$arity$variadic = G__125435__delegate;
    return G__125435;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__125437__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__125437 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125437__delegate.call(this, x, y, more);
    };
    G__125437.cljs$lang$maxFixedArity = 2;
    G__125437.cljs$lang$applyTo = function(arglist__125438) {
      var x = cljs.core.first(arglist__125438);
      arglist__125438 = cljs.core.next(arglist__125438);
      var y = cljs.core.first(arglist__125438);
      var more = cljs.core.rest(arglist__125438);
      return G__125437__delegate(x, y, more);
    };
    G__125437.cljs$core$IFn$_invoke$arity$variadic = G__125437__delegate;
    return G__125437;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__125439__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__125439 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125439__delegate.call(this, x, y, more);
    };
    G__125439.cljs$lang$maxFixedArity = 2;
    G__125439.cljs$lang$applyTo = function(arglist__125440) {
      var x = cljs.core.first(arglist__125440);
      arglist__125440 = cljs.core.next(arglist__125440);
      var y = cljs.core.first(arglist__125440);
      var more = cljs.core.rest(arglist__125440);
      return G__125439__delegate(x, y, more);
    };
    G__125439.cljs$core$IFn$_invoke$arity$variadic = G__125439__delegate;
    return G__125439;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__125441__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__125441 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125441__delegate.call(this, x, y, more);
    };
    G__125441.cljs$lang$maxFixedArity = 2;
    G__125441.cljs$lang$applyTo = function(arglist__125442) {
      var x = cljs.core.first(arglist__125442);
      arglist__125442 = cljs.core.next(arglist__125442);
      var y = cljs.core.first(arglist__125442);
      var more = cljs.core.rest(arglist__125442);
      return G__125441__delegate(x, y, more);
    };
    G__125441.cljs$core$IFn$_invoke$arity$variadic = G__125441__delegate;
    return G__125441;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__125443__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__125443 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125443__delegate.call(this, x, y, more);
    };
    G__125443.cljs$lang$maxFixedArity = 2;
    G__125443.cljs$lang$applyTo = function(arglist__125444) {
      var x = cljs.core.first(arglist__125444);
      arglist__125444 = cljs.core.next(arglist__125444);
      var y = cljs.core.first(arglist__125444);
      var more = cljs.core.rest(arglist__125444);
      return G__125443__delegate(x, y, more);
    };
    G__125443.cljs$core$IFn$_invoke$arity$variadic = G__125443__delegate;
    return G__125443;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__125445__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__125445 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125445__delegate.call(this, x, y, more);
    };
    G__125445.cljs$lang$maxFixedArity = 2;
    G__125445.cljs$lang$applyTo = function(arglist__125446) {
      var x = cljs.core.first(arglist__125446);
      arglist__125446 = cljs.core.next(arglist__125446);
      var y = cljs.core.first(arglist__125446);
      var more = cljs.core.rest(arglist__125446);
      return G__125445__delegate(x, y, more);
    };
    G__125445.cljs$core$IFn$_invoke$arity$variadic = G__125445__delegate;
    return G__125445;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__125447__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__125448 = y;
            var G__125449 = cljs.core.first.call(null, more);
            var G__125450 = cljs.core.next.call(null, more);
            x = G__125448;
            y = G__125449;
            more = G__125450;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__125447 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125447__delegate.call(this, x, y, more);
    };
    G__125447.cljs$lang$maxFixedArity = 2;
    G__125447.cljs$lang$applyTo = function(arglist__125451) {
      var x = cljs.core.first(arglist__125451);
      arglist__125451 = cljs.core.next(arglist__125451);
      var y = cljs.core.first(arglist__125451);
      var more = cljs.core.rest(arglist__125451);
      return G__125447__delegate(x, y, more);
    };
    G__125447.cljs$core$IFn$_invoke$arity$variadic = G__125447__delegate;
    return G__125447;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__125452 = n__$1 - 1;
      var G__125453 = cljs.core.next.call(null, xs);
      n__$1 = G__125452;
      xs = G__125453;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__125454__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__125455 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__125456 = cljs.core.next.call(null, more);
          sb = G__125455;
          more = G__125456;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__125454 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__125454__delegate.call(this, x, ys);
    };
    G__125454.cljs$lang$maxFixedArity = 1;
    G__125454.cljs$lang$applyTo = function(arglist__125457) {
      var x = cljs.core.first(arglist__125457);
      var ys = cljs.core.rest(arglist__125457);
      return G__125454__delegate(x, ys);
    };
    G__125454.cljs$core$IFn$_invoke$arity$variadic = G__125454__delegate;
    return G__125454;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__125458 = cljs.core.next.call(null, xs);
            var G__125459 = cljs.core.next.call(null, ys);
            xs = G__125458;
            ys = G__125459;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__125460 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__125461 = cljs.core.next.call(null, s);
        res = G__125460;
        s = G__125461;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__125462 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__125463 = cljs.core.next.call(null, s);
      h = G__125462;
      s = G__125463;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__125464 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__125465 = cljs.core.next.call(null, s__$1);
      h = G__125464;
      s__$1 = G__125465;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__125472_125478 = cljs.core.seq.call(null, fn_map);
  var chunk__125473_125479 = null;
  var count__125474_125480 = 0;
  var i__125475_125481 = 0;
  while (true) {
    if (i__125475_125481 < count__125474_125480) {
      var vec__125476_125482 = cljs.core._nth.call(null, chunk__125473_125479, i__125475_125481);
      var key_name_125483 = cljs.core.nth.call(null, vec__125476_125482, 0, null);
      var f_125484 = cljs.core.nth.call(null, vec__125476_125482, 1, null);
      var str_name_125485 = cljs.core.name.call(null, key_name_125483);
      obj[str_name_125485] = f_125484;
      var G__125486 = seq__125472_125478;
      var G__125487 = chunk__125473_125479;
      var G__125488 = count__125474_125480;
      var G__125489 = i__125475_125481 + 1;
      seq__125472_125478 = G__125486;
      chunk__125473_125479 = G__125487;
      count__125474_125480 = G__125488;
      i__125475_125481 = G__125489;
      continue;
    } else {
      var temp__4092__auto___125490 = cljs.core.seq.call(null, seq__125472_125478);
      if (temp__4092__auto___125490) {
        var seq__125472_125491__$1 = temp__4092__auto___125490;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__125472_125491__$1)) {
          var c__4146__auto___125492 = cljs.core.chunk_first.call(null, seq__125472_125491__$1);
          var G__125493 = cljs.core.chunk_rest.call(null, seq__125472_125491__$1);
          var G__125494 = c__4146__auto___125492;
          var G__125495 = cljs.core.count.call(null, c__4146__auto___125492);
          var G__125496 = 0;
          seq__125472_125478 = G__125493;
          chunk__125473_125479 = G__125494;
          count__125474_125480 = G__125495;
          i__125475_125481 = G__125496;
          continue;
        } else {
          var vec__125477_125497 = cljs.core.first.call(null, seq__125472_125491__$1);
          var key_name_125498 = cljs.core.nth.call(null, vec__125477_125497, 0, null);
          var f_125499 = cljs.core.nth.call(null, vec__125477_125497, 1, null);
          var str_name_125500 = cljs.core.name.call(null, key_name_125498);
          obj[str_name_125500] = f_125499;
          var G__125501 = cljs.core.next.call(null, seq__125472_125491__$1);
          var G__125502 = null;
          var G__125503 = 0;
          var G__125504 = 0;
          seq__125472_125478 = G__125501;
          chunk__125473_125479 = G__125502;
          count__125474_125480 = G__125503;
          i__125475_125481 = G__125504;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$ = true;
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__125506 = coll;
  if (G__125506) {
    var bit__4048__auto__ = G__125506.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4048__auto__ || G__125506.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__125506.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__125506);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__125506);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__125507 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__125507;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__125508 = i - 1;
        var G__125509 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__125508;
        r = G__125509;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__125510) {
    var xs = cljs.core.seq(arglist__125510);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$ = true;
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3404__auto__ = coll == null;
    if (or__3404__auto__) {
      return or__3404__auto__;
    } else {
      var G__125514 = coll;
      if (G__125514) {
        var bit__4041__auto__ = G__125514.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4041__auto__ || G__125514.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__125516 = x;
  if (G__125516) {
    var bit__4048__auto__ = G__125516.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4048__auto__ || G__125516.cljs$core$IList$) {
      return true;
    } else {
      if (!G__125516.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__125516);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__125516);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__125518 = null;
  var G__125518__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__125518__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__125518 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125518__2.call(this, self__, coll);
      case 3:
        return G__125518__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125518;
}();
cljs.core.Keyword.prototype.apply = function(self__, args125517) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125517)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.cljs$core$ICloneable$ = true;
cljs.core.Keyword.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Keyword(self__.ns, self__.name, self__.fqn, self__._hash);
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__125520 = x;
    if (G__125520) {
      var bit__4041__auto__ = G__125520.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4041__auto__ || G__125520.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__125521 = ls.sval();
        ls = G__125521;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__125523 = s;
    if (G__125523) {
      var bit__4041__auto__ = G__125523.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4041__auto__ || G__125523.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__125524 = cljs.core.next.call(null, s__$1);
      s__$1 = G__125524;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_125525 = 0;
  var xs_125526 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_125526) {
      ret[i_125525] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_125526));
      var G__125527 = i_125525 + 1;
      var G__125528 = cljs.core.next.call(null, xs_125526);
      i_125525 = G__125527;
      xs_125526 = G__125528;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__125529 = i + 1;
          var G__125530 = cljs.core.next.call(null, s__$1);
          i = G__125529;
          s__$1 = G__125530;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4246__auto___125531 = size;
      var i_125532 = 0;
      while (true) {
        if (i_125532 < n__4246__auto___125531) {
          a[i_125532] = init_val_or_seq;
          var G__125533 = i_125532 + 1;
          i_125532 = G__125533;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__125534 = i + 1;
          var G__125535 = cljs.core.next.call(null, s__$1);
          i = G__125534;
          s__$1 = G__125535;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4246__auto___125536 = size;
      var i_125537 = 0;
      while (true) {
        if (i_125537 < n__4246__auto___125536) {
          a[i_125537] = init_val_or_seq;
          var G__125538 = i_125537 + 1;
          i_125537 = G__125538;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__125539 = i + 1;
          var G__125540 = cljs.core.next.call(null, s__$1);
          i = G__125539;
          s__$1 = G__125540;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4246__auto___125541 = size;
      var i_125542 = 0;
      while (true) {
        if (i_125542 < n__4246__auto___125541) {
          a[i_125542] = init_val_or_seq;
          var G__125543 = i_125542 + 1;
          i_125542 = G__125543;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__125544 = i + 1;
          var G__125545 = cljs.core.next.call(null, s__$1);
          i = G__125544;
          s__$1 = G__125545;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4246__auto___125546 = size;
      var i_125547 = 0;
      while (true) {
        if (i_125547 < n__4246__auto___125546) {
          a[i_125547] = init_val_or_seq;
          var G__125548 = i_125547 + 1;
          i_125547 = G__125548;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__125549 = cljs.core.next.call(null, s__$1);
        var G__125550 = i - 1;
        var G__125551 = sum + 1;
        s__$1 = G__125549;
        i = G__125550;
        sum = G__125551;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__125552__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__125552 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125552__delegate.call(this, x, y, zs);
    };
    G__125552.cljs$lang$maxFixedArity = 2;
    G__125552.cljs$lang$applyTo = function(arglist__125553) {
      var x = cljs.core.first(arglist__125553);
      arglist__125553 = cljs.core.next(arglist__125553);
      var y = cljs.core.first(arglist__125553);
      var zs = cljs.core.rest(arglist__125553);
      return G__125552__delegate(x, y, zs);
    };
    G__125552.cljs$core$IFn$_invoke$arity$variadic = G__125552__delegate;
    return G__125552;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__125554__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__125554 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__125554__delegate.call(this, a, b, c, d, more);
    };
    G__125554.cljs$lang$maxFixedArity = 4;
    G__125554.cljs$lang$applyTo = function(arglist__125555) {
      var a = cljs.core.first(arglist__125555);
      arglist__125555 = cljs.core.next(arglist__125555);
      var b = cljs.core.first(arglist__125555);
      arglist__125555 = cljs.core.next(arglist__125555);
      var c = cljs.core.first(arglist__125555);
      arglist__125555 = cljs.core.next(arglist__125555);
      var d = cljs.core.first(arglist__125555);
      var more = cljs.core.rest(arglist__125555);
      return G__125554__delegate(a, b, c, d, more);
    };
    G__125554.cljs$core$IFn$_invoke$arity$variadic = G__125554__delegate;
    return G__125554;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val);
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key);
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val);
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__125556__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__125556 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__125556__delegate.call(this, f, a, b, c, d, args);
    };
    G__125556.cljs$lang$maxFixedArity = 5;
    G__125556.cljs$lang$applyTo = function(arglist__125557) {
      var f = cljs.core.first(arglist__125557);
      arglist__125557 = cljs.core.next(arglist__125557);
      var a = cljs.core.first(arglist__125557);
      arglist__125557 = cljs.core.next(arglist__125557);
      var b = cljs.core.first(arglist__125557);
      arglist__125557 = cljs.core.next(arglist__125557);
      var c = cljs.core.first(arglist__125557);
      arglist__125557 = cljs.core.next(arglist__125557);
      var d = cljs.core.first(arglist__125557);
      var args = cljs.core.rest(arglist__125557);
      return G__125556__delegate(f, a, b, c, d, args);
    };
    G__125556.cljs$core$IFn$_invoke$arity$variadic = G__125556__delegate;
    return G__125556;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__125558__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__125558 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__125558__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__125558.cljs$lang$maxFixedArity = 6;
    G__125558.cljs$lang$applyTo = function(arglist__125559) {
      var obj = cljs.core.first(arglist__125559);
      arglist__125559 = cljs.core.next(arglist__125559);
      var f = cljs.core.first(arglist__125559);
      arglist__125559 = cljs.core.next(arglist__125559);
      var a = cljs.core.first(arglist__125559);
      arglist__125559 = cljs.core.next(arglist__125559);
      var b = cljs.core.first(arglist__125559);
      arglist__125559 = cljs.core.next(arglist__125559);
      var c = cljs.core.first(arglist__125559);
      arglist__125559 = cljs.core.next(arglist__125559);
      var d = cljs.core.first(arglist__125559);
      var args = cljs.core.rest(arglist__125559);
      return G__125558__delegate(obj, f, a, b, c, d, args);
    };
    G__125558.cljs$core$IFn$_invoke$arity$variadic = G__125558__delegate;
    return G__125558;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__125560__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__125560 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125560__delegate.call(this, x, y, more);
    };
    G__125560.cljs$lang$maxFixedArity = 2;
    G__125560.cljs$lang$applyTo = function(arglist__125561) {
      var x = cljs.core.first(arglist__125561);
      arglist__125561 = cljs.core.next(arglist__125561);
      var y = cljs.core.first(arglist__125561);
      var more = cljs.core.rest(arglist__125561);
      return G__125560__delegate(x, y, more);
    };
    G__125560.cljs$core$IFn$_invoke$arity$variadic = G__125560__delegate;
    return G__125560;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__125562 = pred;
        var G__125563 = cljs.core.next.call(null, coll);
        pred = G__125562;
        coll = G__125563;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3404__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        var G__125564 = pred;
        var G__125565 = cljs.core.next.call(null, coll);
        pred = G__125564;
        coll = G__125565;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__125566 = null;
    var G__125566__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__125566__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__125566__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__125566__3 = function() {
      var G__125567__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__125567 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__125567__delegate.call(this, x, y, zs);
      };
      G__125567.cljs$lang$maxFixedArity = 2;
      G__125567.cljs$lang$applyTo = function(arglist__125568) {
        var x = cljs.core.first(arglist__125568);
        arglist__125568 = cljs.core.next(arglist__125568);
        var y = cljs.core.first(arglist__125568);
        var zs = cljs.core.rest(arglist__125568);
        return G__125567__delegate(x, y, zs);
      };
      G__125567.cljs$core$IFn$_invoke$arity$variadic = G__125567__delegate;
      return G__125567;
    }();
    G__125566 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__125566__0.call(this);
        case 1:
          return G__125566__1.call(this, x);
        case 2:
          return G__125566__2.call(this, x, y);
        default:
          return G__125566__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__125566.cljs$lang$maxFixedArity = 2;
    G__125566.cljs$lang$applyTo = G__125566__3.cljs$lang$applyTo;
    return G__125566;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__125569__delegate = function(args) {
      return x;
    };
    var G__125569 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__125569__delegate.call(this, args);
    };
    G__125569.cljs$lang$maxFixedArity = 0;
    G__125569.cljs$lang$applyTo = function(arglist__125570) {
      var args = cljs.core.seq(arglist__125570);
      return G__125569__delegate(args);
    };
    G__125569.cljs$core$IFn$_invoke$arity$variadic = G__125569__delegate;
    return G__125569;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__125571 = null;
      var G__125571__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__125571__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__125571__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__125571__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__125571__4 = function() {
        var G__125572__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__125572 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125572__delegate.call(this, x, y, z, args);
        };
        G__125572.cljs$lang$maxFixedArity = 3;
        G__125572.cljs$lang$applyTo = function(arglist__125573) {
          var x = cljs.core.first(arglist__125573);
          arglist__125573 = cljs.core.next(arglist__125573);
          var y = cljs.core.first(arglist__125573);
          arglist__125573 = cljs.core.next(arglist__125573);
          var z = cljs.core.first(arglist__125573);
          var args = cljs.core.rest(arglist__125573);
          return G__125572__delegate(x, y, z, args);
        };
        G__125572.cljs$core$IFn$_invoke$arity$variadic = G__125572__delegate;
        return G__125572;
      }();
      G__125571 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__125571__0.call(this);
          case 1:
            return G__125571__1.call(this, x);
          case 2:
            return G__125571__2.call(this, x, y);
          case 3:
            return G__125571__3.call(this, x, y, z);
          default:
            return G__125571__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__125571.cljs$lang$maxFixedArity = 3;
      G__125571.cljs$lang$applyTo = G__125571__4.cljs$lang$applyTo;
      return G__125571;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__125574 = null;
      var G__125574__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__125574__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__125574__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__125574__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__125574__4 = function() {
        var G__125575__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__125575 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125575__delegate.call(this, x, y, z, args);
        };
        G__125575.cljs$lang$maxFixedArity = 3;
        G__125575.cljs$lang$applyTo = function(arglist__125576) {
          var x = cljs.core.first(arglist__125576);
          arglist__125576 = cljs.core.next(arglist__125576);
          var y = cljs.core.first(arglist__125576);
          arglist__125576 = cljs.core.next(arglist__125576);
          var z = cljs.core.first(arglist__125576);
          var args = cljs.core.rest(arglist__125576);
          return G__125575__delegate(x, y, z, args);
        };
        G__125575.cljs$core$IFn$_invoke$arity$variadic = G__125575__delegate;
        return G__125575;
      }();
      G__125574 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__125574__0.call(this);
          case 1:
            return G__125574__1.call(this, x);
          case 2:
            return G__125574__2.call(this, x, y);
          case 3:
            return G__125574__3.call(this, x, y, z);
          default:
            return G__125574__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__125574.cljs$lang$maxFixedArity = 3;
      G__125574.cljs$lang$applyTo = G__125574__4.cljs$lang$applyTo;
      return G__125574;
    }();
  };
  var comp__4 = function() {
    var G__125577__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__125578__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__125579 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__125580 = cljs.core.next.call(null, fs__$2);
              ret = G__125579;
              fs__$2 = G__125580;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__125578 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__125578__delegate.call(this, args);
        };
        G__125578.cljs$lang$maxFixedArity = 0;
        G__125578.cljs$lang$applyTo = function(arglist__125581) {
          var args = cljs.core.seq(arglist__125581);
          return G__125578__delegate(args);
        };
        G__125578.cljs$core$IFn$_invoke$arity$variadic = G__125578__delegate;
        return G__125578;
      }();
    };
    var G__125577 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__125577__delegate.call(this, f1, f2, f3, fs);
    };
    G__125577.cljs$lang$maxFixedArity = 3;
    G__125577.cljs$lang$applyTo = function(arglist__125582) {
      var f1 = cljs.core.first(arglist__125582);
      arglist__125582 = cljs.core.next(arglist__125582);
      var f2 = cljs.core.first(arglist__125582);
      arglist__125582 = cljs.core.next(arglist__125582);
      var f3 = cljs.core.first(arglist__125582);
      var fs = cljs.core.rest(arglist__125582);
      return G__125577__delegate(f1, f2, f3, fs);
    };
    G__125577.cljs$core$IFn$_invoke$arity$variadic = G__125577__delegate;
    return G__125577;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__125583__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__125583 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__125583__delegate.call(this, args);
      };
      G__125583.cljs$lang$maxFixedArity = 0;
      G__125583.cljs$lang$applyTo = function(arglist__125584) {
        var args = cljs.core.seq(arglist__125584);
        return G__125583__delegate(args);
      };
      G__125583.cljs$core$IFn$_invoke$arity$variadic = G__125583__delegate;
      return G__125583;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__125585__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__125585 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__125585__delegate.call(this, args);
      };
      G__125585.cljs$lang$maxFixedArity = 0;
      G__125585.cljs$lang$applyTo = function(arglist__125586) {
        var args = cljs.core.seq(arglist__125586);
        return G__125585__delegate(args);
      };
      G__125585.cljs$core$IFn$_invoke$arity$variadic = G__125585__delegate;
      return G__125585;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__125587__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__125587 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__125587__delegate.call(this, args);
      };
      G__125587.cljs$lang$maxFixedArity = 0;
      G__125587.cljs$lang$applyTo = function(arglist__125588) {
        var args = cljs.core.seq(arglist__125588);
        return G__125587__delegate(args);
      };
      G__125587.cljs$core$IFn$_invoke$arity$variadic = G__125587__delegate;
      return G__125587;
    }();
  };
  var partial__5 = function() {
    var G__125589__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__125590__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__125590 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__125590__delegate.call(this, args);
        };
        G__125590.cljs$lang$maxFixedArity = 0;
        G__125590.cljs$lang$applyTo = function(arglist__125591) {
          var args = cljs.core.seq(arglist__125591);
          return G__125590__delegate(args);
        };
        G__125590.cljs$core$IFn$_invoke$arity$variadic = G__125590__delegate;
        return G__125590;
      }();
    };
    var G__125589 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__125589__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__125589.cljs$lang$maxFixedArity = 4;
    G__125589.cljs$lang$applyTo = function(arglist__125592) {
      var f = cljs.core.first(arglist__125592);
      arglist__125592 = cljs.core.next(arglist__125592);
      var arg1 = cljs.core.first(arglist__125592);
      arglist__125592 = cljs.core.next(arglist__125592);
      var arg2 = cljs.core.first(arglist__125592);
      arglist__125592 = cljs.core.next(arglist__125592);
      var arg3 = cljs.core.first(arglist__125592);
      var more = cljs.core.rest(arglist__125592);
      return G__125589__delegate(f, arg1, arg2, arg3, more);
    };
    G__125589.cljs$core$IFn$_invoke$arity$variadic = G__125589__delegate;
    return G__125589;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__125593 = null;
      var G__125593__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__125593__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__125593__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__125593__4 = function() {
        var G__125594__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__125594 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125594__delegate.call(this, a, b, c, ds);
        };
        G__125594.cljs$lang$maxFixedArity = 3;
        G__125594.cljs$lang$applyTo = function(arglist__125595) {
          var a = cljs.core.first(arglist__125595);
          arglist__125595 = cljs.core.next(arglist__125595);
          var b = cljs.core.first(arglist__125595);
          arglist__125595 = cljs.core.next(arglist__125595);
          var c = cljs.core.first(arglist__125595);
          var ds = cljs.core.rest(arglist__125595);
          return G__125594__delegate(a, b, c, ds);
        };
        G__125594.cljs$core$IFn$_invoke$arity$variadic = G__125594__delegate;
        return G__125594;
      }();
      G__125593 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__125593__1.call(this, a);
          case 2:
            return G__125593__2.call(this, a, b);
          case 3:
            return G__125593__3.call(this, a, b, c);
          default:
            return G__125593__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__125593.cljs$lang$maxFixedArity = 3;
      G__125593.cljs$lang$applyTo = G__125593__4.cljs$lang$applyTo;
      return G__125593;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__125596 = null;
      var G__125596__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__125596__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__125596__4 = function() {
        var G__125597__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__125597 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125597__delegate.call(this, a, b, c, ds);
        };
        G__125597.cljs$lang$maxFixedArity = 3;
        G__125597.cljs$lang$applyTo = function(arglist__125598) {
          var a = cljs.core.first(arglist__125598);
          arglist__125598 = cljs.core.next(arglist__125598);
          var b = cljs.core.first(arglist__125598);
          arglist__125598 = cljs.core.next(arglist__125598);
          var c = cljs.core.first(arglist__125598);
          var ds = cljs.core.rest(arglist__125598);
          return G__125597__delegate(a, b, c, ds);
        };
        G__125597.cljs$core$IFn$_invoke$arity$variadic = G__125597__delegate;
        return G__125597;
      }();
      G__125596 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__125596__2.call(this, a, b);
          case 3:
            return G__125596__3.call(this, a, b, c);
          default:
            return G__125596__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__125596.cljs$lang$maxFixedArity = 3;
      G__125596.cljs$lang$applyTo = G__125596__4.cljs$lang$applyTo;
      return G__125596;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__125599 = null;
      var G__125599__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__125599__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__125599__4 = function() {
        var G__125600__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__125600 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125600__delegate.call(this, a, b, c, ds);
        };
        G__125600.cljs$lang$maxFixedArity = 3;
        G__125600.cljs$lang$applyTo = function(arglist__125601) {
          var a = cljs.core.first(arglist__125601);
          arglist__125601 = cljs.core.next(arglist__125601);
          var b = cljs.core.first(arglist__125601);
          arglist__125601 = cljs.core.next(arglist__125601);
          var c = cljs.core.first(arglist__125601);
          var ds = cljs.core.rest(arglist__125601);
          return G__125600__delegate(a, b, c, ds);
        };
        G__125600.cljs$core$IFn$_invoke$arity$variadic = G__125600__delegate;
        return G__125600;
      }();
      G__125599 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__125599__2.call(this, a, b);
          case 3:
            return G__125599__3.call(this, a, b, c);
          default:
            return G__125599__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__125599.cljs$lang$maxFixedArity = 3;
      G__125599.cljs$lang$applyTo = G__125599__4.cljs$lang$applyTo;
      return G__125599;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4246__auto___125602 = size;
          var i_125603 = 0;
          while (true) {
            if (i_125603 < n__4246__auto___125602) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_125603, cljs.core._nth.call(null, c, i_125603)));
              var G__125604 = i_125603 + 1;
              i_125603 = G__125604;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4246__auto___125605 = size;
        var i_125606 = 0;
        while (true) {
          if (i_125606 < n__4246__auto___125605) {
            var x_125607 = f.call(null, cljs.core._nth.call(null, c, i_125606));
            if (x_125607 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_125607);
            }
            var G__125608 = i_125606 + 1;
            i_125606 = G__125608;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4246__auto___125609 = size;
          var i_125610 = 0;
          while (true) {
            if (i_125610 < n__4246__auto___125609) {
              var x_125611 = f.call(null, idx + i_125610, cljs.core._nth.call(null, c, i_125610));
              if (x_125611 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_125611);
              }
              var G__125612 = i_125610 + 1;
              i_125610 = G__125612;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            return p.call(null, y);
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__125619__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__125619 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125619__delegate.call(this, x, y, z, args);
        };
        G__125619.cljs$lang$maxFixedArity = 3;
        G__125619.cljs$lang$applyTo = function(arglist__125620) {
          var x = cljs.core.first(arglist__125620);
          arglist__125620 = cljs.core.next(arglist__125620);
          var y = cljs.core.first(arglist__125620);
          arglist__125620 = cljs.core.next(arglist__125620);
          var z = cljs.core.first(arglist__125620);
          var args = cljs.core.rest(arglist__125620);
          return G__125619__delegate(x, y, z, args);
        };
        G__125619.cljs$core$IFn$_invoke$arity$variadic = G__125619__delegate;
        return G__125619;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              var and__3392__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3392__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3392__auto____$2;
              }
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              var and__3392__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3392__auto____$2)) {
                var and__3392__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3392__auto____$3)) {
                  var and__3392__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3392__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3392__auto____$4;
                  }
                } else {
                  return and__3392__auto____$3;
                }
              } else {
                return and__3392__auto____$2;
              }
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__125621__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__125613_SHARP_) {
            var and__3392__auto__ = p1.call(null, p1__125613_SHARP_);
            if (cljs.core.truth_(and__3392__auto__)) {
              return p2.call(null, p1__125613_SHARP_);
            } else {
              return and__3392__auto__;
            }
          }, args));
        };
        var G__125621 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125621__delegate.call(this, x, y, z, args);
        };
        G__125621.cljs$lang$maxFixedArity = 3;
        G__125621.cljs$lang$applyTo = function(arglist__125622) {
          var x = cljs.core.first(arglist__125622);
          arglist__125622 = cljs.core.next(arglist__125622);
          var y = cljs.core.first(arglist__125622);
          arglist__125622 = cljs.core.next(arglist__125622);
          var z = cljs.core.first(arglist__125622);
          var args = cljs.core.rest(arglist__125622);
          return G__125621__delegate(x, y, z, args);
        };
        G__125621.cljs$core$IFn$_invoke$arity$variadic = G__125621__delegate;
        return G__125621;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              var and__3392__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3392__auto____$2)) {
                var and__3392__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3392__auto____$3)) {
                  var and__3392__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3392__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3392__auto____$4;
                  }
                } else {
                  return and__3392__auto____$3;
                }
              } else {
                return and__3392__auto____$2;
              }
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3392__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3392__auto____$1)) {
              var and__3392__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3392__auto____$2)) {
                var and__3392__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3392__auto____$3)) {
                  var and__3392__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3392__auto____$4)) {
                    var and__3392__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3392__auto____$5)) {
                      var and__3392__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3392__auto____$6)) {
                        var and__3392__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3392__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3392__auto____$7;
                        }
                      } else {
                        return and__3392__auto____$6;
                      }
                    } else {
                      return and__3392__auto____$5;
                    }
                  } else {
                    return and__3392__auto____$4;
                  }
                } else {
                  return and__3392__auto____$3;
                }
              } else {
                return and__3392__auto____$2;
              }
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__125623__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__125614_SHARP_) {
            var and__3392__auto__ = p1.call(null, p1__125614_SHARP_);
            if (cljs.core.truth_(and__3392__auto__)) {
              var and__3392__auto____$1 = p2.call(null, p1__125614_SHARP_);
              if (cljs.core.truth_(and__3392__auto____$1)) {
                return p3.call(null, p1__125614_SHARP_);
              } else {
                return and__3392__auto____$1;
              }
            } else {
              return and__3392__auto__;
            }
          }, args));
        };
        var G__125623 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125623__delegate.call(this, x, y, z, args);
        };
        G__125623.cljs$lang$maxFixedArity = 3;
        G__125623.cljs$lang$applyTo = function(arglist__125624) {
          var x = cljs.core.first(arglist__125624);
          arglist__125624 = cljs.core.next(arglist__125624);
          var y = cljs.core.first(arglist__125624);
          arglist__125624 = cljs.core.next(arglist__125624);
          var z = cljs.core.first(arglist__125624);
          var args = cljs.core.rest(arglist__125624);
          return G__125623__delegate(x, y, z, args);
        };
        G__125623.cljs$core$IFn$_invoke$arity$variadic = G__125623__delegate;
        return G__125623;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__125625__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__125615_SHARP_) {
            return p1__125615_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__125616_SHARP_) {
            var and__3392__auto__ = p1__125616_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3392__auto__)) {
              return p1__125616_SHARP_.call(null, y);
            } else {
              return and__3392__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__125617_SHARP_) {
            var and__3392__auto__ = p1__125617_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3392__auto__)) {
              var and__3392__auto____$1 = p1__125617_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3392__auto____$1)) {
                return p1__125617_SHARP_.call(null, z);
              } else {
                return and__3392__auto____$1;
              }
            } else {
              return and__3392__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__125626__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__125618_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__125618_SHARP_, args);
            }, ps__$1));
          };
          var G__125626 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__125626__delegate.call(this, x, y, z, args);
          };
          G__125626.cljs$lang$maxFixedArity = 3;
          G__125626.cljs$lang$applyTo = function(arglist__125627) {
            var x = cljs.core.first(arglist__125627);
            arglist__125627 = cljs.core.next(arglist__125627);
            var y = cljs.core.first(arglist__125627);
            arglist__125627 = cljs.core.next(arglist__125627);
            var z = cljs.core.first(arglist__125627);
            var args = cljs.core.rest(arglist__125627);
            return G__125626__delegate(x, y, z, args);
          };
          G__125626.cljs$core$IFn$_invoke$arity$variadic = G__125626__delegate;
          return G__125626;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__125625 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__125625__delegate.call(this, p1, p2, p3, ps);
    };
    G__125625.cljs$lang$maxFixedArity = 3;
    G__125625.cljs$lang$applyTo = function(arglist__125628) {
      var p1 = cljs.core.first(arglist__125628);
      arglist__125628 = cljs.core.next(arglist__125628);
      var p2 = cljs.core.first(arglist__125628);
      arglist__125628 = cljs.core.next(arglist__125628);
      var p3 = cljs.core.first(arglist__125628);
      var ps = cljs.core.rest(arglist__125628);
      return G__125625__delegate(p1, p2, p3, ps);
    };
    G__125625.cljs$core$IFn$_invoke$arity$variadic = G__125625__delegate;
    return G__125625;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3404__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3404__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__125635__delegate = function(x, y, z, args) {
          var or__3404__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__125635 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125635__delegate.call(this, x, y, z, args);
        };
        G__125635.cljs$lang$maxFixedArity = 3;
        G__125635.cljs$lang$applyTo = function(arglist__125636) {
          var x = cljs.core.first(arglist__125636);
          arglist__125636 = cljs.core.next(arglist__125636);
          var y = cljs.core.first(arglist__125636);
          arglist__125636 = cljs.core.next(arglist__125636);
          var z = cljs.core.first(arglist__125636);
          var args = cljs.core.rest(arglist__125636);
          return G__125635__delegate(x, y, z, args);
        };
        G__125635.cljs$core$IFn$_invoke$arity$variadic = G__125635__delegate;
        return G__125635;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            var or__3404__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3404__auto____$2)) {
              return or__3404__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            var or__3404__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3404__auto____$2)) {
              return or__3404__auto____$2;
            } else {
              var or__3404__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3404__auto____$3)) {
                return or__3404__auto____$3;
              } else {
                var or__3404__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3404__auto____$4)) {
                  return or__3404__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__125637__delegate = function(x, y, z, args) {
          var or__3404__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__125629_SHARP_) {
              var or__3404__auto____$1 = p1.call(null, p1__125629_SHARP_);
              if (cljs.core.truth_(or__3404__auto____$1)) {
                return or__3404__auto____$1;
              } else {
                return p2.call(null, p1__125629_SHARP_);
              }
            }, args);
          }
        };
        var G__125637 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125637__delegate.call(this, x, y, z, args);
        };
        G__125637.cljs$lang$maxFixedArity = 3;
        G__125637.cljs$lang$applyTo = function(arglist__125638) {
          var x = cljs.core.first(arglist__125638);
          arglist__125638 = cljs.core.next(arglist__125638);
          var y = cljs.core.first(arglist__125638);
          arglist__125638 = cljs.core.next(arglist__125638);
          var z = cljs.core.first(arglist__125638);
          var args = cljs.core.rest(arglist__125638);
          return G__125637__delegate(x, y, z, args);
        };
        G__125637.cljs$core$IFn$_invoke$arity$variadic = G__125637__delegate;
        return G__125637;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            var or__3404__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3404__auto____$2)) {
              return or__3404__auto____$2;
            } else {
              var or__3404__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3404__auto____$3)) {
                return or__3404__auto____$3;
              } else {
                var or__3404__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3404__auto____$4)) {
                  return or__3404__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3404__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3404__auto____$1)) {
            return or__3404__auto____$1;
          } else {
            var or__3404__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3404__auto____$2)) {
              return or__3404__auto____$2;
            } else {
              var or__3404__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3404__auto____$3)) {
                return or__3404__auto____$3;
              } else {
                var or__3404__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3404__auto____$4)) {
                  return or__3404__auto____$4;
                } else {
                  var or__3404__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3404__auto____$5)) {
                    return or__3404__auto____$5;
                  } else {
                    var or__3404__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3404__auto____$6)) {
                      return or__3404__auto____$6;
                    } else {
                      var or__3404__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3404__auto____$7)) {
                        return or__3404__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__125639__delegate = function(x, y, z, args) {
          var or__3404__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__125630_SHARP_) {
              var or__3404__auto____$1 = p1.call(null, p1__125630_SHARP_);
              if (cljs.core.truth_(or__3404__auto____$1)) {
                return or__3404__auto____$1;
              } else {
                var or__3404__auto____$2 = p2.call(null, p1__125630_SHARP_);
                if (cljs.core.truth_(or__3404__auto____$2)) {
                  return or__3404__auto____$2;
                } else {
                  return p3.call(null, p1__125630_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__125639 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125639__delegate.call(this, x, y, z, args);
        };
        G__125639.cljs$lang$maxFixedArity = 3;
        G__125639.cljs$lang$applyTo = function(arglist__125640) {
          var x = cljs.core.first(arglist__125640);
          arglist__125640 = cljs.core.next(arglist__125640);
          var y = cljs.core.first(arglist__125640);
          arglist__125640 = cljs.core.next(arglist__125640);
          var z = cljs.core.first(arglist__125640);
          var args = cljs.core.rest(arglist__125640);
          return G__125639__delegate(x, y, z, args);
        };
        G__125639.cljs$core$IFn$_invoke$arity$variadic = G__125639__delegate;
        return G__125639;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__125641__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__125631_SHARP_) {
            return p1__125631_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__125632_SHARP_) {
            var or__3404__auto__ = p1__125632_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return p1__125632_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__125633_SHARP_) {
            var or__3404__auto__ = p1__125633_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              var or__3404__auto____$1 = p1__125633_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3404__auto____$1)) {
                return or__3404__auto____$1;
              } else {
                return p1__125633_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__125642__delegate = function(x, y, z, args) {
            var or__3404__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__125634_SHARP_) {
                return cljs.core.some.call(null, p1__125634_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__125642 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__125642__delegate.call(this, x, y, z, args);
          };
          G__125642.cljs$lang$maxFixedArity = 3;
          G__125642.cljs$lang$applyTo = function(arglist__125643) {
            var x = cljs.core.first(arglist__125643);
            arglist__125643 = cljs.core.next(arglist__125643);
            var y = cljs.core.first(arglist__125643);
            arglist__125643 = cljs.core.next(arglist__125643);
            var z = cljs.core.first(arglist__125643);
            var args = cljs.core.rest(arglist__125643);
            return G__125642__delegate(x, y, z, args);
          };
          G__125642.cljs$core$IFn$_invoke$arity$variadic = G__125642__delegate;
          return G__125642;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__125641 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__125641__delegate.call(this, p1, p2, p3, ps);
    };
    G__125641.cljs$lang$maxFixedArity = 3;
    G__125641.cljs$lang$applyTo = function(arglist__125644) {
      var p1 = cljs.core.first(arglist__125644);
      arglist__125644 = cljs.core.next(arglist__125644);
      var p2 = cljs.core.first(arglist__125644);
      arglist__125644 = cljs.core.next(arglist__125644);
      var p3 = cljs.core.first(arglist__125644);
      var ps = cljs.core.rest(arglist__125644);
      return G__125641__delegate(p1, p2, p3, ps);
    };
    G__125641.cljs$core$IFn$_invoke$arity$variadic = G__125641__delegate;
    return G__125641;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4246__auto___125646 = size;
          var i_125647 = 0;
          while (true) {
            if (i_125647 < n__4246__auto___125646) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_125647)));
              var G__125648 = i_125647 + 1;
              i_125647 = G__125648;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__125649__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__125645_SHARP_) {
        return cljs.core.apply.call(null, f, p1__125645_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__125649 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__125649__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__125649.cljs$lang$maxFixedArity = 4;
    G__125649.cljs$lang$applyTo = function(arglist__125650) {
      var f = cljs.core.first(arglist__125650);
      arglist__125650 = cljs.core.next(arglist__125650);
      var c1 = cljs.core.first(arglist__125650);
      arglist__125650 = cljs.core.next(arglist__125650);
      var c2 = cljs.core.first(arglist__125650);
      arglist__125650 = cljs.core.next(arglist__125650);
      var c3 = cljs.core.first(arglist__125650);
      var colls = cljs.core.rest(arglist__125650);
      return G__125649__delegate(f, c1, c2, c3, colls);
    };
    G__125649.cljs$core$IFn$_invoke$arity$variadic = G__125649__delegate;
    return G__125649;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__125651 = n__$1 - 1;
        var G__125652 = cljs.core.rest.call(null, s);
        n__$1 = G__125651;
        coll__$1 = G__125652;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__125653 = cljs.core.next.call(null, s);
      var G__125654 = cljs.core.next.call(null, lead);
      s = G__125653;
      lead = G__125654;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3392__auto__ = s;
        if (and__3392__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3392__auto__;
        }
      }())) {
        var G__125655 = pred__$1;
        var G__125656 = cljs.core.rest.call(null, s);
        pred__$1 = G__125655;
        coll__$1 = G__125656;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__125657__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__125657 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125657__delegate.call(this, c1, c2, colls);
    };
    G__125657.cljs$lang$maxFixedArity = 2;
    G__125657.cljs$lang$applyTo = function(arglist__125658) {
      var c1 = cljs.core.first(arglist__125658);
      arglist__125658 = cljs.core.next(arglist__125658);
      var c2 = cljs.core.first(arglist__125658);
      var colls = cljs.core.rest(arglist__125658);
      return G__125657__delegate(c1, c2, colls);
    };
    G__125657.cljs$core$IFn$_invoke$arity$variadic = G__125657__delegate;
    return G__125657;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__125659__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__125659 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__125659__delegate.call(this, f, coll, colls);
    };
    G__125659.cljs$lang$maxFixedArity = 2;
    G__125659.cljs$lang$applyTo = function(arglist__125660) {
      var f = cljs.core.first(arglist__125660);
      arglist__125660 = cljs.core.next(arglist__125660);
      var coll = cljs.core.first(arglist__125660);
      var colls = cljs.core.rest(arglist__125660);
      return G__125659__delegate(f, coll, colls);
    };
    G__125659.cljs$core$IFn$_invoke$arity$variadic = G__125659__delegate;
    return G__125659;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4246__auto___125661 = size;
        var i_125662 = 0;
        while (true) {
          if (i_125662 < n__4246__auto___125661) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_125662)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_125662));
            } else {
            }
            var G__125663 = i_125662 + 1;
            i_125662 = G__125663;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__125664_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__125664_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__125666 = to;
      if (G__125666) {
        var bit__4041__auto__ = G__125666.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4041__auto__ || G__125666.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__125667__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__125667 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__125667__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__125667.cljs$lang$maxFixedArity = 4;
    G__125667.cljs$lang$applyTo = function(arglist__125668) {
      var f = cljs.core.first(arglist__125668);
      arglist__125668 = cljs.core.next(arglist__125668);
      var c1 = cljs.core.first(arglist__125668);
      arglist__125668 = cljs.core.next(arglist__125668);
      var c2 = cljs.core.first(arglist__125668);
      arglist__125668 = cljs.core.next(arglist__125668);
      var c3 = cljs.core.first(arglist__125668);
      var colls = cljs.core.rest(arglist__125668);
      return G__125667__delegate(f, c1, c2, c3, colls);
    };
    G__125667.cljs$core$IFn$_invoke$arity$variadic = G__125667__delegate;
    return G__125667;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__125670 = m__$1;
          if (G__125670) {
            var bit__4048__auto__ = G__125670.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4048__auto__ || G__125670.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__125670.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__125670);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__125670);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__125671 = sentinel;
            var G__125672 = m__$2;
            var G__125673 = cljs.core.next.call(null, ks__$1);
            sentinel = G__125671;
            m__$1 = G__125672;
            ks__$1 = G__125673;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__125674, v) {
  var vec__125676 = p__125674;
  var k = cljs.core.nth.call(null, vec__125676, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__125676, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__125677, f) {
    var vec__125687 = p__125677;
    var k = cljs.core.nth.call(null, vec__125687, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__125687, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__125678, f, a) {
    var vec__125688 = p__125678;
    var k = cljs.core.nth.call(null, vec__125688, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__125688, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__125679, f, a, b) {
    var vec__125689 = p__125679;
    var k = cljs.core.nth.call(null, vec__125689, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__125689, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__125680, f, a, b, c) {
    var vec__125690 = p__125680;
    var k = cljs.core.nth.call(null, vec__125690, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__125690, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__125692__delegate = function(m, p__125681, f, a, b, c, args) {
      var vec__125691 = p__125681;
      var k = cljs.core.nth.call(null, vec__125691, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__125691, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__125692 = function(m, p__125681, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__125692__delegate.call(this, m, p__125681, f, a, b, c, args);
    };
    G__125692.cljs$lang$maxFixedArity = 6;
    G__125692.cljs$lang$applyTo = function(arglist__125693) {
      var m = cljs.core.first(arglist__125693);
      arglist__125693 = cljs.core.next(arglist__125693);
      var p__125681 = cljs.core.first(arglist__125693);
      arglist__125693 = cljs.core.next(arglist__125693);
      var f = cljs.core.first(arglist__125693);
      arglist__125693 = cljs.core.next(arglist__125693);
      var a = cljs.core.first(arglist__125693);
      arglist__125693 = cljs.core.next(arglist__125693);
      var b = cljs.core.first(arglist__125693);
      arglist__125693 = cljs.core.next(arglist__125693);
      var c = cljs.core.first(arglist__125693);
      var args = cljs.core.rest(arglist__125693);
      return G__125692__delegate(m, p__125681, f, a, b, c, args);
    };
    G__125692.cljs$core$IFn$_invoke$arity$variadic = G__125692__delegate;
    return G__125692;
  }();
  update_in = function(m, p__125681, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__125681, f);
      case 4:
        return update_in__4.call(this, m, p__125681, f, a);
      case 5:
        return update_in__5.call(this, m, p__125681, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__125681, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__125681, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3969__auto__, writer__3970__auto__, opts__3971__auto__) {
  return cljs.core._write.call(null, writer__3970__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__125694 = ll - 5;
      var G__125695 = r;
      ll = G__125694;
      ret = G__125695;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__125696 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__125697 = level - 5;
          node = G__125696;
          level = G__125697;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__125699 = null;
  var G__125699__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__125699__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__125699 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125699__2.call(this, self__, k);
      case 3:
        return G__125699__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125699;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args125698) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125698)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__125700 = j + 1;
              var G__125701 = init__$2;
              j = G__125700;
              init__$1 = G__125701;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__125702 = i + step_init[0];
        i = G__125702;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4246__auto___125703 = len;
    var i_125704 = 0;
    while (true) {
      if (i_125704 < n__4246__auto___125703) {
        new_tail[i_125704] = self__.tail[i_125704];
        var G__125705 = i_125704 + 1;
        i_125704 = G__125705;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__125706 = i + 1;
        var G__125707 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__125706;
        out = G__125707;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__125708) {
    var args = cljs.core.seq(arglist__125708);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3711__auto__ = self__.end;
    var y__3712__auto__ = v_pos + 1;
    return x__3711__auto__ > y__3712__auto__ ? x__3711__auto__ : y__3712__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__125710 = null;
  var G__125710__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__125710__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__125710 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125710__2.call(this, self__, k);
      case 3:
        return G__125710__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125710;
}();
cljs.core.Subvec.prototype.apply = function(self__, args125709) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125709)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$ = true;
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__125711 = meta;
      var G__125712 = v.v;
      var G__125713 = v.start + start;
      var G__125714 = v.start + end;
      var G__125715 = __hash;
      meta = G__125711;
      v = G__125712;
      start = G__125713;
      end = G__125714;
      __hash = G__125715;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj125719 = {};
    return obj125719;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__125720 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__125721 = level - 5;
          node = G__125720;
          level = G__125721;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__125723 = null;
  var G__125723__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125723__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125723 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125723__2.call(this, self__, k);
      case 3:
        return G__125723__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125723;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args125722) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125722)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3404__auto__ = self__.rear;
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3404__auto__ = self__.front;
    if (cljs.core.truth_(or__3404__auto__)) {
      return or__3404__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__125724 = i + incr;
        i = G__125724;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__125725 = i + 1;
      var G__125726 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__125725;
      out = G__125726;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj125730 = {};
    return obj125730;
  }();
  var l = ks.length;
  var i_125731 = 0;
  while (true) {
    if (i_125731 < l) {
      var k_125732 = ks[i_125731];
      new_obj[k_125732] = obj[k_125732];
      var G__125733 = i_125731 + 1;
      i_125731 = G__125733;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__125736 = null;
  var G__125736__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125736__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125736 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125736__2.call(this, self__, k);
      case 3:
        return G__125736__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125736;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args125735) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125735)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__125737 = cljs.core.rest.call(null, keys__$1);
        var G__125738 = init__$2;
        keys__$1 = G__125737;
        init__$1 = G__125738;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__125734_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__125734_SHARP_, self__.strobj[p1__125734_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj125740 = {};
  return obj125740;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__125741 = i + 2;
          i = G__125741;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__125742 = i + 2;
          i = G__125742;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__125743 = i + 2;
          i = G__125743;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__125744 = i + 2;
          i = G__125744;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__125745 = i + 2;
          i = G__125745;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_125746 = 0;
  while (true) {
    if (i_125746 < l) {
      narr[i_125746] = arr[i_125746];
      var G__125747 = i_125746 + 1;
      i_125746 = G__125747;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj125750 = {};
    return obj125750;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__125751 = cljs.core.aclone.call(null, self__.arr);
          G__125751[idx + 1] = v;
          return G__125751;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__125752 = null;
  var G__125752__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125752__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125752 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125752__2.call(this, self__, k);
      case 3:
        return G__125752__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125752;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args125748) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125748)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__125753 = i + 2;
        var G__125754 = init__$2;
        i = G__125753;
        init__$1 = G__125754;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__125755 = s + 2;
            var G__125756 = d;
            s = G__125755;
            d = G__125756;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__125757 = s + 2;
              var G__125758 = d + 2;
              s = G__125757;
              d = G__125758;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__125759 = i + 2;
        var G__125760 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__125759;
        ret = G__125760;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__125761_125763 = self__.arr;
      G__125761_125763.pop();
      G__125761_125763.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__125762 = o;
      if (G__125762) {
        var bit__4048__auto__ = G__125762.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4048__auto__ || G__125762.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__125762.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__125762);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__125762);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__125764 = cljs.core.next.call(null, es);
          var G__125765 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__125764;
          tcoll__$2 = G__125765;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__125766 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__125767 = i + 2;
      out = G__125766;
      i = G__125767;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3969__auto__, writer__3970__auto__, opts__3971__auto__) {
  return cljs.core._write.call(null, writer__3970__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__125770 = cljs.core.aclone.call(null, arr);
    G__125770[i] = a;
    return G__125770;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__125771 = cljs.core.aclone.call(null, arr);
    G__125771[i] = a;
    G__125771[j] = b;
    return G__125771;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__125772 = i + 2;
        var G__125773 = init__$2;
        i = G__125772;
        init__$1 = G__125773;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_125774 = 0;
        var j_125775 = 0;
        while (true) {
          if (i_125774 < 32) {
            if ((self__.bitmap >>> i_125774 & 1) === 0) {
              var G__125776 = i_125774 + 1;
              var G__125777 = j_125775;
              i_125774 = G__125776;
              j_125775 = G__125777;
              continue;
            } else {
              nodes[i_125774] = !(self__.arr[j_125775] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_125775]), self__.arr[j_125775], self__.arr[j_125775 + 1], added_leaf_QMARK_) : self__.arr[j_125775 + 1];
              var G__125778 = i_125774 + 1;
              var G__125779 = j_125775 + 2;
              i_125774 = G__125778;
              j_125775 = G__125779;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_125780 = 0;
      var j_125781 = 0;
      while (true) {
        if (i_125780 < 32) {
          if ((self__.bitmap >>> i_125780 & 1) === 0) {
            var G__125782 = i_125780 + 1;
            var G__125783 = j_125781;
            i_125780 = G__125782;
            j_125781 = G__125783;
            continue;
          } else {
            nodes[i_125780] = !(self__.arr[j_125781] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_125781]), self__.arr[j_125781], self__.arr[j_125781 + 1], added_leaf_QMARK_) : self__.arr[j_125781 + 1];
            var G__125784 = i_125780 + 1;
            var G__125785 = j_125781 + 2;
            i_125780 = G__125784;
            j_125781 = G__125785;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__125786 = i + 1;
        var G__125787 = j + 2;
        var G__125788 = bitmap | 1 << i;
        i = G__125786;
        j = G__125787;
        bitmap = G__125788;
        continue;
      } else {
        var G__125789 = i + 1;
        var G__125790 = j;
        var G__125791 = bitmap;
        i = G__125789;
        j = G__125790;
        bitmap = G__125791;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__125792 = i + 1;
          var G__125793 = init__$2;
          i = G__125792;
          init__$1 = G__125793;
          continue;
        }
      } else {
        var G__125794 = i + 1;
        var G__125795 = init__$1;
        i = G__125794;
        init__$1 = G__125795;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__125796 = i + 2;
        i = G__125796;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__125797 = j + 2;
                j = G__125797;
                continue;
              }
            } else {
              var G__125798 = j + 2;
              j = G__125798;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__125799 = j + 1;
              j = G__125799;
              continue;
            }
          } else {
            var G__125800 = j + 1;
            j = G__125800;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj125803 = {};
    return obj125803;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__125804 = null;
  var G__125804__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125804__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125804 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125804__2.call(this, self__, k);
      case 3:
        return G__125804__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125804;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args125801) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125801)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__125805 = i + 1;
      var G__125806 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__125805;
      out = G__125806;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__125807 = o;
      if (G__125807) {
        var bit__4048__auto__ = G__125807.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4048__auto__ || G__125807.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__125807.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__125807);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__125807);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__125808 = cljs.core.next.call(null, es);
          var G__125809 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__125808;
          tcoll__$1 = G__125809;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__125810 = ascending_QMARK_ ? t.left : t.right;
      var G__125811 = cljs.core.conj.call(null, stack__$1, t);
      t = G__125810;
      stack__$1 = G__125811;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__125813 = null;
  var G__125813__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125813__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125813 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125813__2.call(this, self__, k);
      case 3:
        return G__125813__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125813;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args125812) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125812)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__125815 = null;
  var G__125815__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125815__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125815 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125815__2.call(this, self__, k);
      case 3:
        return G__125815__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125815;
}();
cljs.core.RedNode.prototype.apply = function(self__, args125814) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125814)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__125817 = null;
  var G__125817__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125817__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125817 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125817__2.call(this, self__, k);
      case 3:
        return G__125817__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125817;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args125816) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125816)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__125818 = t.left;
          t = G__125818;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__125819 = t.right;
            t = G__125819;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__125820 = cljs.core.conj.call(null, stack, t);
              var G__125821 = t.left;
              stack = G__125820;
              t = G__125821;
              continue;
            } else {
              var G__125822 = stack;
              var G__125823 = t.right;
              stack = G__125822;
              t = G__125823;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__125824 = cljs.core.conj.call(null, stack, t);
                var G__125825 = t.right;
                stack = G__125824;
                t = G__125825;
                continue;
              } else {
                var G__125826 = stack;
                var G__125827 = t.left;
                stack = G__125826;
                t = G__125827;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__125828 = cljs.core.nnext.call(null, in$);
        var G__125829 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__125828;
        out = G__125829;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__125830) {
    var keyvals = cljs.core.seq(arglist__125830);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__125831) {
    var keyvals = cljs.core.seq(arglist__125831);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj125835 = {};
      return obj125835;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__125836 = cljs.core.nnext.call(null, kvs);
        kvs = G__125836;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__125837) {
    var keyvals = cljs.core.seq(arglist__125837);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__125838 = cljs.core.nnext.call(null, in$);
        var G__125839 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__125838;
        out = G__125839;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__125840) {
    var keyvals = cljs.core.seq(arglist__125840);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__125841 = cljs.core.nnext.call(null, in$);
        var G__125842 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__125841;
        out = G__125842;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__125843) {
    var comparator = cljs.core.first(arglist__125843);
    var keyvals = cljs.core.rest(arglist__125843);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__125844 = self__.mseq;
    if (G__125844) {
      var bit__4048__auto__ = G__125844.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4048__auto__ || G__125844.cljs$core$INext$) {
        return true;
      } else {
        if (!G__125844.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__125844);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__125844);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__125845 = self__.mseq;
    if (G__125845) {
      var bit__4048__auto__ = G__125845.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4048__auto__ || G__125845.cljs$core$INext$) {
        return true;
      } else {
        if (!G__125845.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__125845);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__125845);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__125846 = self__.mseq;
    if (G__125846) {
      var bit__4048__auto__ = G__125846.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4048__auto__ || G__125846.cljs$core$INext$) {
        return true;
      } else {
        if (!G__125846.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__125846);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__125846);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__125847 = self__.mseq;
    if (G__125847) {
      var bit__4048__auto__ = G__125847.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4048__auto__ || G__125847.cljs$core$INext$) {
        return true;
      } else {
        if (!G__125847.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__125847);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__125847);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__125848_SHARP_, p2__125849_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3404__auto__ = p1__125848_SHARP_;
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__125849_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__125850) {
    var maps = cljs.core.seq(arglist__125850);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3404__auto__ = m1;
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__125851) {
    var f = cljs.core.first(arglist__125851);
    var maps = cljs.core.rest(arglist__125851);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__125852 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__125853 = cljs.core.next.call(null, keys);
      ret = G__125852;
      keys = G__125853;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__125856 = null;
  var G__125856__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125856__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125856 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125856__2.call(this, self__, k);
      case 3:
        return G__125856__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125856;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args125855) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125855)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__125854_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__125854_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__125857 = i + 1;
        var G__125858 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__125857;
        out = G__125858;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__125859 = i + 1;
        var G__125860 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__125859;
        out = G__125860;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__125862 = null;
  var G__125862__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__125862__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__125862 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125862__2.call(this, self__, k);
      case 3:
        return G__125862__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125862;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args125861) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125861)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__125865 = null;
  var G__125865__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__125865__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__125865 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__125865__2.call(this, self__, k);
      case 3:
        return G__125865__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__125865;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args125864) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args125864)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__125863_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__125863_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4240__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4240__auto__.length) {
        var G__125866 = i + 1;
        var G__125867 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__125866;
        res = G__125867;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__125868 = cljs.core._next.call(null, in$__$1);
            var G__125869 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__125868;
            out = G__125869;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__125870__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__125870 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__125870__delegate.call(this, keys);
    };
    G__125870.cljs$lang$maxFixedArity = 0;
    G__125870.cljs$lang$applyTo = function(arglist__125871) {
      var keys = cljs.core.seq(arglist__125871);
      return G__125870__delegate(keys);
    };
    G__125870.cljs$core$IFn$_invoke$arity$variadic = G__125870__delegate;
    return G__125870;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__125872) {
    var keys = cljs.core.seq(arglist__125872);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__125873) {
    var comparator = cljs.core.first(arglist__125873);
    var keys = cljs.core.rest(arglist__125873);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__125874_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__125874_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__125874_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__125881, seen__$1) {
        while (true) {
          var vec__125882 = p__125881;
          var f = cljs.core.nth.call(null, vec__125882, 0, null);
          var xs__$1 = vec__125882;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__125883 = cljs.core.rest.call(null, s);
              var G__125884 = seen__$1;
              p__125881 = G__125883;
              seen__$1 = G__125884;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__125885 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__125886 = cljs.core.next.call(null, s__$1);
      ret = G__125885;
      s__$1 = G__125886;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__125888 = x;
    if (G__125888) {
      var bit__4041__auto__ = G__125888.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4041__auto__ || G__125888.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__125889 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__125890 = cljs.core.next.call(null, ks);
      var G__125891 = cljs.core.next.call(null, vs);
      map = G__125889;
      ks = G__125890;
      vs = G__125891;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__125894__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__125892_SHARP_, p2__125893_SHARP_) {
        return max_key.call(null, k, p1__125892_SHARP_, p2__125893_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__125894 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__125894__delegate.call(this, k, x, y, more);
    };
    G__125894.cljs$lang$maxFixedArity = 3;
    G__125894.cljs$lang$applyTo = function(arglist__125895) {
      var k = cljs.core.first(arglist__125895);
      arglist__125895 = cljs.core.next(arglist__125895);
      var x = cljs.core.first(arglist__125895);
      arglist__125895 = cljs.core.next(arglist__125895);
      var y = cljs.core.first(arglist__125895);
      var more = cljs.core.rest(arglist__125895);
      return G__125894__delegate(k, x, y, more);
    };
    G__125894.cljs$core$IFn$_invoke$arity$variadic = G__125894__delegate;
    return G__125894;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__125898__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__125896_SHARP_, p2__125897_SHARP_) {
        return min_key.call(null, k, p1__125896_SHARP_, p2__125897_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__125898 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__125898__delegate.call(this, k, x, y, more);
    };
    G__125898.cljs$lang$maxFixedArity = 3;
    G__125898.cljs$lang$applyTo = function(arglist__125899) {
      var k = cljs.core.first(arglist__125899);
      arglist__125899 = cljs.core.next(arglist__125899);
      var x = cljs.core.first(arglist__125899);
      arglist__125899 = cljs.core.next(arglist__125899);
      var y = cljs.core.first(arglist__125899);
      var more = cljs.core.rest(arglist__125899);
      return G__125898__delegate(k, x, y, more);
    };
    G__125898.cljs$core$IFn$_invoke$arity$variadic = G__125898__delegate;
    return G__125898;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__125902 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__125902, 0, null);
        var s = vec__125902;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__125903 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__125903, 0, null);
      var s = vec__125903;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__125906 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__125906, 0, null);
        var s = vec__125906;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__125907 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__125907, 0, null);
      var s = vec__125907;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$ = true;
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__125908_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__125908_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__125919 = null;
      var G__125919__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__125919__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__125919__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__125919__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__125919__4 = function() {
        var G__125920__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__125920 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125920__delegate.call(this, x, y, z, args);
        };
        G__125920.cljs$lang$maxFixedArity = 3;
        G__125920.cljs$lang$applyTo = function(arglist__125921) {
          var x = cljs.core.first(arglist__125921);
          arglist__125921 = cljs.core.next(arglist__125921);
          var y = cljs.core.first(arglist__125921);
          arglist__125921 = cljs.core.next(arglist__125921);
          var z = cljs.core.first(arglist__125921);
          var args = cljs.core.rest(arglist__125921);
          return G__125920__delegate(x, y, z, args);
        };
        G__125920.cljs$core$IFn$_invoke$arity$variadic = G__125920__delegate;
        return G__125920;
      }();
      G__125919 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__125919__0.call(this);
          case 1:
            return G__125919__1.call(this, x);
          case 2:
            return G__125919__2.call(this, x, y);
          case 3:
            return G__125919__3.call(this, x, y, z);
          default:
            return G__125919__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__125919.cljs$lang$maxFixedArity = 3;
      G__125919.cljs$lang$applyTo = G__125919__4.cljs$lang$applyTo;
      return G__125919;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__125922 = null;
      var G__125922__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__125922__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__125922__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__125922__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__125922__4 = function() {
        var G__125923__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__125923 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125923__delegate.call(this, x, y, z, args);
        };
        G__125923.cljs$lang$maxFixedArity = 3;
        G__125923.cljs$lang$applyTo = function(arglist__125924) {
          var x = cljs.core.first(arglist__125924);
          arglist__125924 = cljs.core.next(arglist__125924);
          var y = cljs.core.first(arglist__125924);
          arglist__125924 = cljs.core.next(arglist__125924);
          var z = cljs.core.first(arglist__125924);
          var args = cljs.core.rest(arglist__125924);
          return G__125923__delegate(x, y, z, args);
        };
        G__125923.cljs$core$IFn$_invoke$arity$variadic = G__125923__delegate;
        return G__125923;
      }();
      G__125922 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__125922__0.call(this);
          case 1:
            return G__125922__1.call(this, x);
          case 2:
            return G__125922__2.call(this, x, y);
          case 3:
            return G__125922__3.call(this, x, y, z);
          default:
            return G__125922__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__125922.cljs$lang$maxFixedArity = 3;
      G__125922.cljs$lang$applyTo = G__125922__4.cljs$lang$applyTo;
      return G__125922;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__125925 = null;
      var G__125925__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__125925__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__125925__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__125925__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__125925__4 = function() {
        var G__125926__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__125926 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__125926__delegate.call(this, x, y, z, args);
        };
        G__125926.cljs$lang$maxFixedArity = 3;
        G__125926.cljs$lang$applyTo = function(arglist__125927) {
          var x = cljs.core.first(arglist__125927);
          arglist__125927 = cljs.core.next(arglist__125927);
          var y = cljs.core.first(arglist__125927);
          arglist__125927 = cljs.core.next(arglist__125927);
          var z = cljs.core.first(arglist__125927);
          var args = cljs.core.rest(arglist__125927);
          return G__125926__delegate(x, y, z, args);
        };
        G__125926.cljs$core$IFn$_invoke$arity$variadic = G__125926__delegate;
        return G__125926;
      }();
      G__125925 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__125925__0.call(this);
          case 1:
            return G__125925__1.call(this, x);
          case 2:
            return G__125925__2.call(this, x, y);
          case 3:
            return G__125925__3.call(this, x, y, z);
          default:
            return G__125925__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__125925.cljs$lang$maxFixedArity = 3;
      G__125925.cljs$lang$applyTo = G__125925__4.cljs$lang$applyTo;
      return G__125925;
    }();
  };
  var juxt__4 = function() {
    var G__125928__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__125929 = null;
        var G__125929__0 = function() {
          return cljs.core.reduce.call(null, function(p1__125909_SHARP_, p2__125910_SHARP_) {
            return cljs.core.conj.call(null, p1__125909_SHARP_, p2__125910_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__125929__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__125911_SHARP_, p2__125912_SHARP_) {
            return cljs.core.conj.call(null, p1__125911_SHARP_, p2__125912_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__125929__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__125913_SHARP_, p2__125914_SHARP_) {
            return cljs.core.conj.call(null, p1__125913_SHARP_, p2__125914_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__125929__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__125915_SHARP_, p2__125916_SHARP_) {
            return cljs.core.conj.call(null, p1__125915_SHARP_, p2__125916_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__125929__4 = function() {
          var G__125930__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__125917_SHARP_, p2__125918_SHARP_) {
              return cljs.core.conj.call(null, p1__125917_SHARP_, cljs.core.apply.call(null, p2__125918_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__125930 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__125930__delegate.call(this, x, y, z, args);
          };
          G__125930.cljs$lang$maxFixedArity = 3;
          G__125930.cljs$lang$applyTo = function(arglist__125931) {
            var x = cljs.core.first(arglist__125931);
            arglist__125931 = cljs.core.next(arglist__125931);
            var y = cljs.core.first(arglist__125931);
            arglist__125931 = cljs.core.next(arglist__125931);
            var z = cljs.core.first(arglist__125931);
            var args = cljs.core.rest(arglist__125931);
            return G__125930__delegate(x, y, z, args);
          };
          G__125930.cljs$core$IFn$_invoke$arity$variadic = G__125930__delegate;
          return G__125930;
        }();
        G__125929 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__125929__0.call(this);
            case 1:
              return G__125929__1.call(this, x);
            case 2:
              return G__125929__2.call(this, x, y);
            case 3:
              return G__125929__3.call(this, x, y, z);
            default:
              return G__125929__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__125929.cljs$lang$maxFixedArity = 3;
        G__125929.cljs$lang$applyTo = G__125929__4.cljs$lang$applyTo;
        return G__125929;
      }();
    };
    var G__125928 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__125928__delegate.call(this, f, g, h, fs);
    };
    G__125928.cljs$lang$maxFixedArity = 3;
    G__125928.cljs$lang$applyTo = function(arglist__125932) {
      var f = cljs.core.first(arglist__125932);
      arglist__125932 = cljs.core.next(arglist__125932);
      var g = cljs.core.first(arglist__125932);
      arglist__125932 = cljs.core.next(arglist__125932);
      var h = cljs.core.first(arglist__125932);
      var fs = cljs.core.rest(arglist__125932);
      return G__125928__delegate(f, g, h, fs);
    };
    G__125928.cljs$core$IFn$_invoke$arity$variadic = G__125928__delegate;
    return G__125928;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__125933 = cljs.core.next.call(null, coll);
        coll = G__125933;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__125934 = n - 1;
        var G__125935 = cljs.core.next.call(null, coll);
        n = G__125934;
        coll = G__125935;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__125937 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__125937, 0, null);
  var flags = cljs.core.nth.call(null, vec__125937, 1, null);
  var pattern = cljs.core.nth.call(null, vec__125937, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_125939 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_125940__$1 = cljs.core.next.call(null, coll);
      var n_125941 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_125940__$1 && (n_125941 == null || !(n_125941 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_125940__$1), writer, opts);
          var G__125942 = cljs.core.next.call(null, coll_125940__$1);
          var G__125943 = n_125941 - 1;
          coll_125940__$1 = G__125942;
          n_125941 = G__125943;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_125939;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__125948 = cljs.core.seq.call(null, ss);
    var chunk__125949 = null;
    var count__125950 = 0;
    var i__125951 = 0;
    while (true) {
      if (i__125951 < count__125950) {
        var s = cljs.core._nth.call(null, chunk__125949, i__125951);
        cljs.core._write.call(null, writer, s);
        var G__125952 = seq__125948;
        var G__125953 = chunk__125949;
        var G__125954 = count__125950;
        var G__125955 = i__125951 + 1;
        seq__125948 = G__125952;
        chunk__125949 = G__125953;
        count__125950 = G__125954;
        i__125951 = G__125955;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__125948);
        if (temp__4092__auto__) {
          var seq__125948__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__125948__$1)) {
            var c__4146__auto__ = cljs.core.chunk_first.call(null, seq__125948__$1);
            var G__125956 = cljs.core.chunk_rest.call(null, seq__125948__$1);
            var G__125957 = c__4146__auto__;
            var G__125958 = cljs.core.count.call(null, c__4146__auto__);
            var G__125959 = 0;
            seq__125948 = G__125956;
            chunk__125949 = G__125957;
            count__125950 = G__125958;
            i__125951 = G__125959;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__125948__$1);
            cljs.core._write.call(null, writer, s);
            var G__125960 = cljs.core.next.call(null, seq__125948__$1);
            var G__125961 = null;
            var G__125962 = 0;
            var G__125963 = 0;
            seq__125948 = G__125960;
            chunk__125949 = G__125961;
            count__125950 = G__125962;
            i__125951 = G__125963;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__125964) {
    var writer = cljs.core.first(arglist__125964);
    var ss = cljs.core.rest(arglist__125964);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj125966 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj125966;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3392__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3392__auto__)) {
            var and__3392__auto____$1 = function() {
              var G__125972 = obj;
              if (G__125972) {
                var bit__4048__auto__ = G__125972.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4048__auto__ || G__125972.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__125972.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__125972);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__125972);
              }
            }();
            if (and__3392__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3392__auto____$1;
            }
          } else {
            return and__3392__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__125973 = obj;
              if (G__125973) {
                var bit__4041__auto__ = G__125973.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4041__auto__ || G__125973.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__125975 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__125975;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__125974 = obj;
                              if (G__125974) {
                                var bit__4048__auto__ = G__125974.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4048__auto__ || G__125974.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__125974.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__125974);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__125974);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__125980 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__125981 = null;
  var count__125982 = 0;
  var i__125983 = 0;
  while (true) {
    if (i__125983 < count__125982) {
      var obj = cljs.core._nth.call(null, chunk__125981, i__125983);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__125984 = seq__125980;
      var G__125985 = chunk__125981;
      var G__125986 = count__125982;
      var G__125987 = i__125983 + 1;
      seq__125980 = G__125984;
      chunk__125981 = G__125985;
      count__125982 = G__125986;
      i__125983 = G__125987;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__125980);
      if (temp__4092__auto__) {
        var seq__125980__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__125980__$1)) {
          var c__4146__auto__ = cljs.core.chunk_first.call(null, seq__125980__$1);
          var G__125988 = cljs.core.chunk_rest.call(null, seq__125980__$1);
          var G__125989 = c__4146__auto__;
          var G__125990 = cljs.core.count.call(null, c__4146__auto__);
          var G__125991 = 0;
          seq__125980 = G__125988;
          chunk__125981 = G__125989;
          count__125982 = G__125990;
          i__125983 = G__125991;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__125980__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__125992 = cljs.core.next.call(null, seq__125980__$1);
          var G__125993 = null;
          var G__125994 = 0;
          var G__125995 = 0;
          seq__125980 = G__125992;
          chunk__125981 = G__125993;
          count__125982 = G__125994;
          i__125983 = G__125995;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__125996) {
    var objs = cljs.core.seq(arglist__125996);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__125997) {
    var objs = cljs.core.seq(arglist__125997);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__125998) {
    var objs = cljs.core.seq(arglist__125998);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__125999) {
    var objs = cljs.core.seq(arglist__125999);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__126000) {
    var objs = cljs.core.seq(arglist__126000);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__126001) {
    var objs = cljs.core.seq(arglist__126001);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__126002) {
    var objs = cljs.core.seq(arglist__126002);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__126003) {
    var objs = cljs.core.seq(arglist__126003);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__126004 = cljs.core.seq.call(null, self__.watches);
  var chunk__126005 = null;
  var count__126006 = 0;
  var i__126007 = 0;
  while (true) {
    if (i__126007 < count__126006) {
      var vec__126008 = cljs.core._nth.call(null, chunk__126005, i__126007);
      var key = cljs.core.nth.call(null, vec__126008, 0, null);
      var f = cljs.core.nth.call(null, vec__126008, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__126010 = seq__126004;
      var G__126011 = chunk__126005;
      var G__126012 = count__126006;
      var G__126013 = i__126007 + 1;
      seq__126004 = G__126010;
      chunk__126005 = G__126011;
      count__126006 = G__126012;
      i__126007 = G__126013;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__126004);
      if (temp__4092__auto__) {
        var seq__126004__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__126004__$1)) {
          var c__4146__auto__ = cljs.core.chunk_first.call(null, seq__126004__$1);
          var G__126014 = cljs.core.chunk_rest.call(null, seq__126004__$1);
          var G__126015 = c__4146__auto__;
          var G__126016 = cljs.core.count.call(null, c__4146__auto__);
          var G__126017 = 0;
          seq__126004 = G__126014;
          chunk__126005 = G__126015;
          count__126006 = G__126016;
          i__126007 = G__126017;
          continue;
        } else {
          var vec__126009 = cljs.core.first.call(null, seq__126004__$1);
          var key = cljs.core.nth.call(null, vec__126009, 0, null);
          var f = cljs.core.nth.call(null, vec__126009, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__126018 = cljs.core.next.call(null, seq__126004__$1);
          var G__126019 = null;
          var G__126020 = 0;
          var G__126021 = 0;
          seq__126004 = G__126018;
          chunk__126005 = G__126019;
          count__126006 = G__126020;
          i__126007 = G__126021;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__126025__delegate = function(x, p__126022) {
      var map__126024 = p__126022;
      var map__126024__$1 = cljs.core.seq_QMARK_.call(null, map__126024) ? cljs.core.apply.call(null, cljs.core.hash_map, map__126024) : map__126024;
      var validator = cljs.core.get.call(null, map__126024__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__126024__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__126025 = function(x, var_args) {
      var p__126022 = null;
      if (arguments.length > 1) {
        p__126022 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__126025__delegate.call(this, x, p__126022);
    };
    G__126025.cljs$lang$maxFixedArity = 1;
    G__126025.cljs$lang$applyTo = function(arglist__126026) {
      var x = cljs.core.first(arglist__126026);
      var p__126022 = cljs.core.rest(arglist__126026);
      return G__126025__delegate(x, p__126022);
    };
    G__126025.cljs$core$IFn$_invoke$arity$variadic = G__126025__delegate;
    return G__126025;
  }();
  atom = function(x, var_args) {
    var p__126022 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_126027 = a.validator;
  if (validate_126027 == null) {
  } else {
    if (cljs.core.truth_(validate_126027.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_126028 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_126028, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__126029__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__126029 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__126029__delegate.call(this, a, f, x, y, z, more);
    };
    G__126029.cljs$lang$maxFixedArity = 5;
    G__126029.cljs$lang$applyTo = function(arglist__126030) {
      var a = cljs.core.first(arglist__126030);
      arglist__126030 = cljs.core.next(arglist__126030);
      var f = cljs.core.first(arglist__126030);
      arglist__126030 = cljs.core.next(arglist__126030);
      var x = cljs.core.first(arglist__126030);
      arglist__126030 = cljs.core.next(arglist__126030);
      var y = cljs.core.first(arglist__126030);
      arglist__126030 = cljs.core.next(arglist__126030);
      var z = cljs.core.first(arglist__126030);
      var more = cljs.core.rest(arglist__126030);
      return G__126029__delegate(a, f, x, y, z, more);
    };
    G__126029.cljs$core$IFn$_invoke$arity$variadic = G__126029__delegate;
    return G__126029;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__126031) {
    var iref = cljs.core.first(arglist__126031);
    arglist__126031 = cljs.core.next(arglist__126031);
    var f = cljs.core.first(arglist__126031);
    var args = cljs.core.rest(arglist__126031);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__126032) {
    var map__126033 = p__126032;
    var map__126033__$1 = cljs.core.seq_QMARK_.call(null, map__126033) ? cljs.core.apply.call(null, cljs.core.hash_map, map__126033) : map__126033;
    var curr_state = map__126033__$1;
    var done = cljs.core.get.call(null, map__126033__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj126035 = {};
  return obj126035;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__126037 = k;
    if (G__126037) {
      var bit__4048__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3404__auto__ = bit__4048__auto__;
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          return G__126037.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__126037.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__126037);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__126037);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__126051 = x;
      if (G__126051) {
        var bit__4048__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3404__auto__ = bit__4048__auto__;
          if (cljs.core.truth_(or__3404__auto__)) {
            return or__3404__auto__;
          } else {
            return G__126051.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__126051.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__126051);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__126051);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj126053 = {};
              return obj126053;
            }();
            var seq__126054_126064 = cljs.core.seq.call(null, x);
            var chunk__126055_126065 = null;
            var count__126056_126066 = 0;
            var i__126057_126067 = 0;
            while (true) {
              if (i__126057_126067 < count__126056_126066) {
                var vec__126058_126068 = cljs.core._nth.call(null, chunk__126055_126065, i__126057_126067);
                var k_126069 = cljs.core.nth.call(null, vec__126058_126068, 0, null);
                var v_126070 = cljs.core.nth.call(null, vec__126058_126068, 1, null);
                m[cljs.core.key__GT_js.call(null, k_126069)] = clj__GT_js.call(null, v_126070);
                var G__126071 = seq__126054_126064;
                var G__126072 = chunk__126055_126065;
                var G__126073 = count__126056_126066;
                var G__126074 = i__126057_126067 + 1;
                seq__126054_126064 = G__126071;
                chunk__126055_126065 = G__126072;
                count__126056_126066 = G__126073;
                i__126057_126067 = G__126074;
                continue;
              } else {
                var temp__4092__auto___126075 = cljs.core.seq.call(null, seq__126054_126064);
                if (temp__4092__auto___126075) {
                  var seq__126054_126076__$1 = temp__4092__auto___126075;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__126054_126076__$1)) {
                    var c__4146__auto___126077 = cljs.core.chunk_first.call(null, seq__126054_126076__$1);
                    var G__126078 = cljs.core.chunk_rest.call(null, seq__126054_126076__$1);
                    var G__126079 = c__4146__auto___126077;
                    var G__126080 = cljs.core.count.call(null, c__4146__auto___126077);
                    var G__126081 = 0;
                    seq__126054_126064 = G__126078;
                    chunk__126055_126065 = G__126079;
                    count__126056_126066 = G__126080;
                    i__126057_126067 = G__126081;
                    continue;
                  } else {
                    var vec__126059_126082 = cljs.core.first.call(null, seq__126054_126076__$1);
                    var k_126083 = cljs.core.nth.call(null, vec__126059_126082, 0, null);
                    var v_126084 = cljs.core.nth.call(null, vec__126059_126082, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_126083)] = clj__GT_js.call(null, v_126084);
                    var G__126085 = cljs.core.next.call(null, seq__126054_126076__$1);
                    var G__126086 = null;
                    var G__126087 = 0;
                    var G__126088 = 0;
                    seq__126054_126064 = G__126085;
                    chunk__126055_126065 = G__126086;
                    count__126056_126066 = G__126087;
                    i__126057_126067 = G__126088;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__126060_126089 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__126061_126090 = null;
              var count__126062_126091 = 0;
              var i__126063_126092 = 0;
              while (true) {
                if (i__126063_126092 < count__126062_126091) {
                  var x_126093__$1 = cljs.core._nth.call(null, chunk__126061_126090, i__126063_126092);
                  arr.push(x_126093__$1);
                  var G__126094 = seq__126060_126089;
                  var G__126095 = chunk__126061_126090;
                  var G__126096 = count__126062_126091;
                  var G__126097 = i__126063_126092 + 1;
                  seq__126060_126089 = G__126094;
                  chunk__126061_126090 = G__126095;
                  count__126062_126091 = G__126096;
                  i__126063_126092 = G__126097;
                  continue;
                } else {
                  var temp__4092__auto___126098 = cljs.core.seq.call(null, seq__126060_126089);
                  if (temp__4092__auto___126098) {
                    var seq__126060_126099__$1 = temp__4092__auto___126098;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__126060_126099__$1)) {
                      var c__4146__auto___126100 = cljs.core.chunk_first.call(null, seq__126060_126099__$1);
                      var G__126101 = cljs.core.chunk_rest.call(null, seq__126060_126099__$1);
                      var G__126102 = c__4146__auto___126100;
                      var G__126103 = cljs.core.count.call(null, c__4146__auto___126100);
                      var G__126104 = 0;
                      seq__126060_126089 = G__126101;
                      chunk__126061_126090 = G__126102;
                      count__126062_126091 = G__126103;
                      i__126063_126092 = G__126104;
                      continue;
                    } else {
                      var x_126105__$1 = cljs.core.first.call(null, seq__126060_126099__$1);
                      arr.push(x_126105__$1);
                      var G__126106 = cljs.core.next.call(null, seq__126060_126099__$1);
                      var G__126107 = null;
                      var G__126108 = 0;
                      var G__126109 = 0;
                      seq__126060_126089 = G__126106;
                      chunk__126061_126090 = G__126107;
                      count__126062_126091 = G__126108;
                      i__126063_126092 = G__126109;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj126111 = {};
  return obj126111;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3392__auto__ = x;
    if (and__3392__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4025__auto__ = x == null ? null : x;
    return function() {
      var or__3404__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__126132__delegate = function(x, opts) {
      if (function() {
        var G__126122 = x;
        if (G__126122) {
          var bit__4048__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3404__auto__ = bit__4048__auto__;
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return G__126122.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__126122.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__126122);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__126122);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__126123 = opts;
          var map__126123__$1 = cljs.core.seq_QMARK_.call(null, map__126123) ? cljs.core.apply.call(null, cljs.core.hash_map, map__126123) : map__126123;
          var keywordize_keys = cljs.core.get.call(null, map__126123__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__126123, map__126123__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4115__auto__ = function(map__126123, map__126123__$1, keywordize_keys, keyfn) {
                          return function iter__126128(s__126129) {
                            return new cljs.core.LazySeq(null, function(map__126123, map__126123__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__126129__$1 = s__126129;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__126129__$1);
                                  if (temp__4092__auto__) {
                                    var s__126129__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__126129__$2)) {
                                      var c__4113__auto__ = cljs.core.chunk_first.call(null, s__126129__$2);
                                      var size__4114__auto__ = cljs.core.count.call(null, c__4113__auto__);
                                      var b__126131 = cljs.core.chunk_buffer.call(null, size__4114__auto__);
                                      if (function() {
                                        var i__126130 = 0;
                                        while (true) {
                                          if (i__126130 < size__4114__auto__) {
                                            var k = cljs.core._nth.call(null, c__4113__auto__, i__126130);
                                            cljs.core.chunk_append.call(null, b__126131, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__126133 = i__126130 + 1;
                                            i__126130 = G__126133;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__126131), iter__126128.call(null, cljs.core.chunk_rest.call(null, s__126129__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__126131), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__126129__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__126128.call(null, cljs.core.rest.call(null, s__126129__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__126123, map__126123__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__126123, map__126123__$1, keywordize_keys, keyfn);
                        return iter__4115__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__126123, map__126123__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__126132 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__126132__delegate.call(this, x, opts);
    };
    G__126132.cljs$lang$maxFixedArity = 1;
    G__126132.cljs$lang$applyTo = function(arglist__126134) {
      var x = cljs.core.first(arglist__126134);
      var opts = cljs.core.rest(arglist__126134);
      return G__126132__delegate(x, opts);
    };
    G__126132.cljs$core$IFn$_invoke$arity$variadic = G__126132__delegate;
    return G__126132;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__126135__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__126135 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__126135__delegate.call(this, args);
    };
    G__126135.cljs$lang$maxFixedArity = 0;
    G__126135.cljs$lang$applyTo = function(arglist__126136) {
      var args = cljs.core.seq(arglist__126136);
      return G__126135__delegate(args);
    };
    G__126135.cljs$core$IFn$_invoke$arity$variadic = G__126135__delegate;
    return G__126135;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__126137 = ret;
        f = G__126137;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__126138__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__126138 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__126138__delegate.call(this, f, args);
    };
    G__126138.cljs$lang$maxFixedArity = 1;
    G__126138.cljs$lang$applyTo = function(arglist__126139) {
      var f = cljs.core.first(arglist__126139);
      var args = cljs.core.rest(arglist__126139);
      return G__126138__delegate(f, args);
    };
    G__126138.cljs$core$IFn$_invoke$arity$variadic = G__126138__delegate;
    return G__126138;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__126140) {
    var f = cljs.core.first(arglist__126140);
    var args = cljs.core.rest(arglist__126140);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3404__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3404__auto__) {
      return or__3404__auto__;
    } else {
      var or__3404__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3404__auto____$1) {
        return or__3404__auto____$1;
      } else {
        var and__3392__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3392__auto__) {
          var and__3392__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3392__auto____$1) {
            var and__3392__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3392__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__126141 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__126142 = i + 1;
                  ret = G__126141;
                  i = G__126142;
                  continue;
                }
                break;
              }
            } else {
              return and__3392__auto____$2;
            }
          } else {
            return and__3392__auto____$1;
          }
        } else {
          return and__3392__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3404__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3404__auto__)) {
      return or__3404__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__126143_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__126143_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__126143_SHARP_), cljs.core.second.call(null, p1__126143_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__126144_SHARP_, p2__126145_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__126144_SHARP_, p2__126145_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3404__auto__ = cljs.core.truth_(function() {
    var and__3392__auto__ = xprefs;
    if (cljs.core.truth_(and__3392__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3392__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    var or__3404__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__126146 = cljs.core.rest.call(null, ps);
          ps = G__126146;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3404__auto____$1)) {
      return or__3404__auto____$1;
    } else {
      var or__3404__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__126147 = cljs.core.rest.call(null, ps);
            ps = G__126147;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3404__auto____$2)) {
        return or__3404__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3404__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__126150) {
    var vec__126151 = p__126150;
    var k = cljs.core.nth.call(null, vec__126151, 0, null);
    var _ = cljs.core.nth.call(null, vec__126151, 1, null);
    var e = vec__126151;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3404__auto__ = be == null;
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj126153 = {};
  return obj126153;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._reset[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._reset["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._add_method[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._add_method["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._remove_method[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._remove_method["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._prefer_method[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._get_method[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._get_method["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._methods[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._methods["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._prefers[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._prefers["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3392__auto__ = mf;
    if (and__3392__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4025__auto__ = mf == null ? null : mf;
    return function() {
      var or__3404__auto__ = cljs.core._dispatch[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core._dispatch["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__126154__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__126154 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__126154__delegate.call(this, _, args);
  };
  G__126154.cljs$lang$maxFixedArity = 1;
  G__126154.cljs$lang$applyTo = function(arglist__126155) {
    var _ = cljs.core.first(arglist__126155);
    var args = cljs.core.rest(arglist__126155);
    return G__126154__delegate(_, args);
  };
  G__126154.cljs$core$IFn$_invoke$arity$variadic = G__126154__delegate;
  return G__126154;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$ICloneable$ = true;
cljs.core.UUID.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.UUID(self__.uuid);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3969__auto__, writer__3970__auto__, opts__3971__auto__) {
  return cljs.core._write.call(null, writer__3970__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("cljs_uuid.core");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid.core.make_random = function make_random() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16);
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16);
  };
  return new cljs.core.UUID((new goog.string.StringBuffer(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null))).toString());
};
cljs_uuid.core.make_v4 = cljs_uuid.core.make_random;
cljs_uuid.core.make_random_string = function make_random_string() {
  return cljs_uuid.core.make_random.call(null).uuid;
};
goog.provide("chaperone.crossover.user");
goog.require("cljs.core");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.user.User = function(id, firstname, lastname, password, email, photo, last_logged_in, __meta, __extmap) {
  this.id = id;
  this.firstname = firstname;
  this.lastname = lastname;
  this.password = password;
  this.email = email;
  this.photo = photo;
  this.last_logged_in = last_logged_in;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 7) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3979__auto__) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, this__3979__auto____$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3984__auto__, k__3985__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3984__auto____$1, k__3985__auto__, null);
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3986__auto__, k128664, else__3987__auto__) {
  var self__ = this;
  var this__3986__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k128664, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k128664, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229))) {
      return self__.firstname;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k128664, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043))) {
        return self__.lastname;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k128664, new cljs.core.Keyword(null, "password", "password", 2230889997))) {
          return self__.password;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k128664, new cljs.core.Keyword(null, "email", "email", 1110523662))) {
            return self__.email;
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, k128664, new cljs.core.Keyword(null, "photo", "photo", 1120547236))) {
              return self__.photo;
            } else {
              if (cljs.core.keyword_identical_QMARK_.call(null, k128664, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907))) {
                return self__.last_logged_in;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return cljs.core.get.call(null, self__.__extmap, k128664, else__3987__auto__);
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3991__auto__, k__3992__auto__, G__128663) {
  var self__ = this;
  var this__3991__auto____$1 = this;
  var pred__128666 = cljs.core.keyword_identical_QMARK_;
  var expr__128667 = k__3992__auto__;
  if (cljs.core.truth_(pred__128666.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__128667))) {
    return new chaperone.crossover.user.User(G__128663, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__128666.call(null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), expr__128667))) {
      return new chaperone.crossover.user.User(self__.id, G__128663, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__128666.call(null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), expr__128667))) {
        return new chaperone.crossover.user.User(self__.id, self__.firstname, G__128663, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__128666.call(null, new cljs.core.Keyword(null, "password", "password", 2230889997), expr__128667))) {
          return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, G__128663, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__128666.call(null, new cljs.core.Keyword(null, "email", "email", 1110523662), expr__128667))) {
            return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, G__128663, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__128666.call(null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), expr__128667))) {
              return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, G__128663, self__.last_logged_in, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__128666.call(null, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), expr__128667))) {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, G__128663, self__.__meta, self__.__extmap, null);
              } else {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3992__auto__, G__128663), null);
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3998__auto__, writer__3999__auto__, opts__4000__auto__) {
  var self__ = this;
  var this__3998__auto____$1 = this;
  var pr_pair__4001__auto__ = function(keyval__4002__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, cljs.core.pr_writer, "", " ", "", opts__4000__auto__, keyval__4002__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, pr_pair__4001__auto__, "#chaperone.crossover.user.User{", ", ", "}", opts__4000__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3989__auto__, entry__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3990__auto__)) {
    return cljs.core._assoc.call(null, this__3989__auto____$1, cljs.core._nth.call(null, entry__3990__auto__, 0), cljs.core._nth.call(null, entry__3990__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3989__auto____$1, entry__3990__auto__);
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3996__auto__) {
  var self__ = this;
  var this__3996__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3988__auto__) {
  var self__ = this;
  var this__3988__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.user.User.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3980__auto__, other__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3392__auto__ = other__3981__auto__;
    if (cljs.core.truth_(and__3392__auto__)) {
      return this__3980__auto____$1.constructor === other__3981__auto__.constructor && cljs.core.equiv_map.call(null, this__3980__auto____$1, other__3981__auto__);
    } else {
      return and__3392__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3983__auto__, G__128663) {
  var self__ = this;
  var this__3983__auto____$1 = this;
  return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, G__128663, self__.__extmap, self__.__hash);
};
chaperone.crossover.user.User.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3982__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.user.User.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3993__auto__, k__3994__auto__) {
  var self__ = this;
  var this__3993__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), null, new cljs.core.Keyword(null, "email", "email", 1110523662), null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), null, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), null, new cljs.core.Keyword(null, "password", "password", 2230889997), null], null), null), k__3994__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3993__auto____$1), self__.__meta), k__3994__auto__);
  } else {
    return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3994__auto__)), null);
  }
};
chaperone.crossover.user.User.cljs$lang$type = true;
chaperone.crossover.user.User.cljs$lang$ctorPrSeq = function(this__4018__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.user/User");
};
chaperone.crossover.user.User.cljs$lang$ctorPrWriter = function(this__4018__auto__, writer__4019__auto__) {
  return cljs.core._write.call(null, writer__4019__auto__, "chaperone.crossover.user/User");
};
chaperone.crossover.user.__GT_User = function __GT_User(id, firstname, lastname, password, email, photo, last_logged_in) {
  return new chaperone.crossover.user.User(id, firstname, lastname, password, email, photo, last_logged_in);
};
chaperone.crossover.user.map__GT_User = function map__GT_User(G__128665) {
  return new chaperone.crossover.user.User((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__128665), (new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(G__128665), (new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(G__128665), (new cljs.core.Keyword(null, "password", "password", 2230889997)).cljs$core$IFn$_invoke$arity$1(G__128665), (new cljs.core.Keyword(null, "email", 
  "email", 1110523662)).cljs$core$IFn$_invoke$arity$1(G__128665), (new cljs.core.Keyword(null, "photo", "photo", 1120547236)).cljs$core$IFn$_invoke$arity$1(G__128665), (new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)).cljs$core$IFn$_invoke$arity$1(G__128665), null, cljs.core.dissoc.call(null, G__128665, new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), new cljs.core.Keyword(null, "lastname", "lastname", 
  3850225043), new cljs.core.Keyword(null, "password", "password", 2230889997), new cljs.core.Keyword(null, "email", "email", 1110523662), new cljs.core.Keyword(null, "photo", "photo", 1120547236), new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)));
};
chaperone.crossover.user.new_user = function() {
  var new_user__delegate = function(firstname, lastname, email, password, p__128669) {
    var map__128671 = p__128669;
    var map__128671__$1 = cljs.core.seq_QMARK_.call(null, map__128671) ? cljs.core.apply.call(null, cljs.core.hash_map, map__128671) : map__128671;
    var last_logged_in = cljs.core.get.call(null, map__128671__$1, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907));
    var photo = cljs.core.get.call(null, map__128671__$1, new cljs.core.Keyword(null, "photo", "photo", 1120547236));
    return chaperone.crossover.user.__GT_User.call(null, cljs_uuid.core.make_random_string.call(null), firstname, lastname, password, email, photo, last_logged_in);
  };
  var new_user = function(firstname, lastname, email, password, var_args) {
    var p__128669 = null;
    if (arguments.length > 4) {
      p__128669 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
    }
    return new_user__delegate.call(this, firstname, lastname, email, password, p__128669);
  };
  new_user.cljs$lang$maxFixedArity = 4;
  new_user.cljs$lang$applyTo = function(arglist__128672) {
    var firstname = cljs.core.first(arglist__128672);
    arglist__128672 = cljs.core.next(arglist__128672);
    var lastname = cljs.core.first(arglist__128672);
    arglist__128672 = cljs.core.next(arglist__128672);
    var email = cljs.core.first(arglist__128672);
    arglist__128672 = cljs.core.next(arglist__128672);
    var password = cljs.core.first(arglist__128672);
    var p__128669 = cljs.core.rest(arglist__128672);
    return new_user__delegate(firstname, lastname, email, password, p__128669);
  };
  new_user.cljs$core$IFn$_invoke$arity$variadic = new_user__delegate;
  return new_user;
}();
chaperone.crossover.user.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "chaperone.crossover.user.User", "chaperone.crossover.user.User", -826432028, null), chaperone.crossover.user.map__GT_User], null);
};
goog.provide("chaperone.crossover.rpc");
goog.require("cljs.core");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.rpc.Request = function(id, category, action, data, __meta, __extmap) {
  this.id = id;
  this.category = category;
  this.action = action;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3979__auto__) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, this__3979__auto____$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3984__auto__, k__3985__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3984__auto____$1, k__3985__auto__, null);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3986__auto__, k126157, else__3987__auto__) {
  var self__ = this;
  var this__3986__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k126157, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k126157, new cljs.core.Keyword(null, "category", "category", 1064415344))) {
      return self__.category;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k126157, new cljs.core.Keyword(null, "action", "action", 3885920680))) {
        return self__.action;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k126157, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
          return self__.data;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.get.call(null, self__.__extmap, k126157, else__3987__auto__);
          } else {
            return null;
          }
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3991__auto__, k__3992__auto__, G__126156) {
  var self__ = this;
  var this__3991__auto____$1 = this;
  var pred__126159 = cljs.core.keyword_identical_QMARK_;
  var expr__126160 = k__3992__auto__;
  if (cljs.core.truth_(pred__126159.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__126160))) {
    return new chaperone.crossover.rpc.Request(G__126156, self__.category, self__.action, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__126159.call(null, new cljs.core.Keyword(null, "category", "category", 1064415344), expr__126160))) {
      return new chaperone.crossover.rpc.Request(self__.id, G__126156, self__.action, self__.data, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__126159.call(null, new cljs.core.Keyword(null, "action", "action", 3885920680), expr__126160))) {
        return new chaperone.crossover.rpc.Request(self__.id, self__.category, G__126156, self__.data, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__126159.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__126160))) {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, G__126156, self__.__meta, self__.__extmap, null);
        } else {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3992__auto__, G__126156), null);
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3998__auto__, writer__3999__auto__, opts__4000__auto__) {
  var self__ = this;
  var this__3998__auto____$1 = this;
  var pr_pair__4001__auto__ = function(keyval__4002__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, cljs.core.pr_writer, "", " ", "", opts__4000__auto__, keyval__4002__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, pr_pair__4001__auto__, "#chaperone.crossover.rpc.Request{", ", ", "}", opts__4000__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3989__auto__, entry__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3990__auto__)) {
    return cljs.core._assoc.call(null, this__3989__auto____$1, cljs.core._nth.call(null, entry__3990__auto__, 0), cljs.core._nth.call(null, entry__3990__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3989__auto____$1, entry__3990__auto__);
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3996__auto__) {
  var self__ = this;
  var this__3996__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3988__auto__) {
  var self__ = this;
  var this__3988__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3980__auto__, other__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3392__auto__ = other__3981__auto__;
    if (cljs.core.truth_(and__3392__auto__)) {
      return this__3980__auto____$1.constructor === other__3981__auto__.constructor && cljs.core.equiv_map.call(null, this__3980__auto____$1, other__3981__auto__);
    } else {
      return and__3392__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3983__auto__, G__126156) {
  var self__ = this;
  var this__3983__auto____$1 = this;
  return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, G__126156, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3982__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3993__auto__, k__3994__auto__) {
  var self__ = this;
  var this__3993__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "action", "action", 3885920680), null, new cljs.core.Keyword(null, "id", "id", 1013907597), null, new cljs.core.Keyword(null, "category", "category", 1064415344), null], null), null), k__3994__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3993__auto____$1), self__.__meta), k__3994__auto__);
  } else {
    return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3994__auto__)), null);
  }
};
chaperone.crossover.rpc.Request.cljs$lang$type = true;
chaperone.crossover.rpc.Request.cljs$lang$ctorPrSeq = function(this__4018__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.Request.cljs$lang$ctorPrWriter = function(this__4018__auto__, writer__4019__auto__) {
  return cljs.core._write.call(null, writer__4019__auto__, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.__GT_Request = function __GT_Request(id, category, action, data) {
  return new chaperone.crossover.rpc.Request(id, category, action, data);
};
chaperone.crossover.rpc.map__GT_Request = function map__GT_Request(G__126158) {
  return new chaperone.crossover.rpc.Request((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__126158), (new cljs.core.Keyword(null, "category", "category", 1064415344)).cljs$core$IFn$_invoke$arity$1(G__126158), (new cljs.core.Keyword(null, "action", "action", 3885920680)).cljs$core$IFn$_invoke$arity$1(G__126158), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__126158), null, cljs.core.dissoc.call(null, G__126158, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), new cljs.core.Keyword(null, "category", "category", 1064415344), new cljs.core.Keyword(null, "action", "action", 3885920680), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.Response = function(request, data, __meta, __extmap) {
  this.request = request;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3979__auto__) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  var h__3815__auto__ = self__.__hash;
  if (!(h__3815__auto__ == null)) {
    return h__3815__auto__;
  } else {
    var h__3815__auto____$1 = cljs.core.hash_imap.call(null, this__3979__auto____$1);
    self__.__hash = h__3815__auto____$1;
    return h__3815__auto____$1;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3984__auto__, k__3985__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3984__auto____$1, k__3985__auto__, null);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3986__auto__, k126163, else__3987__auto__) {
  var self__ = this;
  var this__3986__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k126163, new cljs.core.Keyword(null, "request", "request", 2109597185))) {
    return self__.request;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k126163, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
      return self__.data;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k126163, else__3987__auto__);
      } else {
        return null;
      }
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3991__auto__, k__3992__auto__, G__126162) {
  var self__ = this;
  var this__3991__auto____$1 = this;
  var pred__126165 = cljs.core.keyword_identical_QMARK_;
  var expr__126166 = k__3992__auto__;
  if (cljs.core.truth_(pred__126165.call(null, new cljs.core.Keyword(null, "request", "request", 2109597185), expr__126166))) {
    return new chaperone.crossover.rpc.Response(G__126162, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__126165.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__126166))) {
      return new chaperone.crossover.rpc.Response(self__.request, G__126162, self__.__meta, self__.__extmap, null);
    } else {
      return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3992__auto__, G__126162), null);
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3998__auto__, writer__3999__auto__, opts__4000__auto__) {
  var self__ = this;
  var this__3998__auto____$1 = this;
  var pr_pair__4001__auto__ = function(keyval__4002__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, cljs.core.pr_writer, "", " ", "", opts__4000__auto__, keyval__4002__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3999__auto__, pr_pair__4001__auto__, "#chaperone.crossover.rpc.Response{", ", ", "}", opts__4000__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3989__auto__, entry__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3990__auto__)) {
    return cljs.core._assoc.call(null, this__3989__auto____$1, cljs.core._nth.call(null, entry__3990__auto__, 0), cljs.core._nth.call(null, entry__3990__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3989__auto____$1, entry__3990__auto__);
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3996__auto__) {
  var self__ = this;
  var this__3996__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3988__auto__) {
  var self__ = this;
  var this__3988__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3980__auto__, other__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3392__auto__ = other__3981__auto__;
    if (cljs.core.truth_(and__3392__auto__)) {
      return this__3980__auto____$1.constructor === other__3981__auto__.constructor && cljs.core.equiv_map.call(null, this__3980__auto____$1, other__3981__auto__);
    } else {
      return and__3392__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3983__auto__, G__126162) {
  var self__ = this;
  var this__3983__auto____$1 = this;
  return new chaperone.crossover.rpc.Response(self__.request, self__.data, G__126162, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3982__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3993__auto__, k__3994__auto__) {
  var self__ = this;
  var this__3993__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "request", "request", 2109597185), null], null), null), k__3994__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3993__auto____$1), self__.__meta), k__3994__auto__);
  } else {
    return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3994__auto__)), null);
  }
};
chaperone.crossover.rpc.Response.cljs$lang$type = true;
chaperone.crossover.rpc.Response.cljs$lang$ctorPrSeq = function(this__4018__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.Response.cljs$lang$ctorPrWriter = function(this__4018__auto__, writer__4019__auto__) {
  return cljs.core._write.call(null, writer__4019__auto__, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.__GT_Response = function __GT_Response(request, data) {
  return new chaperone.crossover.rpc.Response(request, data);
};
chaperone.crossover.rpc.map__GT_Response = function map__GT_Response(G__126164) {
  return new chaperone.crossover.rpc.Response((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(G__126164), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__126164), null, cljs.core.dissoc.call(null, G__126164, new cljs.core.Keyword(null, "request", "request", 2109597185), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.new_request = function new_request(category, action, data) {
  return chaperone.crossover.rpc.__GT_Request.call(null, cljs_uuid.core.make_random.call(null), category, action, data);
};
chaperone.crossover.rpc.new_response = function new_response(request, data) {
  return chaperone.crossover.rpc.__GT_Response.call(null, request, data);
};
chaperone.crossover.rpc.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "chaperone.crossover.rpc.Request", "chaperone.crossover.rpc.Request", -174529060, null), chaperone.crossover.rpc.map__GT_Request, new cljs.core.Symbol(null, "chaperone.crossover.rpc.Response", "chaperone.crossover.rpc.Response", 908805862, null), chaperone.crossover.rpc.map__GT_Response], null);
};
chaperone.crossover.rpc.all_edn_readers = function all_edn_readers() {
  return cljs.core.merge.call(null, chaperone.crossover.rpc.edn_readers.call(null), chaperone.crossover.user.edn_readers.call(null));
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj126169 = {};
  return obj126169;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3392__auto__ = reader;
    if (and__3392__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4025__auto__ = reader == null ? null : reader;
    return function() {
      var or__3404__auto__ = cljs.reader.read_char[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.reader.read_char["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3392__auto__ = reader;
    if (and__3392__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4025__auto__ = reader == null ? null : reader;
    return function() {
      var or__3404__auto__ = cljs.reader.unread[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.reader.unread["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3404__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__126170) {
    var rdr = cljs.core.first(arglist__126170);
    var msg = cljs.core.rest(arglist__126170);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3392__auto__ = !(ch === "#");
  if (and__3392__auto__) {
    var and__3392__auto____$1 = !(ch === "'");
    if (and__3392__auto____$1) {
      var and__3392__auto____$2 = !(ch === ":");
      if (and__3392__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3392__auto____$2;
      }
    } else {
      return and__3392__auto____$1;
    }
  } else {
    return and__3392__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__126171 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__126172 = cljs.reader.read_char.call(null, rdr);
      sb = G__126171;
      ch = G__126172;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__126173 = cljs.reader.read_char.call(null, rdr);
      ch = G__126173;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__126174 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__126174;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__126175 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__126175;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3404__auto__ = ch == null;
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3404__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__126176 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__126177 = cljs.reader.read_char.call(null, reader);
      buffer = G__126176;
      ch = G__126177;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__126178 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__126179 = cljs.reader.read_char.call(null, reader);
        buffer = G__126178;
        ch = G__126179;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__126180 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__126181 = cljs.reader.read_char.call(null, reader);
            buffer = G__126180;
            ch = G__126181;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__126183 = o;
    if (G__126183) {
      var bit__4048__auto__ = G__126183.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4048__auto__ || G__126183.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__126183.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__126183);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__126183);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__126184 = reader;
        var G__126185 = eof_is_error;
        var G__126186 = sentinel;
        var G__126187 = is_recursive;
        reader = G__126184;
        eof_is_error = G__126185;
        sentinel = G__126186;
        is_recursive = G__126187;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__126188 = cljs.reader.read_comment.call(null, reader, ch);
          var G__126189 = eof_is_error;
          var G__126190 = sentinel;
          var G__126191 = is_recursive;
          reader = G__126188;
          eof_is_error = G__126189;
          sentinel = G__126190;
          is_recursive = G__126191;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__126192 = reader;
              var G__126193 = eof_is_error;
              var G__126194 = sentinel;
              var G__126195 = is_recursive;
              reader = G__126192;
              eof_is_error = G__126193;
              sentinel = G__126194;
              is_recursive = G__126195;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__126196 = b.append("0");
            b = G__126196;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__126198 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__126198, 0, null);
  var years = cljs.core.nth.call(null, vec__126198, 1, null);
  var months = cljs.core.nth.call(null, vec__126198, 2, null);
  var days = cljs.core.nth.call(null, vec__126198, 3, null);
  var hours = cljs.core.nth.call(null, vec__126198, 4, null);
  var minutes = cljs.core.nth.call(null, vec__126198, 5, null);
  var seconds = cljs.core.nth.call(null, vec__126198, 6, null);
  var fraction = cljs.core.nth.call(null, vec__126198, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__126198, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__126198, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__126198, 10, null);
  var v = vec__126198;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3404__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3404__auto__)) {
        return or__3404__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__126200 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__126200, 0, null);
    var months = cljs.core.nth.call(null, vec__126200, 1, null);
    var days = cljs.core.nth.call(null, vec__126200, 2, null);
    var hours = cljs.core.nth.call(null, vec__126200, 3, null);
    var minutes = cljs.core.nth.call(null, vec__126200, 4, null);
    var seconds = cljs.core.nth.call(null, vec__126200, 5, null);
    var ms = cljs.core.nth.call(null, vec__126200, 6, null);
    var offset = cljs.core.nth.call(null, vec__126200, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__126213_126225 = cljs.core.seq.call(null, form);
    var chunk__126214_126226 = null;
    var count__126215_126227 = 0;
    var i__126216_126228 = 0;
    while (true) {
      if (i__126216_126228 < count__126215_126227) {
        var x_126229 = cljs.core._nth.call(null, chunk__126214_126226, i__126216_126228);
        arr.push(x_126229);
        var G__126230 = seq__126213_126225;
        var G__126231 = chunk__126214_126226;
        var G__126232 = count__126215_126227;
        var G__126233 = i__126216_126228 + 1;
        seq__126213_126225 = G__126230;
        chunk__126214_126226 = G__126231;
        count__126215_126227 = G__126232;
        i__126216_126228 = G__126233;
        continue;
      } else {
        var temp__4092__auto___126234 = cljs.core.seq.call(null, seq__126213_126225);
        if (temp__4092__auto___126234) {
          var seq__126213_126235__$1 = temp__4092__auto___126234;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__126213_126235__$1)) {
            var c__4146__auto___126236 = cljs.core.chunk_first.call(null, seq__126213_126235__$1);
            var G__126237 = cljs.core.chunk_rest.call(null, seq__126213_126235__$1);
            var G__126238 = c__4146__auto___126236;
            var G__126239 = cljs.core.count.call(null, c__4146__auto___126236);
            var G__126240 = 0;
            seq__126213_126225 = G__126237;
            chunk__126214_126226 = G__126238;
            count__126215_126227 = G__126239;
            i__126216_126228 = G__126240;
            continue;
          } else {
            var x_126241 = cljs.core.first.call(null, seq__126213_126235__$1);
            arr.push(x_126241);
            var G__126242 = cljs.core.next.call(null, seq__126213_126235__$1);
            var G__126243 = null;
            var G__126244 = 0;
            var G__126245 = 0;
            seq__126213_126225 = G__126242;
            chunk__126214_126226 = G__126243;
            count__126215_126227 = G__126244;
            i__126216_126228 = G__126245;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj126218 = {};
        return obj126218;
      }();
      var seq__126219_126246 = cljs.core.seq.call(null, form);
      var chunk__126220_126247 = null;
      var count__126221_126248 = 0;
      var i__126222_126249 = 0;
      while (true) {
        if (i__126222_126249 < count__126221_126248) {
          var vec__126223_126250 = cljs.core._nth.call(null, chunk__126220_126247, i__126222_126249);
          var k_126251 = cljs.core.nth.call(null, vec__126223_126250, 0, null);
          var v_126252 = cljs.core.nth.call(null, vec__126223_126250, 1, null);
          obj[cljs.core.name.call(null, k_126251)] = v_126252;
          var G__126253 = seq__126219_126246;
          var G__126254 = chunk__126220_126247;
          var G__126255 = count__126221_126248;
          var G__126256 = i__126222_126249 + 1;
          seq__126219_126246 = G__126253;
          chunk__126220_126247 = G__126254;
          count__126221_126248 = G__126255;
          i__126222_126249 = G__126256;
          continue;
        } else {
          var temp__4092__auto___126257 = cljs.core.seq.call(null, seq__126219_126246);
          if (temp__4092__auto___126257) {
            var seq__126219_126258__$1 = temp__4092__auto___126257;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__126219_126258__$1)) {
              var c__4146__auto___126259 = cljs.core.chunk_first.call(null, seq__126219_126258__$1);
              var G__126260 = cljs.core.chunk_rest.call(null, seq__126219_126258__$1);
              var G__126261 = c__4146__auto___126259;
              var G__126262 = cljs.core.count.call(null, c__4146__auto___126259);
              var G__126263 = 0;
              seq__126219_126246 = G__126260;
              chunk__126220_126247 = G__126261;
              count__126221_126248 = G__126262;
              i__126222_126249 = G__126263;
              continue;
            } else {
              var vec__126224_126264 = cljs.core.first.call(null, seq__126219_126258__$1);
              var k_126265 = cljs.core.nth.call(null, vec__126224_126264, 0, null);
              var v_126266 = cljs.core.nth.call(null, vec__126224_126264, 1, null);
              obj[cljs.core.name.call(null, k_126265)] = v_126266;
              var G__126267 = cljs.core.next.call(null, seq__126219_126258__$1);
              var G__126268 = null;
              var G__126269 = 0;
              var G__126270 = 0;
              seq__126219_126246 = G__126267;
              chunk__126220_126247 = G__126268;
              count__126221_126248 = G__126269;
              i__126222_126249 = G__126270;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj128209 = {};
  return obj128209;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3392__auto__ = port;
    if (and__3392__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4025__auto__ = port == null ? null : port;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj128211 = {};
  return obj128211;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3392__auto__ = port;
    if (and__3392__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4025__auto__ = port == null ? null : port;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj128213 = {};
  return obj128213;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3392__auto__ = chan;
    if (and__3392__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4025__auto__ = chan == null ? null : chan;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj128215 = {};
  return obj128215;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3392__auto__ = h;
    if (and__3392__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4025__auto__ = h == null ? null : h;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3392__auto__ = h;
    if (and__3392__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4025__auto__ = h == null ? null : h;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj128217 = {};
  return obj128217;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3392__auto__ = b;
    if (and__3392__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4025__auto__ = b == null ? null : b;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3392__auto__ = b;
    if (and__3392__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4025__auto__ = b == null ? null : b;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3392__auto__ = b;
    if (and__3392__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4025__auto__ = b == null ? null : b;
    return function() {
      var or__3404__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t128235 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t128235 = function(f, fn_handler, meta128236) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta128236 = meta128236;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t128235.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t128235.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t128235";
    cljs.core.async.impl.ioc_helpers.t128235.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.ioc-helpers/t128235");
    };
    cljs.core.async.impl.ioc_helpers.t128235.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t128235.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t128235.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t128235.prototype.cljs$core$IMeta$_meta$arity$1 = function(_128237) {
      var self__ = this;
      var _128237__$1 = this;
      return self__.meta128236;
    };
    cljs.core.async.impl.ioc_helpers.t128235.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_128237, meta128236__$1) {
      var self__ = this;
      var _128237__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t128235(self__.f, self__.fn_handler, meta128236__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t128235 = function __GT_t128235(f__$1, fn_handler__$1, meta128236) {
      return new cljs.core.async.impl.ioc_helpers.t128235(f__$1, fn_handler__$1, meta128236);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t128235(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e128239) {
    if (e128239 instanceof Object) {
      var ex = e128239;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e128239;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_128242_128244 = state;
    statearr_128242_128244[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_128242_128244[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_128243_128245 = state;
    statearr_128243_128245[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_128243_128245[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_128248_128250 = state;
    statearr_128248_128250[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_128248_128250[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_128249_128251 = state;
    statearr_128249_128251[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_128249_128251[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__128252) {
    var map__128257 = p__128252;
    var map__128257__$1 = cljs.core.seq_QMARK_.call(null, map__128257) ? cljs.core.apply.call(null, cljs.core.hash_map, map__128257) : map__128257;
    var opts = map__128257__$1;
    var statearr_128258_128261 = state;
    statearr_128258_128261[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_128259_128262 = state;
      statearr_128259_128262[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_128260_128263 = state;
      statearr_128260_128263[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__128252 = null;
    if (arguments.length > 3) {
      p__128252 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__128252);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__128264) {
    var state = cljs.core.first(arglist__128264);
    arglist__128264 = cljs.core.next(arglist__128264);
    var cont_block = cljs.core.first(arglist__128264);
    arglist__128264 = cljs.core.next(arglist__128264);
    var ports = cljs.core.first(arglist__128264);
    var p__128252 = cljs.core.rest(arglist__128264);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__128252);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__128229 = cnt + 1;
      cnt = G__128229;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4246__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4246__auto__) {
      var v_128230 = this$.pop();
      if (keep_QMARK_.call(null, v_128230)) {
        this$.unshift(v_128230);
      } else {
      }
      var G__128231 = x + 1;
      x = G__128231;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_128218 = 0;
  while (true) {
    var m_128219 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_128219 == null) {
    } else {
      m_128219.call(null);
      if (count_128218 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__128220 = count_128218 + 1;
        count_128218 = G__128220;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3392__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3392__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3392__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t128224 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t128224 = function(val, box, meta128225) {
      this.val = val;
      this.box = box;
      this.meta128225 = meta128225;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t128224.cljs$lang$type = true;
    cljs.core.async.impl.channels.t128224.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t128224";
    cljs.core.async.impl.channels.t128224.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.channels/t128224");
    };
    cljs.core.async.impl.channels.t128224.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t128224.prototype.cljs$core$IMeta$_meta$arity$1 = function(_128226) {
      var self__ = this;
      var _128226__$1 = this;
      return self__.meta128225;
    };
    cljs.core.async.impl.channels.t128224.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_128226, meta128225__$1) {
      var self__ = this;
      var _128226__$1 = this;
      return new cljs.core.async.impl.channels.t128224(self__.val, self__.box, meta128225__$1);
    };
    cljs.core.async.impl.channels.__GT_t128224 = function __GT_t128224(val__$1, box__$1, meta128225) {
      return new cljs.core.async.impl.channels.t128224(val__$1, box__$1, meta128225);
    };
  }
  return new cljs.core.async.impl.channels.t128224(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3969__auto__, writer__3970__auto__, opts__3971__auto__) {
  return cljs.core._write.call(null, writer__3970__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_128227 = self__.takes.pop();
      if (taker_128227 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_128227)) {
          var take_cb_128228 = cljs.core.async.impl.protocols.commit.call(null, taker_128227);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_128228, taker_128227) {
            return function() {
              return take_cb_128228.call(null, null);
            };
          }(take_cb_128228, taker_128227));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__128184 = level + 1;
        level = G__128184;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_128185 = 0;
    while (true) {
      if (i_128185 < arr.length) {
        arr[i_128185] = null;
        var G__128186 = i_128185 + 1;
        i_128185 = G__128186;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__128187 = x_SINGLEQUOTE_;
                x__$1 = G__128187;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__128188 = x__$1;
        var G__128189 = k;
        var G__128190 = level - 1;
        var G__128191 = update;
        x = G__128188;
        k = G__128189;
        level = G__128190;
        update = G__128191;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
  return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_128192 = self__.level + 1;
      while (true) {
        if (i_128192 <= new_level + 1) {
          update[i_128192] = self__.header;
          var G__128193 = i_128192 + 1;
          i_128192 = G__128193;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_128194 = 0;
    while (true) {
      if (i_128194 <= self__.level) {
        var links_128195 = update[i_128194].forward;
        if (links_128195[i_128194] === x__$1) {
          links_128195[i_128194] = x__$1.forward[i_128194];
          var G__128196 = i_128194 + 1;
          i_128194 = G__128196;
          continue;
        } else {
          var G__128197 = i_128194 + 1;
          i_128194 = G__128197;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__128198 = x_SINGLEQUOTE_;
              x__$1 = G__128198;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__128199 = nx;
        var G__128200 = level__$1 - 1;
        x = G__128199;
        level__$1 = G__128200;
        continue;
      } else {
        var G__128201 = x;
        var G__128202 = level__$1 - 1;
        x = G__128201;
        level__$1 = G__128202;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__128203 = x_SINGLEQUOTE_;
              x__$1 = G__128203;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__128204 = nx;
        var G__128205 = level__$1 - 1;
        x = G__128204;
        level__$1 = G__128205;
        continue;
      } else {
        var G__128206 = x;
        var G__128207 = level__$1 - 1;
        x = G__128206;
        level__$1 = G__128207;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3404__auto__ = cljs.core.truth_(function() {
    var and__3392__auto__ = me;
    if (cljs.core.truth_(and__3392__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3392__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t126274 !== "undefined") {
  } else {
    cljs.core.async.t126274 = function(f, fn_handler, meta126275) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta126275 = meta126275;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t126274.cljs$lang$type = true;
    cljs.core.async.t126274.cljs$lang$ctorStr = "cljs.core.async/t126274";
    cljs.core.async.t126274.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t126274");
    };
    cljs.core.async.t126274.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t126274.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t126274.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t126274.prototype.cljs$core$IMeta$_meta$arity$1 = function(_126276) {
      var self__ = this;
      var _126276__$1 = this;
      return self__.meta126275;
    };
    cljs.core.async.t126274.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_126276, meta126275__$1) {
      var self__ = this;
      var _126276__$1 = this;
      return new cljs.core.async.t126274(self__.f, self__.fn_handler, meta126275__$1);
    };
    cljs.core.async.__GT_t126274 = function __GT_t126274(f__$1, fn_handler__$1, meta126275) {
      return new cljs.core.async.t126274(f__$1, fn_handler__$1, meta126275);
    };
  }
  return new cljs.core.async.t126274(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_126277 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_126277);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_126277);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3392__auto__ = ret;
      if (cljs.core.truth_(and__3392__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3392__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4246__auto___126278 = n;
  var x_126279 = 0;
  while (true) {
    if (x_126279 < n__4246__auto___126278) {
      a[x_126279] = 0;
      var G__126280 = x_126279 + 1;
      x_126279 = G__126280;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__126281 = i + 1;
      i = G__126281;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t126285 !== "undefined") {
  } else {
    cljs.core.async.t126285 = function(flag, alt_flag, meta126286) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta126286 = meta126286;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t126285.cljs$lang$type = true;
    cljs.core.async.t126285.cljs$lang$ctorStr = "cljs.core.async/t126285";
    cljs.core.async.t126285.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t126285");
    };
    cljs.core.async.t126285.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t126285.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t126285.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t126285.prototype.cljs$core$IMeta$_meta$arity$1 = function(_126287) {
      var self__ = this;
      var _126287__$1 = this;
      return self__.meta126286;
    };
    cljs.core.async.t126285.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_126287, meta126286__$1) {
      var self__ = this;
      var _126287__$1 = this;
      return new cljs.core.async.t126285(self__.flag, self__.alt_flag, meta126286__$1);
    };
    cljs.core.async.__GT_t126285 = function __GT_t126285(flag__$1, alt_flag__$1, meta126286) {
      return new cljs.core.async.t126285(flag__$1, alt_flag__$1, meta126286);
    };
  }
  return new cljs.core.async.t126285(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t126291 !== "undefined") {
  } else {
    cljs.core.async.t126291 = function(cb, flag, alt_handler, meta126292) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta126292 = meta126292;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t126291.cljs$lang$type = true;
    cljs.core.async.t126291.cljs$lang$ctorStr = "cljs.core.async/t126291";
    cljs.core.async.t126291.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t126291");
    };
    cljs.core.async.t126291.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t126291.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t126291.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t126291.prototype.cljs$core$IMeta$_meta$arity$1 = function(_126293) {
      var self__ = this;
      var _126293__$1 = this;
      return self__.meta126292;
    };
    cljs.core.async.t126291.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_126293, meta126292__$1) {
      var self__ = this;
      var _126293__$1 = this;
      return new cljs.core.async.t126291(self__.cb, self__.flag, self__.alt_handler, meta126292__$1);
    };
    cljs.core.async.__GT_t126291 = function __GT_t126291(cb__$1, flag__$1, alt_handler__$1, meta126292) {
      return new cljs.core.async.t126291(cb__$1, flag__$1, alt_handler__$1, meta126292);
    };
  }
  return new cljs.core.async.t126291(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__126294_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__126294_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3404__auto__ = wport;
            if (cljs.core.truth_(or__3404__auto__)) {
              return or__3404__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__126295 = i + 1;
          i = G__126295;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3404__auto__ = ret;
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3392__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3392__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3392__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__126296) {
    var map__126298 = p__126296;
    var map__126298__$1 = cljs.core.seq_QMARK_.call(null, map__126298) ? cljs.core.apply.call(null, cljs.core.hash_map, map__126298) : map__126298;
    var opts = map__126298__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__126296 = null;
    if (arguments.length > 1) {
      p__126296 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__126296);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__126299) {
    var ports = cljs.core.first(arglist__126299);
    var p__126296 = cljs.core.rest(arglist__126299);
    return alts_BANG___delegate(ports, p__126296);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t126307 !== "undefined") {
  } else {
    cljs.core.async.t126307 = function(ch, f, map_LT_, meta126308) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta126308 = meta126308;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t126307.cljs$lang$type = true;
    cljs.core.async.t126307.cljs$lang$ctorStr = "cljs.core.async/t126307";
    cljs.core.async.t126307.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t126307");
    };
    cljs.core.async.t126307.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t126307.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t126307.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t126307.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t126310 !== "undefined") {
        } else {
          cljs.core.async.t126310 = function(fn1, _, meta126308, ch, f, map_LT_, meta126311) {
            this.fn1 = fn1;
            this._ = _;
            this.meta126308 = meta126308;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta126311 = meta126311;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t126310.cljs$lang$type = true;
          cljs.core.async.t126310.cljs$lang$ctorStr = "cljs.core.async/t126310";
          cljs.core.async.t126310.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
            return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t126310");
          };
          cljs.core.async.t126310.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t126310.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t126310.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t126310.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__126300_SHARP_) {
                return f1.call(null, p1__126300_SHARP_ == null ? null : self__.f.call(null, p1__126300_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t126310.prototype.cljs$core$IMeta$_meta$arity$1 = function(_126312) {
            var self__ = this;
            var _126312__$1 = this;
            return self__.meta126311;
          };
          cljs.core.async.t126310.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_126312, meta126311__$1) {
            var self__ = this;
            var _126312__$1 = this;
            return new cljs.core.async.t126310(self__.fn1, self__._, self__.meta126308, self__.ch, self__.f, self__.map_LT_, meta126311__$1);
          };
          cljs.core.async.__GT_t126310 = function __GT_t126310(fn1__$1, ___$2, meta126308__$1, ch__$2, f__$2, map_LT___$2, meta126311) {
            return new cljs.core.async.t126310(fn1__$1, ___$2, meta126308__$1, ch__$2, f__$2, map_LT___$2, meta126311);
          };
        }
        return new cljs.core.async.t126310(fn1, ___$1, self__.meta126308, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3392__auto__ = ret;
        if (cljs.core.truth_(and__3392__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3392__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t126307.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t126307.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t126307.prototype.cljs$core$IMeta$_meta$arity$1 = function(_126309) {
      var self__ = this;
      var _126309__$1 = this;
      return self__.meta126308;
    };
    cljs.core.async.t126307.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_126309, meta126308__$1) {
      var self__ = this;
      var _126309__$1 = this;
      return new cljs.core.async.t126307(self__.ch, self__.f, self__.map_LT_, meta126308__$1);
    };
    cljs.core.async.__GT_t126307 = function __GT_t126307(ch__$1, f__$1, map_LT___$1, meta126308) {
      return new cljs.core.async.t126307(ch__$1, f__$1, map_LT___$1, meta126308);
    };
  }
  return new cljs.core.async.t126307(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t126316 !== "undefined") {
  } else {
    cljs.core.async.t126316 = function(ch, f, map_GT_, meta126317) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta126317 = meta126317;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t126316.cljs$lang$type = true;
    cljs.core.async.t126316.cljs$lang$ctorStr = "cljs.core.async/t126316";
    cljs.core.async.t126316.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t126316");
    };
    cljs.core.async.t126316.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t126316.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t126316.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t126316.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t126316.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t126316.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t126316.prototype.cljs$core$IMeta$_meta$arity$1 = function(_126318) {
      var self__ = this;
      var _126318__$1 = this;
      return self__.meta126317;
    };
    cljs.core.async.t126316.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_126318, meta126317__$1) {
      var self__ = this;
      var _126318__$1 = this;
      return new cljs.core.async.t126316(self__.ch, self__.f, self__.map_GT_, meta126317__$1);
    };
    cljs.core.async.__GT_t126316 = function __GT_t126316(ch__$1, f__$1, map_GT___$1, meta126317) {
      return new cljs.core.async.t126316(ch__$1, f__$1, map_GT___$1, meta126317);
    };
  }
  return new cljs.core.async.t126316(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t126322 !== "undefined") {
  } else {
    cljs.core.async.t126322 = function(ch, p, filter_GT_, meta126323) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta126323 = meta126323;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t126322.cljs$lang$type = true;
    cljs.core.async.t126322.cljs$lang$ctorStr = "cljs.core.async/t126322";
    cljs.core.async.t126322.cljs$lang$ctorPrWriter = function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
      return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t126322");
    };
    cljs.core.async.t126322.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t126322.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t126322.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t126322.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t126322.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t126322.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t126322.prototype.cljs$core$IMeta$_meta$arity$1 = function(_126324) {
      var self__ = this;
      var _126324__$1 = this;
      return self__.meta126323;
    };
    cljs.core.async.t126322.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_126324, meta126323__$1) {
      var self__ = this;
      var _126324__$1 = this;
      return new cljs.core.async.t126322(self__.ch, self__.p, self__.filter_GT_, meta126323__$1);
    };
    cljs.core.async.__GT_t126322 = function __GT_t126322(ch__$1, p__$1, filter_GT___$1, meta126323) {
      return new cljs.core.async.t126322(ch__$1, p__$1, filter_GT___$1, meta126323);
    };
  }
  return new cljs.core.async.t126322(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5882__auto___126399 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_126382) {
          var state_val_126383 = state_126382[1];
          if (state_val_126383 === 1) {
            var state_126382__$1 = state_126382;
            var statearr_126384_126400 = state_126382__$1;
            statearr_126384_126400[2] = null;
            statearr_126384_126400[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_126383 === 2) {
              var state_126382__$1 = state_126382;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_126382__$1, 4, ch);
            } else {
              if (state_val_126383 === 3) {
                var inst_126380 = state_126382[2];
                var state_126382__$1 = state_126382;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_126382__$1, inst_126380);
              } else {
                if (state_val_126383 === 4) {
                  var inst_126364 = state_126382[5];
                  var inst_126364__$1 = state_126382[2];
                  var inst_126365 = inst_126364__$1 == null;
                  var state_126382__$1 = function() {
                    var statearr_126385 = state_126382;
                    statearr_126385[5] = inst_126364__$1;
                    return statearr_126385;
                  }();
                  if (cljs.core.truth_(inst_126365)) {
                    var statearr_126386_126401 = state_126382__$1;
                    statearr_126386_126401[1] = 5;
                  } else {
                    var statearr_126387_126402 = state_126382__$1;
                    statearr_126387_126402[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_126383 === 5) {
                    var inst_126367 = cljs.core.async.close_BANG_.call(null, out);
                    var state_126382__$1 = state_126382;
                    var statearr_126388_126403 = state_126382__$1;
                    statearr_126388_126403[2] = inst_126367;
                    statearr_126388_126403[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_126383 === 6) {
                      var inst_126364 = state_126382[5];
                      var inst_126369 = p.call(null, inst_126364);
                      var state_126382__$1 = state_126382;
                      if (cljs.core.truth_(inst_126369)) {
                        var statearr_126389_126404 = state_126382__$1;
                        statearr_126389_126404[1] = 8;
                      } else {
                        var statearr_126390_126405 = state_126382__$1;
                        statearr_126390_126405[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_126383 === 7) {
                        var inst_126378 = state_126382[2];
                        var state_126382__$1 = state_126382;
                        var statearr_126391_126406 = state_126382__$1;
                        statearr_126391_126406[2] = inst_126378;
                        statearr_126391_126406[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_126383 === 8) {
                          var inst_126364 = state_126382[5];
                          var state_126382__$1 = state_126382;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_126382__$1, 11, out, inst_126364);
                        } else {
                          if (state_val_126383 === 9) {
                            var state_126382__$1 = state_126382;
                            var statearr_126392_126407 = state_126382__$1;
                            statearr_126392_126407[2] = null;
                            statearr_126392_126407[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_126383 === 10) {
                              var inst_126375 = state_126382[2];
                              var state_126382__$1 = function() {
                                var statearr_126393 = state_126382;
                                statearr_126393[6] = inst_126375;
                                return statearr_126393;
                              }();
                              var statearr_126394_126408 = state_126382__$1;
                              statearr_126394_126408[2] = null;
                              statearr_126394_126408[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_126383 === 11) {
                                var inst_126372 = state_126382[2];
                                var state_126382__$1 = state_126382;
                                var statearr_126395_126409 = state_126382__$1;
                                statearr_126395_126409[2] = inst_126372;
                                statearr_126395_126409[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_126397 = [null, null, null, null, null, null, null];
              statearr_126397[0] = state_machine__5833__auto__;
              statearr_126397[1] = 1;
              return statearr_126397;
            };
            var state_machine__5833__auto____1 = function(state_126382) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_126382);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_126382) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_126382);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_126398 = f__5883__auto__.call(null);
        statearr_126398[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___126399;
        return statearr_126398;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_126557) {
        var state_val_126558 = state_126557[1];
        if (state_val_126558 === 1) {
          var state_126557__$1 = state_126557;
          var statearr_126559_126592 = state_126557__$1;
          statearr_126559_126592[2] = null;
          statearr_126559_126592[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_126558 === 2) {
            var state_126557__$1 = state_126557;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_126557__$1, 4, in$);
          } else {
            if (state_val_126558 === 3) {
              var inst_126555 = state_126557[2];
              var state_126557__$1 = state_126557;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_126557__$1, inst_126555);
            } else {
              if (state_val_126558 === 4) {
                var inst_126503 = state_126557[5];
                var inst_126503__$1 = state_126557[2];
                var inst_126504 = inst_126503__$1 == null;
                var state_126557__$1 = function() {
                  var statearr_126560 = state_126557;
                  statearr_126560[5] = inst_126503__$1;
                  return statearr_126560;
                }();
                if (cljs.core.truth_(inst_126504)) {
                  var statearr_126561_126593 = state_126557__$1;
                  statearr_126561_126593[1] = 5;
                } else {
                  var statearr_126562_126594 = state_126557__$1;
                  statearr_126562_126594[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_126558 === 5) {
                  var inst_126506 = cljs.core.async.close_BANG_.call(null, out);
                  var state_126557__$1 = state_126557;
                  var statearr_126563_126595 = state_126557__$1;
                  statearr_126563_126595[2] = inst_126506;
                  statearr_126563_126595[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_126558 === 6) {
                    var inst_126503 = state_126557[5];
                    var inst_126508 = f.call(null, inst_126503);
                    var inst_126513 = cljs.core.seq.call(null, inst_126508);
                    var inst_126514 = inst_126513;
                    var inst_126515 = null;
                    var inst_126516 = 0;
                    var inst_126517 = 0;
                    var state_126557__$1 = function() {
                      var statearr_126564 = state_126557;
                      statearr_126564[6] = inst_126514;
                      statearr_126564[7] = inst_126515;
                      statearr_126564[8] = inst_126516;
                      statearr_126564[9] = inst_126517;
                      return statearr_126564;
                    }();
                    var statearr_126565_126596 = state_126557__$1;
                    statearr_126565_126596[2] = null;
                    statearr_126565_126596[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_126558 === 7) {
                      var inst_126553 = state_126557[2];
                      var state_126557__$1 = state_126557;
                      var statearr_126566_126597 = state_126557__$1;
                      statearr_126566_126597[2] = inst_126553;
                      statearr_126566_126597[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_126558 === 8) {
                        var inst_126516 = state_126557[8];
                        var inst_126517 = state_126557[9];
                        var inst_126519 = inst_126517 < inst_126516;
                        var inst_126520 = inst_126519;
                        var state_126557__$1 = state_126557;
                        if (cljs.core.truth_(inst_126520)) {
                          var statearr_126567_126598 = state_126557__$1;
                          statearr_126567_126598[1] = 10;
                        } else {
                          var statearr_126568_126599 = state_126557__$1;
                          statearr_126568_126599[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_126558 === 9) {
                          var inst_126550 = state_126557[2];
                          var state_126557__$1 = function() {
                            var statearr_126569 = state_126557;
                            statearr_126569[10] = inst_126550;
                            return statearr_126569;
                          }();
                          var statearr_126570_126600 = state_126557__$1;
                          statearr_126570_126600[2] = null;
                          statearr_126570_126600[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_126558 === 10) {
                            var inst_126515 = state_126557[7];
                            var inst_126517 = state_126557[9];
                            var inst_126522 = cljs.core._nth.call(null, inst_126515, inst_126517);
                            var state_126557__$1 = state_126557;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_126557__$1, 13, out, inst_126522);
                          } else {
                            if (state_val_126558 === 11) {
                              var inst_126528 = state_126557[11];
                              var inst_126514 = state_126557[6];
                              var inst_126528__$1 = cljs.core.seq.call(null, inst_126514);
                              var state_126557__$1 = function() {
                                var statearr_126574 = state_126557;
                                statearr_126574[11] = inst_126528__$1;
                                return statearr_126574;
                              }();
                              if (inst_126528__$1) {
                                var statearr_126575_126601 = state_126557__$1;
                                statearr_126575_126601[1] = 14;
                              } else {
                                var statearr_126576_126602 = state_126557__$1;
                                statearr_126576_126602[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_126558 === 12) {
                                var inst_126548 = state_126557[2];
                                var state_126557__$1 = state_126557;
                                var statearr_126577_126603 = state_126557__$1;
                                statearr_126577_126603[2] = inst_126548;
                                statearr_126577_126603[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_126558 === 13) {
                                  var inst_126514 = state_126557[6];
                                  var inst_126515 = state_126557[7];
                                  var inst_126516 = state_126557[8];
                                  var inst_126517 = state_126557[9];
                                  var inst_126524 = state_126557[2];
                                  var inst_126525 = inst_126517 + 1;
                                  var tmp126571 = inst_126514;
                                  var tmp126572 = inst_126515;
                                  var tmp126573 = inst_126516;
                                  var inst_126514__$1 = tmp126571;
                                  var inst_126515__$1 = tmp126572;
                                  var inst_126516__$1 = tmp126573;
                                  var inst_126517__$1 = inst_126525;
                                  var state_126557__$1 = function() {
                                    var statearr_126578 = state_126557;
                                    statearr_126578[6] = inst_126514__$1;
                                    statearr_126578[12] = inst_126524;
                                    statearr_126578[7] = inst_126515__$1;
                                    statearr_126578[8] = inst_126516__$1;
                                    statearr_126578[9] = inst_126517__$1;
                                    return statearr_126578;
                                  }();
                                  var statearr_126579_126604 = state_126557__$1;
                                  statearr_126579_126604[2] = null;
                                  statearr_126579_126604[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_126558 === 14) {
                                    var inst_126528 = state_126557[11];
                                    var inst_126530 = cljs.core.chunked_seq_QMARK_.call(null, inst_126528);
                                    var state_126557__$1 = state_126557;
                                    if (inst_126530) {
                                      var statearr_126580_126605 = state_126557__$1;
                                      statearr_126580_126605[1] = 17;
                                    } else {
                                      var statearr_126581_126606 = state_126557__$1;
                                      statearr_126581_126606[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_126558 === 15) {
                                      var state_126557__$1 = state_126557;
                                      var statearr_126582_126607 = state_126557__$1;
                                      statearr_126582_126607[2] = null;
                                      statearr_126582_126607[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_126558 === 16) {
                                        var inst_126546 = state_126557[2];
                                        var state_126557__$1 = state_126557;
                                        var statearr_126583_126608 = state_126557__$1;
                                        statearr_126583_126608[2] = inst_126546;
                                        statearr_126583_126608[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_126558 === 17) {
                                          var inst_126528 = state_126557[11];
                                          var inst_126532 = cljs.core.chunk_first.call(null, inst_126528);
                                          var inst_126533 = cljs.core.chunk_rest.call(null, inst_126528);
                                          var inst_126534 = cljs.core.count.call(null, inst_126532);
                                          var inst_126514 = inst_126533;
                                          var inst_126515 = inst_126532;
                                          var inst_126516 = inst_126534;
                                          var inst_126517 = 0;
                                          var state_126557__$1 = function() {
                                            var statearr_126584 = state_126557;
                                            statearr_126584[6] = inst_126514;
                                            statearr_126584[7] = inst_126515;
                                            statearr_126584[8] = inst_126516;
                                            statearr_126584[9] = inst_126517;
                                            return statearr_126584;
                                          }();
                                          var statearr_126585_126609 = state_126557__$1;
                                          statearr_126585_126609[2] = null;
                                          statearr_126585_126609[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_126558 === 18) {
                                            var inst_126528 = state_126557[11];
                                            var inst_126537 = cljs.core.first.call(null, inst_126528);
                                            var state_126557__$1 = state_126557;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_126557__$1, 20, out, inst_126537);
                                          } else {
                                            if (state_val_126558 === 19) {
                                              var inst_126543 = state_126557[2];
                                              var state_126557__$1 = state_126557;
                                              var statearr_126586_126610 = state_126557__$1;
                                              statearr_126586_126610[2] = inst_126543;
                                              statearr_126586_126610[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_126558 === 20) {
                                                var inst_126528 = state_126557[11];
                                                var inst_126539 = state_126557[2];
                                                var inst_126540 = cljs.core.next.call(null, inst_126528);
                                                var inst_126514 = inst_126540;
                                                var inst_126515 = null;
                                                var inst_126516 = 0;
                                                var inst_126517 = 0;
                                                var state_126557__$1 = function() {
                                                  var statearr_126587 = state_126557;
                                                  statearr_126587[6] = inst_126514;
                                                  statearr_126587[7] = inst_126515;
                                                  statearr_126587[8] = inst_126516;
                                                  statearr_126587[9] = inst_126517;
                                                  statearr_126587[13] = inst_126539;
                                                  return statearr_126587;
                                                }();
                                                var statearr_126588_126611 = state_126557__$1;
                                                statearr_126588_126611[2] = null;
                                                statearr_126588_126611[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_126590 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_126590[0] = state_machine__5833__auto__;
            statearr_126590[1] = 1;
            return statearr_126590;
          };
          var state_machine__5833__auto____1 = function(state_126557) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_126557);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_126557) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_126557);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_126591 = f__5883__auto__.call(null);
      statearr_126591[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_126591;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5882__auto___126684 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_126667) {
          var state_val_126668 = state_126667[1];
          if (state_val_126668 === 1) {
            var state_126667__$1 = state_126667;
            var statearr_126669_126685 = state_126667__$1;
            statearr_126669_126685[2] = null;
            statearr_126669_126685[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_126668 === 2) {
              var state_126667__$1 = state_126667;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_126667__$1, 4, from);
            } else {
              if (state_val_126668 === 3) {
                var inst_126665 = state_126667[2];
                var state_126667__$1 = state_126667;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_126667__$1, inst_126665);
              } else {
                if (state_val_126668 === 4) {
                  var inst_126650 = state_126667[5];
                  var inst_126650__$1 = state_126667[2];
                  var inst_126651 = inst_126650__$1 == null;
                  var state_126667__$1 = function() {
                    var statearr_126670 = state_126667;
                    statearr_126670[5] = inst_126650__$1;
                    return statearr_126670;
                  }();
                  if (cljs.core.truth_(inst_126651)) {
                    var statearr_126671_126686 = state_126667__$1;
                    statearr_126671_126686[1] = 5;
                  } else {
                    var statearr_126672_126687 = state_126667__$1;
                    statearr_126672_126687[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_126668 === 5) {
                    var state_126667__$1 = state_126667;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_126673_126688 = state_126667__$1;
                      statearr_126673_126688[1] = 8;
                    } else {
                      var statearr_126674_126689 = state_126667__$1;
                      statearr_126674_126689[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_126668 === 6) {
                      var inst_126650 = state_126667[5];
                      var state_126667__$1 = state_126667;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_126667__$1, 11, to, inst_126650);
                    } else {
                      if (state_val_126668 === 7) {
                        var inst_126663 = state_126667[2];
                        var state_126667__$1 = state_126667;
                        var statearr_126675_126690 = state_126667__$1;
                        statearr_126675_126690[2] = inst_126663;
                        statearr_126675_126690[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_126668 === 8) {
                          var inst_126654 = cljs.core.async.close_BANG_.call(null, to);
                          var state_126667__$1 = state_126667;
                          var statearr_126676_126691 = state_126667__$1;
                          statearr_126676_126691[2] = inst_126654;
                          statearr_126676_126691[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_126668 === 9) {
                            var state_126667__$1 = state_126667;
                            var statearr_126677_126692 = state_126667__$1;
                            statearr_126677_126692[2] = null;
                            statearr_126677_126692[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_126668 === 10) {
                              var inst_126657 = state_126667[2];
                              var state_126667__$1 = state_126667;
                              var statearr_126678_126693 = state_126667__$1;
                              statearr_126678_126693[2] = inst_126657;
                              statearr_126678_126693[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_126668 === 11) {
                                var inst_126660 = state_126667[2];
                                var state_126667__$1 = function() {
                                  var statearr_126679 = state_126667;
                                  statearr_126679[6] = inst_126660;
                                  return statearr_126679;
                                }();
                                var statearr_126680_126694 = state_126667__$1;
                                statearr_126680_126694[2] = null;
                                statearr_126680_126694[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_126682 = [null, null, null, null, null, null, null];
              statearr_126682[0] = state_machine__5833__auto__;
              statearr_126682[1] = 1;
              return statearr_126682;
            };
            var state_machine__5833__auto____1 = function(state_126667) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_126667);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_126667) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_126667);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_126683 = f__5883__auto__.call(null);
        statearr_126683[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___126684;
        return statearr_126683;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5882__auto___126773 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_126755) {
          var state_val_126756 = state_126755[1];
          if (state_val_126756 === 1) {
            var state_126755__$1 = state_126755;
            var statearr_126757_126774 = state_126755__$1;
            statearr_126757_126774[2] = null;
            statearr_126757_126774[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_126756 === 2) {
              var state_126755__$1 = state_126755;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_126755__$1, 4, ch);
            } else {
              if (state_val_126756 === 3) {
                var inst_126753 = state_126755[2];
                var state_126755__$1 = state_126755;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_126755__$1, inst_126753);
              } else {
                if (state_val_126756 === 4) {
                  var inst_126736 = state_126755[5];
                  var inst_126736__$1 = state_126755[2];
                  var inst_126737 = inst_126736__$1 == null;
                  var state_126755__$1 = function() {
                    var statearr_126758 = state_126755;
                    statearr_126758[5] = inst_126736__$1;
                    return statearr_126758;
                  }();
                  if (cljs.core.truth_(inst_126737)) {
                    var statearr_126759_126775 = state_126755__$1;
                    statearr_126759_126775[1] = 5;
                  } else {
                    var statearr_126760_126776 = state_126755__$1;
                    statearr_126760_126776[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_126756 === 5) {
                    var inst_126739 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_126740 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_126755__$1 = function() {
                      var statearr_126761 = state_126755;
                      statearr_126761[6] = inst_126739;
                      return statearr_126761;
                    }();
                    var statearr_126762_126777 = state_126755__$1;
                    statearr_126762_126777[2] = inst_126740;
                    statearr_126762_126777[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_126756 === 6) {
                      var inst_126736 = state_126755[5];
                      var inst_126742 = p.call(null, inst_126736);
                      var state_126755__$1 = state_126755;
                      if (cljs.core.truth_(inst_126742)) {
                        var statearr_126763_126778 = state_126755__$1;
                        statearr_126763_126778[1] = 9;
                      } else {
                        var statearr_126764_126779 = state_126755__$1;
                        statearr_126764_126779[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_126756 === 7) {
                        var inst_126751 = state_126755[2];
                        var state_126755__$1 = state_126755;
                        var statearr_126765_126780 = state_126755__$1;
                        statearr_126765_126780[2] = inst_126751;
                        statearr_126765_126780[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_126756 === 8) {
                          var inst_126748 = state_126755[2];
                          var state_126755__$1 = function() {
                            var statearr_126766 = state_126755;
                            statearr_126766[7] = inst_126748;
                            return statearr_126766;
                          }();
                          var statearr_126767_126781 = state_126755__$1;
                          statearr_126767_126781[2] = null;
                          statearr_126767_126781[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_126756 === 9) {
                            var state_126755__$1 = state_126755;
                            var statearr_126768_126782 = state_126755__$1;
                            statearr_126768_126782[2] = tc;
                            statearr_126768_126782[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_126756 === 10) {
                              var state_126755__$1 = state_126755;
                              var statearr_126769_126783 = state_126755__$1;
                              statearr_126769_126783[2] = fc;
                              statearr_126769_126783[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_126756 === 11) {
                                var inst_126736 = state_126755[5];
                                var inst_126746 = state_126755[2];
                                var state_126755__$1 = state_126755;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_126755__$1, 8, inst_126746, inst_126736);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_126771 = [null, null, null, null, null, null, null, null];
              statearr_126771[0] = state_machine__5833__auto__;
              statearr_126771[1] = 1;
              return statearr_126771;
            };
            var state_machine__5833__auto____1 = function(state_126755) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_126755);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_126755) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_126755);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_126772 = f__5883__auto__.call(null);
        statearr_126772[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___126773;
        return statearr_126772;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_126826) {
        var state_val_126827 = state_126826[1];
        if (state_val_126827 === 7) {
          var inst_126822 = state_126826[2];
          var state_126826__$1 = state_126826;
          var statearr_126828_126840 = state_126826__$1;
          statearr_126828_126840[2] = inst_126822;
          statearr_126828_126840[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_126827 === 6) {
            var inst_126815 = state_126826[5];
            var inst_126812 = state_126826[6];
            var inst_126819 = f.call(null, inst_126812, inst_126815);
            var inst_126812__$1 = inst_126819;
            var state_126826__$1 = function() {
              var statearr_126829 = state_126826;
              statearr_126829[6] = inst_126812__$1;
              return statearr_126829;
            }();
            var statearr_126830_126841 = state_126826__$1;
            statearr_126830_126841[2] = null;
            statearr_126830_126841[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_126827 === 5) {
              var inst_126812 = state_126826[6];
              var state_126826__$1 = state_126826;
              var statearr_126831_126842 = state_126826__$1;
              statearr_126831_126842[2] = inst_126812;
              statearr_126831_126842[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_126827 === 4) {
                var inst_126815 = state_126826[5];
                var inst_126815__$1 = state_126826[2];
                var inst_126816 = inst_126815__$1 == null;
                var state_126826__$1 = function() {
                  var statearr_126832 = state_126826;
                  statearr_126832[5] = inst_126815__$1;
                  return statearr_126832;
                }();
                if (cljs.core.truth_(inst_126816)) {
                  var statearr_126833_126843 = state_126826__$1;
                  statearr_126833_126843[1] = 5;
                } else {
                  var statearr_126834_126844 = state_126826__$1;
                  statearr_126834_126844[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_126827 === 3) {
                  var inst_126824 = state_126826[2];
                  var state_126826__$1 = state_126826;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_126826__$1, inst_126824);
                } else {
                  if (state_val_126827 === 2) {
                    var state_126826__$1 = state_126826;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_126826__$1, 4, ch);
                  } else {
                    if (state_val_126827 === 1) {
                      var inst_126812 = init;
                      var state_126826__$1 = function() {
                        var statearr_126835 = state_126826;
                        statearr_126835[6] = inst_126812;
                        return statearr_126835;
                      }();
                      var statearr_126836_126845 = state_126826__$1;
                      statearr_126836_126845[2] = null;
                      statearr_126836_126845[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_126838 = [null, null, null, null, null, null, null];
            statearr_126838[0] = state_machine__5833__auto__;
            statearr_126838[1] = 1;
            return statearr_126838;
          };
          var state_machine__5833__auto____1 = function(state_126826) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_126826);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_126826) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_126826);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_126839 = f__5883__auto__.call(null);
      statearr_126839[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_126839;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_126903) {
          var state_val_126904 = state_126903[1];
          if (state_val_126904 === 1) {
            var inst_126883 = cljs.core.seq.call(null, coll);
            var inst_126884 = inst_126883;
            var state_126903__$1 = function() {
              var statearr_126905 = state_126903;
              statearr_126905[5] = inst_126884;
              return statearr_126905;
            }();
            var statearr_126906_126920 = state_126903__$1;
            statearr_126906_126920[2] = null;
            statearr_126906_126920[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_126904 === 2) {
              var inst_126884 = state_126903[5];
              var state_126903__$1 = state_126903;
              if (cljs.core.truth_(inst_126884)) {
                var statearr_126907_126921 = state_126903__$1;
                statearr_126907_126921[1] = 4;
              } else {
                var statearr_126908_126922 = state_126903__$1;
                statearr_126908_126922[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_126904 === 3) {
                var inst_126901 = state_126903[2];
                var state_126903__$1 = state_126903;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_126903__$1, inst_126901);
              } else {
                if (state_val_126904 === 4) {
                  var inst_126884 = state_126903[5];
                  var inst_126887 = cljs.core.first.call(null, inst_126884);
                  var state_126903__$1 = state_126903;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_126903__$1, 7, ch, inst_126887);
                } else {
                  if (state_val_126904 === 5) {
                    var state_126903__$1 = state_126903;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_126909_126923 = state_126903__$1;
                      statearr_126909_126923[1] = 8;
                    } else {
                      var statearr_126910_126924 = state_126903__$1;
                      statearr_126910_126924[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_126904 === 6) {
                      var inst_126899 = state_126903[2];
                      var state_126903__$1 = state_126903;
                      var statearr_126911_126925 = state_126903__$1;
                      statearr_126911_126925[2] = inst_126899;
                      statearr_126911_126925[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_126904 === 7) {
                        var inst_126884 = state_126903[5];
                        var inst_126889 = state_126903[2];
                        var inst_126890 = cljs.core.next.call(null, inst_126884);
                        var inst_126884__$1 = inst_126890;
                        var state_126903__$1 = function() {
                          var statearr_126912 = state_126903;
                          statearr_126912[6] = inst_126889;
                          statearr_126912[5] = inst_126884__$1;
                          return statearr_126912;
                        }();
                        var statearr_126913_126926 = state_126903__$1;
                        statearr_126913_126926[2] = null;
                        statearr_126913_126926[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_126904 === 8) {
                          var inst_126894 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_126903__$1 = state_126903;
                          var statearr_126914_126927 = state_126903__$1;
                          statearr_126914_126927[2] = inst_126894;
                          statearr_126914_126927[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_126904 === 9) {
                            var state_126903__$1 = state_126903;
                            var statearr_126915_126928 = state_126903__$1;
                            statearr_126915_126928[2] = null;
                            statearr_126915_126928[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_126904 === 10) {
                              var inst_126897 = state_126903[2];
                              var state_126903__$1 = state_126903;
                              var statearr_126916_126929 = state_126903__$1;
                              statearr_126916_126929[2] = inst_126897;
                              statearr_126916_126929[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_126918 = [null, null, null, null, null, null, null];
              statearr_126918[0] = state_machine__5833__auto__;
              statearr_126918[1] = 1;
              return statearr_126918;
            };
            var state_machine__5833__auto____1 = function(state_126903) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_126903);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_126903) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_126903);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_126919 = f__5883__auto__.call(null);
        statearr_126919[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
        return statearr_126919;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return c__5882__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj126931 = {};
  return obj126931;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3392__auto__ = _;
    if (and__3392__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4025__auto__ = _ == null ? null : _;
    return function() {
      var or__3404__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj126933 = {};
  return obj126933;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t127146 !== "undefined") {
    } else {
      cljs.core.async.t127146 = function(cs, ch, mult, meta127147) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta127147 = meta127147;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t127146.cljs$lang$type = true;
      cljs.core.async.t127146.cljs$lang$ctorStr = "cljs.core.async/t127146";
      cljs.core.async.t127146.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
          return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t127146");
        };
      }(cs);
      cljs.core.async.t127146.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t127146.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t127146.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t127146.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t127146.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t127146.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t127146.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_127148) {
          var self__ = this;
          var _127148__$1 = this;
          return self__.meta127147;
        };
      }(cs);
      cljs.core.async.t127146.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_127148, meta127147__$1) {
          var self__ = this;
          var _127148__$1 = this;
          return new cljs.core.async.t127146(self__.cs, self__.ch, self__.mult, meta127147__$1);
        };
      }(cs);
      cljs.core.async.__GT_t127146 = function(cs) {
        return function __GT_t127146(cs__$1, ch__$1, mult__$1, meta127147) {
          return new cljs.core.async.t127146(cs__$1, ch__$1, mult__$1, meta127147);
        };
      }(cs);
    }
    return new cljs.core.async.t127146(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5882__auto___127358 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_127276) {
        var state_val_127277 = state_127276[1];
        if (state_val_127277 === 32) {
          try {
            var inst_127227 = state_127276[5];
            var inst_127151 = state_127276[6];
            var inst_127233 = cljs.core.async.put_BANG_.call(null, inst_127227, inst_127151, done);
            var state_127276__$1 = state_127276;
            var statearr_127280_127359 = state_127276__$1;
            statearr_127280_127359[2] = inst_127233;
            statearr_127280_127359[1] = 30;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } catch (e127278) {
            if (e127278 instanceof Object) {
              var ex__5826__auto__ = e127278;
              var statearr_127279_127360 = state_127276;
              statearr_127279_127360[1] = 31;
              statearr_127279_127360[2] = ex__5826__auto__;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e127278;
              } else {
                return null;
              }
            }
          }
        } else {
          if (state_val_127277 === 1) {
            var state_127276__$1 = state_127276;
            var statearr_127281_127361 = state_127276__$1;
            statearr_127281_127361[2] = null;
            statearr_127281_127361[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_127277 === 33) {
              var inst_127239 = state_127276[7];
              var inst_127241 = cljs.core.chunked_seq_QMARK_.call(null, inst_127239);
              var state_127276__$1 = state_127276;
              if (inst_127241) {
                var statearr_127282_127362 = state_127276__$1;
                statearr_127282_127362[1] = 36;
              } else {
                var statearr_127283_127363 = state_127276__$1;
                statearr_127283_127363[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_127277 === 2) {
                var state_127276__$1 = state_127276;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_127276__$1, 4, ch);
              } else {
                if (state_val_127277 === 34) {
                  var state_127276__$1 = state_127276;
                  var statearr_127284_127364 = state_127276__$1;
                  statearr_127284_127364[2] = null;
                  statearr_127284_127364[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_127277 === 3) {
                    var inst_127274 = state_127276[2];
                    var state_127276__$1 = state_127276;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_127276__$1, inst_127274);
                  } else {
                    if (state_val_127277 === 35) {
                      var inst_127263 = state_127276[2];
                      var state_127276__$1 = state_127276;
                      var statearr_127285_127365 = state_127276__$1;
                      statearr_127285_127365[2] = inst_127263;
                      statearr_127285_127365[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_127277 === 4) {
                        var inst_127151 = state_127276[6];
                        var inst_127151__$1 = state_127276[2];
                        var inst_127152 = inst_127151__$1 == null;
                        var state_127276__$1 = function() {
                          var statearr_127286 = state_127276;
                          statearr_127286[6] = inst_127151__$1;
                          return statearr_127286;
                        }();
                        if (cljs.core.truth_(inst_127152)) {
                          var statearr_127287_127366 = state_127276__$1;
                          statearr_127287_127366[1] = 5;
                        } else {
                          var statearr_127288_127367 = state_127276__$1;
                          statearr_127288_127367[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_127277 === 36) {
                          var inst_127239 = state_127276[7];
                          var inst_127243 = cljs.core.chunk_first.call(null, inst_127239);
                          var inst_127244 = cljs.core.chunk_rest.call(null, inst_127239);
                          var inst_127245 = cljs.core.count.call(null, inst_127243);
                          var inst_127219 = inst_127244;
                          var inst_127220 = inst_127243;
                          var inst_127221 = inst_127245;
                          var inst_127222 = 0;
                          var state_127276__$1 = function() {
                            var statearr_127289 = state_127276;
                            statearr_127289[8] = inst_127219;
                            statearr_127289[9] = inst_127221;
                            statearr_127289[10] = inst_127222;
                            statearr_127289[11] = inst_127220;
                            return statearr_127289;
                          }();
                          var statearr_127290_127368 = state_127276__$1;
                          statearr_127290_127368[2] = null;
                          statearr_127290_127368[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_127277 === 5) {
                            var inst_127158 = cljs.core.deref.call(null, cs);
                            var inst_127159 = cljs.core.seq.call(null, inst_127158);
                            var inst_127160 = inst_127159;
                            var inst_127161 = null;
                            var inst_127162 = 0;
                            var inst_127163 = 0;
                            var state_127276__$1 = function() {
                              var statearr_127291 = state_127276;
                              statearr_127291[12] = inst_127160;
                              statearr_127291[13] = inst_127161;
                              statearr_127291[14] = inst_127163;
                              statearr_127291[15] = inst_127162;
                              return statearr_127291;
                            }();
                            var statearr_127292_127369 = state_127276__$1;
                            statearr_127292_127369[2] = null;
                            statearr_127292_127369[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_127277 === 37) {
                              var inst_127239 = state_127276[7];
                              var inst_127248 = cljs.core.first.call(null, inst_127239);
                              var state_127276__$1 = function() {
                                var statearr_127293 = state_127276;
                                statearr_127293[16] = inst_127248;
                                return statearr_127293;
                              }();
                              var statearr_127294_127370 = state_127276__$1;
                              statearr_127294_127370[2] = null;
                              statearr_127294_127370[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_127277 === 6) {
                                var inst_127210 = cljs.core.deref.call(null, cs);
                                var inst_127211 = cljs.core.keys.call(null, inst_127210);
                                var inst_127212 = cljs.core.count.call(null, inst_127211);
                                var inst_127213 = cljs.core.reset_BANG_.call(null, dctr, inst_127212);
                                var inst_127218 = cljs.core.seq.call(null, inst_127211);
                                var inst_127219 = inst_127218;
                                var inst_127220 = null;
                                var inst_127221 = 0;
                                var inst_127222 = 0;
                                var state_127276__$1 = function() {
                                  var statearr_127295 = state_127276;
                                  statearr_127295[17] = inst_127213;
                                  statearr_127295[8] = inst_127219;
                                  statearr_127295[9] = inst_127221;
                                  statearr_127295[10] = inst_127222;
                                  statearr_127295[11] = inst_127220;
                                  return statearr_127295;
                                }();
                                var statearr_127296_127371 = state_127276__$1;
                                statearr_127296_127371[2] = null;
                                statearr_127296_127371[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_127277 === 38) {
                                  var inst_127260 = state_127276[2];
                                  var state_127276__$1 = state_127276;
                                  var statearr_127297_127372 = state_127276__$1;
                                  statearr_127297_127372[2] = inst_127260;
                                  statearr_127297_127372[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_127277 === 7) {
                                    var inst_127272 = state_127276[2];
                                    var state_127276__$1 = state_127276;
                                    var statearr_127298_127373 = state_127276__$1;
                                    statearr_127298_127373[2] = inst_127272;
                                    statearr_127298_127373[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_127277 === 39) {
                                      var inst_127239 = state_127276[7];
                                      var inst_127256 = state_127276[2];
                                      var inst_127257 = cljs.core.next.call(null, inst_127239);
                                      var inst_127219 = inst_127257;
                                      var inst_127220 = null;
                                      var inst_127221 = 0;
                                      var inst_127222 = 0;
                                      var state_127276__$1 = function() {
                                        var statearr_127299 = state_127276;
                                        statearr_127299[18] = inst_127256;
                                        statearr_127299[8] = inst_127219;
                                        statearr_127299[9] = inst_127221;
                                        statearr_127299[10] = inst_127222;
                                        statearr_127299[11] = inst_127220;
                                        return statearr_127299;
                                      }();
                                      var statearr_127300_127374 = state_127276__$1;
                                      statearr_127300_127374[2] = null;
                                      statearr_127300_127374[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_127277 === 8) {
                                        var inst_127163 = state_127276[14];
                                        var inst_127162 = state_127276[15];
                                        var inst_127165 = inst_127163 < inst_127162;
                                        var inst_127166 = inst_127165;
                                        var state_127276__$1 = state_127276;
                                        if (cljs.core.truth_(inst_127166)) {
                                          var statearr_127301_127375 = state_127276__$1;
                                          statearr_127301_127375[1] = 10;
                                        } else {
                                          var statearr_127302_127376 = state_127276__$1;
                                          statearr_127302_127376[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_127277 === 40) {
                                          var inst_127248 = state_127276[16];
                                          var inst_127249 = state_127276[2];
                                          var inst_127250 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_127251 = cljs.core.async.untap_STAR_.call(null, m, inst_127248);
                                          var state_127276__$1 = function() {
                                            var statearr_127303 = state_127276;
                                            statearr_127303[19] = inst_127250;
                                            statearr_127303[20] = inst_127249;
                                            return statearr_127303;
                                          }();
                                          var statearr_127304_127377 = state_127276__$1;
                                          statearr_127304_127377[2] = inst_127251;
                                          statearr_127304_127377[1] = 39;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_127277 === 9) {
                                            var inst_127208 = state_127276[2];
                                            var state_127276__$1 = state_127276;
                                            var statearr_127305_127378 = state_127276__$1;
                                            statearr_127305_127378[2] = inst_127208;
                                            statearr_127305_127378[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_127277 === 41) {
                                              try {
                                                var inst_127151 = state_127276[6];
                                                var inst_127248 = state_127276[16];
                                                var inst_127254 = cljs.core.async.put_BANG_.call(null, inst_127248, inst_127151, done);
                                                var state_127276__$1 = state_127276;
                                                var statearr_127308_127379 = state_127276__$1;
                                                statearr_127308_127379[2] = inst_127254;
                                                statearr_127308_127379[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } catch (e127306) {
                                                if (e127306 instanceof Object) {
                                                  var ex__5826__auto__ = e127306;
                                                  var statearr_127307_127380 = state_127276;
                                                  statearr_127307_127380[1] = 40;
                                                  statearr_127307_127380[2] = ex__5826__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                    throw e127306;
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            } else {
                                              if (state_val_127277 === 10) {
                                                var inst_127161 = state_127276[13];
                                                var inst_127163 = state_127276[14];
                                                var inst_127169 = cljs.core._nth.call(null, inst_127161, inst_127163);
                                                var inst_127170 = cljs.core.nth.call(null, inst_127169, 0, null);
                                                var inst_127171 = cljs.core.nth.call(null, inst_127169, 1, null);
                                                var state_127276__$1 = function() {
                                                  var statearr_127309 = state_127276;
                                                  statearr_127309[21] = inst_127170;
                                                  return statearr_127309;
                                                }();
                                                if (cljs.core.truth_(inst_127171)) {
                                                  var statearr_127310_127381 = state_127276__$1;
                                                  statearr_127310_127381[1] = 13;
                                                } else {
                                                  var statearr_127311_127382 = state_127276__$1;
                                                  statearr_127311_127382[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_127277 === 42) {
                                                  var inst_127269 = state_127276[2];
                                                  var state_127276__$1 = function() {
                                                    var statearr_127312 = state_127276;
                                                    statearr_127312[22] = inst_127269;
                                                    return statearr_127312;
                                                  }();
                                                  var statearr_127313_127383 = state_127276__$1;
                                                  statearr_127313_127383[2] = null;
                                                  statearr_127313_127383[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_127277 === 11) {
                                                    var inst_127160 = state_127276[12];
                                                    var inst_127180 = state_127276[23];
                                                    var inst_127180__$1 = cljs.core.seq.call(null, inst_127160);
                                                    var state_127276__$1 = function() {
                                                      var statearr_127314 = state_127276;
                                                      statearr_127314[23] = inst_127180__$1;
                                                      return statearr_127314;
                                                    }();
                                                    if (inst_127180__$1) {
                                                      var statearr_127315_127384 = state_127276__$1;
                                                      statearr_127315_127384[1] = 16;
                                                    } else {
                                                      var statearr_127316_127385 = state_127276__$1;
                                                      statearr_127316_127385[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_127277 === 12) {
                                                      var inst_127206 = state_127276[2];
                                                      var state_127276__$1 = state_127276;
                                                      var statearr_127317_127386 = state_127276__$1;
                                                      statearr_127317_127386[2] = inst_127206;
                                                      statearr_127317_127386[1] = 9;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_127277 === 13) {
                                                        var inst_127170 = state_127276[21];
                                                        var inst_127173 = cljs.core.async.close_BANG_.call(null, inst_127170);
                                                        var state_127276__$1 = state_127276;
                                                        var statearr_127321_127387 = state_127276__$1;
                                                        statearr_127321_127387[2] = inst_127173;
                                                        statearr_127321_127387[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_127277 === 14) {
                                                          var state_127276__$1 = state_127276;
                                                          var statearr_127322_127388 = state_127276__$1;
                                                          statearr_127322_127388[2] = null;
                                                          statearr_127322_127388[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_127277 === 15) {
                                                            var inst_127160 = state_127276[12];
                                                            var inst_127161 = state_127276[13];
                                                            var inst_127163 = state_127276[14];
                                                            var inst_127162 = state_127276[15];
                                                            var inst_127176 = state_127276[2];
                                                            var inst_127177 = inst_127163 + 1;
                                                            var tmp127318 = inst_127160;
                                                            var tmp127319 = inst_127161;
                                                            var tmp127320 = inst_127162;
                                                            var inst_127160__$1 = tmp127318;
                                                            var inst_127161__$1 = tmp127319;
                                                            var inst_127162__$1 = tmp127320;
                                                            var inst_127163__$1 = inst_127177;
                                                            var state_127276__$1 = function() {
                                                              var statearr_127323 = state_127276;
                                                              statearr_127323[12] = inst_127160__$1;
                                                              statearr_127323[13] = inst_127161__$1;
                                                              statearr_127323[24] = inst_127176;
                                                              statearr_127323[14] = inst_127163__$1;
                                                              statearr_127323[15] = inst_127162__$1;
                                                              return statearr_127323;
                                                            }();
                                                            var statearr_127324_127389 = state_127276__$1;
                                                            statearr_127324_127389[2] = null;
                                                            statearr_127324_127389[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_127277 === 16) {
                                                              var inst_127180 = state_127276[23];
                                                              var inst_127182 = cljs.core.chunked_seq_QMARK_.call(null, inst_127180);
                                                              var state_127276__$1 = state_127276;
                                                              if (inst_127182) {
                                                                var statearr_127325_127390 = state_127276__$1;
                                                                statearr_127325_127390[1] = 19;
                                                              } else {
                                                                var statearr_127326_127391 = state_127276__$1;
                                                                statearr_127326_127391[1] = 20;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_127277 === 17) {
                                                                var state_127276__$1 = state_127276;
                                                                var statearr_127327_127392 = state_127276__$1;
                                                                statearr_127327_127392[2] = null;
                                                                statearr_127327_127392[1] = 18;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_127277 === 18) {
                                                                  var inst_127204 = state_127276[2];
                                                                  var state_127276__$1 = state_127276;
                                                                  var statearr_127328_127393 = state_127276__$1;
                                                                  statearr_127328_127393[2] = inst_127204;
                                                                  statearr_127328_127393[1] = 12;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_127277 === 19) {
                                                                    var inst_127180 = state_127276[23];
                                                                    var inst_127184 = cljs.core.chunk_first.call(null, inst_127180);
                                                                    var inst_127185 = cljs.core.chunk_rest.call(null, inst_127180);
                                                                    var inst_127186 = cljs.core.count.call(null, inst_127184);
                                                                    var inst_127160 = inst_127185;
                                                                    var inst_127161 = inst_127184;
                                                                    var inst_127162 = inst_127186;
                                                                    var inst_127163 = 0;
                                                                    var state_127276__$1 = function() {
                                                                      var statearr_127329 = state_127276;
                                                                      statearr_127329[12] = inst_127160;
                                                                      statearr_127329[13] = inst_127161;
                                                                      statearr_127329[14] = inst_127163;
                                                                      statearr_127329[15] = inst_127162;
                                                                      return statearr_127329;
                                                                    }();
                                                                    var statearr_127330_127394 = state_127276__$1;
                                                                    statearr_127330_127394[2] = null;
                                                                    statearr_127330_127394[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_127277 === 20) {
                                                                      var inst_127180 = state_127276[23];
                                                                      var inst_127190 = cljs.core.first.call(null, inst_127180);
                                                                      var inst_127191 = cljs.core.nth.call(null, inst_127190, 0, null);
                                                                      var inst_127192 = cljs.core.nth.call(null, inst_127190, 1, null);
                                                                      var state_127276__$1 = function() {
                                                                        var statearr_127331 = state_127276;
                                                                        statearr_127331[25] = inst_127191;
                                                                        return statearr_127331;
                                                                      }();
                                                                      if (cljs.core.truth_(inst_127192)) {
                                                                        var statearr_127332_127395 = state_127276__$1;
                                                                        statearr_127332_127395[1] = 22;
                                                                      } else {
                                                                        var statearr_127333_127396 = state_127276__$1;
                                                                        statearr_127333_127396[1] = 23;
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_127277 === 21) {
                                                                        var inst_127201 = state_127276[2];
                                                                        var state_127276__$1 = state_127276;
                                                                        var statearr_127334_127397 = state_127276__$1;
                                                                        statearr_127334_127397[2] = inst_127201;
                                                                        statearr_127334_127397[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_127277 === 22) {
                                                                          var inst_127191 = state_127276[25];
                                                                          var inst_127194 = cljs.core.async.close_BANG_.call(null, inst_127191);
                                                                          var state_127276__$1 = state_127276;
                                                                          var statearr_127335_127398 = state_127276__$1;
                                                                          statearr_127335_127398[2] = inst_127194;
                                                                          statearr_127335_127398[1] = 24;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_127277 === 23) {
                                                                            var state_127276__$1 = state_127276;
                                                                            var statearr_127336_127399 = state_127276__$1;
                                                                            statearr_127336_127399[2] = null;
                                                                            statearr_127336_127399[1] = 24;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_127277 === 24) {
                                                                              var inst_127180 = state_127276[23];
                                                                              var inst_127197 = state_127276[2];
                                                                              var inst_127198 = cljs.core.next.call(null, inst_127180);
                                                                              var inst_127160 = inst_127198;
                                                                              var inst_127161 = null;
                                                                              var inst_127162 = 0;
                                                                              var inst_127163 = 0;
                                                                              var state_127276__$1 = function() {
                                                                                var statearr_127337 = state_127276;
                                                                                statearr_127337[12] = inst_127160;
                                                                                statearr_127337[13] = inst_127161;
                                                                                statearr_127337[26] = inst_127197;
                                                                                statearr_127337[14] = inst_127163;
                                                                                statearr_127337[15] = inst_127162;
                                                                                return statearr_127337;
                                                                              }();
                                                                              var statearr_127338_127400 = state_127276__$1;
                                                                              statearr_127338_127400[2] = null;
                                                                              statearr_127338_127400[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_127277 === 25) {
                                                                                var inst_127221 = state_127276[9];
                                                                                var inst_127222 = state_127276[10];
                                                                                var inst_127224 = inst_127222 < inst_127221;
                                                                                var inst_127225 = inst_127224;
                                                                                var state_127276__$1 = state_127276;
                                                                                if (cljs.core.truth_(inst_127225)) {
                                                                                  var statearr_127339_127401 = state_127276__$1;
                                                                                  statearr_127339_127401[1] = 27;
                                                                                } else {
                                                                                  var statearr_127340_127402 = state_127276__$1;
                                                                                  statearr_127340_127402[1] = 28;
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_127277 === 26) {
                                                                                  var inst_127267 = state_127276[2];
                                                                                  var state_127276__$1 = function() {
                                                                                    var statearr_127341 = state_127276;
                                                                                    statearr_127341[27] = inst_127267;
                                                                                    return statearr_127341;
                                                                                  }();
                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_127276__$1, 42, dchan);
                                                                                } else {
                                                                                  if (state_val_127277 === 27) {
                                                                                    var inst_127222 = state_127276[10];
                                                                                    var inst_127220 = state_127276[11];
                                                                                    var inst_127227 = cljs.core._nth.call(null, inst_127220, inst_127222);
                                                                                    var state_127276__$1 = function() {
                                                                                      var statearr_127342 = state_127276;
                                                                                      statearr_127342[5] = inst_127227;
                                                                                      return statearr_127342;
                                                                                    }();
                                                                                    var statearr_127343_127403 = state_127276__$1;
                                                                                    statearr_127343_127403[2] = null;
                                                                                    statearr_127343_127403[1] = 32;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_127277 === 28) {
                                                                                      var inst_127219 = state_127276[8];
                                                                                      var inst_127239 = state_127276[7];
                                                                                      var inst_127239__$1 = cljs.core.seq.call(null, inst_127219);
                                                                                      var state_127276__$1 = function() {
                                                                                        var statearr_127347 = state_127276;
                                                                                        statearr_127347[7] = inst_127239__$1;
                                                                                        return statearr_127347;
                                                                                      }();
                                                                                      if (inst_127239__$1) {
                                                                                        var statearr_127348_127404 = state_127276__$1;
                                                                                        statearr_127348_127404[1] = 33;
                                                                                      } else {
                                                                                        var statearr_127349_127405 = state_127276__$1;
                                                                                        statearr_127349_127405[1] = 34;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_127277 === 29) {
                                                                                        var inst_127265 = state_127276[2];
                                                                                        var state_127276__$1 = state_127276;
                                                                                        var statearr_127350_127406 = state_127276__$1;
                                                                                        statearr_127350_127406[2] = inst_127265;
                                                                                        statearr_127350_127406[1] = 26;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_127277 === 30) {
                                                                                          var inst_127219 = state_127276[8];
                                                                                          var inst_127221 = state_127276[9];
                                                                                          var inst_127222 = state_127276[10];
                                                                                          var inst_127220 = state_127276[11];
                                                                                          var inst_127235 = state_127276[2];
                                                                                          var inst_127236 = inst_127222 + 1;
                                                                                          var tmp127344 = inst_127219;
                                                                                          var tmp127345 = inst_127221;
                                                                                          var tmp127346 = inst_127220;
                                                                                          var inst_127219__$1 = tmp127344;
                                                                                          var inst_127220__$1 = tmp127346;
                                                                                          var inst_127221__$1 = tmp127345;
                                                                                          var inst_127222__$1 = inst_127236;
                                                                                          var state_127276__$1 = function() {
                                                                                            var statearr_127351 = state_127276;
                                                                                            statearr_127351[8] = inst_127219__$1;
                                                                                            statearr_127351[9] = inst_127221__$1;
                                                                                            statearr_127351[10] = inst_127222__$1;
                                                                                            statearr_127351[11] = inst_127220__$1;
                                                                                            statearr_127351[28] = inst_127235;
                                                                                            return statearr_127351;
                                                                                          }();
                                                                                          var statearr_127352_127407 = state_127276__$1;
                                                                                          statearr_127352_127407[2] = null;
                                                                                          statearr_127352_127407[1] = 25;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_127277 === 31) {
                                                                                            var inst_127227 = state_127276[5];
                                                                                            var inst_127228 = state_127276[2];
                                                                                            var inst_127229 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                            var inst_127230 = cljs.core.async.untap_STAR_.call(null, m, inst_127227);
                                                                                            var state_127276__$1 = function() {
                                                                                              var statearr_127353 = state_127276;
                                                                                              statearr_127353[29] = inst_127228;
                                                                                              statearr_127353[30] = inst_127229;
                                                                                              return statearr_127353;
                                                                                            }();
                                                                                            var statearr_127354_127408 = state_127276__$1;
                                                                                            statearr_127354_127408[2] = inst_127230;
                                                                                            statearr_127354_127408[1] = 30;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            return null;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_127356 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_127356[0] = state_machine__5833__auto__;
            statearr_127356[1] = 1;
            return statearr_127356;
          };
          var state_machine__5833__auto____1 = function(state_127276) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_127276);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_127276) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_127276);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_127357 = f__5883__auto__.call(null);
      statearr_127357[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___127358;
      return statearr_127357;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj127410 = {};
  return obj127410;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3392__auto__ = m;
    if (and__3392__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4025__auto__ = m == null ? null : m;
    return function() {
      var or__3404__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t127516 !== "undefined") {
    } else {
      cljs.core.async.t127516 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta127517) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta127517 = meta127517;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t127516.cljs$lang$type = true;
      cljs.core.async.t127516.cljs$lang$ctorStr = "cljs.core.async/t127516";
      cljs.core.async.t127516.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
          return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t127516");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t127516.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t127516.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t127516.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t127516.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t127516.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t127516.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t127516.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t127516.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t127516.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_127518) {
          var self__ = this;
          var _127518__$1 = this;
          return self__.meta127517;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t127516.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_127518, meta127517__$1) {
          var self__ = this;
          var _127518__$1 = this;
          return new cljs.core.async.t127516(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta127517__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t127516 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t127516(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta127517) {
          return new cljs.core.async.t127516(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta127517);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t127516(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__5882__auto___127621 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_127583) {
        var state_val_127584 = state_127583[1];
        if (state_val_127584 === 1) {
          var inst_127522 = state_127583[5];
          var inst_127522__$1 = calc_state.call(null);
          var inst_127523 = cljs.core.seq_QMARK_.call(null, inst_127522__$1);
          var state_127583__$1 = function() {
            var statearr_127585 = state_127583;
            statearr_127585[5] = inst_127522__$1;
            return statearr_127585;
          }();
          if (inst_127523) {
            var statearr_127586_127622 = state_127583__$1;
            statearr_127586_127622[1] = 2;
          } else {
            var statearr_127587_127623 = state_127583__$1;
            statearr_127587_127623[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_127584 === 2) {
            var inst_127522 = state_127583[5];
            var inst_127525 = cljs.core.apply.call(null, cljs.core.hash_map, inst_127522);
            var state_127583__$1 = state_127583;
            var statearr_127588_127624 = state_127583__$1;
            statearr_127588_127624[2] = inst_127525;
            statearr_127588_127624[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_127584 === 3) {
              var inst_127522 = state_127583[5];
              var state_127583__$1 = state_127583;
              var statearr_127589_127625 = state_127583__$1;
              statearr_127589_127625[2] = inst_127522;
              statearr_127589_127625[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_127584 === 4) {
                var inst_127522 = state_127583[5];
                var inst_127528 = state_127583[2];
                var inst_127529 = cljs.core.get.call(null, inst_127528, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_127530 = cljs.core.get.call(null, inst_127528, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_127531 = cljs.core.get.call(null, inst_127528, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_127532 = inst_127522;
                var state_127583__$1 = function() {
                  var statearr_127590 = state_127583;
                  statearr_127590[6] = inst_127531;
                  statearr_127590[7] = inst_127532;
                  statearr_127590[8] = inst_127530;
                  statearr_127590[9] = inst_127529;
                  return statearr_127590;
                }();
                var statearr_127591_127626 = state_127583__$1;
                statearr_127591_127626[2] = null;
                statearr_127591_127626[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_127584 === 5) {
                  var inst_127532 = state_127583[7];
                  var inst_127535 = cljs.core.seq_QMARK_.call(null, inst_127532);
                  var state_127583__$1 = state_127583;
                  if (inst_127535) {
                    var statearr_127592_127627 = state_127583__$1;
                    statearr_127592_127627[1] = 7;
                  } else {
                    var statearr_127593_127628 = state_127583__$1;
                    statearr_127593_127628[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_127584 === 6) {
                    var inst_127581 = state_127583[2];
                    var state_127583__$1 = state_127583;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_127583__$1, inst_127581);
                  } else {
                    if (state_val_127584 === 7) {
                      var inst_127532 = state_127583[7];
                      var inst_127537 = cljs.core.apply.call(null, cljs.core.hash_map, inst_127532);
                      var state_127583__$1 = state_127583;
                      var statearr_127594_127629 = state_127583__$1;
                      statearr_127594_127629[2] = inst_127537;
                      statearr_127594_127629[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_127584 === 8) {
                        var inst_127532 = state_127583[7];
                        var state_127583__$1 = state_127583;
                        var statearr_127595_127630 = state_127583__$1;
                        statearr_127595_127630[2] = inst_127532;
                        statearr_127595_127630[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_127584 === 9) {
                          var inst_127540 = state_127583[10];
                          var inst_127540__$1 = state_127583[2];
                          var inst_127541 = cljs.core.get.call(null, inst_127540__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_127542 = cljs.core.get.call(null, inst_127540__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_127543 = cljs.core.get.call(null, inst_127540__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_127583__$1 = function() {
                            var statearr_127596 = state_127583;
                            statearr_127596[11] = inst_127542;
                            statearr_127596[12] = inst_127543;
                            statearr_127596[10] = inst_127540__$1;
                            return statearr_127596;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_127583__$1, 10, inst_127541);
                        } else {
                          if (state_val_127584 === 10) {
                            var inst_127547 = state_127583[13];
                            var inst_127548 = state_127583[14];
                            var inst_127546 = state_127583[2];
                            var inst_127547__$1 = cljs.core.nth.call(null, inst_127546, 0, null);
                            var inst_127548__$1 = cljs.core.nth.call(null, inst_127546, 1, null);
                            var inst_127549 = inst_127547__$1 == null;
                            var inst_127550 = cljs.core._EQ_.call(null, inst_127548__$1, change);
                            var inst_127551 = inst_127549 || inst_127550;
                            var state_127583__$1 = function() {
                              var statearr_127597 = state_127583;
                              statearr_127597[13] = inst_127547__$1;
                              statearr_127597[14] = inst_127548__$1;
                              return statearr_127597;
                            }();
                            if (cljs.core.truth_(inst_127551)) {
                              var statearr_127598_127631 = state_127583__$1;
                              statearr_127598_127631[1] = 11;
                            } else {
                              var statearr_127599_127632 = state_127583__$1;
                              statearr_127599_127632[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_127584 === 11) {
                              var inst_127547 = state_127583[13];
                              var inst_127553 = inst_127547 == null;
                              var state_127583__$1 = state_127583;
                              if (cljs.core.truth_(inst_127553)) {
                                var statearr_127600_127633 = state_127583__$1;
                                statearr_127600_127633[1] = 14;
                              } else {
                                var statearr_127601_127634 = state_127583__$1;
                                statearr_127601_127634[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_127584 === 12) {
                                var inst_127543 = state_127583[12];
                                var inst_127562 = state_127583[15];
                                var inst_127548 = state_127583[14];
                                var inst_127562__$1 = inst_127543.call(null, inst_127548);
                                var state_127583__$1 = function() {
                                  var statearr_127602 = state_127583;
                                  statearr_127602[15] = inst_127562__$1;
                                  return statearr_127602;
                                }();
                                if (cljs.core.truth_(inst_127562__$1)) {
                                  var statearr_127603_127635 = state_127583__$1;
                                  statearr_127603_127635[1] = 17;
                                } else {
                                  var statearr_127604_127636 = state_127583__$1;
                                  statearr_127604_127636[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_127584 === 13) {
                                  var inst_127579 = state_127583[2];
                                  var state_127583__$1 = state_127583;
                                  var statearr_127605_127637 = state_127583__$1;
                                  statearr_127605_127637[2] = inst_127579;
                                  statearr_127605_127637[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_127584 === 14) {
                                    var inst_127548 = state_127583[14];
                                    var inst_127555 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_127548);
                                    var state_127583__$1 = state_127583;
                                    var statearr_127606_127638 = state_127583__$1;
                                    statearr_127606_127638[2] = inst_127555;
                                    statearr_127606_127638[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_127584 === 15) {
                                      var state_127583__$1 = state_127583;
                                      var statearr_127607_127639 = state_127583__$1;
                                      statearr_127607_127639[2] = null;
                                      statearr_127607_127639[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_127584 === 16) {
                                        var inst_127558 = state_127583[2];
                                        var inst_127559 = calc_state.call(null);
                                        var inst_127532 = inst_127559;
                                        var state_127583__$1 = function() {
                                          var statearr_127608 = state_127583;
                                          statearr_127608[7] = inst_127532;
                                          statearr_127608[16] = inst_127558;
                                          return statearr_127608;
                                        }();
                                        var statearr_127609_127640 = state_127583__$1;
                                        statearr_127609_127640[2] = null;
                                        statearr_127609_127640[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_127584 === 17) {
                                          var inst_127562 = state_127583[15];
                                          var state_127583__$1 = state_127583;
                                          var statearr_127610_127641 = state_127583__$1;
                                          statearr_127610_127641[2] = inst_127562;
                                          statearr_127610_127641[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_127584 === 18) {
                                            var inst_127542 = state_127583[11];
                                            var inst_127543 = state_127583[12];
                                            var inst_127548 = state_127583[14];
                                            var inst_127565 = cljs.core.empty_QMARK_.call(null, inst_127543);
                                            var inst_127566 = inst_127542.call(null, inst_127548);
                                            var inst_127567 = cljs.core.not.call(null, inst_127566);
                                            var inst_127568 = inst_127565 && inst_127567;
                                            var state_127583__$1 = state_127583;
                                            var statearr_127611_127642 = state_127583__$1;
                                            statearr_127611_127642[2] = inst_127568;
                                            statearr_127611_127642[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_127584 === 19) {
                                              var inst_127570 = state_127583[2];
                                              var state_127583__$1 = state_127583;
                                              if (cljs.core.truth_(inst_127570)) {
                                                var statearr_127612_127643 = state_127583__$1;
                                                statearr_127612_127643[1] = 20;
                                              } else {
                                                var statearr_127613_127644 = state_127583__$1;
                                                statearr_127613_127644[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_127584 === 20) {
                                                var inst_127547 = state_127583[13];
                                                var state_127583__$1 = state_127583;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_127583__$1, 23, out, inst_127547);
                                              } else {
                                                if (state_val_127584 === 21) {
                                                  var state_127583__$1 = state_127583;
                                                  var statearr_127614_127645 = state_127583__$1;
                                                  statearr_127614_127645[2] = null;
                                                  statearr_127614_127645[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_127584 === 22) {
                                                    var inst_127540 = state_127583[10];
                                                    var inst_127576 = state_127583[2];
                                                    var inst_127532 = inst_127540;
                                                    var state_127583__$1 = function() {
                                                      var statearr_127615 = state_127583;
                                                      statearr_127615[7] = inst_127532;
                                                      statearr_127615[17] = inst_127576;
                                                      return statearr_127615;
                                                    }();
                                                    var statearr_127616_127646 = state_127583__$1;
                                                    statearr_127616_127646[2] = null;
                                                    statearr_127616_127646[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_127584 === 23) {
                                                      var inst_127573 = state_127583[2];
                                                      var state_127583__$1 = state_127583;
                                                      var statearr_127617_127647 = state_127583__$1;
                                                      statearr_127617_127647[2] = inst_127573;
                                                      statearr_127617_127647[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_127619 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_127619[0] = state_machine__5833__auto__;
            statearr_127619[1] = 1;
            return statearr_127619;
          };
          var state_machine__5833__auto____1 = function(state_127583) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_127583);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_127583) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_127583);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_127620 = f__5883__auto__.call(null);
      statearr_127620[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___127621;
      return statearr_127620;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj127649 = {};
  return obj127649;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3392__auto__ = p;
    if (and__3392__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4025__auto__ = p == null ? null : p;
    return function() {
      var or__3404__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3392__auto__ = p;
    if (and__3392__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3392__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4025__auto__ = p == null ? null : p;
    return function() {
      var or__3404__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4025__auto__)];
      if (or__3404__auto__) {
        return or__3404__auto__;
      } else {
        var or__3404__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3404__auto____$1) {
          return or__3404__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3392__auto__ = p;
      if (and__3392__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4025__auto__ = p == null ? null : p;
      return function() {
        var or__3404__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3392__auto__ = p;
      if (and__3392__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3392__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4025__auto__ = p == null ? null : p;
      return function() {
        var or__3404__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4025__auto__)];
        if (or__3404__auto__) {
          return or__3404__auto__;
        } else {
          var or__3404__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3404__auto____$1) {
            return or__3404__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3404__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3404__auto__)) {
          return or__3404__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3404__auto__, mults) {
            return function(p1__127650_SHARP_) {
              if (cljs.core.truth_(p1__127650_SHARP_.call(null, topic))) {
                return p1__127650_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__127650_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3404__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t127774 !== "undefined") {
      } else {
        cljs.core.async.t127774 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta127775) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta127775 = meta127775;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t127774.cljs$lang$type = true;
        cljs.core.async.t127774.cljs$lang$ctorStr = "cljs.core.async/t127774";
        cljs.core.async.t127774.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3966__auto__, writer__3967__auto__, opt__3968__auto__) {
            return cljs.core._write.call(null, writer__3967__auto__, "cljs.core.async/t127774");
          };
        }(mults, ensure_mult);
        cljs.core.async.t127774.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t127774.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t127774.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t127774.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t127774.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t127774.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t127774.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t127774.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_127776) {
            var self__ = this;
            var _127776__$1 = this;
            return self__.meta127775;
          };
        }(mults, ensure_mult);
        cljs.core.async.t127774.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_127776, meta127775__$1) {
            var self__ = this;
            var _127776__$1 = this;
            return new cljs.core.async.t127774(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta127775__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t127774 = function(mults, ensure_mult) {
          return function __GT_t127774(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta127775) {
            return new cljs.core.async.t127774(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta127775);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t127774(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5882__auto___127897 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_127849) {
          var state_val_127850 = state_127849[1];
          if (state_val_127850 === 1) {
            var state_127849__$1 = state_127849;
            var statearr_127851_127898 = state_127849__$1;
            statearr_127851_127898[2] = null;
            statearr_127851_127898[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_127850 === 2) {
              var state_127849__$1 = state_127849;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_127849__$1, 4, ch);
            } else {
              if (state_val_127850 === 3) {
                var inst_127847 = state_127849[2];
                var state_127849__$1 = state_127849;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_127849__$1, inst_127847);
              } else {
                if (state_val_127850 === 4) {
                  var inst_127779 = state_127849[5];
                  var inst_127779__$1 = state_127849[2];
                  var inst_127780 = inst_127779__$1 == null;
                  var state_127849__$1 = function() {
                    var statearr_127852 = state_127849;
                    statearr_127852[5] = inst_127779__$1;
                    return statearr_127852;
                  }();
                  if (cljs.core.truth_(inst_127780)) {
                    var statearr_127853_127899 = state_127849__$1;
                    statearr_127853_127899[1] = 5;
                  } else {
                    var statearr_127854_127900 = state_127849__$1;
                    statearr_127854_127900[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_127850 === 5) {
                    var inst_127786 = cljs.core.deref.call(null, mults);
                    var inst_127787 = cljs.core.vals.call(null, inst_127786);
                    var inst_127788 = cljs.core.seq.call(null, inst_127787);
                    var inst_127789 = inst_127788;
                    var inst_127790 = null;
                    var inst_127791 = 0;
                    var inst_127792 = 0;
                    var state_127849__$1 = function() {
                      var statearr_127855 = state_127849;
                      statearr_127855[6] = inst_127789;
                      statearr_127855[7] = inst_127790;
                      statearr_127855[8] = inst_127792;
                      statearr_127855[9] = inst_127791;
                      return statearr_127855;
                    }();
                    var statearr_127856_127901 = state_127849__$1;
                    statearr_127856_127901[2] = null;
                    statearr_127856_127901[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_127850 === 6) {
                      var inst_127827 = state_127849[10];
                      var inst_127829 = state_127849[11];
                      var inst_127779 = state_127849[5];
                      var inst_127827__$1 = topic_fn.call(null, inst_127779);
                      var inst_127828 = cljs.core.deref.call(null, mults);
                      var inst_127829__$1 = cljs.core.get.call(null, inst_127828, inst_127827__$1);
                      var state_127849__$1 = function() {
                        var statearr_127857 = state_127849;
                        statearr_127857[10] = inst_127827__$1;
                        statearr_127857[11] = inst_127829__$1;
                        return statearr_127857;
                      }();
                      if (cljs.core.truth_(inst_127829__$1)) {
                        var statearr_127858_127902 = state_127849__$1;
                        statearr_127858_127902[1] = 19;
                      } else {
                        var statearr_127859_127903 = state_127849__$1;
                        statearr_127859_127903[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_127850 === 7) {
                        var inst_127845 = state_127849[2];
                        var state_127849__$1 = state_127849;
                        var statearr_127860_127904 = state_127849__$1;
                        statearr_127860_127904[2] = inst_127845;
                        statearr_127860_127904[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_127850 === 8) {
                          var inst_127792 = state_127849[8];
                          var inst_127791 = state_127849[9];
                          var inst_127794 = inst_127792 < inst_127791;
                          var inst_127795 = inst_127794;
                          var state_127849__$1 = state_127849;
                          if (cljs.core.truth_(inst_127795)) {
                            var statearr_127864_127905 = state_127849__$1;
                            statearr_127864_127905[1] = 10;
                          } else {
                            var statearr_127865_127906 = state_127849__$1;
                            statearr_127865_127906[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_127850 === 9) {
                            var inst_127825 = state_127849[2];
                            var state_127849__$1 = state_127849;
                            var statearr_127866_127907 = state_127849__$1;
                            statearr_127866_127907[2] = inst_127825;
                            statearr_127866_127907[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_127850 === 10) {
                              var inst_127789 = state_127849[6];
                              var inst_127790 = state_127849[7];
                              var inst_127792 = state_127849[8];
                              var inst_127791 = state_127849[9];
                              var inst_127797 = cljs.core._nth.call(null, inst_127790, inst_127792);
                              var inst_127798 = cljs.core.async.muxch_STAR_.call(null, inst_127797);
                              var inst_127799 = cljs.core.async.close_BANG_.call(null, inst_127798);
                              var inst_127800 = inst_127792 + 1;
                              var tmp127861 = inst_127789;
                              var tmp127862 = inst_127790;
                              var tmp127863 = inst_127791;
                              var inst_127789__$1 = tmp127861;
                              var inst_127790__$1 = tmp127862;
                              var inst_127791__$1 = tmp127863;
                              var inst_127792__$1 = inst_127800;
                              var state_127849__$1 = function() {
                                var statearr_127867 = state_127849;
                                statearr_127867[6] = inst_127789__$1;
                                statearr_127867[7] = inst_127790__$1;
                                statearr_127867[8] = inst_127792__$1;
                                statearr_127867[9] = inst_127791__$1;
                                statearr_127867[12] = inst_127799;
                                return statearr_127867;
                              }();
                              var statearr_127868_127908 = state_127849__$1;
                              statearr_127868_127908[2] = null;
                              statearr_127868_127908[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_127850 === 11) {
                                var inst_127789 = state_127849[6];
                                var inst_127803 = state_127849[13];
                                var inst_127803__$1 = cljs.core.seq.call(null, inst_127789);
                                var state_127849__$1 = function() {
                                  var statearr_127869 = state_127849;
                                  statearr_127869[13] = inst_127803__$1;
                                  return statearr_127869;
                                }();
                                if (inst_127803__$1) {
                                  var statearr_127870_127909 = state_127849__$1;
                                  statearr_127870_127909[1] = 13;
                                } else {
                                  var statearr_127871_127910 = state_127849__$1;
                                  statearr_127871_127910[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_127850 === 12) {
                                  var inst_127823 = state_127849[2];
                                  var state_127849__$1 = state_127849;
                                  var statearr_127872_127911 = state_127849__$1;
                                  statearr_127872_127911[2] = inst_127823;
                                  statearr_127872_127911[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_127850 === 13) {
                                    var inst_127803 = state_127849[13];
                                    var inst_127805 = cljs.core.chunked_seq_QMARK_.call(null, inst_127803);
                                    var state_127849__$1 = state_127849;
                                    if (inst_127805) {
                                      var statearr_127873_127912 = state_127849__$1;
                                      statearr_127873_127912[1] = 16;
                                    } else {
                                      var statearr_127874_127913 = state_127849__$1;
                                      statearr_127874_127913[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_127850 === 14) {
                                      var state_127849__$1 = state_127849;
                                      var statearr_127875_127914 = state_127849__$1;
                                      statearr_127875_127914[2] = null;
                                      statearr_127875_127914[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_127850 === 15) {
                                        var inst_127821 = state_127849[2];
                                        var state_127849__$1 = state_127849;
                                        var statearr_127876_127915 = state_127849__$1;
                                        statearr_127876_127915[2] = inst_127821;
                                        statearr_127876_127915[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_127850 === 16) {
                                          var inst_127803 = state_127849[13];
                                          var inst_127807 = cljs.core.chunk_first.call(null, inst_127803);
                                          var inst_127808 = cljs.core.chunk_rest.call(null, inst_127803);
                                          var inst_127809 = cljs.core.count.call(null, inst_127807);
                                          var inst_127789 = inst_127808;
                                          var inst_127790 = inst_127807;
                                          var inst_127791 = inst_127809;
                                          var inst_127792 = 0;
                                          var state_127849__$1 = function() {
                                            var statearr_127877 = state_127849;
                                            statearr_127877[6] = inst_127789;
                                            statearr_127877[7] = inst_127790;
                                            statearr_127877[8] = inst_127792;
                                            statearr_127877[9] = inst_127791;
                                            return statearr_127877;
                                          }();
                                          var statearr_127878_127916 = state_127849__$1;
                                          statearr_127878_127916[2] = null;
                                          statearr_127878_127916[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_127850 === 17) {
                                            var inst_127803 = state_127849[13];
                                            var inst_127812 = cljs.core.first.call(null, inst_127803);
                                            var inst_127813 = cljs.core.async.muxch_STAR_.call(null, inst_127812);
                                            var inst_127814 = cljs.core.async.close_BANG_.call(null, inst_127813);
                                            var inst_127815 = cljs.core.next.call(null, inst_127803);
                                            var inst_127789 = inst_127815;
                                            var inst_127790 = null;
                                            var inst_127791 = 0;
                                            var inst_127792 = 0;
                                            var state_127849__$1 = function() {
                                              var statearr_127879 = state_127849;
                                              statearr_127879[6] = inst_127789;
                                              statearr_127879[14] = inst_127814;
                                              statearr_127879[7] = inst_127790;
                                              statearr_127879[8] = inst_127792;
                                              statearr_127879[9] = inst_127791;
                                              return statearr_127879;
                                            }();
                                            var statearr_127880_127917 = state_127849__$1;
                                            statearr_127880_127917[2] = null;
                                            statearr_127880_127917[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_127850 === 18) {
                                              var inst_127818 = state_127849[2];
                                              var state_127849__$1 = state_127849;
                                              var statearr_127881_127918 = state_127849__$1;
                                              statearr_127881_127918[2] = inst_127818;
                                              statearr_127881_127918[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_127850 === 19) {
                                                var state_127849__$1 = state_127849;
                                                var statearr_127882_127919 = state_127849__$1;
                                                statearr_127882_127919[2] = null;
                                                statearr_127882_127919[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_127850 === 20) {
                                                  var state_127849__$1 = state_127849;
                                                  var statearr_127883_127920 = state_127849__$1;
                                                  statearr_127883_127920[2] = null;
                                                  statearr_127883_127920[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_127850 === 21) {
                                                    var inst_127842 = state_127849[2];
                                                    var state_127849__$1 = function() {
                                                      var statearr_127884 = state_127849;
                                                      statearr_127884[15] = inst_127842;
                                                      return statearr_127884;
                                                    }();
                                                    var statearr_127885_127921 = state_127849__$1;
                                                    statearr_127885_127921[2] = null;
                                                    statearr_127885_127921[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_127850 === 22) {
                                                      var inst_127839 = state_127849[2];
                                                      var state_127849__$1 = state_127849;
                                                      var statearr_127886_127922 = state_127849__$1;
                                                      statearr_127886_127922[2] = inst_127839;
                                                      statearr_127886_127922[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_127850 === 23) {
                                                        var inst_127827 = state_127849[10];
                                                        var inst_127831 = state_127849[2];
                                                        var inst_127832 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_127827);
                                                        var state_127849__$1 = function() {
                                                          var statearr_127887 = state_127849;
                                                          statearr_127887[16] = inst_127831;
                                                          return statearr_127887;
                                                        }();
                                                        var statearr_127888_127923 = state_127849__$1;
                                                        statearr_127888_127923[2] = inst_127832;
                                                        statearr_127888_127923[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_127850 === 24) {
                                                          try {
                                                            var inst_127829 = state_127849[11];
                                                            var inst_127779 = state_127849[5];
                                                            var inst_127835 = cljs.core.async.muxch_STAR_.call(null, inst_127829);
                                                            var state_127849__$1 = state_127849;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_127849__$1, 25, inst_127835, inst_127779);
                                                          } catch (e127889) {
                                                            if (e127889 instanceof Object) {
                                                              var ex__5826__auto__ = e127889;
                                                              var statearr_127890_127924 = state_127849;
                                                              statearr_127890_127924[1] = 23;
                                                              statearr_127890_127924[2] = ex__5826__auto__;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                throw e127889;
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        } else {
                                                          if (state_val_127850 === 25) {
                                                            try {
                                                              var inst_127837 = state_127849[2];
                                                              var state_127849__$1 = state_127849;
                                                              var statearr_127893_127925 = state_127849__$1;
                                                              statearr_127893_127925[2] = inst_127837;
                                                              statearr_127893_127925[1] = 22;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } catch (e127891) {
                                                              if (e127891 instanceof Object) {
                                                                var ex__5826__auto__ = e127891;
                                                                var statearr_127892_127926 = state_127849;
                                                                statearr_127892_127926[1] = 23;
                                                                statearr_127892_127926[2] = ex__5826__auto__;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                  throw e127891;
                                                                } else {
                                                                  return null;
                                                                }
                                                              }
                                                            }
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_127895 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_127895[0] = state_machine__5833__auto__;
              statearr_127895[1] = 1;
              return statearr_127895;
            };
            var state_machine__5833__auto____1 = function(state_127849) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_127849);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_127849) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_127849);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_127896 = f__5883__auto__.call(null);
        statearr_127896[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___127897;
        return statearr_127896;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5882__auto___128057 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_128029) {
          var state_val_128030 = state_128029[1];
          if (state_val_128030 === 1) {
            var state_128029__$1 = state_128029;
            var statearr_128031_128058 = state_128029__$1;
            statearr_128031_128058[2] = null;
            statearr_128031_128058[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_128030 === 2) {
              var inst_127993 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_127994 = 0;
              var state_128029__$1 = function() {
                var statearr_128032 = state_128029;
                statearr_128032[5] = inst_127993;
                statearr_128032[6] = inst_127994;
                return statearr_128032;
              }();
              var statearr_128033_128059 = state_128029__$1;
              statearr_128033_128059[2] = null;
              statearr_128033_128059[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_128030 === 3) {
                var inst_128027 = state_128029[2];
                var state_128029__$1 = state_128029;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_128029__$1, inst_128027);
              } else {
                if (state_val_128030 === 4) {
                  var inst_127994 = state_128029[6];
                  var inst_127996 = inst_127994 < cnt;
                  var state_128029__$1 = state_128029;
                  if (cljs.core.truth_(inst_127996)) {
                    var statearr_128034_128060 = state_128029__$1;
                    statearr_128034_128060[1] = 6;
                  } else {
                    var statearr_128035_128061 = state_128029__$1;
                    statearr_128035_128061[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_128030 === 5) {
                    var inst_128013 = state_128029[2];
                    var state_128029__$1 = function() {
                      var statearr_128036 = state_128029;
                      statearr_128036[7] = inst_128013;
                      return statearr_128036;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_128029__$1, 12, dchan);
                  } else {
                    if (state_val_128030 === 6) {
                      var state_128029__$1 = state_128029;
                      var statearr_128037_128062 = state_128029__$1;
                      statearr_128037_128062[2] = null;
                      statearr_128037_128062[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_128030 === 7) {
                        var state_128029__$1 = state_128029;
                        var statearr_128038_128063 = state_128029__$1;
                        statearr_128038_128063[2] = null;
                        statearr_128038_128063[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_128030 === 8) {
                          var inst_128011 = state_128029[2];
                          var state_128029__$1 = state_128029;
                          var statearr_128039_128064 = state_128029__$1;
                          statearr_128039_128064[2] = inst_128011;
                          statearr_128039_128064[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_128030 === 9) {
                            var inst_127994 = state_128029[6];
                            var inst_128006 = state_128029[2];
                            var inst_128007 = inst_127994 + 1;
                            var inst_127994__$1 = inst_128007;
                            var state_128029__$1 = function() {
                              var statearr_128040 = state_128029;
                              statearr_128040[6] = inst_127994__$1;
                              statearr_128040[8] = inst_128006;
                              return statearr_128040;
                            }();
                            var statearr_128041_128065 = state_128029__$1;
                            statearr_128041_128065[2] = null;
                            statearr_128041_128065[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_128030 === 10) {
                              var inst_127998 = state_128029[2];
                              var inst_127999 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_128029__$1 = function() {
                                var statearr_128042 = state_128029;
                                statearr_128042[9] = inst_127998;
                                return statearr_128042;
                              }();
                              var statearr_128043_128066 = state_128029__$1;
                              statearr_128043_128066[2] = inst_127999;
                              statearr_128043_128066[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_128030 === 11) {
                                try {
                                  var inst_127994 = state_128029[6];
                                  var inst_128002 = chs__$1.call(null, inst_127994);
                                  var inst_128003 = done.call(null, inst_127994);
                                  var inst_128004 = cljs.core.async.take_BANG_.call(null, inst_128002, inst_128003);
                                  var state_128029__$1 = state_128029;
                                  var statearr_128046_128067 = state_128029__$1;
                                  statearr_128046_128067[2] = inst_128004;
                                  statearr_128046_128067[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } catch (e128044) {
                                  if (e128044 instanceof Object) {
                                    var ex__5826__auto__ = e128044;
                                    var statearr_128045_128068 = state_128029;
                                    statearr_128045_128068[1] = 10;
                                    statearr_128045_128068[2] = ex__5826__auto__;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                      throw e128044;
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              } else {
                                if (state_val_128030 === 12) {
                                  var inst_128015 = state_128029[10];
                                  var inst_128015__$1 = state_128029[2];
                                  var inst_128016 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_128015__$1);
                                  var state_128029__$1 = function() {
                                    var statearr_128047 = state_128029;
                                    statearr_128047[10] = inst_128015__$1;
                                    return statearr_128047;
                                  }();
                                  if (cljs.core.truth_(inst_128016)) {
                                    var statearr_128048_128069 = state_128029__$1;
                                    statearr_128048_128069[1] = 13;
                                  } else {
                                    var statearr_128049_128070 = state_128029__$1;
                                    statearr_128049_128070[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_128030 === 13) {
                                    var inst_128018 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_128029__$1 = state_128029;
                                    var statearr_128050_128071 = state_128029__$1;
                                    statearr_128050_128071[2] = inst_128018;
                                    statearr_128050_128071[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_128030 === 14) {
                                      var inst_128015 = state_128029[10];
                                      var inst_128020 = cljs.core.apply.call(null, f, inst_128015);
                                      var state_128029__$1 = state_128029;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_128029__$1, 16, out, inst_128020);
                                    } else {
                                      if (state_val_128030 === 15) {
                                        var inst_128025 = state_128029[2];
                                        var state_128029__$1 = state_128029;
                                        var statearr_128051_128072 = state_128029__$1;
                                        statearr_128051_128072[2] = inst_128025;
                                        statearr_128051_128072[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_128030 === 16) {
                                          var inst_128022 = state_128029[2];
                                          var state_128029__$1 = function() {
                                            var statearr_128052 = state_128029;
                                            statearr_128052[11] = inst_128022;
                                            return statearr_128052;
                                          }();
                                          var statearr_128053_128073 = state_128029__$1;
                                          statearr_128053_128073[2] = null;
                                          statearr_128053_128073[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_128055 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_128055[0] = state_machine__5833__auto__;
              statearr_128055[1] = 1;
              return statearr_128055;
            };
            var state_machine__5833__auto____1 = function(state_128029) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_128029);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_128029) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_128029);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_128056 = f__5883__auto__.call(null);
        statearr_128056[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___128057;
        return statearr_128056;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5882__auto___128173 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_128153) {
          var state_val_128154 = state_128153[1];
          if (state_val_128154 === 1) {
            var inst_128124 = cljs.core.vec.call(null, chs);
            var inst_128125 = inst_128124;
            var state_128153__$1 = function() {
              var statearr_128155 = state_128153;
              statearr_128155[5] = inst_128125;
              return statearr_128155;
            }();
            var statearr_128156_128174 = state_128153__$1;
            statearr_128156_128174[2] = null;
            statearr_128156_128174[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_128154 === 2) {
              var inst_128125 = state_128153[5];
              var inst_128127 = cljs.core.count.call(null, inst_128125);
              var inst_128128 = inst_128127 > 0;
              var state_128153__$1 = state_128153;
              if (cljs.core.truth_(inst_128128)) {
                var statearr_128157_128175 = state_128153__$1;
                statearr_128157_128175[1] = 4;
              } else {
                var statearr_128158_128176 = state_128153__$1;
                statearr_128158_128176[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_128154 === 3) {
                var inst_128151 = state_128153[2];
                var state_128153__$1 = state_128153;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_128153__$1, inst_128151);
              } else {
                if (state_val_128154 === 4) {
                  var inst_128125 = state_128153[5];
                  var state_128153__$1 = state_128153;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_128153__$1, 7, inst_128125);
                } else {
                  if (state_val_128154 === 5) {
                    var inst_128147 = cljs.core.async.close_BANG_.call(null, out);
                    var state_128153__$1 = state_128153;
                    var statearr_128159_128177 = state_128153__$1;
                    statearr_128159_128177[2] = inst_128147;
                    statearr_128159_128177[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_128154 === 6) {
                      var inst_128149 = state_128153[2];
                      var state_128153__$1 = state_128153;
                      var statearr_128160_128178 = state_128153__$1;
                      statearr_128160_128178[2] = inst_128149;
                      statearr_128160_128178[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_128154 === 7) {
                        var inst_128133 = state_128153[6];
                        var inst_128132 = state_128153[7];
                        var inst_128132__$1 = state_128153[2];
                        var inst_128133__$1 = cljs.core.nth.call(null, inst_128132__$1, 0, null);
                        var inst_128134 = cljs.core.nth.call(null, inst_128132__$1, 1, null);
                        var inst_128135 = inst_128133__$1 == null;
                        var state_128153__$1 = function() {
                          var statearr_128161 = state_128153;
                          statearr_128161[8] = inst_128134;
                          statearr_128161[6] = inst_128133__$1;
                          statearr_128161[7] = inst_128132__$1;
                          return statearr_128161;
                        }();
                        if (cljs.core.truth_(inst_128135)) {
                          var statearr_128162_128179 = state_128153__$1;
                          statearr_128162_128179[1] = 8;
                        } else {
                          var statearr_128163_128180 = state_128153__$1;
                          statearr_128163_128180[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_128154 === 8) {
                          var inst_128125 = state_128153[5];
                          var inst_128134 = state_128153[8];
                          var inst_128133 = state_128153[6];
                          var inst_128132 = state_128153[7];
                          var inst_128137 = function() {
                            var c = inst_128134;
                            var v = inst_128133;
                            var vec__128130 = inst_128132;
                            var cs = inst_128125;
                            return function(c, v, vec__128130, cs, inst_128125, inst_128134, inst_128133, inst_128132, state_val_128154) {
                              return function(p1__128074_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__128074_SHARP_);
                              };
                            }(c, v, vec__128130, cs, inst_128125, inst_128134, inst_128133, inst_128132, state_val_128154);
                          }();
                          var inst_128138 = cljs.core.filterv.call(null, inst_128137, inst_128125);
                          var inst_128125__$1 = inst_128138;
                          var state_128153__$1 = function() {
                            var statearr_128164 = state_128153;
                            statearr_128164[5] = inst_128125__$1;
                            return statearr_128164;
                          }();
                          var statearr_128165_128181 = state_128153__$1;
                          statearr_128165_128181[2] = null;
                          statearr_128165_128181[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_128154 === 9) {
                            var inst_128133 = state_128153[6];
                            var state_128153__$1 = state_128153;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_128153__$1, 11, out, inst_128133);
                          } else {
                            if (state_val_128154 === 10) {
                              var inst_128145 = state_128153[2];
                              var state_128153__$1 = state_128153;
                              var statearr_128167_128182 = state_128153__$1;
                              statearr_128167_128182[2] = inst_128145;
                              statearr_128167_128182[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_128154 === 11) {
                                var inst_128125 = state_128153[5];
                                var inst_128142 = state_128153[2];
                                var tmp128166 = inst_128125;
                                var inst_128125__$1 = tmp128166;
                                var state_128153__$1 = function() {
                                  var statearr_128168 = state_128153;
                                  statearr_128168[9] = inst_128142;
                                  statearr_128168[5] = inst_128125__$1;
                                  return statearr_128168;
                                }();
                                var statearr_128169_128183 = state_128153__$1;
                                statearr_128169_128183[2] = null;
                                statearr_128169_128183[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_128171 = [null, null, null, null, null, null, null, null, null, null];
              statearr_128171[0] = state_machine__5833__auto__;
              statearr_128171[1] = 1;
              return statearr_128171;
            };
            var state_machine__5833__auto____1 = function(state_128153) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_128153);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_128153) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_128153);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_128172 = f__5883__auto__.call(null);
        statearr_128172[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___128173;
        return statearr_128172;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("chaperone.websocket");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc.Response");
goog.require("chaperone.crossover.rpc.Request");
goog.require("chaperone.crossover.rpc");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
chaperone.websocket.create_sub_system = function create_sub_system(system, host, port) {
  var sub_system = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "host", "host", 1017112858), host, new cljs.core.Keyword(null, "port", "port", 1017351155), port, new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), 
  new cljs.core.Keyword(null, "edn-readers", "edn-readers", 2679897956), chaperone.crossover.rpc.all_edn_readers.call(null)], null);
  return cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), sub_system);
};
chaperone.websocket.sub_system = function sub_system(system) {
  return(new cljs.core.Keyword(null, "websocket", "websocket", 784338745)).cljs$core$IFn$_invoke$arity$1(system);
};
chaperone.websocket.respond_BANG_ = function respond_BANG_(web_sockets, response) {
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_sockets);
  var rpc_id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(response));
  var rpc_chan = cljs.core.get.call(null, cljs.core.deref.call(null, rpc_map), rpc_id);
  cljs.core.async.put_BANG_.call(null, rpc_chan, response);
  cljs.core.async.close_BANG_.call(null, rpc_chan);
  return cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.dissoc, rpc_id);
};
chaperone.websocket.start_request_chan_listen_BANG_ = function start_request_chan_listen_BANG_(web_socket) {
  var socket = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(web_socket);
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_124596) {
        var state_val_124597 = state_124596[1];
        if (state_val_124597 === 8) {
          var inst_124588 = state_124596[2];
          var inst_124581 = inst_124588;
          var state_124596__$1 = function() {
            var statearr_124598 = state_124596;
            statearr_124598[5] = inst_124581;
            return statearr_124598;
          }();
          var statearr_124599_124610 = state_124596__$1;
          statearr_124599_124610[2] = null;
          statearr_124599_124610[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_124597 === 7) {
            var inst_124592 = state_124596[2];
            var state_124596__$1 = state_124596;
            var statearr_124600_124611 = state_124596__$1;
            statearr_124600_124611[2] = inst_124592;
            statearr_124600_124611[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_124597 === 6) {
              var state_124596__$1 = state_124596;
              var statearr_124601_124612 = state_124596__$1;
              statearr_124601_124612[2] = null;
              statearr_124601_124612[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_124597 === 5) {
                var inst_124586 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_124596__$1 = state_124596;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_124596__$1, 8, inst_124586);
              } else {
                if (state_val_124597 === 4) {
                  var inst_124594 = state_124596[2];
                  var state_124596__$1 = state_124596;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_124596__$1, inst_124594);
                } else {
                  if (state_val_124597 === 3) {
                    var inst_124581 = state_124596[5];
                    var inst_124583 = cljs.core.pr_str.call(null, inst_124581);
                    var inst_124584 = socket.send(inst_124583);
                    var state_124596__$1 = function() {
                      var statearr_124602 = state_124596;
                      statearr_124602[6] = inst_124584;
                      return statearr_124602;
                    }();
                    if (cljs.core.truth_(inst_124581)) {
                      var statearr_124603_124613 = state_124596__$1;
                      statearr_124603_124613[1] = 5;
                    } else {
                      var statearr_124604_124614 = state_124596__$1;
                      statearr_124604_124614[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_124597 === 2) {
                      var inst_124580 = state_124596[2];
                      var inst_124581 = inst_124580;
                      var state_124596__$1 = function() {
                        var statearr_124605 = state_124596;
                        statearr_124605[5] = inst_124581;
                        return statearr_124605;
                      }();
                      var statearr_124606_124615 = state_124596__$1;
                      statearr_124606_124615[2] = null;
                      statearr_124606_124615[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_124597 === 1) {
                        var inst_124578 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
                        var state_124596__$1 = state_124596;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_124596__$1, 2, inst_124578);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_124608 = [null, null, null, null, null, null, null];
            statearr_124608[0] = state_machine__5833__auto__;
            statearr_124608[1] = 1;
            return statearr_124608;
          };
          var state_machine__5833__auto____1 = function(state_124596) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_124596);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_124596) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_124596);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_124609 = f__5883__auto__.call(null);
      statearr_124609[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_124609;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
chaperone.websocket.start_response_chan_listen_BANG_ = function start_response_chan_listen_BANG_(web_socket) {
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_124666) {
        var state_val_124667 = state_124666[1];
        if (state_val_124667 === 8) {
          var inst_124658 = state_124666[2];
          var inst_124651 = inst_124658;
          var state_124666__$1 = function() {
            var statearr_124668 = state_124666;
            statearr_124668[5] = inst_124651;
            return statearr_124668;
          }();
          var statearr_124669_124680 = state_124666__$1;
          statearr_124669_124680[2] = null;
          statearr_124669_124680[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_124667 === 7) {
            var inst_124662 = state_124666[2];
            var state_124666__$1 = state_124666;
            var statearr_124670_124681 = state_124666__$1;
            statearr_124670_124681[2] = inst_124662;
            statearr_124670_124681[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_124667 === 6) {
              var state_124666__$1 = state_124666;
              var statearr_124671_124682 = state_124666__$1;
              statearr_124671_124682[2] = null;
              statearr_124671_124682[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_124667 === 5) {
                var inst_124656 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_124666__$1 = state_124666;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_124666__$1, 8, inst_124656);
              } else {
                if (state_val_124667 === 4) {
                  var inst_124664 = state_124666[2];
                  var state_124666__$1 = state_124666;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_124666__$1, inst_124664);
                } else {
                  if (state_val_124667 === 3) {
                    var inst_124651 = state_124666[5];
                    var inst_124653 = cljs.reader.read_string.call(null, inst_124651);
                    var inst_124654 = chaperone.websocket.respond_BANG_.call(null, web_socket, inst_124653);
                    var state_124666__$1 = function() {
                      var statearr_124672 = state_124666;
                      statearr_124672[6] = inst_124654;
                      return statearr_124672;
                    }();
                    if (cljs.core.truth_(inst_124651)) {
                      var statearr_124673_124683 = state_124666__$1;
                      statearr_124673_124683[1] = 5;
                    } else {
                      var statearr_124674_124684 = state_124666__$1;
                      statearr_124674_124684[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_124667 === 2) {
                      var inst_124650 = state_124666[2];
                      var inst_124651 = inst_124650;
                      var state_124666__$1 = function() {
                        var statearr_124675 = state_124666;
                        statearr_124675[5] = inst_124651;
                        return statearr_124675;
                      }();
                      var statearr_124676_124685 = state_124666__$1;
                      statearr_124676_124685[2] = null;
                      statearr_124676_124685[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_124667 === 1) {
                        var inst_124648 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket);
                        var state_124666__$1 = state_124666;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_124666__$1, 2, inst_124648);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_124678 = [null, null, null, null, null, null, null];
            statearr_124678[0] = state_machine__5833__auto__;
            statearr_124678[1] = 1;
            return statearr_124678;
          };
          var state_machine__5833__auto____1 = function(state_124666) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_124666);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_124666) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_124666);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_124679 = f__5883__auto__.call(null);
      statearr_124679[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_124679;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
chaperone.websocket.connect_websocket_BANG_ = function connect_websocket_BANG_(web_socket, socket_connected) {
  var ws_url = [cljs.core.str("ws://"), cljs.core.str((new cljs.core.Keyword(null, "host", "host", 1017112858)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str(":"), cljs.core.str((new cljs.core.Keyword(null, "port", "port", 1017351155)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str("/rpc")].join("");
  var socket = new WebSocket(ws_url);
  console.log("Connecting to WS: ", ws_url);
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onopen"], null), function() {
    console.log("Connected!");
    return cljs.core.async.put_BANG_.call(null, socket_connected, true);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onerror"], null), function(e) {
    return console.error("Websocket Error: ", e);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onmessage"], null), function(e) {
    console.log("On Message: ", purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
    return cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket), purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
  });
  return socket;
};
chaperone.websocket.start_BANG_ = function start_BANG_(system) {
  var seq__124702_124718 = cljs.core.seq.call(null, chaperone.crossover.rpc.all_edn_readers.call(null));
  var chunk__124703_124719 = null;
  var count__124704_124720 = 0;
  var i__124705_124721 = 0;
  while (true) {
    if (i__124705_124721 < count__124704_124720) {
      var vec__124706_124722 = cljs.core._nth.call(null, chunk__124703_124719, i__124705_124721);
      var tag_124723 = cljs.core.nth.call(null, vec__124706_124722, 0, null);
      var f_124724 = cljs.core.nth.call(null, vec__124706_124722, 1, null);
      cljs.reader.register_tag_parser_BANG_.call(null, tag_124723, f_124724);
      var G__124725 = seq__124702_124718;
      var G__124726 = chunk__124703_124719;
      var G__124727 = count__124704_124720;
      var G__124728 = i__124705_124721 + 1;
      seq__124702_124718 = G__124725;
      chunk__124703_124719 = G__124726;
      count__124704_124720 = G__124727;
      i__124705_124721 = G__124728;
      continue;
    } else {
      var temp__4092__auto___124729 = cljs.core.seq.call(null, seq__124702_124718);
      if (temp__4092__auto___124729) {
        var seq__124702_124730__$1 = temp__4092__auto___124729;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__124702_124730__$1)) {
          var c__4146__auto___124731 = cljs.core.chunk_first.call(null, seq__124702_124730__$1);
          var G__124732 = cljs.core.chunk_rest.call(null, seq__124702_124730__$1);
          var G__124733 = c__4146__auto___124731;
          var G__124734 = cljs.core.count.call(null, c__4146__auto___124731);
          var G__124735 = 0;
          seq__124702_124718 = G__124732;
          chunk__124703_124719 = G__124733;
          count__124704_124720 = G__124734;
          i__124705_124721 = G__124735;
          continue;
        } else {
          var vec__124707_124736 = cljs.core.first.call(null, seq__124702_124730__$1);
          var tag_124737 = cljs.core.nth.call(null, vec__124707_124736, 0, null);
          var f_124738 = cljs.core.nth.call(null, vec__124707_124736, 1, null);
          cljs.reader.register_tag_parser_BANG_.call(null, tag_124737, f_124738);
          var G__124739 = cljs.core.next.call(null, seq__124702_124730__$1);
          var G__124740 = null;
          var G__124741 = 0;
          var G__124742 = 0;
          seq__124702_124718 = G__124739;
          chunk__124703_124719 = G__124740;
          count__124704_124720 = G__124741;
          i__124705_124721 = G__124742;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  var socket_connected = cljs.core.async.timeout.call(null, 1E4);
  var socket = chaperone.websocket.connect_websocket_BANG_.call(null, web_socket, socket_connected);
  var web_socket__$1 = cljs.core.assoc.call(null, web_socket, new cljs.core.Keyword(null, "socket", "socket", 4411822821), socket);
  chaperone.websocket.start_response_chan_listen_BANG_.call(null, web_socket__$1);
  var system__$1 = cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), web_socket__$1);
  var c__5882__auto___124743 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_124712) {
        var state_val_124713 = state_124712[1];
        if (state_val_124713 === 2) {
          var inst_124709 = state_124712[2];
          var inst_124710 = chaperone.websocket.start_request_chan_listen_BANG_.call(null, web_socket__$1);
          var state_124712__$1 = function() {
            var statearr_124714 = state_124712;
            statearr_124714[5] = inst_124709;
            return statearr_124714;
          }();
          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_124712__$1, inst_124710);
        } else {
          if (state_val_124713 === 1) {
            var state_124712__$1 = state_124712;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_124712__$1, 2, socket_connected);
          } else {
            return null;
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_124716 = [null, null, null, null, null, null];
            statearr_124716[0] = state_machine__5833__auto__;
            statearr_124716[1] = 1;
            return statearr_124716;
          };
          var state_machine__5833__auto____1 = function(state_124712) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_124712);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_124712) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_124712);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_124717 = f__5883__auto__.call(null);
      statearr_124717[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto___124743;
      return statearr_124717;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return system__$1;
};
chaperone.websocket.stop_BANG_ = function stop_BANG_(system) {
  var web_socket_124744 = chaperone.websocket.sub_system.call(null, system);
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket_124744));
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket_124744));
  return system;
};
chaperone.websocket.send_BANG_ = function send_BANG_(web_socket, request) {
  var id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(request);
  var request_chan = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
  var result_chan = cljs.core.async.chan.call(null);
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_socket);
  cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.assoc, id, result_chan);
  cljs.core.async.put_BANG_.call(null, request_chan, request);
  return result_chan;
};
goog.provide("purnam.common");
goog.require("cljs.core");
purnam.common.flags = function() {
  var obj128587 = {};
  return obj128587;
}();
purnam.common.get_context = function get_context() {
  return purnam.common._STAR_pure_context_STAR_;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__128588 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__128588;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__128592 = cljs.core._EQ_;
    var expr__128593 = limit;
    if (cljs.core.truth_(pred__128592.call(null, 1, expr__128593))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__128592.call(null, 2, expr__128593))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__128595 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__128596 = limit__$1 - 1;
            var G__128597 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__128595;
            limit__$1 = G__128596;
            parts = G__128597;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__128598 = index - 1;
        index = G__128598;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___128599 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___128599)) {
        var replacement_128600 = temp__4090__auto___128599;
        buffer.append([cljs.core.str(replacement_128600)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__128601 = index + 1;
      index = G__128601;
      continue;
    }
    break;
  }
};
goog.provide("purnam.native$");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("purnam.common");
goog.require("purnam.common");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.native$.nested_val = function nested_val(p__128265, val) {
  var vec__128269 = p__128265;
  var k = cljs.core.nth.call(null, vec__128269, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__128269, 1);
  if (k == null) {
    return val;
  } else {
    var o = function() {
      var obj128271 = {};
      return obj128271;
    }();
    o[k] = nested_val.call(null, ks, val);
    return o;
  }
};
purnam.native$.nested_delete = function nested_delete(p__128272, val) {
  var vec__128274 = p__128272;
  var k = cljs.core.nth.call(null, vec__128274, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__128274, 1);
  if (ks == null) {
    delete val[k];
  } else {
    nested_delete.call(null, ks, val);
  }
  return val;
};
purnam.native$.aset_in = function() {
  var aset_in = null;
  var aset_in__2 = function(var$, arr) {
    return aset_in.call(null, var$, arr, null);
  };
  var aset_in__3 = function(var$, arr, val) {
    var vec__128276 = arr;
    var k = cljs.core.nth.call(null, vec__128276, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__128276, 1);
    if (k == null) {
    } else {
      if (cljs.core.empty_QMARK_.call(null, ks)) {
        if (cljs.core.truth_(val)) {
          var$[k] = val;
        } else {
          delete var$[k];
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var temp__4090__auto___128277 = var$[k];
          if (cljs.core.truth_(temp__4090__auto___128277)) {
            var svar_128278 = temp__4090__auto___128277;
            aset_in.call(null, svar_128278, ks, val);
          } else {
            if (cljs.core.truth_(val)) {
              var$[k] = purnam.native$.nested_val.call(null, ks, val);
            } else {
            }
          }
        } else {
        }
      }
    }
    return var$;
  };
  aset_in = function(var$, arr, val) {
    switch(arguments.length) {
      case 2:
        return aset_in__2.call(this, var$, arr);
      case 3:
        return aset_in__3.call(this, var$, arr, val);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset_in.cljs$core$IFn$_invoke$arity$2 = aset_in__2;
  aset_in.cljs$core$IFn$_invoke$arity$3 = aset_in__3;
  return aset_in;
}();
purnam.native$.aget_in = function() {
  var aget_in = null;
  var aget_in__1 = function(var$) {
    return var$;
  };
  var aget_in__2 = function(var$, arr) {
    if (var$ == null) {
      return null;
    } else {
      if (cljs.core.empty_QMARK_.call(null, arr)) {
        return var$;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return aget_in.call(null, var$[cljs.core.first.call(null, arr)], cljs.core.next.call(null, arr));
        } else {
          return null;
        }
      }
    }
  };
  aget_in = function(var$, arr) {
    switch(arguments.length) {
      case 1:
        return aget_in__1.call(this, var$);
      case 2:
        return aget_in__2.call(this, var$, arr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget_in.cljs$core$IFn$_invoke$arity$1 = aget_in__1;
  aget_in.cljs$core$IFn$_invoke$arity$2 = aget_in__2;
  return aget_in;
}();
purnam.native$.js_strkey = function js_strkey(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(x)].join("");
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_obj_name = function js_obj_name(this$) {
  var temp__4090__auto__ = cljs.core.re_find.call(null, /^function (\w+)/, [cljs.core.str(this$)].join(""));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__128280 = temp__4090__auto__;
    var _ = cljs.core.nth.call(null, vec__128280, 0, null);
    var n = cljs.core.nth.call(null, vec__128280, 1, null);
    return n;
  } else {
    return "Object";
  }
};
purnam.native$.js_type = function js_type(o) {
  var ty = cljs.core.type.call(null, o);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3392__auto__ = ty;
    if (cljs.core.truth_(and__3392__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3392__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(o);
  return ty__$1;
};
purnam.native$.js_lookup = function() {
  var js_lookup = null;
  var js_lookup__2 = function(o, k) {
    return o[purnam.native$.js_strkey.call(null, k)];
  };
  var js_lookup__3 = function(o, k, not_found) {
    var s = purnam.native$.js_strkey.call(null, k);
    var temp__4090__auto__ = o[s];
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return res;
    } else {
      return not_found;
    }
  };
  js_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return js_lookup__2.call(this, o, k);
      case 3:
        return js_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_lookup.cljs$core$IFn$_invoke$arity$2 = js_lookup__2;
  js_lookup.cljs$core$IFn$_invoke$arity$3 = js_lookup__3;
  return js_lookup;
}();
purnam.native$.js_range = function js_range(n) {
  var res = new Array(n);
  var i = 0;
  while (true) {
    if (i < n) {
      res.push(i);
      var G__128281 = i + 1;
      i = G__128281;
      continue;
    } else {
      return res;
    }
    break;
  }
};
purnam.native$.js_assoc = function() {
  var js_assoc = null;
  var js_assoc__3 = function(o, k, v) {
    o[purnam.native$.js_strkey.call(null, k)] = v;
    return o;
  };
  var js_assoc__4 = function() {
    var G__128282__delegate = function(o, k, v, more) {
      while (true) {
        js_assoc.call(null, o, k, v);
        if (cljs.core.truth_(more)) {
          var G__128283 = o;
          var G__128284 = cljs.core.first.call(null, more);
          var G__128285 = cljs.core.second.call(null, more);
          var G__128286 = cljs.core.nnext.call(null, more);
          o = G__128283;
          k = G__128284;
          v = G__128285;
          more = G__128286;
          continue;
        } else {
          return o;
        }
        break;
      }
    };
    var G__128282 = function(o, k, v, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__128282__delegate.call(this, o, k, v, more);
    };
    G__128282.cljs$lang$maxFixedArity = 3;
    G__128282.cljs$lang$applyTo = function(arglist__128287) {
      var o = cljs.core.first(arglist__128287);
      arglist__128287 = cljs.core.next(arglist__128287);
      var k = cljs.core.first(arglist__128287);
      arglist__128287 = cljs.core.next(arglist__128287);
      var v = cljs.core.first(arglist__128287);
      var more = cljs.core.rest(arglist__128287);
      return G__128282__delegate(o, k, v, more);
    };
    G__128282.cljs$core$IFn$_invoke$arity$variadic = G__128282__delegate;
    return G__128282;
  }();
  js_assoc = function(o, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return js_assoc__3.call(this, o, k, v);
      default:
        return js_assoc__4.cljs$core$IFn$_invoke$arity$variadic(o, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_assoc.cljs$lang$maxFixedArity = 3;
  js_assoc.cljs$lang$applyTo = js_assoc__4.cljs$lang$applyTo;
  js_assoc.cljs$core$IFn$_invoke$arity$3 = js_assoc__3;
  js_assoc.cljs$core$IFn$_invoke$arity$variadic = js_assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return js_assoc;
}();
purnam.native$.js_dissoc = function() {
  var js_dissoc__delegate = function(o, k, more) {
    while (true) {
      delete o[purnam.native$.js_strkey.call(null, k)];
      if (cljs.core.truth_(more)) {
        var G__128288 = o;
        var G__128289 = cljs.core.first.call(null, more);
        var G__128290 = cljs.core.next.call(null, more);
        o = G__128288;
        k = G__128289;
        more = G__128290;
        continue;
      } else {
        return o;
      }
      break;
    }
  };
  var js_dissoc = function(o, k, var_args) {
    var more = null;
    if (arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return js_dissoc__delegate.call(this, o, k, more);
  };
  js_dissoc.cljs$lang$maxFixedArity = 2;
  js_dissoc.cljs$lang$applyTo = function(arglist__128291) {
    var o = cljs.core.first(arglist__128291);
    arglist__128291 = cljs.core.next(arglist__128291);
    var k = cljs.core.first(arglist__128291);
    var more = cljs.core.rest(arglist__128291);
    return js_dissoc__delegate(o, k, more);
  };
  js_dissoc.cljs$core$IFn$_invoke$arity$variadic = js_dissoc__delegate;
  return js_dissoc;
}();
purnam.native$.js_empty = function js_empty(o) {
  var G__128297_128302 = goog.typeOf(o);
  if (cljs.core._EQ_.call(null, "array", G__128297_128302)) {
    o["length"] = 0;
  } else {
    if (cljs.core._EQ_.call(null, "object", G__128297_128302)) {
      var seq__128298_128303 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o));
      var chunk__128299_128304 = null;
      var count__128300_128305 = 0;
      var i__128301_128306 = 0;
      while (true) {
        if (i__128301_128306 < count__128300_128305) {
          var k_128307 = cljs.core._nth.call(null, chunk__128299_128304, i__128301_128306);
          delete o[k_128307];
          var G__128308 = seq__128298_128303;
          var G__128309 = chunk__128299_128304;
          var G__128310 = count__128300_128305;
          var G__128311 = i__128301_128306 + 1;
          seq__128298_128303 = G__128308;
          chunk__128299_128304 = G__128309;
          count__128300_128305 = G__128310;
          i__128301_128306 = G__128311;
          continue;
        } else {
          var temp__4092__auto___128312 = cljs.core.seq.call(null, seq__128298_128303);
          if (temp__4092__auto___128312) {
            var seq__128298_128313__$1 = temp__4092__auto___128312;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__128298_128313__$1)) {
              var c__4146__auto___128314 = cljs.core.chunk_first.call(null, seq__128298_128313__$1);
              var G__128315 = cljs.core.chunk_rest.call(null, seq__128298_128313__$1);
              var G__128316 = c__4146__auto___128314;
              var G__128317 = cljs.core.count.call(null, c__4146__auto___128314);
              var G__128318 = 0;
              seq__128298_128303 = G__128315;
              chunk__128299_128304 = G__128316;
              count__128300_128305 = G__128317;
              i__128301_128306 = G__128318;
              continue;
            } else {
              var k_128319 = cljs.core.first.call(null, seq__128298_128313__$1);
              delete o[k_128319];
              var G__128320 = cljs.core.next.call(null, seq__128298_128313__$1);
              var G__128321 = null;
              var G__128322 = 0;
              var G__128323 = 0;
              seq__128298_128303 = G__128320;
              chunk__128299_128304 = G__128321;
              count__128300_128305 = G__128322;
              i__128301_128306 = G__128323;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(goog.typeOf(o))].join(""));
      } else {
      }
    }
  }
  return o;
};
purnam.native$.js_merge = function() {
  var js_merge = null;
  var js_merge__2 = function(o1, o2) {
    var seq__128328_128332 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__128329_128333 = null;
    var count__128330_128334 = 0;
    var i__128331_128335 = 0;
    while (true) {
      if (i__128331_128335 < count__128330_128334) {
        var k_128336 = cljs.core._nth.call(null, chunk__128329_128333, i__128331_128335);
        o1[k_128336] = o2[k_128336];
        var G__128337 = seq__128328_128332;
        var G__128338 = chunk__128329_128333;
        var G__128339 = count__128330_128334;
        var G__128340 = i__128331_128335 + 1;
        seq__128328_128332 = G__128337;
        chunk__128329_128333 = G__128338;
        count__128330_128334 = G__128339;
        i__128331_128335 = G__128340;
        continue;
      } else {
        var temp__4092__auto___128341 = cljs.core.seq.call(null, seq__128328_128332);
        if (temp__4092__auto___128341) {
          var seq__128328_128342__$1 = temp__4092__auto___128341;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__128328_128342__$1)) {
            var c__4146__auto___128343 = cljs.core.chunk_first.call(null, seq__128328_128342__$1);
            var G__128344 = cljs.core.chunk_rest.call(null, seq__128328_128342__$1);
            var G__128345 = c__4146__auto___128343;
            var G__128346 = cljs.core.count.call(null, c__4146__auto___128343);
            var G__128347 = 0;
            seq__128328_128332 = G__128344;
            chunk__128329_128333 = G__128345;
            count__128330_128334 = G__128346;
            i__128331_128335 = G__128347;
            continue;
          } else {
            var k_128348 = cljs.core.first.call(null, seq__128328_128342__$1);
            o1[k_128348] = o2[k_128348];
            var G__128349 = cljs.core.next.call(null, seq__128328_128342__$1);
            var G__128350 = null;
            var G__128351 = 0;
            var G__128352 = 0;
            seq__128328_128332 = G__128349;
            chunk__128329_128333 = G__128350;
            count__128330_128334 = G__128351;
            i__128331_128335 = G__128352;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge__3 = function() {
    var G__128353__delegate = function(o1, o2, more) {
      return cljs.core.apply.call(null, js_merge, js_merge.call(null, o1, o2), more);
    };
    var G__128353 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__128353__delegate.call(this, o1, o2, more);
    };
    G__128353.cljs$lang$maxFixedArity = 2;
    G__128353.cljs$lang$applyTo = function(arglist__128354) {
      var o1 = cljs.core.first(arglist__128354);
      arglist__128354 = cljs.core.next(arglist__128354);
      var o2 = cljs.core.first(arglist__128354);
      var more = cljs.core.rest(arglist__128354);
      return G__128353__delegate(o1, o2, more);
    };
    G__128353.cljs$core$IFn$_invoke$arity$variadic = G__128353__delegate;
    return G__128353;
  }();
  js_merge = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge__2.call(this, o1, o2);
      default:
        return js_merge__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge.cljs$lang$maxFixedArity = 2;
  js_merge.cljs$lang$applyTo = js_merge__3.cljs$lang$applyTo;
  js_merge.cljs$core$IFn$_invoke$arity$2 = js_merge__2;
  js_merge.cljs$core$IFn$_invoke$arity$variadic = js_merge__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge;
}();
purnam.native$.js_merge_nil = function() {
  var js_merge_nil = null;
  var js_merge_nil__2 = function(o1, o2) {
    var seq__128359_128363 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__128360_128364 = null;
    var count__128361_128365 = 0;
    var i__128362_128366 = 0;
    while (true) {
      if (i__128362_128366 < count__128361_128365) {
        var k_128367 = cljs.core._nth.call(null, chunk__128360_128364, i__128362_128366);
        if (cljs.core.not.call(null, o1[k_128367])) {
          o1[k_128367] = o2[k_128367];
        } else {
        }
        var G__128368 = seq__128359_128363;
        var G__128369 = chunk__128360_128364;
        var G__128370 = count__128361_128365;
        var G__128371 = i__128362_128366 + 1;
        seq__128359_128363 = G__128368;
        chunk__128360_128364 = G__128369;
        count__128361_128365 = G__128370;
        i__128362_128366 = G__128371;
        continue;
      } else {
        var temp__4092__auto___128372 = cljs.core.seq.call(null, seq__128359_128363);
        if (temp__4092__auto___128372) {
          var seq__128359_128373__$1 = temp__4092__auto___128372;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__128359_128373__$1)) {
            var c__4146__auto___128374 = cljs.core.chunk_first.call(null, seq__128359_128373__$1);
            var G__128375 = cljs.core.chunk_rest.call(null, seq__128359_128373__$1);
            var G__128376 = c__4146__auto___128374;
            var G__128377 = cljs.core.count.call(null, c__4146__auto___128374);
            var G__128378 = 0;
            seq__128359_128363 = G__128375;
            chunk__128360_128364 = G__128376;
            count__128361_128365 = G__128377;
            i__128362_128366 = G__128378;
            continue;
          } else {
            var k_128379 = cljs.core.first.call(null, seq__128359_128373__$1);
            if (cljs.core.not.call(null, o1[k_128379])) {
              o1[k_128379] = o2[k_128379];
            } else {
            }
            var G__128380 = cljs.core.next.call(null, seq__128359_128373__$1);
            var G__128381 = null;
            var G__128382 = 0;
            var G__128383 = 0;
            seq__128359_128363 = G__128380;
            chunk__128360_128364 = G__128381;
            count__128361_128365 = G__128382;
            i__128362_128366 = G__128383;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge_nil__3 = function() {
    var G__128384__delegate = function(o1, o2, more) {
      while (true) {
        js_merge_nil.call(null, o1, o2);
        if (cljs.core.truth_(more)) {
          var G__128385 = js_merge_nil.call(null, o1, o2);
          var G__128386 = cljs.core.first.call(null, more);
          var G__128387 = cljs.core.next.call(null, more);
          o1 = G__128385;
          o2 = G__128386;
          more = G__128387;
          continue;
        } else {
          return o1;
        }
        break;
      }
    };
    var G__128384 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__128384__delegate.call(this, o1, o2, more);
    };
    G__128384.cljs$lang$maxFixedArity = 2;
    G__128384.cljs$lang$applyTo = function(arglist__128388) {
      var o1 = cljs.core.first(arglist__128388);
      arglist__128388 = cljs.core.next(arglist__128388);
      var o2 = cljs.core.first(arglist__128388);
      var more = cljs.core.rest(arglist__128388);
      return G__128384__delegate(o1, o2, more);
    };
    G__128384.cljs$core$IFn$_invoke$arity$variadic = G__128384__delegate;
    return G__128384;
  }();
  js_merge_nil = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge_nil__2.call(this, o1, o2);
      default:
        return js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge_nil.cljs$lang$maxFixedArity = 2;
  js_merge_nil.cljs$lang$applyTo = js_merge_nil__3.cljs$lang$applyTo;
  js_merge_nil.cljs$core$IFn$_invoke$arity$2 = js_merge_nil__2;
  js_merge_nil.cljs$core$IFn$_invoke$arity$variadic = js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge_nil;
}();
purnam.native$.js_replace = function js_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_merge.call(null, o1, o2);
};
purnam.native$.js_equals = function js_equals(v1, v2) {
  if (cljs.core._EQ_.call(null, v1, v2)) {
    return true;
  } else {
    var t1 = goog.typeOf(v1);
    var t2 = goog.typeOf(v2);
    if (cljs.core._EQ_.call(null, "array", t1, t2)) {
      return goog.array.equals(v1, v2, js_equals);
    } else {
      if (cljs.core._EQ_.call(null, "object", t1, t2)) {
        var ks1 = cljs.core.js_keys.call(null, v1).sort();
        var ks2 = cljs.core.js_keys.call(null, v2).sort();
        if (cljs.core.truth_(goog.array.equals(ks1, ks2))) {
          return goog.array.every(ks1, function(k) {
            return js_equals.call(null, v1[k], v2[k]);
          });
        } else {
          return false;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
  }
};
purnam.native$.js_copy = function js_copy(o) {
  return goog.object.clone(o);
};
purnam.native$.js_initial_value = function js_initial_value(v) {
  var t = goog.typeOf(v);
  if (cljs.core._EQ_.call(null, t, "object")) {
    var obj128392 = {};
    return obj128392;
  } else {
    if (cljs.core._EQ_.call(null, t, "array")) {
      return[];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return v;
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_deep_extend = function() {
  var js_deep_extend = null;
  var js_deep_extend__2 = function(to, from) {
    var visited = [from];
    var visitedlu = [to];
    js_deep_extend.call(null, to, from, visited, visitedlu);
    return to;
  };
  var js_deep_extend__4 = function(to, from, visited, visitedlu) {
    var seq__128397_128401 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, from));
    var chunk__128398_128402 = null;
    var count__128399_128403 = 0;
    var i__128400_128404 = 0;
    while (true) {
      if (i__128400_128404 < count__128399_128403) {
        var k_128405 = cljs.core._nth.call(null, chunk__128398_128402, i__128400_128404);
        var v_128406 = from[k_128405];
        var vn_128407 = purnam.native$.js_initial_value.call(null, v_128406);
        if (cljs.core.not_EQ_.call(null, v_128406, vn_128407)) {
          var i_128408 = visited.indexOf(v_128406);
          if (cljs.core._EQ_.call(null, -1, i_128408)) {
            visited.push(v_128406);
            visitedlu.push(vn_128407);
            js_deep_extend.call(null, vn_128407, v_128406, visited, visitedlu);
            to[k_128405] = vn_128407;
          } else {
            to[k_128405] = visitedlu[i_128408];
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            to[k_128405] = v_128406;
          } else {
          }
        }
        var G__128409 = seq__128397_128401;
        var G__128410 = chunk__128398_128402;
        var G__128411 = count__128399_128403;
        var G__128412 = i__128400_128404 + 1;
        seq__128397_128401 = G__128409;
        chunk__128398_128402 = G__128410;
        count__128399_128403 = G__128411;
        i__128400_128404 = G__128412;
        continue;
      } else {
        var temp__4092__auto___128413 = cljs.core.seq.call(null, seq__128397_128401);
        if (temp__4092__auto___128413) {
          var seq__128397_128414__$1 = temp__4092__auto___128413;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__128397_128414__$1)) {
            var c__4146__auto___128415 = cljs.core.chunk_first.call(null, seq__128397_128414__$1);
            var G__128416 = cljs.core.chunk_rest.call(null, seq__128397_128414__$1);
            var G__128417 = c__4146__auto___128415;
            var G__128418 = cljs.core.count.call(null, c__4146__auto___128415);
            var G__128419 = 0;
            seq__128397_128401 = G__128416;
            chunk__128398_128402 = G__128417;
            count__128399_128403 = G__128418;
            i__128400_128404 = G__128419;
            continue;
          } else {
            var k_128420 = cljs.core.first.call(null, seq__128397_128414__$1);
            var v_128421 = from[k_128420];
            var vn_128422 = purnam.native$.js_initial_value.call(null, v_128421);
            if (cljs.core.not_EQ_.call(null, v_128421, vn_128422)) {
              var i_128423 = visited.indexOf(v_128421);
              if (cljs.core._EQ_.call(null, -1, i_128423)) {
                visited.push(v_128421);
                visitedlu.push(vn_128422);
                js_deep_extend.call(null, vn_128422, v_128421, visited, visitedlu);
                to[k_128420] = vn_128422;
              } else {
                to[k_128420] = visitedlu[i_128423];
              }
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                to[k_128420] = v_128421;
              } else {
              }
            }
            var G__128424 = cljs.core.next.call(null, seq__128397_128414__$1);
            var G__128425 = null;
            var G__128426 = 0;
            var G__128427 = 0;
            seq__128397_128401 = G__128424;
            chunk__128398_128402 = G__128425;
            count__128399_128403 = G__128426;
            i__128400_128404 = G__128427;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return to;
  };
  js_deep_extend = function(to, from, visited, visitedlu) {
    switch(arguments.length) {
      case 2:
        return js_deep_extend__2.call(this, to, from);
      case 4:
        return js_deep_extend__4.call(this, to, from, visited, visitedlu);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_deep_extend.cljs$core$IFn$_invoke$arity$2 = js_deep_extend__2;
  js_deep_extend.cljs$core$IFn$_invoke$arity$4 = js_deep_extend__4;
  return js_deep_extend;
}();
purnam.native$.js_deep_copy = function js_deep_copy(value) {
  var vn = purnam.native$.js_initial_value.call(null, value);
  if (cljs.core.not_EQ_.call(null, value, vn)) {
    return purnam.native$.js_deep_extend.call(null, vn, value);
  } else {
    return value;
  }
};
purnam.native$.js_deep_replace = function js_deep_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_deep_extend.call(null, o1, o2);
};
purnam.native$.js_map_STAR_ = function() {
  var js_map_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var seq__128433_128437 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__128434_128438 = null;
    var count__128435_128439 = 0;
    var i__128436_128440 = 0;
    while (true) {
      if (i__128436_128440 < count__128435_128439) {
        var i_128441 = cljs.core._nth.call(null, chunk__128434_128438, i__128436_128440);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__128433_128437, chunk__128434_128438, count__128435_128439, i__128436_128440, i_128441) {
          return function(p1__128428_SHARP_) {
            return p1__128428_SHARP_[i_128441];
          };
        }(seq__128433_128437, chunk__128434_128438, count__128435_128439, i__128436_128440, i_128441), args)));
        var G__128442 = seq__128433_128437;
        var G__128443 = chunk__128434_128438;
        var G__128444 = count__128435_128439;
        var G__128445 = i__128436_128440 + 1;
        seq__128433_128437 = G__128442;
        chunk__128434_128438 = G__128443;
        count__128435_128439 = G__128444;
        i__128436_128440 = G__128445;
        continue;
      } else {
        var temp__4092__auto___128446 = cljs.core.seq.call(null, seq__128433_128437);
        if (temp__4092__auto___128446) {
          var seq__128433_128447__$1 = temp__4092__auto___128446;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__128433_128447__$1)) {
            var c__4146__auto___128448 = cljs.core.chunk_first.call(null, seq__128433_128447__$1);
            var G__128449 = cljs.core.chunk_rest.call(null, seq__128433_128447__$1);
            var G__128450 = c__4146__auto___128448;
            var G__128451 = cljs.core.count.call(null, c__4146__auto___128448);
            var G__128452 = 0;
            seq__128433_128437 = G__128449;
            chunk__128434_128438 = G__128450;
            count__128435_128439 = G__128451;
            i__128436_128440 = G__128452;
            continue;
          } else {
            var i_128453 = cljs.core.first.call(null, seq__128433_128447__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__128433_128437, chunk__128434_128438, count__128435_128439, i__128436_128440, i_128453, seq__128433_128447__$1, temp__4092__auto___128446) {
              return function(p1__128428_SHARP_) {
                return p1__128428_SHARP_[i_128453];
              };
            }(seq__128433_128437, chunk__128434_128438, count__128435_128439, i__128436_128440, i_128453, seq__128433_128447__$1, temp__4092__auto___128446), args)));
            var G__128454 = cljs.core.next.call(null, seq__128433_128447__$1);
            var G__128455 = null;
            var G__128456 = 0;
            var G__128457 = 0;
            seq__128433_128437 = G__128454;
            chunk__128434_128438 = G__128455;
            count__128435_128439 = G__128456;
            i__128436_128440 = G__128457;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map_STAR___delegate.call(this, f, args);
  };
  js_map_STAR_.cljs$lang$maxFixedArity = 1;
  js_map_STAR_.cljs$lang$applyTo = function(arglist__128458) {
    var f = cljs.core.first(arglist__128458);
    var args = cljs.core.rest(arglist__128458);
    return js_map_STAR___delegate(f, args);
  };
  js_map_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_map_STAR___delegate;
  return js_map_STAR_;
}();
purnam.native$.js_mapcat_STAR_ = function() {
  var js_mapcat_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__128459_SHARP_) {
            return p1__128459_SHARP_[i];
          };
        }(i, output__$1), args));
        var G__128460 = i + 1;
        var G__128461 = output__$1.concat(res);
        i = G__128460;
        output__$1 = G__128461;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat_STAR___delegate.call(this, f, args);
  };
  js_mapcat_STAR_.cljs$lang$maxFixedArity = 1;
  js_mapcat_STAR_.cljs$lang$applyTo = function(arglist__128462) {
    var f = cljs.core.first(arglist__128462);
    var args = cljs.core.rest(arglist__128462);
    return js_mapcat_STAR___delegate(f, args);
  };
  js_mapcat_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_mapcat_STAR___delegate;
  return js_mapcat_STAR_;
}();
purnam.native$.js_map = function() {
  var js_map__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var seq__128468_128472 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__128469_128473 = null;
    var count__128470_128474 = 0;
    var i__128471_128475 = 0;
    while (true) {
      if (i__128471_128475 < count__128470_128474) {
        var i_128476 = cljs.core._nth.call(null, chunk__128469_128473, i__128471_128475);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__128468_128472, chunk__128469_128473, count__128470_128474, i__128471_128475, i_128476) {
          return function(p1__128463_SHARP_) {
            return cljs.core.nth.call(null, p1__128463_SHARP_, i_128476);
          };
        }(seq__128468_128472, chunk__128469_128473, count__128470_128474, i__128471_128475, i_128476), args)));
        var G__128477 = seq__128468_128472;
        var G__128478 = chunk__128469_128473;
        var G__128479 = count__128470_128474;
        var G__128480 = i__128471_128475 + 1;
        seq__128468_128472 = G__128477;
        chunk__128469_128473 = G__128478;
        count__128470_128474 = G__128479;
        i__128471_128475 = G__128480;
        continue;
      } else {
        var temp__4092__auto___128481 = cljs.core.seq.call(null, seq__128468_128472);
        if (temp__4092__auto___128481) {
          var seq__128468_128482__$1 = temp__4092__auto___128481;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__128468_128482__$1)) {
            var c__4146__auto___128483 = cljs.core.chunk_first.call(null, seq__128468_128482__$1);
            var G__128484 = cljs.core.chunk_rest.call(null, seq__128468_128482__$1);
            var G__128485 = c__4146__auto___128483;
            var G__128486 = cljs.core.count.call(null, c__4146__auto___128483);
            var G__128487 = 0;
            seq__128468_128472 = G__128484;
            chunk__128469_128473 = G__128485;
            count__128470_128474 = G__128486;
            i__128471_128475 = G__128487;
            continue;
          } else {
            var i_128488 = cljs.core.first.call(null, seq__128468_128482__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__128468_128472, chunk__128469_128473, count__128470_128474, i__128471_128475, i_128488, seq__128468_128482__$1, temp__4092__auto___128481) {
              return function(p1__128463_SHARP_) {
                return cljs.core.nth.call(null, p1__128463_SHARP_, i_128488);
              };
            }(seq__128468_128472, chunk__128469_128473, count__128470_128474, i__128471_128475, i_128488, seq__128468_128482__$1, temp__4092__auto___128481), args)));
            var G__128489 = cljs.core.next.call(null, seq__128468_128482__$1);
            var G__128490 = null;
            var G__128491 = 0;
            var G__128492 = 0;
            seq__128468_128472 = G__128489;
            chunk__128469_128473 = G__128490;
            count__128470_128474 = G__128491;
            i__128471_128475 = G__128492;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map__delegate.call(this, f, args);
  };
  js_map.cljs$lang$maxFixedArity = 1;
  js_map.cljs$lang$applyTo = function(arglist__128493) {
    var f = cljs.core.first(arglist__128493);
    var args = cljs.core.rest(arglist__128493);
    return js_map__delegate(f, args);
  };
  js_map.cljs$core$IFn$_invoke$arity$variadic = js_map__delegate;
  return js_map;
}();
purnam.native$.js_mapcat = function() {
  var js_mapcat__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__128494_SHARP_) {
            return cljs.core.nth.call(null, p1__128494_SHARP_, i);
          };
        }(i, output__$1), args));
        var G__128495 = i + 1;
        var G__128496 = output__$1.concat(res);
        i = G__128495;
        output__$1 = G__128496;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat__delegate.call(this, f, args);
  };
  js_mapcat.cljs$lang$maxFixedArity = 1;
  js_mapcat.cljs$lang$applyTo = function(arglist__128497) {
    var f = cljs.core.first(arglist__128497);
    var args = cljs.core.rest(arglist__128497);
    return js_mapcat__delegate(f, args);
  };
  js_mapcat.cljs$core$IFn$_invoke$arity$variadic = js_mapcat__delegate;
  return js_mapcat;
}();
purnam.native$.js_concat = function() {
  var js_concat__delegate = function(args) {
    var output = [];
    var seq__128510_128522 = cljs.core.seq.call(null, args);
    var chunk__128515_128523 = null;
    var count__128516_128524 = 0;
    var i__128517_128525 = 0;
    while (true) {
      if (i__128517_128525 < count__128516_128524) {
        var ar_128526 = cljs.core._nth.call(null, chunk__128515_128523, i__128517_128525);
        var seq__128518_128527 = cljs.core.seq.call(null, ar_128526);
        var chunk__128519_128528 = null;
        var count__128520_128529 = 0;
        var i__128521_128530 = 0;
        while (true) {
          if (i__128521_128530 < count__128520_128529) {
            var v_128531 = cljs.core._nth.call(null, chunk__128519_128528, i__128521_128530);
            output.push(v_128531);
            var G__128532 = seq__128518_128527;
            var G__128533 = chunk__128519_128528;
            var G__128534 = count__128520_128529;
            var G__128535 = i__128521_128530 + 1;
            seq__128518_128527 = G__128532;
            chunk__128519_128528 = G__128533;
            count__128520_128529 = G__128534;
            i__128521_128530 = G__128535;
            continue;
          } else {
            var temp__4092__auto___128536 = cljs.core.seq.call(null, seq__128518_128527);
            if (temp__4092__auto___128536) {
              var seq__128518_128537__$1 = temp__4092__auto___128536;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__128518_128537__$1)) {
                var c__4146__auto___128538 = cljs.core.chunk_first.call(null, seq__128518_128537__$1);
                var G__128539 = cljs.core.chunk_rest.call(null, seq__128518_128537__$1);
                var G__128540 = c__4146__auto___128538;
                var G__128541 = cljs.core.count.call(null, c__4146__auto___128538);
                var G__128542 = 0;
                seq__128518_128527 = G__128539;
                chunk__128519_128528 = G__128540;
                count__128520_128529 = G__128541;
                i__128521_128530 = G__128542;
                continue;
              } else {
                var v_128543 = cljs.core.first.call(null, seq__128518_128537__$1);
                output.push(v_128543);
                var G__128544 = cljs.core.next.call(null, seq__128518_128537__$1);
                var G__128545 = null;
                var G__128546 = 0;
                var G__128547 = 0;
                seq__128518_128527 = G__128544;
                chunk__128519_128528 = G__128545;
                count__128520_128529 = G__128546;
                i__128521_128530 = G__128547;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__128548 = seq__128510_128522;
        var G__128549 = chunk__128515_128523;
        var G__128550 = count__128516_128524;
        var G__128551 = i__128517_128525 + 1;
        seq__128510_128522 = G__128548;
        chunk__128515_128523 = G__128549;
        count__128516_128524 = G__128550;
        i__128517_128525 = G__128551;
        continue;
      } else {
        var temp__4092__auto___128552 = cljs.core.seq.call(null, seq__128510_128522);
        if (temp__4092__auto___128552) {
          var seq__128510_128553__$1 = temp__4092__auto___128552;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__128510_128553__$1)) {
            var c__4146__auto___128554 = cljs.core.chunk_first.call(null, seq__128510_128553__$1);
            var G__128555 = cljs.core.chunk_rest.call(null, seq__128510_128553__$1);
            var G__128556 = c__4146__auto___128554;
            var G__128557 = cljs.core.count.call(null, c__4146__auto___128554);
            var G__128558 = 0;
            seq__128510_128522 = G__128555;
            chunk__128515_128523 = G__128556;
            count__128516_128524 = G__128557;
            i__128517_128525 = G__128558;
            continue;
          } else {
            var ar_128559 = cljs.core.first.call(null, seq__128510_128553__$1);
            var seq__128511_128560 = cljs.core.seq.call(null, ar_128559);
            var chunk__128512_128561 = null;
            var count__128513_128562 = 0;
            var i__128514_128563 = 0;
            while (true) {
              if (i__128514_128563 < count__128513_128562) {
                var v_128564 = cljs.core._nth.call(null, chunk__128512_128561, i__128514_128563);
                output.push(v_128564);
                var G__128565 = seq__128511_128560;
                var G__128566 = chunk__128512_128561;
                var G__128567 = count__128513_128562;
                var G__128568 = i__128514_128563 + 1;
                seq__128511_128560 = G__128565;
                chunk__128512_128561 = G__128566;
                count__128513_128562 = G__128567;
                i__128514_128563 = G__128568;
                continue;
              } else {
                var temp__4092__auto___128569__$1 = cljs.core.seq.call(null, seq__128511_128560);
                if (temp__4092__auto___128569__$1) {
                  var seq__128511_128570__$1 = temp__4092__auto___128569__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__128511_128570__$1)) {
                    var c__4146__auto___128571 = cljs.core.chunk_first.call(null, seq__128511_128570__$1);
                    var G__128572 = cljs.core.chunk_rest.call(null, seq__128511_128570__$1);
                    var G__128573 = c__4146__auto___128571;
                    var G__128574 = cljs.core.count.call(null, c__4146__auto___128571);
                    var G__128575 = 0;
                    seq__128511_128560 = G__128572;
                    chunk__128512_128561 = G__128573;
                    count__128513_128562 = G__128574;
                    i__128514_128563 = G__128575;
                    continue;
                  } else {
                    var v_128576 = cljs.core.first.call(null, seq__128511_128570__$1);
                    output.push(v_128576);
                    var G__128577 = cljs.core.next.call(null, seq__128511_128570__$1);
                    var G__128578 = null;
                    var G__128579 = 0;
                    var G__128580 = 0;
                    seq__128511_128560 = G__128577;
                    chunk__128512_128561 = G__128578;
                    count__128513_128562 = G__128579;
                    i__128514_128563 = G__128580;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__128581 = cljs.core.next.call(null, seq__128510_128553__$1);
            var G__128582 = null;
            var G__128583 = 0;
            var G__128584 = 0;
            seq__128510_128522 = G__128581;
            chunk__128515_128523 = G__128582;
            count__128516_128524 = G__128583;
            i__128517_128525 = G__128584;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return js_concat__delegate.call(this, args);
  };
  js_concat.cljs$lang$maxFixedArity = 0;
  js_concat.cljs$lang$applyTo = function(arglist__128585) {
    var args = cljs.core.seq(arglist__128585);
    return js_concat__delegate(args);
  };
  js_concat.cljs$core$IFn$_invoke$arity$variadic = js_concat__delegate;
  return js_concat;
}();
purnam.native$.js_LT__ = function js_LT__(obj) {
  return cljs.core.clj__GT_js.call(null, obj);
};
purnam.native$.log = function() {
  var log = null;
  var log__1 = function(x) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x)].join(""), x);
    } else {
      console.log([cljs.core.str(x)].join(""));
    }
    return x;
  };
  var log__2 = function(x, y) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""), y);
    } else {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""));
    }
    return y;
  };
  log = function(x, y) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, x);
      case 2:
        return log__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log;
}();
purnam.native$.augment_fn_string = function augment_fn_string(func) {
  if (typeof func === "string") {
    return function(x) {
      return purnam.native$.aget_in.call(null, x, clojure.string.split.call(null, func, /\./));
    };
  } else {
    return func;
  }
};
purnam.native$.check_fn = function() {
  var check_fn = null;
  var check_fn__1 = function(chk) {
    return function(x) {
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, x);
      } else {
        return cljs.core._EQ_.call(null, x, chk);
      }
    };
  };
  var check_fn__2 = function(func, chk) {
    return function(x) {
      var res = func.call(null, x);
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, res);
      } else {
        return cljs.core._EQ_.call(null, res, chk);
      }
    };
  };
  check_fn = function(func, chk) {
    switch(arguments.length) {
      case 1:
        return check_fn__1.call(this, func);
      case 2:
        return check_fn__2.call(this, func, chk);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_fn.cljs$core$IFn$_invoke$arity$1 = check_fn__1;
  check_fn.cljs$core$IFn$_invoke$arity$2 = check_fn__2;
  return check_fn;
}();
goog.provide("test_helper");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
test_helper.mock_websocket = function mock_websocket() {
  return purnam.native$.aset_in.call(null, window, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["WebSocket"], null), function(url) {
    var G__125038 = function() {
      var obj125041 = {};
      return obj125041;
    }();
    return G__125038;
  });
};
test_helper.init_tests = function init_tests() {
  test_helper.mock_websocket.call(null);
  return beforeEach(function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, this, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["addMatchers"];
    return fn_SHARP_.call(obj_SHARP_, function() {
      var G__125046 = function() {
        var obj125049 = {};
        return obj125049;
      }();
      G__125046["toSatisfy"] = function(expected, tactual, texpected) {
        var actual = purnam.native$.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["actual"], null));
        var actualText = [cljs.core.str(actual)].join("");
        var actualText__$1 = cljs.core._EQ_.call(null, actualText, "[object Object]") ? function() {
          var ks = function() {
            var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
            var fn_SHARP___$1 = obj_SHARP___$1["getKeys"];
            return fn_SHARP___$1.call(obj_SHARP___$1, actual);
          }();
          var vs = function() {
            var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["object"], null));
            var fn_SHARP___$1 = obj_SHARP___$1["getValues"];
            return fn_SHARP___$1.call(obj_SHARP___$1, actual);
          }();
          return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(ks, vs, actual, actualText) {
            return function(x, y) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null);
            };
          }(ks, vs, actual, actualText), ks, vs));
        }() : actualText;
        var notText = cljs.core.truth_(purnam.native$.aget_in.call(null, this, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["isNot"], null))) ? "Not " : "";
        this["message"] = function() {
          return[cljs.core.str("Expression: "), cljs.core.str(tactual), cljs.core.str("\n  Expected: "), cljs.core.str(notText), cljs.core.str(texpected), cljs.core.str("\n  Actual: "), cljs.core.str(actualText__$1)].join("");
        };
        if (cljs.core._EQ_.call(null, function() {
          var obj_SHARP___$1 = purnam.native$.aget_in.call(null, goog, cljs.core.PersistentVector.EMPTY);
          var fn_SHARP___$1 = obj_SHARP___$1["typeOf"];
          return fn_SHARP___$1.call(obj_SHARP___$1, expected);
        }(), "array")) {
          return purnam.native$.js_equals.call(null, expected, actual);
        } else {
          if (cljs.core.fn_QMARK_.call(null, expected)) {
            return expected.call(null, actual);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              var or__3404__auto__ = cljs.core._EQ_.call(null, expected, actual);
              if (or__3404__auto__) {
                return or__3404__auto__;
              } else {
                return purnam.native$.js_equals.call(null, expected, actual);
              }
            } else {
              return null;
            }
          }
        }
      };
      return G__125046;
    }());
  });
};
goog.provide("chaperone.messagebox");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
chaperone.messagebox.create_sub_system = function create_sub_system(system) {
  var sub_system = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773), cljs.core.async.chan.call(null)], null);
  return cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "messagebox", "messagebox", 3618152406), sub_system);
};
chaperone.messagebox.sub_system = function sub_system(system) {
  return(new cljs.core.Keyword(null, "messagebox", "messagebox", 3618152406)).cljs$core$IFn$_invoke$arity$1(system);
};
chaperone.messagebox.send_message_BANG_ = function send_message_BANG_(messagebox, level, message) {
  var message_queue = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(messagebox);
  return cljs.core.async.put_BANG_.call(null, message_queue, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "level", "level", 1116770038), level, new cljs.core.Keyword(null, "message", "message", 1968829305), message], null));
};
goog.provide("chaperone.core");
goog.require("cljs.core");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
chaperone.core.create_system = function create_system(host, port) {
  var context = cljs.core.PersistentArrayMap.EMPTY;
  return chaperone.messagebox.create_sub_system.call(null, chaperone.websocket.create_sub_system.call(null, context, host, port));
};
chaperone.core.start_BANG_ = function start_BANG_(system) {
  console.log("Starting the system");
  return chaperone.websocket.start_BANG_.call(null, system);
};
chaperone.core.stop_BANG_ = function stop_BANG_(system) {
  console.log("Stopping the system");
  return chaperone.websocket.stop_BANG_.call(null, system);
};
goog.provide("chaperone.ng.core");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("chaperone.core");
goog.require("chaperone.core");
chaperone.ng.core.chaperone_app = angular.module("chaperone.app", ["ngRoute"]);
chaperone.ng.core.chaperone_app_System = ["$location", function($location) {
  return chaperone.core.start_BANG_.call(null, chaperone.core.create_system.call(null, function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["host"];
    return fn_SHARP_.call(obj_SHARP_);
  }(), function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["port"];
    return fn_SHARP_.call(obj_SHARP_);
  }()));
}];
angular.module("chaperone.app").factory("System", chaperone.ng.core.chaperone_app_System);
angular.module("chaperone.app").config(["$routeProvider", function($routeProvider) {
  var G__124849 = $routeProvider;
  G__124849.when("/admin/users/add", function() {
    var G__124850 = function() {
      var obj124853 = {};
      return obj124853;
    }();
    G__124850["templateUrl"] = "/public/partials/admin/user/add-user-form.html";
    G__124850["controller"] = "AdminUserCtrl";
    return G__124850;
  }());
  G__124849.when("/admin/users/edit/:id", function() {
    var G__124854 = function() {
      var obj124857 = {};
      return obj124857;
    }();
    G__124854["templateUrl"] = "/public/partials/admin/user/edit-user-form.html";
    G__124854["controller"] = "AdminUserCtrl";
    return G__124854;
  }());
  G__124849.when("/admin/users/list", function() {
    var G__124858 = function() {
      var obj124861 = {};
      return obj124861;
    }();
    G__124858["templateUrl"] = "/public/partials/admin/user/list.html";
    G__124858["controller"] = "AdminUserCtrl";
    return G__124858;
  }());
  G__124849.otherwise(function() {
    var G__124862 = function() {
      var obj124865 = {};
      return obj124865;
    }();
    G__124862["templateUrl"] = "/public/partials/index.html";
    return G__124862;
  }());
  return G__124849;
}]);
goog.provide("jayq.core");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
jayq.core.crate_meta = function crate_meta(func) {
  return func.prototype._crateGroup;
};
jayq.core.__GT_selector = function __GT_selector(sel) {
  if (typeof sel === "string") {
    return sel;
  } else {
    if (cljs.core.fn_QMARK_.call(null, sel)) {
      var temp__4090__auto__ = jayq.core.crate_meta.call(null, sel);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var cm = temp__4090__auto__;
        return[cljs.core.str("[crateGroup\x3d"), cljs.core.str(cm), cljs.core.str("]")].join("");
      } else {
        return sel;
      }
    } else {
      if (sel instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, sel);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return sel;
        } else {
          return null;
        }
      }
    }
  }
};
jayq.core.$ = function() {
  var $ = null;
  var $__1 = function(sel) {
    return jQuery(jayq.core.__GT_selector.call(null, sel));
  };
  var $__2 = function(sel, context) {
    return jQuery(jayq.core.__GT_selector.call(null, sel), context);
  };
  $ = function(sel, context) {
    switch(arguments.length) {
      case 1:
        return $__1.call(this, sel);
      case 2:
        return $__2.call(this, sel, context);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  $.cljs$core$IFn$_invoke$arity$1 = $__1;
  $.cljs$core$IFn$_invoke$arity$2 = $__2;
  return $;
}();
jQuery.prototype.cljs$core$IFn$ = true;
jQuery.prototype.call = function() {
  var G__128603 = null;
  var G__128603__2 = function(self__, k) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__128603__3 = function(self__, k, not_found) {
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__128603 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__128603__2.call(this, self__, k);
      case 3:
        return G__128603__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__128603;
}();
jQuery.prototype.apply = function(self__, args128602) {
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args128602)));
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
jQuery.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
jQuery.prototype.cljs$core$IReduce$ = true;
jQuery.prototype.cljs$core$IReduce$_reduce$arity$2 = function(this$, f) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f);
};
jQuery.prototype.cljs$core$IReduce$_reduce$arity$3 = function(this$, f, start) {
  var this$__$1 = this;
  return cljs.core.ci_reduce.call(null, this$__$1, f, start);
};
jQuery.prototype.cljs$core$ILookup$ = true;
jQuery.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var this$__$1 = this;
  var or__3404__auto__ = this$__$1.slice(k, k + 1);
  if (cljs.core.truth_(or__3404__auto__)) {
    return or__3404__auto__;
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, k, not_found);
};
jQuery.prototype.cljs$core$ISequential$ = true;
jQuery.prototype.cljs$core$IIndexed$ = true;
jQuery.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    return null;
  }
};
jQuery.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var this$__$1 = this;
  if (n < cljs.core.count.call(null, this$__$1)) {
    return this$__$1.slice(n, n + 1);
  } else {
    if (void 0 === not_found) {
      return null;
    } else {
      return not_found;
    }
  }
};
jQuery.prototype.cljs$core$ICounted$ = true;
jQuery.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.length;
};
jQuery.prototype.cljs$core$ISeq$ = true;
jQuery.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.get(0);
};
jQuery.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.count.call(null, this$__$1) > 1) {
    return this$__$1.slice(1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
jQuery.prototype.cljs$core$ISeqable$ = true;
jQuery.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core.truth_(this$__$1.get(0))) {
    return this$__$1;
  } else {
    return null;
  }
};
jayq.core.anim = function anim($elem, props, dur) {
  return $elem.animate(cljs.core.clj__GT_js.call(null, props), dur);
};
jayq.core.text = function() {
  var text = null;
  var text__1 = function($elem) {
    return $elem.text();
  };
  var text__2 = function($elem, txt) {
    return $elem.text(txt);
  };
  text = function($elem, txt) {
    switch(arguments.length) {
      case 1:
        return text__1.call(this, $elem);
      case 2:
        return text__2.call(this, $elem, txt);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  text.cljs$core$IFn$_invoke$arity$1 = text__1;
  text.cljs$core$IFn$_invoke$arity$2 = text__2;
  return text;
}();
jayq.core.css = function() {
  var css = null;
  var css__2 = function($elem, opts) {
    return $elem.css(cljs.core.clj__GT_js.call(null, opts));
  };
  var css__3 = function($elem, p, v) {
    return $elem.css(cljs.core.name.call(null, p), v);
  };
  css = function($elem, p, v) {
    switch(arguments.length) {
      case 2:
        return css__2.call(this, $elem, p);
      case 3:
        return css__3.call(this, $elem, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  css.cljs$core$IFn$_invoke$arity$2 = css__2;
  css.cljs$core$IFn$_invoke$arity$3 = css__3;
  return css;
}();
jayq.core.attr = function() {
  var attr = null;
  var attr__2 = function($elem, x) {
    return $elem.attr(cljs.core.clj__GT_js.call(null, x));
  };
  var attr__3 = function($elem, n, v) {
    return $elem.attr(cljs.core.name.call(null, n), v);
  };
  attr = function($elem, n, v) {
    switch(arguments.length) {
      case 2:
        return attr__2.call(this, $elem, n);
      case 3:
        return attr__3.call(this, $elem, n, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  attr.cljs$core$IFn$_invoke$arity$2 = attr__2;
  attr.cljs$core$IFn$_invoke$arity$3 = attr__3;
  return attr;
}();
jayq.core.prop = function() {
  var prop = null;
  var prop__2 = function($elem, x) {
    return $elem.prop(cljs.core.clj__GT_js.call(null, x));
  };
  var prop__3 = function($elem, n, v) {
    return $elem.prop(cljs.core.name.call(null, n), v);
  };
  prop = function($elem, n, v) {
    switch(arguments.length) {
      case 2:
        return prop__2.call(this, $elem, n);
      case 3:
        return prop__3.call(this, $elem, n, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prop.cljs$core$IFn$_invoke$arity$2 = prop__2;
  prop.cljs$core$IFn$_invoke$arity$3 = prop__3;
  return prop;
}();
jayq.core.remove_attr = function remove_attr($elem, a) {
  return $elem.removeAttr(cljs.core.name.call(null, a));
};
jayq.core.remove_prop = function remove_prop($elem, a) {
  return $elem.removeProp(cljs.core.name.call(null, a));
};
jayq.core.data = function() {
  var data = null;
  var data__1 = function($elem) {
    return $elem.data();
  };
  var data__2 = function($elem, k) {
    return $elem.data(cljs.core.clj__GT_js.call(null, k));
  };
  var data__3 = function($elem, k, v) {
    return $elem.data(cljs.core.name.call(null, k), cljs.core.clj__GT_js.call(null, v));
  };
  data = function($elem, k, v) {
    switch(arguments.length) {
      case 1:
        return data__1.call(this, $elem);
      case 2:
        return data__2.call(this, $elem, k);
      case 3:
        return data__3.call(this, $elem, k, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  data.cljs$core$IFn$_invoke$arity$1 = data__1;
  data.cljs$core$IFn$_invoke$arity$2 = data__2;
  data.cljs$core$IFn$_invoke$arity$3 = data__3;
  return data;
}();
jayq.core.add_class = function add_class($elem, cl) {
  return $elem.addClass(cljs.core.name.call(null, cl));
};
jayq.core.remove_class = function remove_class($elem, cl) {
  return $elem.removeClass(cljs.core.name.call(null, cl));
};
jayq.core.toggle_class = function toggle_class($elem, cl) {
  return $elem.toggleClass(cljs.core.name.call(null, cl));
};
jayq.core.has_class = function has_class($elem, cl) {
  return $elem.hasClass(cljs.core.name.call(null, cl));
};
jayq.core.is = function is($elem, selector) {
  return $elem.is(jayq.core.__GT_selector.call(null, selector));
};
jayq.core.after = function after($elem, content) {
  return $elem.after(content);
};
jayq.core.before = function before($elem, content) {
  return $elem.before(content);
};
jayq.core.append = function append($elem, content) {
  return $elem.append(content);
};
jayq.core.prepend = function prepend($elem, content) {
  return $elem.prepend(content);
};
jayq.core.append_to = function append_to($elem, target) {
  return $elem.appendTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.prepend_to = function prepend_to($elem, target) {
  return $elem.prependTo(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_before = function insert_before($elem, target) {
  return $elem.insertBefore(jayq.core.__GT_selector.call(null, target));
};
jayq.core.insert_after = function insert_after($elem, target) {
  return $elem.insertAfter(jayq.core.__GT_selector.call(null, target));
};
jayq.core.replace_with = function replace_with($elem, content) {
  return $elem.replaceWith(content);
};
jayq.core.remove = function remove($elem) {
  return $elem.remove();
};
jayq.core.hide = function() {
  var hide__delegate = function($elem, p__128604) {
    var vec__128606 = p__128604;
    var speed = cljs.core.nth.call(null, vec__128606, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__128606, 1, null);
    return $elem.hide(speed, on_finish);
  };
  var hide = function($elem, var_args) {
    var p__128604 = null;
    if (arguments.length > 1) {
      p__128604 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hide__delegate.call(this, $elem, p__128604);
  };
  hide.cljs$lang$maxFixedArity = 1;
  hide.cljs$lang$applyTo = function(arglist__128607) {
    var $elem = cljs.core.first(arglist__128607);
    var p__128604 = cljs.core.rest(arglist__128607);
    return hide__delegate($elem, p__128604);
  };
  hide.cljs$core$IFn$_invoke$arity$variadic = hide__delegate;
  return hide;
}();
jayq.core.show = function() {
  var show__delegate = function($elem, p__128608) {
    var vec__128610 = p__128608;
    var speed = cljs.core.nth.call(null, vec__128610, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__128610, 1, null);
    return $elem.show(speed, on_finish);
  };
  var show = function($elem, var_args) {
    var p__128608 = null;
    if (arguments.length > 1) {
      p__128608 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return show__delegate.call(this, $elem, p__128608);
  };
  show.cljs$lang$maxFixedArity = 1;
  show.cljs$lang$applyTo = function(arglist__128611) {
    var $elem = cljs.core.first(arglist__128611);
    var p__128608 = cljs.core.rest(arglist__128611);
    return show__delegate($elem, p__128608);
  };
  show.cljs$core$IFn$_invoke$arity$variadic = show__delegate;
  return show;
}();
jayq.core.toggle = function() {
  var toggle__delegate = function($elem, p__128612) {
    var vec__128614 = p__128612;
    var speed = cljs.core.nth.call(null, vec__128614, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__128614, 1, null);
    return $elem.toggle(speed, on_finish);
  };
  var toggle = function($elem, var_args) {
    var p__128612 = null;
    if (arguments.length > 1) {
      p__128612 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return toggle__delegate.call(this, $elem, p__128612);
  };
  toggle.cljs$lang$maxFixedArity = 1;
  toggle.cljs$lang$applyTo = function(arglist__128615) {
    var $elem = cljs.core.first(arglist__128615);
    var p__128612 = cljs.core.rest(arglist__128615);
    return toggle__delegate($elem, p__128612);
  };
  toggle.cljs$core$IFn$_invoke$arity$variadic = toggle__delegate;
  return toggle;
}();
jayq.core.fade_out = function() {
  var fade_out__delegate = function($elem, p__128616) {
    var vec__128618 = p__128616;
    var speed = cljs.core.nth.call(null, vec__128618, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__128618, 1, null);
    return $elem.fadeOut(speed, on_finish);
  };
  var fade_out = function($elem, var_args) {
    var p__128616 = null;
    if (arguments.length > 1) {
      p__128616 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fade_out__delegate.call(this, $elem, p__128616);
  };
  fade_out.cljs$lang$maxFixedArity = 1;
  fade_out.cljs$lang$applyTo = function(arglist__128619) {
    var $elem = cljs.core.first(arglist__128619);
    var p__128616 = cljs.core.rest(arglist__128619);
    return fade_out__delegate($elem, p__128616);
  };
  fade_out.cljs$core$IFn$_invoke$arity$variadic = fade_out__delegate;
  return fade_out;
}();
jayq.core.fade_in = function() {
  var fade_in__delegate = function($elem, p__128620) {
    var vec__128622 = p__128620;
    var speed = cljs.core.nth.call(null, vec__128622, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__128622, 1, null);
    return $elem.fadeIn(speed, on_finish);
  };
  var fade_in = function($elem, var_args) {
    var p__128620 = null;
    if (arguments.length > 1) {
      p__128620 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fade_in__delegate.call(this, $elem, p__128620);
  };
  fade_in.cljs$lang$maxFixedArity = 1;
  fade_in.cljs$lang$applyTo = function(arglist__128623) {
    var $elem = cljs.core.first(arglist__128623);
    var p__128620 = cljs.core.rest(arglist__128623);
    return fade_in__delegate($elem, p__128620);
  };
  fade_in.cljs$core$IFn$_invoke$arity$variadic = fade_in__delegate;
  return fade_in;
}();
jayq.core.slide_up = function() {
  var slide_up__delegate = function($elem, p__128624) {
    var vec__128626 = p__128624;
    var speed = cljs.core.nth.call(null, vec__128626, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__128626, 1, null);
    return $elem.slideUp(speed, on_finish);
  };
  var slide_up = function($elem, var_args) {
    var p__128624 = null;
    if (arguments.length > 1) {
      p__128624 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return slide_up__delegate.call(this, $elem, p__128624);
  };
  slide_up.cljs$lang$maxFixedArity = 1;
  slide_up.cljs$lang$applyTo = function(arglist__128627) {
    var $elem = cljs.core.first(arglist__128627);
    var p__128624 = cljs.core.rest(arglist__128627);
    return slide_up__delegate($elem, p__128624);
  };
  slide_up.cljs$core$IFn$_invoke$arity$variadic = slide_up__delegate;
  return slide_up;
}();
jayq.core.slide_down = function() {
  var slide_down__delegate = function($elem, p__128628) {
    var vec__128630 = p__128628;
    var speed = cljs.core.nth.call(null, vec__128630, 0, null);
    var on_finish = cljs.core.nth.call(null, vec__128630, 1, null);
    return $elem.slideDown(speed, on_finish);
  };
  var slide_down = function($elem, var_args) {
    var p__128628 = null;
    if (arguments.length > 1) {
      p__128628 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return slide_down__delegate.call(this, $elem, p__128628);
  };
  slide_down.cljs$lang$maxFixedArity = 1;
  slide_down.cljs$lang$applyTo = function(arglist__128631) {
    var $elem = cljs.core.first(arglist__128631);
    var p__128628 = cljs.core.rest(arglist__128631);
    return slide_down__delegate($elem, p__128628);
  };
  slide_down.cljs$core$IFn$_invoke$arity$variadic = slide_down__delegate;
  return slide_down;
}();
jayq.core.siblings = function() {
  var siblings = null;
  var siblings__1 = function($elem) {
    return $elem.siblings();
  };
  var siblings__2 = function($elem, selector) {
    return $elem.siblings(cljs.core.name.call(null, selector));
  };
  siblings = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return siblings__1.call(this, $elem);
      case 2:
        return siblings__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  siblings.cljs$core$IFn$_invoke$arity$1 = siblings__1;
  siblings.cljs$core$IFn$_invoke$arity$2 = siblings__2;
  return siblings;
}();
jayq.core.parent = function parent($elem) {
  return $elem.parent();
};
jayq.core.parents = function() {
  var parents = null;
  var parents__1 = function($elem) {
    return $elem.parents();
  };
  var parents__2 = function($elem, selector) {
    return $elem.parents(cljs.core.name.call(null, selector));
  };
  parents = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, $elem);
      case 2:
        return parents__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
jayq.core.parents_until = function() {
  var parents_until = null;
  var parents_until__1 = function($elem) {
    return $elem.parentsUntil();
  };
  var parents_until__2 = function($elem, selector) {
    return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var parents_until__3 = function($elem, selector, filtr) {
    return $elem.parentsUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  parents_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return parents_until__1.call(this, $elem);
      case 2:
        return parents_until__2.call(this, $elem, selector);
      case 3:
        return parents_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents_until.cljs$core$IFn$_invoke$arity$1 = parents_until__1;
  parents_until.cljs$core$IFn$_invoke$arity$2 = parents_until__2;
  parents_until.cljs$core$IFn$_invoke$arity$3 = parents_until__3;
  return parents_until;
}();
jayq.core.children = function() {
  var children = null;
  var children__1 = function($elem) {
    return $elem.children();
  };
  var children__2 = function($elem, selector) {
    return $elem.children(cljs.core.name.call(null, selector));
  };
  children = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return children__1.call(this, $elem);
      case 2:
        return children__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  children.cljs$core$IFn$_invoke$arity$1 = children__1;
  children.cljs$core$IFn$_invoke$arity$2 = children__2;
  return children;
}();
jayq.core.next = function() {
  var next = null;
  var next__1 = function($elem) {
    return $elem.next();
  };
  var next__2 = function($elem, selector) {
    return $elem.next(cljs.core.name.call(null, selector));
  };
  next = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return next__1.call(this, $elem);
      case 2:
        return next__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next.cljs$core$IFn$_invoke$arity$1 = next__1;
  next.cljs$core$IFn$_invoke$arity$2 = next__2;
  return next;
}();
jayq.core.prev = function() {
  var prev = null;
  var prev__1 = function($elem) {
    return $elem.prev();
  };
  var prev__2 = function($elem, selector) {
    return $elem.prev(cljs.core.name.call(null, selector));
  };
  prev = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return prev__1.call(this, $elem);
      case 2:
        return prev__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev.cljs$core$IFn$_invoke$arity$1 = prev__1;
  prev.cljs$core$IFn$_invoke$arity$2 = prev__2;
  return prev;
}();
jayq.core.next_all = function() {
  var next_all = null;
  var next_all__1 = function($elem) {
    return $elem.nextAll();
  };
  var next_all__2 = function($elem, selector) {
    return $elem.nextAll(cljs.core.name.call(null, selector));
  };
  next_all = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return next_all__1.call(this, $elem);
      case 2:
        return next_all__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next_all.cljs$core$IFn$_invoke$arity$1 = next_all__1;
  next_all.cljs$core$IFn$_invoke$arity$2 = next_all__2;
  return next_all;
}();
jayq.core.prev_all = function() {
  var prev_all = null;
  var prev_all__1 = function($elem) {
    return $elem.prevAll();
  };
  var prev_all__2 = function($elem, selector) {
    return $elem.prevAll(cljs.core.name.call(null, selector));
  };
  prev_all = function($elem, selector) {
    switch(arguments.length) {
      case 1:
        return prev_all__1.call(this, $elem);
      case 2:
        return prev_all__2.call(this, $elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev_all.cljs$core$IFn$_invoke$arity$1 = prev_all__1;
  prev_all.cljs$core$IFn$_invoke$arity$2 = prev_all__2;
  return prev_all;
}();
jayq.core.next_until = function() {
  var next_until = null;
  var next_until__1 = function($elem) {
    return $elem.nextUntil();
  };
  var next_until__2 = function($elem, selector) {
    return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var next_until__3 = function($elem, selector, filtr) {
    return $elem.nextUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  next_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return next_until__1.call(this, $elem);
      case 2:
        return next_until__2.call(this, $elem, selector);
      case 3:
        return next_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  next_until.cljs$core$IFn$_invoke$arity$1 = next_until__1;
  next_until.cljs$core$IFn$_invoke$arity$2 = next_until__2;
  next_until.cljs$core$IFn$_invoke$arity$3 = next_until__3;
  return next_until;
}();
jayq.core.prev_until = function() {
  var prev_until = null;
  var prev_until__1 = function($elem) {
    return $elem.prevUntil();
  };
  var prev_until__2 = function($elem, selector) {
    return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector));
  };
  var prev_until__3 = function($elem, selector, filtr) {
    return $elem.prevUntil(jayq.core.__GT_selector.call(null, selector), cljs.core.name.call(null, filtr));
  };
  prev_until = function($elem, selector, filtr) {
    switch(arguments.length) {
      case 1:
        return prev_until__1.call(this, $elem);
      case 2:
        return prev_until__2.call(this, $elem, selector);
      case 3:
        return prev_until__3.call(this, $elem, selector, filtr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prev_until.cljs$core$IFn$_invoke$arity$1 = prev_until__1;
  prev_until.cljs$core$IFn$_invoke$arity$2 = prev_until__2;
  prev_until.cljs$core$IFn$_invoke$arity$3 = prev_until__3;
  return prev_until;
}();
jayq.core.find = function find($elem, selector) {
  return $elem.find(cljs.core.name.call(null, selector));
};
jayq.core.closest = function() {
  var closest__delegate = function($elem, selector, p__128632) {
    var vec__128634 = p__128632;
    var context = cljs.core.nth.call(null, vec__128634, 0, null);
    return $elem.closest(jayq.core.__GT_selector.call(null, selector), context);
  };
  var closest = function($elem, selector, var_args) {
    var p__128632 = null;
    if (arguments.length > 2) {
      p__128632 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return closest__delegate.call(this, $elem, selector, p__128632);
  };
  closest.cljs$lang$maxFixedArity = 2;
  closest.cljs$lang$applyTo = function(arglist__128635) {
    var $elem = cljs.core.first(arglist__128635);
    arglist__128635 = cljs.core.next(arglist__128635);
    var selector = cljs.core.first(arglist__128635);
    var p__128632 = cljs.core.rest(arglist__128635);
    return closest__delegate($elem, selector, p__128632);
  };
  closest.cljs$core$IFn$_invoke$arity$variadic = closest__delegate;
  return closest;
}();
jayq.core.clone = function clone($elem) {
  return $elem.clone();
};
jayq.core.html = function() {
  var html = null;
  var html__1 = function($elem) {
    return $elem.html();
  };
  var html__2 = function($elem, v) {
    return $elem.html(v);
  };
  html = function($elem, v) {
    switch(arguments.length) {
      case 1:
        return html__1.call(this, $elem);
      case 2:
        return html__2.call(this, $elem, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  html.cljs$core$IFn$_invoke$arity$1 = html__1;
  html.cljs$core$IFn$_invoke$arity$2 = html__2;
  return html;
}();
jayq.core.inner = jayq.core.html;
jayq.core.empty = function empty($elem) {
  return $elem.empty();
};
jayq.core.val = function() {
  var val = null;
  var val__1 = function($elem) {
    return $elem.val();
  };
  var val__2 = function($elem, v) {
    return $elem.val(v);
  };
  val = function($elem, v) {
    switch(arguments.length) {
      case 1:
        return val__1.call(this, $elem);
      case 2:
        return val__2.call(this, $elem, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  val.cljs$core$IFn$_invoke$arity$1 = val__1;
  val.cljs$core$IFn$_invoke$arity$2 = val__2;
  return val;
}();
jayq.core.serialize = function serialize($elem) {
  return $elem.serialize();
};
jayq.core.queue = function() {
  var queue = null;
  var queue__1 = function($elem) {
    return $elem.queue();
  };
  var queue__2 = function($elem, x) {
    return $elem.queue(x);
  };
  var queue__3 = function($elem, x, y) {
    return $elem.queue(x, y);
  };
  queue = function($elem, x, y) {
    switch(arguments.length) {
      case 1:
        return queue__1.call(this, $elem);
      case 2:
        return queue__2.call(this, $elem, x);
      case 3:
        return queue__3.call(this, $elem, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  queue.cljs$core$IFn$_invoke$arity$1 = queue__1;
  queue.cljs$core$IFn$_invoke$arity$2 = queue__2;
  queue.cljs$core$IFn$_invoke$arity$3 = queue__3;
  return queue;
}();
jayq.core.dequeue = function() {
  var dequeue = null;
  var dequeue__1 = function($elem) {
    return $elem.dequeue();
  };
  var dequeue__2 = function($elem, queue_name) {
    return $elem.dequeue(queue_name);
  };
  dequeue = function($elem, queue_name) {
    switch(arguments.length) {
      case 1:
        return dequeue__1.call(this, $elem);
      case 2:
        return dequeue__2.call(this, $elem, queue_name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dequeue.cljs$core$IFn$_invoke$arity$1 = dequeue__1;
  dequeue.cljs$core$IFn$_invoke$arity$2 = dequeue__2;
  return dequeue;
}();
jayq.core.document_ready = function document_ready(func) {
  return jayq.core.$.call(null, document).ready(func);
};
jayq.core.mimetype_converter = function mimetype_converter(s) {
  return cljs.reader.read_string.call(null, [cljs.core.str(s)].join(""));
};
jQuery.ajaxSetup(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "accepts", "accepts", 4131250141), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "edn", "edn", 1014004513), "application/edn, text/edn", new cljs.core.Keyword(null, "clojure", "clojure", 1880188502), "application/clojure, text/clojure"], null), new cljs.core.Keyword(null, "contents", "contents", 4741549708), new cljs.core.PersistentArrayMap(null, 1, ["clojure", 
/edn|clojure/], null), new cljs.core.Keyword(null, "converters", "converters", 3057163845), new cljs.core.PersistentArrayMap(null, 2, ["text edn", jayq.core.mimetype_converter, "text clojure", jayq.core.mimetype_converter], null)], null)));
jayq.core.clj_content_type_QMARK_ = function clj_content_type_QMARK_(x) {
  return cljs.core.re_find.call(null, /^(text|application)\/(clojure|edn)/, x);
};
jayq.core.__GT_content_type = function __GT_content_type(ct) {
  if (typeof ct === "string") {
    return ct;
  } else {
    if (ct instanceof cljs.core.Keyword) {
      return cljs.core.subs.call(null, [cljs.core.str(ct)].join(""), 1);
    } else {
      return null;
    }
  }
};
jayq.core.preprocess_request = function preprocess_request(p__128638) {
  var map__128640 = p__128638;
  var map__128640__$1 = cljs.core.seq_QMARK_.call(null, map__128640) ? cljs.core.apply.call(null, cljs.core.hash_map, map__128640) : map__128640;
  var request = map__128640__$1;
  var contentType = cljs.core.get.call(null, map__128640__$1, new cljs.core.Keyword(null, "contentType", "contentType", 624772805));
  var data = cljs.core.get.call(null, map__128640__$1, new cljs.core.Keyword(null, "data", "data", 1016980252));
  var ct = jayq.core.__GT_content_type.call(null, contentType);
  return function(p1__128637_SHARP_) {
    if (cljs.core.truth_(jayq.core.clj_content_type_QMARK_.call(null, ct))) {
      return cljs.core.assoc.call(null, p1__128637_SHARP_, new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.pr_str.call(null, data));
    } else {
      return p1__128637_SHARP_;
    }
  }.call(null, function(p1__128636_SHARP_) {
    if (cljs.core.truth_(ct)) {
      return cljs.core.assoc.call(null, p1__128636_SHARP_, new cljs.core.Keyword(null, "contentType", "contentType", 624772805), ct);
    } else {
      return p1__128636_SHARP_;
    }
  }.call(null, request));
};
jayq.core.__GT_ajax_settings = function __GT_ajax_settings(request) {
  return cljs.core.clj__GT_js.call(null, jayq.core.preprocess_request.call(null, request));
};
jayq.core.ajax = function() {
  var ajax = null;
  var ajax__1 = function(settings) {
    return jQuery.ajax(jayq.core.__GT_ajax_settings.call(null, settings));
  };
  var ajax__2 = function(url, settings) {
    return jQuery.ajax(url, jayq.core.__GT_ajax_settings.call(null, settings));
  };
  ajax = function(url, settings) {
    switch(arguments.length) {
      case 1:
        return ajax__1.call(this, url);
      case 2:
        return ajax__2.call(this, url, settings);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax.cljs$core$IFn$_invoke$arity$1 = ajax__1;
  ajax.cljs$core$IFn$_invoke$arity$2 = ajax__2;
  return ajax;
}();
jayq.core.xhr = function xhr(p__128641, content, callback) {
  var vec__128643 = p__128641;
  var method = cljs.core.nth.call(null, vec__128643, 0, null);
  var uri = cljs.core.nth.call(null, vec__128643, 1, null);
  var params = cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), clojure.string.upper_case.call(null, cljs.core.name.call(null, method)), new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.clj__GT_js.call(null, content), new cljs.core.Keyword(null, "success", "success", 3441701749), callback], null));
  return jQuery.ajax(uri, params);
};
jayq.core.read = function read($elem) {
  return cljs.reader.read_string.call(null, jayq.core.html.call(null, $elem));
};
jayq.core.bind = function bind($elem, ev, func) {
  return $elem.bind(cljs.core.name.call(null, ev), func);
};
jayq.core.unbind = function() {
  var unbind__delegate = function($elem, ev, p__128644) {
    var vec__128646 = p__128644;
    var func = cljs.core.nth.call(null, vec__128646, 0, null);
    return $elem.unbind(cljs.core.name.call(null, ev), func);
  };
  var unbind = function($elem, ev, var_args) {
    var p__128644 = null;
    if (arguments.length > 2) {
      p__128644 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return unbind__delegate.call(this, $elem, ev, p__128644);
  };
  unbind.cljs$lang$maxFixedArity = 2;
  unbind.cljs$lang$applyTo = function(arglist__128647) {
    var $elem = cljs.core.first(arglist__128647);
    arglist__128647 = cljs.core.next(arglist__128647);
    var ev = cljs.core.first(arglist__128647);
    var p__128644 = cljs.core.rest(arglist__128647);
    return unbind__delegate($elem, ev, p__128644);
  };
  unbind.cljs$core$IFn$_invoke$arity$variadic = unbind__delegate;
  return unbind;
}();
jayq.core.trigger = function trigger($elem, ev) {
  return $elem.trigger(cljs.core.name.call(null, ev));
};
jayq.core.delegate = function delegate($elem, sel, ev, func) {
  return $elem.delegate(jayq.core.__GT_selector.call(null, sel), cljs.core.name.call(null, ev), func);
};
jayq.core.__GT_event = function __GT_event(e) {
  if (cljs.core.coll_QMARK_.call(null, e)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.name, e));
  } else {
    return cljs.core.clj__GT_js.call(null, e);
  }
};
jayq.core.on = function() {
  var on__delegate = function($elem, events, p__128648) {
    var vec__128650 = p__128648;
    var sel = cljs.core.nth.call(null, vec__128650, 0, null);
    var data = cljs.core.nth.call(null, vec__128650, 1, null);
    var handler = cljs.core.nth.call(null, vec__128650, 2, null);
    return $elem.on(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
  };
  var on = function($elem, events, var_args) {
    var p__128648 = null;
    if (arguments.length > 2) {
      p__128648 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return on__delegate.call(this, $elem, events, p__128648);
  };
  on.cljs$lang$maxFixedArity = 2;
  on.cljs$lang$applyTo = function(arglist__128651) {
    var $elem = cljs.core.first(arglist__128651);
    arglist__128651 = cljs.core.next(arglist__128651);
    var events = cljs.core.first(arglist__128651);
    var p__128648 = cljs.core.rest(arglist__128651);
    return on__delegate($elem, events, p__128648);
  };
  on.cljs$core$IFn$_invoke$arity$variadic = on__delegate;
  return on;
}();
jayq.core.one = function() {
  var one__delegate = function($elem, events, p__128652) {
    var vec__128654 = p__128652;
    var sel = cljs.core.nth.call(null, vec__128654, 0, null);
    var data = cljs.core.nth.call(null, vec__128654, 1, null);
    var handler = cljs.core.nth.call(null, vec__128654, 2, null);
    return $elem.one(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), data, handler);
  };
  var one = function($elem, events, var_args) {
    var p__128652 = null;
    if (arguments.length > 2) {
      p__128652 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return one__delegate.call(this, $elem, events, p__128652);
  };
  one.cljs$lang$maxFixedArity = 2;
  one.cljs$lang$applyTo = function(arglist__128655) {
    var $elem = cljs.core.first(arglist__128655);
    arglist__128655 = cljs.core.next(arglist__128655);
    var events = cljs.core.first(arglist__128655);
    var p__128652 = cljs.core.rest(arglist__128655);
    return one__delegate($elem, events, p__128652);
  };
  one.cljs$core$IFn$_invoke$arity$variadic = one__delegate;
  return one;
}();
jayq.core.off = function() {
  var off__delegate = function($elem, events, p__128656) {
    var vec__128658 = p__128656;
    var sel = cljs.core.nth.call(null, vec__128658, 0, null);
    var handler = cljs.core.nth.call(null, vec__128658, 1, null);
    return $elem.off(jayq.core.__GT_event.call(null, events), jayq.core.__GT_selector.call(null, sel), handler);
  };
  var off = function($elem, events, var_args) {
    var p__128656 = null;
    if (arguments.length > 2) {
      p__128656 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return off__delegate.call(this, $elem, events, p__128656);
  };
  off.cljs$lang$maxFixedArity = 2;
  off.cljs$lang$applyTo = function(arglist__128659) {
    var $elem = cljs.core.first(arglist__128659);
    arglist__128659 = cljs.core.next(arglist__128659);
    var events = cljs.core.first(arglist__128659);
    var p__128656 = cljs.core.rest(arglist__128659);
    return off__delegate($elem, events, p__128656);
  };
  off.cljs$core$IFn$_invoke$arity$variadic = off__delegate;
  return off;
}();
jayq.core.prevent = function prevent(e) {
  return e.preventDefault();
};
jayq.core.height = function() {
  var height = null;
  var height__1 = function($elem) {
    return $elem.height();
  };
  var height__2 = function($elem, x) {
    return $elem.height(x);
  };
  height = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return height__1.call(this, $elem);
      case 2:
        return height__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  height.cljs$core$IFn$_invoke$arity$1 = height__1;
  height.cljs$core$IFn$_invoke$arity$2 = height__2;
  return height;
}();
jayq.core.width = function() {
  var width = null;
  var width__1 = function($elem) {
    return $elem.width();
  };
  var width__2 = function($elem, x) {
    return $elem.width(x);
  };
  width = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return width__1.call(this, $elem);
      case 2:
        return width__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  width.cljs$core$IFn$_invoke$arity$1 = width__1;
  width.cljs$core$IFn$_invoke$arity$2 = width__2;
  return width;
}();
jayq.core.inner_height = function inner_height($elem) {
  return $elem.innerHeight();
};
jayq.core.inner_width = function inner_width($elem) {
  return $elem.innerWidth();
};
jayq.core.outer_height = function outer_height($elem) {
  return $elem.outerHeight();
};
jayq.core.outer_width = function outer_width($elem) {
  return $elem.outerWidth();
};
jayq.core.offset = function() {
  var offset = null;
  var offset__1 = function($elem) {
    return cljs.core.js__GT_clj.call(null, $elem.offset(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
  };
  var offset__2 = function($elem, coords) {
    return cljs.core.clj__GT_js.call(null, coords).offset();
  };
  offset = function($elem, coords) {
    switch(arguments.length) {
      case 1:
        return offset__1.call(this, $elem);
      case 2:
        return offset__2.call(this, $elem, coords);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  offset.cljs$core$IFn$_invoke$arity$1 = offset__1;
  offset.cljs$core$IFn$_invoke$arity$2 = offset__2;
  return offset;
}();
jayq.core.offset_parent = function offset_parent($elem) {
  return $elem.offsetParent();
};
jayq.core.position = function position($elem) {
  return cljs.core.js__GT_clj.call(null, $elem.position(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
};
jayq.core.scroll_left = function() {
  var scroll_left = null;
  var scroll_left__1 = function($elem) {
    return $elem.scrollLeft();
  };
  var scroll_left__2 = function($elem, x) {
    return $elem.scrollLeft(x);
  };
  scroll_left = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return scroll_left__1.call(this, $elem);
      case 2:
        return scroll_left__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll_left.cljs$core$IFn$_invoke$arity$1 = scroll_left__1;
  scroll_left.cljs$core$IFn$_invoke$arity$2 = scroll_left__2;
  return scroll_left;
}();
jayq.core.scroll_top = function() {
  var scroll_top = null;
  var scroll_top__1 = function($elem) {
    return $elem.scrollTop();
  };
  var scroll_top__2 = function($elem, x) {
    return $elem.scrollTop(x);
  };
  scroll_top = function($elem, x) {
    switch(arguments.length) {
      case 1:
        return scroll_top__1.call(this, $elem);
      case 2:
        return scroll_top__2.call(this, $elem, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scroll_top.cljs$core$IFn$_invoke$arity$1 = scroll_top__1;
  scroll_top.cljs$core$IFn$_invoke$arity$2 = scroll_top__2;
  return scroll_top;
}();
jayq.core.$deferred = $.Deferred;
jayq.core.$when = $.when;
jayq.core.then = function() {
  var then = null;
  var then__3 = function(deferred, done_fn, fail_fn) {
    return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn));
  };
  var then__4 = function(deferred, done_fn, fail_fn, progress_fn) {
    return deferred.then(cljs.core.clj__GT_js.call(null, done_fn), cljs.core.clj__GT_js.call(null, fail_fn), cljs.core.clj__GT_js.call(null, progress_fn));
  };
  then = function(deferred, done_fn, fail_fn, progress_fn) {
    switch(arguments.length) {
      case 3:
        return then__3.call(this, deferred, done_fn, fail_fn);
      case 4:
        return then__4.call(this, deferred, done_fn, fail_fn, progress_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  then.cljs$core$IFn$_invoke$arity$3 = then__3;
  then.cljs$core$IFn$_invoke$arity$4 = then__4;
  return then;
}();
jayq.core.done = function() {
  var done__delegate = function(deferred, fns_args) {
    return deferred.done.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var done = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return done__delegate.call(this, deferred, fns_args);
  };
  done.cljs$lang$maxFixedArity = 1;
  done.cljs$lang$applyTo = function(arglist__128660) {
    var deferred = cljs.core.first(arglist__128660);
    var fns_args = cljs.core.rest(arglist__128660);
    return done__delegate(deferred, fns_args);
  };
  done.cljs$core$IFn$_invoke$arity$variadic = done__delegate;
  return done;
}();
jayq.core.fail = function() {
  var fail__delegate = function(deferred, fns_args) {
    return deferred.fail.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var fail = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fail__delegate.call(this, deferred, fns_args);
  };
  fail.cljs$lang$maxFixedArity = 1;
  fail.cljs$lang$applyTo = function(arglist__128661) {
    var deferred = cljs.core.first(arglist__128661);
    var fns_args = cljs.core.rest(arglist__128661);
    return fail__delegate(deferred, fns_args);
  };
  fail.cljs$core$IFn$_invoke$arity$variadic = fail__delegate;
  return fail;
}();
jayq.core.progress = function progress(deferred, fns_args) {
  return deferred.progress(cljs.core.clj__GT_js.call(null, fns_args));
};
jayq.core.promise = function() {
  var promise = null;
  var promise__1 = function(deferred) {
    return deferred.promise();
  };
  var promise__2 = function(deferred, type) {
    return deferred.promise(type);
  };
  var promise__3 = function(deferred, type, target) {
    return deferred.promise(type, target);
  };
  promise = function(deferred, type, target) {
    switch(arguments.length) {
      case 1:
        return promise__1.call(this, deferred);
      case 2:
        return promise__2.call(this, deferred, type);
      case 3:
        return promise__3.call(this, deferred, type, target);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  promise.cljs$core$IFn$_invoke$arity$1 = promise__1;
  promise.cljs$core$IFn$_invoke$arity$2 = promise__2;
  promise.cljs$core$IFn$_invoke$arity$3 = promise__3;
  return promise;
}();
jayq.core.always = function() {
  var always__delegate = function(deferred, fns_args) {
    return deferred.always.apply(deferred, cljs.core.clj__GT_js.call(null, fns_args));
  };
  var always = function(deferred, var_args) {
    var fns_args = null;
    if (arguments.length > 1) {
      fns_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return always__delegate.call(this, deferred, fns_args);
  };
  always.cljs$lang$maxFixedArity = 1;
  always.cljs$lang$applyTo = function(arglist__128662) {
    var deferred = cljs.core.first(arglist__128662);
    var fns_args = cljs.core.rest(arglist__128662);
    return always__delegate(deferred, fns_args);
  };
  always.cljs$core$IFn$_invoke$arity$variadic = always__delegate;
  return always;
}();
jayq.core.reject = function reject(deferred, args) {
  return deferred.reject(args);
};
jayq.core.reject_with = function reject_with(deferred, context, args) {
  return deferred.rejectWith(context, args);
};
jayq.core.notify = function notify(deferred, args) {
  return deferred.notify(args);
};
jayq.core.notify_with = function notify_with(deferred, context, args) {
  return deferred.notifyWith(context, args);
};
jayq.core.resolve = function resolve(deferred, args) {
  return deferred.resolve(args);
};
jayq.core.resolve_with = function resolve_with(deferred, context, args) {
  return deferred.resolveWith(context, args);
};
jayq.core.pipe = function() {
  var pipe = null;
  var pipe__2 = function(deferred, done_filter) {
    return deferred.pipe(done_filter);
  };
  var pipe__3 = function(deferred, done_filter, fail_filter) {
    return deferred.pipe(done_filter, fail_filter);
  };
  var pipe__4 = function(deferred, done_filter, fail_filter, progress_filter) {
    return deferred.pipe(done_filter, fail_filter, progress_filter);
  };
  pipe = function(deferred, done_filter, fail_filter, progress_filter) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, deferred, done_filter);
      case 3:
        return pipe__3.call(this, deferred, done_filter, fail_filter);
      case 4:
        return pipe__4.call(this, deferred, done_filter, fail_filter, progress_filter);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  pipe.cljs$core$IFn$_invoke$arity$4 = pipe__4;
  return pipe;
}();
jayq.core.state = function state(deferred) {
  return cljs.core.keyword.call(null, deferred.state());
};
jayq.core.deferred_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", 4374474914), jayq.core.$when, new cljs.core.Keyword(null, "bind", "bind", 1016928175), function(x, f) {
  var dfd = jayq.core.$deferred.call(null);
  jayq.core.done.call(null, x, function(v) {
    return jayq.core.done.call(null, f.call(null, v), cljs.core.partial.call(null, jayq.core.resolve, dfd));
  });
  return jayq.core.promise.call(null, dfd);
}, new cljs.core.Keyword(null, "zero", "zero", 1017639450), cljs.core.identity], null);
jayq.core.ajax_m = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "return", "return", 4374474914), cljs.core.identity, new cljs.core.Keyword(null, "bind", "bind", 1016928175), function(x, f) {
  return jayq.core.done.call(null, jayq.core.ajax.call(null, x), f);
}, new cljs.core.Keyword(null, "zero", "zero", 1017639450), cljs.core.identity], null);
goog.provide("chaperone.ng.directive");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("purnam.native$");
goog.require("clojure.string");
goog.require("purnam.native$");
goog.require("jayq.core");
goog.require("jayq.core");
goog.require("chaperone.ng.core");
chaperone.ng.directive.chaperone_app_clickRow = ["$location", function($location) {
  var link = function(scope, row, attr) {
    var row__$1 = jayq.core.$.call(null, row);
    return jayq.core.on.call(null, row__$1, new cljs.core.Keyword(null, "click", "click", 1108654330), function(row__$1) {
      return function(e) {
        var href = jayq.core.attr.call(null, jayq.core.find.call(null, row__$1, new cljs.core.Keyword(null, "a", "a", 1013904339)), new cljs.core.Keyword(null, "href", "href", 1017115293));
        return scope.$apply(function(href, row__$1) {
          return function() {
            var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
            var fn_SHARP_ = obj_SHARP_["path"];
            return fn_SHARP_.call(obj_SHARP_, clojure.string.replace_first.call(null, href, "#", ""));
          };
        }(href, row__$1));
      };
    }(row__$1));
  };
  var G__124911 = function() {
    var obj124914 = {};
    return obj124914;
  }();
  G__124911["link"] = link;
  return G__124911;
}];
angular.module("chaperone.app").directive("clickRow", chaperone.ng.directive.chaperone_app_clickRow);
chaperone.ng.directive.chaperone_app_submitButton = [function() {
  var G__124915 = function() {
    var obj124918 = {};
    return obj124918;
  }();
  G__124915["templateUrl"] = "/public/directives/submit.html";
  G__124915["restrict"] = "E";
  return G__124915;
}];
angular.module("chaperone.app").directive("submitButton", chaperone.ng.directive.chaperone_app_submitButton);
goog.provide("chaperone.ng.directive_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.ng.directive");
goog.require("jayq.core");
goog.require("jayq.core");
test_helper.init_tests.call(null);
var spec_125130 = function() {
  var obj125129 = {};
  return obj125129;
}();
describe("Click Row Directive", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$compile", "$location", "$rootScope", function($compile, $location, $rootScope) {
    spec_125130["$compile"] = $compile;
    spec_125130["$rootScope"] = $rootScope;
    return spec_125130["$location"] = $location;
  }]));
  it("when using row-click directive, the path should be the href location when the row is clicked", function() {
    var table = function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_125130, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["$compile"];
      return fn_SHARP_.call(obj_SHARP_, "\x3ctable\x3e\x3ctbody\x3e\x3ctr click-row\x3e\x3ctd\x3e\x3ca href\x3d'/link'\x3elink\x3c/a\x3e\x3c/td\x3e\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e");
    }().call(null, purnam.native$.aget_in.call(null, spec_125130, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null)));
    var obj_SHARP__125131 = purnam.native$.aget_in.call(null, spec_125130, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null));
    var fn_SHARP__125132 = obj_SHARP__125131["$digest"];
    fn_SHARP__125132.call(obj_SHARP__125131);
    jayq.core.trigger.call(null, jayq.core.find.call(null, jayq.core.$.call(null, table), new cljs.core.Keyword(null, "tr", "tr", 1013907952)), new cljs.core.Keyword(null, "click", "click", 1108654330));
    return expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_125130, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$location"], null));
      var fn_SHARP_ = obj_SHARP_["path"];
      return fn_SHARP_.call(obj_SHARP_);
    }()).toSatisfy("/link", '(let [obj# (purnam.native/aget-in spec ["$location"]) fn# (aget obj# "path")] (.call fn# obj#))', "/link");
  });
  return null;
});
var spec_125135 = function() {
  var obj125134 = {};
  return obj125134;
}();
describe("Submit button directive", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$compile", "$rootScope", "$templateCache", function($compile, $rootScope, $templateCache) {
    spec_125135["$compile"] = $compile;
    spec_125135["$rootScope"] = $rootScope;
    return spec_125135["$templateCache"] = $templateCache;
  }]));
  it("should show a submit button with a glyph on it", function() {
    var submit = function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_125135, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["$compile"];
      return fn_SHARP_.call(obj_SHARP_, "\x3csubmit-button/\x3e");
    }().call(null, purnam.native$.aget_in.call(null, spec_125135, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null)));
    var obj_SHARP__125136 = purnam.native$.aget_in.call(null, spec_125135, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$rootScope"], null));
    var fn_SHARP__125137 = obj_SHARP__125136["$digest"];
    fn_SHARP__125137.call(obj_SHARP__125136);
    var html = jayq.core.html.call(null, jayq.core.$.call(null, submit));
    expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, html, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["indexOf"];
      return fn_SHARP_.call(obj_SHARP_, '\x3cbutton type\x3d"submit"');
    }()).not.toSatisfy(-1, '(let [obj# (purnam.native/aget-in html []) fn# (aget obj# "indexOf")] (.call fn# obj# "\x3cbutton type\x3d\\"submit\\""))', "-1");
    return expect(function() {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, html, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["indexOf"];
      return fn_SHARP_.call(obj_SHARP_, "glyphicon-floppy-save");
    }()).not.toSatisfy(-1, '(let [obj# (purnam.native/aget-in html []) fn# (aget obj# "indexOf")] (.call fn# obj# "glyphicon-floppy-save"))', "-1");
  });
  return null;
});
goog.provide("chaperone.websocket_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("test_helper");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.websocket");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.rpc");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.core");
goog.require("chaperone.core");
test_helper.init_tests.call(null);
var spec_125059 = function() {
  var obj125058 = {};
  return obj125058;
}();
describe("Websocket subsystem", function() {
  it("should have the websocket subsystem", function() {
    var system = chaperone.core.create_system.call(null, "localhost", 8080);
    return expect(cljs.core.map_QMARK_.call(null, chaperone.websocket.sub_system.call(null, system))).toSatisfy(true, "(map? (sub-system system))", "true");
  });
  return null;
});
var spec_125063 = function() {
  var obj125062 = {};
  return obj125062;
}();
var system_125064 = chaperone.core.create_system.call(null, "localhost", 8080);
var ws_system_125065 = chaperone.websocket.sub_system.call(null, system_125064);
var ws_chan_125066 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(ws_system_125065);
var rpc_map_125067 = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(ws_system_125065);
describe("Websocket RPC (Not started)", function() {
  it("Should take a RPC request, put it in the websocket channel, and setup the response channel handler", function() {
    var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "request-category", "request-category", 2279649774), new cljs.core.Keyword(null, "request-action", "request-action", 1648081574), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", 1014010321), "value"], null));
    var result = cljs.core.atom.call(null, false);
    cljs.core.async.take_BANG_.call(null, ws_chan_125066, function(p1__125060_SHARP_) {
      return cljs.core.reset_BANG_.call(null, result, p1__125060_SHARP_);
    });
    runs(function() {
      return chaperone.websocket.send_BANG_.call(null, ws_system_125065, request);
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, result);
    }, "No value placed in Websocket channel", 1E3);
    return runs(function() {
      return expect(cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, rpc_map_125067), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, result)))).toSatisfy(true, "(contains? (clojure.core/deref rpc-map) (:id (clojure.core/deref result)))", "true");
    });
  });
  return null;
});
var spec_125074 = function() {
  var obj125069 = {};
  return obj125069;
}();
var system_125075 = chaperone.websocket.start_BANG_.call(null, chaperone.core.create_system.call(null, "localhost", 8080));
var ws_system_125076 = chaperone.websocket.sub_system.call(null, system_125075);
var rpc_map_125077 = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(ws_system_125076);
var response_chan_125078 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(ws_system_125076);
var socket_125079 = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(ws_system_125076);
describe("Websocket RPC (Started)", function() {
  it("Should send back a response on the returned request channel, when a response is sent back", function() {
    var obj_SHARP__125080 = purnam.native$.aget_in.call(null, socket_125079, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP__125081 = obj_SHARP__125080["onopen"];
    fn_SHARP__125081.call(obj_SHARP__125080);
    var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "thing", "thing", 1124235360), new cljs.core.Keyword(null, "do-thing", "do-thing", 4623549598), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "key", "key", 1014010321), "value"], null));
    var ws_complete = cljs.core.atom.call(null, false);
    var response = chaperone.crossover.rpc.new_response.call(null, request, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "data", "data", 1016980252), "oooer"], null));
    var response_result = cljs.core.atom.call(null, false);
    runs(function() {
      purnam.native$.aset_in.call(null, socket_125079, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["send"], null), function(v) {
        return cljs.core.reset_BANG_.call(null, ws_complete, v);
      });
      return cljs.core.async.take_BANG_.call(null, chaperone.websocket.send_BANG_.call(null, ws_system_125076, request), function(v) {
        return cljs.core.reset_BANG_.call(null, response_result, v);
      });
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, ws_complete);
    }, "No value placed in Websocket channel", 1E3);
    runs(function() {
      var socket__$1 = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(ws_system_125076);
      var obj_SHARP_ = purnam.native$.aget_in.call(null, socket__$1, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["onmessage"];
      return fn_SHARP_.call(obj_SHARP_, function() {
        var G__125070 = function() {
          var obj125073 = {};
          return obj125073;
        }();
        G__125070["data"] = cljs.core.pr_str.call(null, response);
        return G__125070;
      }());
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, response_result);
    }, "No value returned on RPC's channel", 1E3);
    return runs(function() {
      expect(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, response_result)), request)).toSatisfy(true, "(\x3d (-\x3e (clojure.core/deref response-result) :request) request)", "true");
      return expect(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, response_result)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "data", "data", 1016980252), "oooer"], null))).toSatisfy(true, '(\x3d (:data (clojure.core/deref response-result)) {:data "oooer"})', "true");
    });
  });
  return null;
});
goog.provide("purnam.types.clojure");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.types.clojure.obj_only = function obj_only(o, method) {
  if (cljs.core.type.call(null, o) === Object) {
    return null;
  } else {
    throw new TypeError([cljs.core.str(purnam.native$.js_type.call(null, o)), cljs.core.str(" does not implement '"), cljs.core.str(cljs.core.name.call(null, method)), cljs.core.str("'")].join(""));
  }
};
cljs.core.ISeqable["object"] = true;
cljs.core._seq["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "seq", "seq", 1014018001));
  return cljs.core.map.call(null, function(k) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, o, k)], null);
  }, cljs.core.js_keys.call(null, o));
};
cljs.core.ICounted["array"] = true;
cljs.core._count["array"] = function(a) {
  return a.length;
};
cljs.core.ICounted["object"] = true;
cljs.core._count["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "count", "count", 1108755585));
  return cljs.core.js_keys.call(null, o).length;
};
cljs.core.ILookup["array"] = true;
cljs.core._lookup["array"] = function() {
  var G__128673 = null;
  var G__128673__2 = function(a, k) {
    return purnam.native$.js_lookup.call(null, a, k);
  };
  var G__128673__3 = function(a, k, not_found) {
    return purnam.native$.js_lookup.call(null, a, k, not_found);
  };
  G__128673 = function(a, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__128673__2.call(this, a, k);
      case 3:
        return G__128673__3.call(this, a, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__128673;
}();
cljs.core.ILookup["object"] = true;
cljs.core._lookup["object"] = function() {
  var G__128674 = null;
  var G__128674__2 = function(o, k) {
    return purnam.native$.js_lookup.call(null, o, k);
  };
  var G__128674__3 = function(o, k, not_found) {
    return purnam.native$.js_lookup.call(null, o, k, not_found);
  };
  G__128674 = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__128674__2.call(this, o, k);
      case 3:
        return G__128674__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__128674;
}();
cljs.core.ITransientAssociative["array"] = true;
cljs.core._assoc_BANG_["array"] = function(o, i, v) {
  return purnam.native$.js_assoc.call(null, o, i, v);
};
cljs.core.ITransientAssociative["object"] = true;
cljs.core._assoc_BANG_["object"] = function(o, k, v) {
  return purnam.native$.js_assoc.call(null, o, k, v);
};
cljs.core.ITransientCollection["array"] = true;
cljs.core._conj_BANG_["array"] = function(a, v) {
  a.push(v);
  return a;
};
cljs.core._persistent_BANG_["array"] = function(a) {
  return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, a);
};
cljs.core.ITransientCollection["object"] = true;
cljs.core._conj_BANG_["object"] = function(o, p__128675) {
  var vec__128676 = p__128675;
  var k = cljs.core.nth.call(null, vec__128676, 0, null);
  var v = cljs.core.nth.call(null, vec__128676, 1, null);
  return purnam.native$.js_assoc.call(null, o, k, v);
};
cljs.core._persistent_BANG_["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "persistent!", "persistent!", 4015339484));
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__128677) {
    var vec__128678 = p__128677;
    var k = cljs.core.nth.call(null, vec__128678, 0, null);
    var v = cljs.core.nth.call(null, vec__128678, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
  }, o));
};
cljs.core.IEmptyableCollection["array"] = true;
cljs.core._empty["array"] = function(a) {
  return[];
};
cljs.core.IEmptyableCollection["object"] = true;
cljs.core._empty["object"] = function(o) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
  var obj128680 = {};
  return obj128680;
};
cljs.core.IAssociative["array"] = true;
cljs.core._assoc["array"] = function() {
  var G__128681__delegate = function(o, more) {
    return purnam.native$.js_copy_assoc.call(null, o, more);
  };
  var G__128681 = function(o, var_args) {
    var more = null;
    if (arguments.length > 1) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__128681__delegate.call(this, o, more);
  };
  G__128681.cljs$lang$maxFixedArity = 1;
  G__128681.cljs$lang$applyTo = function(arglist__128682) {
    var o = cljs.core.first(arglist__128682);
    var more = cljs.core.rest(arglist__128682);
    return G__128681__delegate(o, more);
  };
  G__128681.cljs$core$IFn$_invoke$arity$variadic = G__128681__delegate;
  return G__128681;
}();
cljs.core.IAssociative["object"] = true;
cljs.core._assoc["object"] = function() {
  var G__128683__delegate = function(o, more) {
    return purnam.native$.js_copy_assoc.call(null, o, more);
  };
  var G__128683 = function(o, var_args) {
    var more = null;
    if (arguments.length > 1) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__128683__delegate.call(this, o, more);
  };
  G__128683.cljs$lang$maxFixedArity = 1;
  G__128683.cljs$lang$applyTo = function(arglist__128684) {
    var o = cljs.core.first(arglist__128684);
    var more = cljs.core.rest(arglist__128684);
    return G__128683__delegate(o, more);
  };
  G__128683.cljs$core$IFn$_invoke$arity$variadic = G__128683__delegate;
  return G__128683;
}();
purnam.types.clojure.js_conj_object_BANG_ = function js_conj_object_BANG_(output, p__128685) {
  while (true) {
    var vec__128688 = p__128685;
    var vec__128689 = cljs.core.nth.call(null, vec__128688, 0, null);
    var k = cljs.core.nth.call(null, vec__128689, 0, null);
    var v = cljs.core.nth.call(null, vec__128689, 1, null);
    var ps = cljs.core.nthnext.call(null, vec__128688, 1);
    if (cljs.core.not.call(null, k)) {
      return output;
    } else {
      var G__128690 = purnam.native$.js_assoc.call(null, output, k, v);
      var G__128691 = ps;
      output = G__128690;
      p__128685 = G__128691;
      continue;
    }
    break;
  }
};
purnam.types.clojure.js_conj_array_BANG_ = function js_conj_array_BANG_(output, p__128692) {
  while (true) {
    var vec__128694 = p__128692;
    var v = cljs.core.nth.call(null, vec__128694, 0, null);
    var vs = cljs.core.nthnext.call(null, vec__128694, 1);
    if (cljs.core.not.call(null, v)) {
      return output;
    } else {
      var G__128695 = function() {
        output.push(v);
        return output;
      }();
      var G__128696 = vs;
      output = G__128695;
      p__128692 = G__128696;
      continue;
    }
    break;
  }
};
purnam.types.clojure.js_conj_object = function js_conj_object(parent, pairs) {
  var o = goog.object.clone(parent);
  return purnam.types.clojure.js_conj_object_BANG_.call(null, o, pairs);
};
purnam.types.clojure.js_conj_array = function js_conj_array(parent, values) {
  var a = goog.array.clone(parent);
  purnam.types.clojure.js_conj_array_BANG_.call(null, a, values);
  return a;
};
cljs.core.ICollection["array"] = true;
cljs.core._conj["array"] = function() {
  var G__128697__delegate = function(parent, values) {
    return purnam.types.clojure.js_conj_array.call(null, parent, values);
  };
  var G__128697 = function(parent, var_args) {
    var values = null;
    if (arguments.length > 1) {
      values = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__128697__delegate.call(this, parent, values);
  };
  G__128697.cljs$lang$maxFixedArity = 1;
  G__128697.cljs$lang$applyTo = function(arglist__128698) {
    var parent = cljs.core.first(arglist__128698);
    var values = cljs.core.rest(arglist__128698);
    return G__128697__delegate(parent, values);
  };
  G__128697.cljs$core$IFn$_invoke$arity$variadic = G__128697__delegate;
  return G__128697;
}();
cljs.core.ICollection["object"] = true;
cljs.core._conj["object"] = function() {
  var G__128699__delegate = function(parent, pairs) {
    return purnam.types.clojure.js_conj_object.call(null, parent, pairs);
  };
  var G__128699 = function(parent, var_args) {
    var pairs = null;
    if (arguments.length > 1) {
      pairs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__128699__delegate.call(this, parent, pairs);
  };
  G__128699.cljs$lang$maxFixedArity = 1;
  G__128699.cljs$lang$applyTo = function(arglist__128700) {
    var parent = cljs.core.first(arglist__128700);
    var pairs = cljs.core.rest(arglist__128700);
    return G__128699__delegate(parent, pairs);
  };
  G__128699.cljs$core$IFn$_invoke$arity$variadic = G__128699__delegate;
  return G__128699;
}();
cljs.core.ITransientMap["object"] = true;
cljs.core._dissoc_BANG_["object"] = function(o, k) {
  goog.object.remove(o, purnam.native$.js_strkey.call(null, k));
  return o;
};
cljs.core.IMap["object"] = true;
cljs.core._dissoc["object"] = function(parent, k) {
  purnam.types.clojure.obj_only.call(null, parent, new cljs.core.Keyword(null, "dissoc", "dissoc", 3977329067));
  var o = function() {
    var obj128702 = {};
    return obj128702;
  }();
  goog.object.extend(o, parent);
  return cljs.core.dissoc_BANG_.call(null, o, k);
};
cljs.core.IAssociative["object"] = true;
cljs.core._assoc["object"] = function(o, k, v) {
  purnam.types.clojure.obj_only.call(null, o, new cljs.core.Keyword(null, "assoc", "assoc", 1107025799));
  return cljs.core.conj.call(null, o, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
};
goog.provide("chaperone.ng.messagebox");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("purnam.types.clojure");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("chaperone.ng.core");
chaperone.ng.messagebox.add_message_BANG_ = function add_message_BANG_($scope, $timeout, message) {
  var js_message = cljs.core.clj__GT_js.call(null, message);
  $scope.$apply(function() {
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), cljs.core.clj__GT_js.call(null, cljs.core.cons.call(null, js_message, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null)))));
  });
  return $timeout.call(null, function() {
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), cljs.core.clj__GT_js.call(null, cljs.core.remove.call(null, function(p1__124969_SHARP_) {
      var obj_SHARP_ = purnam.native$.aget_in.call(null, angular, cljs.core.PersistentVector.EMPTY);
      var fn_SHARP_ = obj_SHARP_["equals"];
      return fn_SHARP_.call(obj_SHARP_, js_message, p1__124969_SHARP_);
    }, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null)))));
  }, 4E3);
};
chaperone.ng.messagebox.start_message_queue_listening_BANG_ = function start_message_queue_listening_BANG_(system, $scope, $timeout) {
  var mb = chaperone.messagebox.sub_system.call(null, system);
  var queue = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(mb);
  var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5883__auto__ = function() {
      var switch__5832__auto__ = function(state_125014) {
        var state_val_125015 = state_125014[1];
        if (state_val_125015 === 8) {
          var inst_125006 = state_125014[2];
          var inst_125001 = inst_125006;
          var state_125014__$1 = function() {
            var statearr_125016 = state_125014;
            statearr_125016[5] = inst_125001;
            return statearr_125016;
          }();
          var statearr_125017_125028 = state_125014__$1;
          statearr_125017_125028[2] = null;
          statearr_125017_125028[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_125015 === 7) {
            var inst_125010 = state_125014[2];
            var state_125014__$1 = state_125014;
            var statearr_125018_125029 = state_125014__$1;
            statearr_125018_125029[2] = inst_125010;
            statearr_125018_125029[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_125015 === 6) {
              var state_125014__$1 = state_125014;
              var statearr_125019_125030 = state_125014__$1;
              statearr_125019_125030[2] = null;
              statearr_125019_125030[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_125015 === 5) {
                var state_125014__$1 = state_125014;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_125014__$1, 8, queue);
              } else {
                if (state_val_125015 === 4) {
                  var inst_125012 = state_125014[2];
                  var state_125014__$1 = state_125014;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_125014__$1, inst_125012);
                } else {
                  if (state_val_125015 === 3) {
                    var inst_125001 = state_125014[5];
                    var inst_125003 = chaperone.ng.messagebox.add_message_BANG_.call(null, $scope, $timeout, inst_125001);
                    var state_125014__$1 = function() {
                      var statearr_125020 = state_125014;
                      statearr_125020[6] = inst_125003;
                      return statearr_125020;
                    }();
                    if (cljs.core.truth_(inst_125001)) {
                      var statearr_125021_125031 = state_125014__$1;
                      statearr_125021_125031[1] = 5;
                    } else {
                      var statearr_125022_125032 = state_125014__$1;
                      statearr_125022_125032[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_125015 === 2) {
                      var inst_125000 = state_125014[2];
                      var inst_125001 = inst_125000;
                      var state_125014__$1 = function() {
                        var statearr_125023 = state_125014;
                        statearr_125023[5] = inst_125001;
                        return statearr_125023;
                      }();
                      var statearr_125024_125033 = state_125014__$1;
                      statearr_125024_125033[2] = null;
                      statearr_125024_125033[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_125015 === 1) {
                        var state_125014__$1 = state_125014;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_125014__$1, 2, queue);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5832__auto__) {
        return function() {
          var state_machine__5833__auto__ = null;
          var state_machine__5833__auto____0 = function() {
            var statearr_125026 = [null, null, null, null, null, null, null];
            statearr_125026[0] = state_machine__5833__auto__;
            statearr_125026[1] = 1;
            return statearr_125026;
          };
          var state_machine__5833__auto____1 = function(state_125014) {
            while (true) {
              var result__5834__auto__ = switch__5832__auto__.call(null, state_125014);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5834__auto__;
              }
              break;
            }
          };
          state_machine__5833__auto__ = function(state_125014) {
            switch(arguments.length) {
              case 0:
                return state_machine__5833__auto____0.call(this);
              case 1:
                return state_machine__5833__auto____1.call(this, state_125014);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
          state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
          return state_machine__5833__auto__;
        }();
      }(switch__5832__auto__);
    }();
    var state__5884__auto__ = function() {
      var statearr_125027 = f__5883__auto__.call(null);
      statearr_125027[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
      return statearr_125027;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
  });
  return c__5882__auto__;
};
chaperone.ng.messagebox.chaperone_app_MessageBoxCtrl = ["$scope", "$timeout", "System", function($scope, $timeout, System) {
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["init"], null), function() {
    purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["messages"], null), []);
    return chaperone.ng.messagebox.start_message_queue_listening_BANG_.call(null, System, $scope, $timeout);
  });
}];
angular.module("chaperone.app").controller("MessageBoxCtrl", chaperone.ng.messagebox.chaperone_app_MessageBoxCtrl);
goog.provide("chaperone.ng.messagebox_test");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.messagebox");
goog.require("chaperone.messagebox");
goog.require("purnam.types.clojure");
goog.require("chaperone.ng.messagebox");
test_helper.init_tests.call(null);
var spec_125099 = function() {
  var obj125086 = {};
  return obj125086;
}();
describe("MessageBoxCtrl", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["System", "$controller", "$timeout", "$rootScope", function(System, $controller, $timeout, $rootScope) {
    spec_125099["$scope"] = $controller.call(null, "MessageBoxCtrl", function() {
      var G__125087 = function() {
        var obj125090 = {};
        return obj125090;
      }();
      G__125087["$scope"] = function() {
        var obj_SHARP_ = purnam.native$.aget_in.call(null, $rootScope, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP_ = obj_SHARP_["$new"];
        return fn_SHARP_.call(obj_SHARP_);
      }();
      return G__125087;
    }());
    spec_125099["System"] = System;
    return spec_125099["$timeout"] = $timeout;
  }]));
  it("Should have an empty array in scope on init", function() {
    var obj_SHARP__125100 = purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__125101 = obj_SHARP__125100["init"];
    fn_SHARP__125101.call(obj_SHARP__125100);
    return expect(purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
  });
  it("should put the message in the array when it is added", function() {
    var obj_SHARP__125102 = purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__125103 = obj_SHARP__125102["init"];
    fn_SHARP__125103.call(obj_SHARP__125102);
    runs(function() {
      expect(purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return!cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)));
    }, "Messages doesn't get the message", 1E3);
    runs(function() {
      expect(cljs.core.first.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(function() {
        var G__125091 = function() {
          var obj125094 = {};
          return obj125094;
        }();
        G__125091["message"] = "Hello World!";
        G__125091["level"] = "info";
        return G__125091;
      }(), '(first (purnam.native/aget-in spec ["$scope" "messages"]))', '(obj :level "info" :message "Hello World!")');
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "warning", "warning", 2138350350), "Hello World!");
    });
    waitsFor(function() {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))), 2);
    }, "Messages should have a second message", 1E3);
    return runs(function() {
      return expect(cljs.core.first.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(function() {
        var G__125095 = function() {
          var obj125098 = {};
          return obj125098;
        }();
        G__125095["message"] = "Hello World!";
        G__125095["level"] = "warning";
        return G__125095;
      }(), '(first (purnam.native/aget-in spec ["$scope" "messages"]))', '(obj :level "warning" :message "Hello World!")');
    });
  });
  it("should remove a message from the array after 4 seconds", function() {
    var obj_SHARP__125104 = purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__125105 = obj_SHARP__125104["init"];
    fn_SHARP__125105.call(obj_SHARP__125104);
    runs(function() {
      expect(purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null))).toSatisfy([], '(purnam.native/aget-in spec ["$scope" "messages"])', "(array)");
      return chaperone.messagebox.send_message_BANG_.call(null, chaperone.messagebox.sub_system.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null))), new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return!cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)));
    }, "Messages doesn't get the message", 1E3);
    return runs(function() {
      var obj_SHARP__125106 = purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$timeout"], null));
      var fn_SHARP__125107 = obj_SHARP__125106["flush"];
      fn_SHARP__125107.call(obj_SHARP__125106);
      return expect(cljs.core.empty_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_125099, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "messages"], null)))).toSatisfy(true, '(empty? (purnam.native/aget-in spec ["$scope" "messages"]))', "true");
    });
  });
  return null;
});
goog.provide("chaperone.messagebox_test");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("chaperone.messagebox");
goog.require("test_helper");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.messagebox");
goog.require("chaperone.core");
goog.require("chaperone.core");
test_helper.init_tests.call(null);
var spec_125056 = function() {
  var obj125055 = {};
  return obj125055;
}();
describe("Message queuing", function() {
  it("should put a message in the queue", function() {
    var system = chaperone.core.create_system.call(null, "localhost", 80);
    var mb = chaperone.messagebox.sub_system.call(null, system);
    var chan = (new cljs.core.Keyword(null, "message-queue", "message-queue", 2661203773)).cljs$core$IFn$_invoke$arity$1(mb);
    var result = cljs.core.atom.call(null, false);
    runs(function() {
      cljs.core.async.take_BANG_.call(null, chan, function(p1__125053_SHARP_) {
        return cljs.core.reset_BANG_.call(null, result, p1__125053_SHARP_);
      });
      return chaperone.messagebox.send_message_BANG_.call(null, mb, new cljs.core.Keyword(null, "info", "info", 1017141280), "Hello World!");
    });
    waitsFor(function() {
      return cljs.core.deref.call(null, result);
    }, "No value in the message queue", 2E3);
    return runs(function() {
      return expect(cljs.core.deref.call(null, result)).toSatisfy(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "level", "level", 1116770038), new cljs.core.Keyword(null, "info", "info", 1017141280), new cljs.core.Keyword(null, "message", "message", 1968829305), "Hello World!"], null), "(clojure.core/deref result)", '{:level :info, :message "Hello World!"}');
    });
  });
  return null;
});
goog.provide("chaperone.rpc");
goog.require("cljs.core");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
chaperone.rpc.send_request = function send_request(system, category, action, data) {
  var request = chaperone.crossover.rpc.new_request.call(null, category, action, data);
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  return chaperone.websocket.send_BANG_.call(null, web_socket, request);
};
goog.provide("chaperone.user");
goog.require("cljs.core");
goog.require("chaperone.crossover.user.User");
goog.require("chaperone.rpc");
goog.require("chaperone.rpc");
chaperone.user.save_user = function save_user(system, user) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "save", "save", 1017427183), user);
};
chaperone.user.list_users = function list_users(system) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "list", "list", 1017226256), cljs.core.PersistentArrayMap.EMPTY);
};
chaperone.user.get_user_by_id = function get_user_by_id(system, id) {
  return chaperone.rpc.send_request.call(null, system, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "load", "load", 1017231448), id);
};
goog.provide("chaperone.ng.core_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.core");
test_helper.init_tests.call(null);
var spec_125084 = function() {
  var obj125083 = {};
  return obj125083;
}();
describe("Test the System service factory", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["System", function(System) {
    return spec_125084["System"] = System;
  }]));
  it("Should be a map", function() {
    return expect(cljs.core.map_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_125084, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null)))).toSatisfy(true, '(map? (purnam.native/aget-in spec ["System"]))', "true");
  });
  it("Should have a websocket key", function() {
    return expect(cljs.core.contains_QMARK_.call(null, purnam.native$.aget_in.call(null, spec_125084, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["System"], null)), new cljs.core.Keyword(null, "websocket", "websocket", 784338745))).toSatisfy(true, '(contains? (purnam.native/aget-in spec ["System"]) :websocket)', "true");
  });
  return null;
});
goog.provide("chaperone.ng.admin.user");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("chaperone.messagebox");
goog.require("chaperone.crossover.user");
goog.require("chaperone.messagebox");
goog.require("chaperone.ng.core");
goog.require("chaperone.crossover.user");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("purnam.native$");
goog.require("chaperone.ng.core");
chaperone.ng.admin.user.chaperone_app_AdminUserCtrl = ["$scope", "$location", "$routeParams", "System", function($scope, $location, $routeParams, System) {
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initAddUserForm"], null), function() {
    var user = chaperone.crossover.user.new_user.call(null, "", "", "", "");
    purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null), user);
    return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user));
  });
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initEditUserForm"], null), function() {
    var chan = chaperone.user.get_user_by_id.call(null, System, purnam.native$.aget_in.call(null, $routeParams, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["id"], null)));
    var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_124925) {
          var state_val_124926 = state_124925[1];
          if (state_val_124926 === 2) {
            var inst_124920 = state_124925[2];
            var inst_124921 = (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(inst_124920);
            var inst_124922 = function() {
              var user = inst_124921;
              var response = inst_124920;
              return function(user, response, inst_124920, inst_124921, state_val_124926) {
                return function() {
                  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null), user);
                  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user));
                };
              }(user, response, inst_124920, inst_124921, state_val_124926);
            }();
            var inst_124923 = $scope.$apply(inst_124922);
            var state_124925__$1 = state_124925;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_124925__$1, inst_124923);
          } else {
            if (state_val_124926 === 1) {
              var state_124925__$1 = state_124925;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_124925__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_124928 = [null, null, null, null, null];
              statearr_124928[0] = state_machine__5833__auto__;
              statearr_124928[1] = 1;
              return statearr_124928;
            };
            var state_machine__5833__auto____1 = function(state_124925) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_124925);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_124925) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_124925);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_124929 = f__5883__auto__.call(null);
        statearr_124929[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
        return statearr_124929;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return c__5882__auto__;
  });
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["saveUser"], null), function() {
    var data = cljs.core.merge.call(null, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["clj-user"], null)), cljs.core.js__GT_clj.call(null, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null)), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true));
    var user = chaperone.crossover.user.map__GT_User.call(null, data);
    var chan = chaperone.user.save_user.call(null, System, user);
    var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_124937) {
          var state_val_124938 = state_124937[1];
          if (state_val_124938 === 2) {
            var inst_124931 = state_124937[2];
            var inst_124932 = chaperone.messagebox.sub_system.call(null, System);
            var inst_124933 = chaperone.messagebox.send_message_BANG_.call(null, inst_124932, new cljs.core.Keyword(null, "success", "success", 3441701749), "User has been saved successfully");
            var inst_124934 = function() {
              var mb = inst_124932;
              var result = inst_124931;
              return function(mb, result, inst_124931, inst_124932, inst_124933, state_val_124938) {
                return function() {
                  var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
                  var fn_SHARP_ = obj_SHARP_["path"];
                  return fn_SHARP_.call(obj_SHARP_, "/admin/users/list");
                };
              }(mb, result, inst_124931, inst_124932, inst_124933, state_val_124938);
            }();
            var inst_124935 = $scope.$apply(inst_124934);
            var state_124937__$1 = function() {
              var statearr_124939 = state_124937;
              statearr_124939[5] = inst_124933;
              return statearr_124939;
            }();
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_124937__$1, inst_124935);
          } else {
            if (state_val_124938 === 1) {
              var state_124937__$1 = state_124937;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_124937__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_124941 = [null, null, null, null, null, null];
              statearr_124941[0] = state_machine__5833__auto__;
              statearr_124941[1] = 1;
              return statearr_124941;
            };
            var state_machine__5833__auto____1 = function(state_124937) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_124937);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_124937) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_124937);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_124942 = f__5883__auto__.call(null);
        statearr_124942[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
        return statearr_124942;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return c__5882__auto__;
  });
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initListUsers"], null), function() {
    var chan = chaperone.user.list_users.call(null, System);
    var c__5882__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5883__auto__ = function() {
        var switch__5832__auto__ = function(state_124948) {
          var state_val_124949 = state_124948[1];
          if (state_val_124949 === 2) {
            var inst_124944 = state_124948[2];
            var inst_124945 = function() {
              var result = inst_124944;
              return function(result, inst_124944, state_val_124949) {
                return function() {
                  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["userList"], null), cljs.core.clj__GT_js.call(null, (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(result)));
                };
              }(result, inst_124944, state_val_124949);
            }();
            var inst_124946 = $scope.$apply(inst_124945);
            var state_124948__$1 = state_124948;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_124948__$1, inst_124946);
          } else {
            if (state_val_124949 === 1) {
              var state_124948__$1 = state_124948;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_124948__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5832__auto__) {
          return function() {
            var state_machine__5833__auto__ = null;
            var state_machine__5833__auto____0 = function() {
              var statearr_124951 = [null, null, null, null, null];
              statearr_124951[0] = state_machine__5833__auto__;
              statearr_124951[1] = 1;
              return statearr_124951;
            };
            var state_machine__5833__auto____1 = function(state_124948) {
              while (true) {
                var result__5834__auto__ = switch__5832__auto__.call(null, state_124948);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5834__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5834__auto__;
                }
                break;
              }
            };
            state_machine__5833__auto__ = function(state_124948) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5833__auto____0.call(this);
                case 1:
                  return state_machine__5833__auto____1.call(this, state_124948);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5833__auto____0;
            state_machine__5833__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5833__auto____1;
            return state_machine__5833__auto__;
          }();
        }(switch__5832__auto__);
      }();
      var state__5884__auto__ = function() {
        var statearr_124952 = f__5883__auto__.call(null);
        statearr_124952[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5882__auto__;
        return statearr_124952;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5884__auto__);
    });
    return c__5882__auto__;
  });
}];
angular.module("chaperone.app").controller("AdminUserCtrl", chaperone.ng.admin.user.chaperone_app_AdminUserCtrl);
goog.provide("chaperone.core_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("test_helper");
goog.require("chaperone.core");
goog.require("chaperone.core");
goog.require("purnam.native$");
goog.require("test_helper");
test_helper.init_tests.call(null);
var spec_125052 = function() {
  var obj125051 = {};
  return obj125051;
}();
describe("Create the system", function() {
  it("Should return a map", function() {
    return expect(true).toSatisfy(cljs.core.map_QMARK_.call(null, chaperone.core.create_system.call(null, "localhost", 80)), "true", '(map? (create-system "localhost" 80))');
  });
  return null;
});
goog.provide("chaperone.ng.admin.user_test");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("test_helper");
goog.require("chaperone.user");
goog.require("chaperone.ng.admin.user");
goog.require("test_helper");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.user");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.admin.user");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.user");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("purnam.native$");
test_helper.init_tests.call(null);
var spec_125117 = function() {
  var obj125109 = {};
  return obj125109;
}();
describe("Testing AdminUserCtrl", function() {
  beforeEach(module("chaperone.app"));
  beforeEach(inject(["$controller", "$routeParams", "$location", "$rootScope", function($controller, $routeParams, $location, $rootScope) {
    spec_125117["$scope"] = $controller.call(null, "AdminUserCtrl", function() {
      var G__125110 = function() {
        var obj125113 = {};
        return obj125113;
      }();
      G__125110["$scope"] = function() {
        var obj_SHARP_ = purnam.native$.aget_in.call(null, $rootScope, cljs.core.PersistentVector.EMPTY);
        var fn_SHARP_ = obj_SHARP_["$new"];
        return fn_SHARP_.call(obj_SHARP_);
      }();
      G__125110["$location"] = $location;
      return G__125110;
    }());
    spec_125117["$location"] = $location;
    return spec_125117["$routeParams"] = $routeParams;
  }]));
  it("Should create a new user into scope, when a non existent usersid is used", function() {
    var obj_SHARP__125118 = purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__125119 = obj_SHARP__125118["initAddUserForm"];
    fn_SHARP__125119.call(obj_SHARP__125118);
    expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "firstname"])', "");
    expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "lastname"])', "");
    expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "email"])', "");
    return expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null))).toSatisfy("", '(purnam.native/aget-in spec ["$scope" "user" "password"])', "");
  });
  it("Should change the location when a user is saved", function() {
    var obj_SHARP__125120 = purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
    var fn_SHARP__125121 = obj_SHARP__125120["initAddUserForm"];
    fn_SHARP__125121.call(obj_SHARP__125120);
    purnam.native$.aset_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null), "John");
    purnam.native$.aset_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null), "Doe");
    purnam.native$.aset_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null), "email@email.com");
    purnam.native$.aset_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "password"], null), "password");
    var ws_chan = cljs.core.async.chan.call(null);
    var save_user125114 = chaperone.user.save_user;
    try {
      chaperone.user.save_user = function(system, user) {
        return ws_chan;
      };
      var obj_SHARP__125122 = purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__125123 = obj_SHARP__125122["saveUser"];
      fn_SHARP__125123.call(obj_SHARP__125122);
      runs(function() {
        return cljs.core.async.put_BANG_.call(null, ws_chan, cljs.core.PersistentArrayMap.EMPTY);
      });
      return waitsFor(function() {
        return cljs.core._EQ_.call(null, function() {
          var obj_SHARP_ = purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$location"], null));
          var fn_SHARP_ = obj_SHARP_["path"];
          return fn_SHARP_.call(obj_SHARP_);
        }(), "/admin/users/list");
      }, "Location never gets set", 1E3);
    } finally {
      chaperone.user.save_user = save_user125114;
    }
  });
  it("Should load a list of users in scope", function() {
    var ws_chan = cljs.core.async.chan.call(null);
    var list_users125115 = chaperone.user.list_users;
    try {
      chaperone.user.list_users = function(system) {
        cljs.core.async.put_BANG_.call(null, ws_chan, chaperone.crossover.rpc.new_response.call(null, chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "list", "list", 1017226256), cljs.core.PersistentArrayMap.EMPTY), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [chaperone.crossover.user.new_user.call(null, "M", "M", "E", "P")], null)));
        return ws_chan;
      };
      var obj_SHARP__125124 = purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__125125 = obj_SHARP__125124["initListUsers"];
      fn_SHARP__125125.call(obj_SHARP__125124);
      waitsFor(function() {
        return purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList"], null));
      }, "User list never gets set", 1E3);
      return runs(function() {
        expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "length"], null))).toSatisfy(1, '(purnam.native/aget-in spec ["$scope" "userList" "length"])', "1");
        expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "firstname"], null))).toSatisfy("M", '(purnam.native/aget-in spec ["$scope" "userList" "0" "firstname"])', "M");
        expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "lastname"], null))).toSatisfy("M", '(purnam.native/aget-in spec ["$scope" "userList" "0" "lastname"])', "M");
        expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "email"], null))).toSatisfy("E", '(purnam.native/aget-in spec ["$scope" "userList" "0" "email"])', "E");
        return expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "userList", "0", "password"], null))).toSatisfy("P", '(purnam.native/aget-in spec ["$scope" "userList" "0" "password"])', "P");
      });
    } finally {
      chaperone.user.list_users = list_users125115;
    }
  });
  it("Should load a user of a specific id", function() {
    var ws_chan = cljs.core.async.chan.call(null);
    var test_user = chaperone.crossover.user.new_user.call(null, "M", "M", "E", "P");
    purnam.native$.aset_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$routeParams", "id"], null), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user));
    var get_user_by_id125116 = chaperone.user.get_user_by_id;
    try {
      chaperone.user.get_user_by_id = function(system, id) {
        cljs.core.async.put_BANG_.call(null, ws_chan, chaperone.crossover.rpc.new_response.call(null, chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "load", "load", 1017231448), (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user)), test_user));
        return ws_chan;
      };
      var obj_SHARP__125126 = purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope"], null));
      var fn_SHARP__125127 = obj_SHARP__125126["initEditUserForm"];
      fn_SHARP__125127.call(obj_SHARP__125126);
      waitsFor(function() {
        return purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user"], null));
      }, "User never gets set ", 1E3);
      return runs(function() {
        expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "id"], null))).toSatisfy((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "id"])', "(:id test-user)");
        expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "firstname"], null))).toSatisfy((new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "firstname"])', "(:firstname test-user)");
        expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "lastname"], null))).toSatisfy((new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "lastname"])', "(:lastname test-user)");
        return expect(purnam.native$.aget_in.call(null, spec_125117, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["$scope", "user", "email"], null))).toSatisfy((new cljs.core.Keyword(null, "email", "email", 1110523662)).cljs$core$IFn$_invoke$arity$1(test_user), '(purnam.native/aget-in spec ["$scope" "user" "email"])', "(:email test-user)");
      });
    } finally {
      chaperone.user.get_user_by_id = get_user_by_id125116;
    }
  });
  return null;
});

//# sourceMappingURL=main.js.map