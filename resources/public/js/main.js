var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2138";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__14906__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__14906 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__14906__delegate.call(this, args);
    };
    G__14906.cljs$lang$maxFixedArity = 0;
    G__14906.cljs$lang$applyTo = function(arglist__14907) {
      var args = cljs.core.seq(arglist__14907);
      return G__14906__delegate(args);
    };
    G__14906.cljs$core$IFn$_invoke$arity$variadic = G__14906__delegate;
    return G__14906;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3388__auto__ = ty;
    if (cljs.core.truth_(and__3388__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3388__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4242__auto___14908 = len;
  var i_14909 = 0;
  while (true) {
    if (i_14909 < n__4242__auto___14908) {
      new_arr[i_14909] = arr[i_14909];
      var G__14910 = i_14909 + 1;
      i_14909 = G__14910;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__14911__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__14911 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14911__delegate.call(this, array, i, idxs);
    };
    G__14911.cljs$lang$maxFixedArity = 2;
    G__14911.cljs$lang$applyTo = function(arglist__14912) {
      var array = cljs.core.first(arglist__14912);
      arglist__14912 = cljs.core.next(arglist__14912);
      var i = cljs.core.first(arglist__14912);
      var idxs = cljs.core.rest(arglist__14912);
      return G__14911__delegate(array, i, idxs);
    };
    G__14911.cljs$core$IFn$_invoke$arity$variadic = G__14911__delegate;
    return G__14911;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__14913__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__14913 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14913__delegate.call(this, array, idx, idx2, idxv);
    };
    G__14913.cljs$lang$maxFixedArity = 3;
    G__14913.cljs$lang$applyTo = function(arglist__14914) {
      var array = cljs.core.first(arglist__14914);
      arglist__14914 = cljs.core.next(arglist__14914);
      var idx = cljs.core.first(arglist__14914);
      arglist__14914 = cljs.core.next(arglist__14914);
      var idx2 = cljs.core.first(arglist__14914);
      var idxv = cljs.core.rest(arglist__14914);
      return G__14913__delegate(array, idx, idx2, idxv);
    };
    G__14913.cljs$core$IFn$_invoke$arity$variadic = G__14913__delegate;
    return G__14913;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj14916 = {};
  return obj14916;
}();
cljs.core.IFn = function() {
  var obj14918 = {};
  return obj14918;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj14920 = {};
  return obj14920;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3388__auto__ = value;
    if (and__3388__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4021__auto__ = value == null ? null : value;
    return function() {
      var or__3400__auto__ = cljs.core._clone[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._clone["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj14922 = {};
  return obj14922;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._count[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._count["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj14924 = {};
  return obj14924;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._empty[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._empty["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj14926 = {};
  return obj14926;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._conj[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._conj["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj14928 = {};
  return obj14928;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._nth[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._nth["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._nth[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._nth["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj14930 = {};
  return obj14930;
}();
cljs.core.ISeq = function() {
  var obj14932 = {};
  return obj14932;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._rest[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._rest["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj14934 = {};
  return obj14934;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._next[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._next["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj14936 = {};
  return obj14936;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3388__auto__ = o;
      if (and__3388__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4021__auto__ = o == null ? null : o;
      return function() {
        var or__3400__auto__ = cljs.core._lookup[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._lookup["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3388__auto__ = o;
      if (and__3388__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4021__auto__ = o == null ? null : o;
      return function() {
        var or__3400__auto__ = cljs.core._lookup[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._lookup["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj14938 = {};
  return obj14938;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj14940 = {};
  return obj14940;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._dissoc[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dissoc["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj14942 = {};
  return obj14942;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._key[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._key["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._val[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._val["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj14944 = {};
  return obj14944;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._disjoin[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._disjoin["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj14946 = {};
  return obj14946;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._peek[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._peek["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._pop[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pop["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj14948 = {};
  return obj14948;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_n[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj14950 = {};
  return obj14950;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._deref[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._deref["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj14952 = {};
  return obj14952;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj14954 = {};
  return obj14954;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._meta[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._meta["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj14956 = {};
  return obj14956;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._with_meta[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._with_meta["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj14958 = {};
  return obj14958;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._reduce[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._reduce["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._reduce[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._reduce["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj14960 = {};
  return obj14960;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj14962 = {};
  return obj14962;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._equiv[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._equiv["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj14964 = {};
  return obj14964;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._hash[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._hash["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj14966 = {};
  return obj14966;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._seq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._seq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj14968 = {};
  return obj14968;
}();
cljs.core.IList = function() {
  var obj14970 = {};
  return obj14970;
}();
cljs.core.IRecord = function() {
  var obj14972 = {};
  return obj14972;
}();
cljs.core.IReversible = function() {
  var obj14974 = {};
  return obj14974;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._rseq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._rseq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj14976 = {};
  return obj14976;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._entry_key[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._entry_key["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._comparator[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._comparator["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj14978 = {};
  return obj14978;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3388__auto__ = writer;
    if (and__3388__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4021__auto__ = writer == null ? null : writer;
    return function() {
      var or__3400__auto__ = cljs.core._write[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._write["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3388__auto__ = writer;
    if (and__3388__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4021__auto__ = writer == null ? null : writer;
    return function() {
      var or__3400__auto__ = cljs.core._flush[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._flush["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj14980 = {};
  return obj14980;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._pr_writer[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj14982 = {};
  return obj14982;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3388__auto__ = d;
    if (and__3388__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4021__auto__ = d == null ? null : d;
    return function() {
      var or__3400__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj14984 = {};
  return obj14984;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._notify_watches[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._add_watch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._add_watch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._remove_watch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj14986 = {};
  return obj14986;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._as_transient[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._as_transient["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj14988 = {};
  return obj14988;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj14990 = {};
  return obj14990;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj14992 = {};
  return obj14992;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj14994 = {};
  return obj14994;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj14996 = {};
  return obj14996;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj14998 = {};
  return obj14998;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._compare[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._compare["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15000 = {};
  return obj15000;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._drop_first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._drop_first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15002 = {};
  return obj15002;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15004 = {};
  return obj15004;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_next[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15006 = {};
  return obj15006;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._name[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._name["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._namespace[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._namespace["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3388__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3388__auto__) {
        return b.ns;
      } else {
        return and__3388__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3811__auto__ = self__._hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__15008 = null;
  var G__15008__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__15008__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__15008 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15008__2.call(this, self__, coll);
      case 3:
        return G__15008__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15008;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15007) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15007)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.cljs$core$ICloneable$ = true;
cljs.core.Symbol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, self__._meta);
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15010 = coll;
      if (G__15010) {
        var bit__4037__auto__ = G__15010.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4037__auto__ || G__15010.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15012 = coll;
      if (G__15012) {
        var bit__4037__auto__ = G__15012.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__15012.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15014 = coll;
      if (G__15014) {
        var bit__4037__auto__ = G__15014.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__15014.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15016 = coll;
      if (G__15016) {
        var bit__4037__auto__ = G__15016.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4037__auto__ || G__15016.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__15017__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__15018 = y;
            var G__15019 = cljs.core.first.call(null, more);
            var G__15020 = cljs.core.next.call(null, more);
            x = G__15018;
            y = G__15019;
            more = G__15020;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15017 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15017__delegate.call(this, x, y, more);
    };
    G__15017.cljs$lang$maxFixedArity = 2;
    G__15017.cljs$lang$applyTo = function(arglist__15021) {
      var x = cljs.core.first(arglist__15021);
      arglist__15021 = cljs.core.next(arglist__15021);
      var y = cljs.core.first(arglist__15021);
      var more = cljs.core.rest(arglist__15021);
      return G__15017__delegate(x, y, more);
    };
    G__15017.cljs$core$IFn$_invoke$arity$variadic = G__15017__delegate;
    return G__15017;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15022 = nval;
            var G__15023 = n + 1;
            val = G__15022;
            n = G__15023;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15024 = nval;
          var G__15025 = n + 1;
          val__$1 = G__15024;
          n = G__15025;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15026 = nval;
          var G__15027 = n + 1;
          val__$1 = G__15026;
          n = G__15027;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15028 = nval;
            var G__15029 = n + 1;
            val = G__15028;
            n = G__15029;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15030 = nval;
          var G__15031 = n + 1;
          val__$1 = G__15030;
          n = G__15031;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15032 = nval;
          var G__15033 = n + 1;
          val__$1 = G__15032;
          n = G__15033;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__15035 = x;
  if (G__15035) {
    var bit__4044__auto__ = G__15035.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4044__auto__ || G__15035.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__15035.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15035);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15035);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__15037 = x;
  if (G__15037) {
    var bit__4044__auto__ = G__15037.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4044__auto__ || G__15037.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__15037.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15037);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15037);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__15038 = sn;
      s = G__15038;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__15039__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15040 = conj.call(null, coll, x);
          var G__15041 = cljs.core.first.call(null, xs);
          var G__15042 = cljs.core.next.call(null, xs);
          coll = G__15040;
          x = G__15041;
          xs = G__15042;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__15039 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15039__delegate.call(this, coll, x, xs);
    };
    G__15039.cljs$lang$maxFixedArity = 2;
    G__15039.cljs$lang$applyTo = function(arglist__15043) {
      var coll = cljs.core.first(arglist__15043);
      arglist__15043 = cljs.core.next(arglist__15043);
      var x = cljs.core.first(arglist__15043);
      var xs = cljs.core.rest(arglist__15043);
      return G__15039__delegate(coll, x, xs);
    };
    G__15039.cljs$core$IFn$_invoke$arity$variadic = G__15039__delegate;
    return G__15039;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__15044 = cljs.core.next.call(null, s);
      var G__15045 = acc + 1;
      s = G__15044;
      acc = G__15045;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15047 = coll;
      if (G__15047) {
        var bit__4037__auto__ = G__15047.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4037__auto__ || G__15047.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15048 = cljs.core.next.call(null, coll);
              var G__15049 = n - 1;
              coll = G__15048;
              n = G__15049;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15050 = cljs.core.next.call(null, coll);
              var G__15051 = n - 1;
              var G__15052 = not_found;
              coll = G__15050;
              n = G__15051;
              not_found = G__15052;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__15057 = coll;
        if (G__15057) {
          var bit__4037__auto__ = G__15057.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4037__auto__ || G__15057.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__15058 = coll;
                  if (G__15058) {
                    var bit__4044__auto__ = G__15058.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4044__auto__ || G__15058.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15058.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15058);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15058);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__15059 = coll;
        if (G__15059) {
          var bit__4037__auto__ = G__15059.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4037__auto__ || G__15059.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__15060 = coll;
                  if (G__15060) {
                    var bit__4044__auto__ = G__15060.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4044__auto__ || G__15060.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15060.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15060);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15060);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__15063 = o;
        if (G__15063) {
          var bit__4037__auto__ = G__15063.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4037__auto__ || G__15063.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__15064 = o;
        if (G__15064) {
          var bit__4037__auto__ = G__15064.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4037__auto__ || G__15064.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__15065__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__15066 = ret;
          var G__15067 = cljs.core.first.call(null, kvs);
          var G__15068 = cljs.core.second.call(null, kvs);
          var G__15069 = cljs.core.nnext.call(null, kvs);
          coll = G__15066;
          k = G__15067;
          v = G__15068;
          kvs = G__15069;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__15065 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15065__delegate.call(this, coll, k, v, kvs);
    };
    G__15065.cljs$lang$maxFixedArity = 3;
    G__15065.cljs$lang$applyTo = function(arglist__15070) {
      var coll = cljs.core.first(arglist__15070);
      arglist__15070 = cljs.core.next(arglist__15070);
      var k = cljs.core.first(arglist__15070);
      arglist__15070 = cljs.core.next(arglist__15070);
      var v = cljs.core.first(arglist__15070);
      var kvs = cljs.core.rest(arglist__15070);
      return G__15065__delegate(coll, k, v, kvs);
    };
    G__15065.cljs$core$IFn$_invoke$arity$variadic = G__15065__delegate;
    return G__15065;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__15071__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15072 = ret;
            var G__15073 = cljs.core.first.call(null, ks);
            var G__15074 = cljs.core.next.call(null, ks);
            coll = G__15072;
            k = G__15073;
            ks = G__15074;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15071 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15071__delegate.call(this, coll, k, ks);
    };
    G__15071.cljs$lang$maxFixedArity = 2;
    G__15071.cljs$lang$applyTo = function(arglist__15075) {
      var coll = cljs.core.first(arglist__15075);
      arglist__15075 = cljs.core.next(arglist__15075);
      var k = cljs.core.first(arglist__15075);
      var ks = cljs.core.rest(arglist__15075);
      return G__15071__delegate(coll, k, ks);
    };
    G__15071.cljs$core$IFn$_invoke$arity$variadic = G__15071__delegate;
    return G__15071;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3400__auto__ = goog.isFunction(f);
  if (or__3400__auto__) {
    return or__3400__auto__;
  } else {
    var G__15079 = f;
    if (G__15079) {
      var bit__4044__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3400__auto____$1 = bit__4044__auto__;
        if (cljs.core.truth_(or__3400__auto____$1)) {
          return or__3400__auto____$1;
        } else {
          return G__15079.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__15079.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15079);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15079);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__15087 = o;
    if (G__15087) {
      var bit__4044__auto__ = G__15087.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4044__auto__ || G__15087.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15087.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15087);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15087);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t15088 !== "undefined") {
      } else {
        cljs.core.t15088 = function(meta, o, with_meta, meta15089) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta15089 = meta15089;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t15088.cljs$lang$type = true;
        cljs.core.t15088.cljs$lang$ctorStr = "cljs.core/t15088";
        cljs.core.t15088.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/t15088");
        };
        cljs.core.t15088.prototype.call = function() {
          var G__15092__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__15092 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__15092__delegate.call(this, self__, args);
          };
          G__15092.cljs$lang$maxFixedArity = 1;
          G__15092.cljs$lang$applyTo = function(arglist__15093) {
            var self__ = cljs.core.first(arglist__15093);
            var args = cljs.core.rest(arglist__15093);
            return G__15092__delegate(self__, args);
          };
          G__15092.cljs$core$IFn$_invoke$arity$variadic = G__15092__delegate;
          return G__15092;
        }();
        cljs.core.t15088.prototype.apply = function(self__, args15091) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15091)));
        };
        cljs.core.t15088.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__15094__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__15094 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__15094__delegate.call(this, args);
          };
          G__15094.cljs$lang$maxFixedArity = 0;
          G__15094.cljs$lang$applyTo = function(arglist__15095) {
            var args = cljs.core.seq(arglist__15095);
            return G__15094__delegate(args);
          };
          G__15094.cljs$core$IFn$_invoke$arity$variadic = G__15094__delegate;
          return G__15094;
        }();
        cljs.core.t15088.prototype.cljs$core$Fn$ = true;
        cljs.core.t15088.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15090) {
          var self__ = this;
          var _15090__$1 = this;
          return self__.meta15089;
        };
        cljs.core.t15088.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15090, meta15089__$1) {
          var self__ = this;
          var _15090__$1 = this;
          return new cljs.core.t15088(self__.meta, self__.o, self__.with_meta, meta15089__$1);
        };
        cljs.core.__GT_t15088 = function __GT_t15088(meta__$1, o__$1, with_meta__$1, meta15089) {
          return new cljs.core.t15088(meta__$1, o__$1, with_meta__$1, meta15089);
        };
      }
      return new cljs.core.t15088(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3388__auto__ = !(o == null);
    if (and__3388__auto__) {
      var G__15099 = o;
      if (G__15099) {
        var bit__4044__auto__ = G__15099.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4044__auto__ || G__15099.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__15099.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15099);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15099);
      }
    } else {
      return and__3388__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__15100__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15101 = ret;
            var G__15102 = cljs.core.first.call(null, ks);
            var G__15103 = cljs.core.next.call(null, ks);
            coll = G__15101;
            k = G__15102;
            ks = G__15103;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15100 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15100__delegate.call(this, coll, k, ks);
    };
    G__15100.cljs$lang$maxFixedArity = 2;
    G__15100.cljs$lang$applyTo = function(arglist__15104) {
      var coll = cljs.core.first(arglist__15104);
      arglist__15104 = cljs.core.next(arglist__15104);
      var k = cljs.core.first(arglist__15104);
      var ks = cljs.core.rest(arglist__15104);
      return G__15100__delegate(coll, k, ks);
    };
    G__15100.cljs$core$IFn$_invoke$arity$variadic = G__15100__delegate;
    return G__15100;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj15106 = {};
  return obj15106;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15110 = {};
      return obj15110;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__15112 = o;
    if (G__15112) {
      var bit__4037__auto__ = G__15112.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4037__auto__ || G__15112.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15114 = x;
    if (G__15114) {
      var bit__4044__auto__ = G__15114.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4044__auto__ || G__15114.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__15114.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15114);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15114);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15116 = x;
    if (G__15116) {
      var bit__4044__auto__ = G__15116.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4044__auto__ || G__15116.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__15116.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15116);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15116);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__15118 = x;
  if (G__15118) {
    var bit__4044__auto__ = G__15118.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4044__auto__ || G__15118.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__15118.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15118);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15118);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__15120 = x;
  if (G__15120) {
    var bit__4044__auto__ = G__15120.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4044__auto__ || G__15120.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__15120.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15120);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15120);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__15122 = x;
  if (G__15122) {
    var bit__4044__auto__ = G__15122.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4044__auto__ || G__15122.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__15122.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15122);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15122);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__15124 = x;
  if (G__15124) {
    var bit__4044__auto__ = G__15124.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4044__auto__ || G__15124.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__15124.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15124);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15124);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15126 = x;
    if (G__15126) {
      var bit__4044__auto__ = G__15126.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4044__auto__ || G__15126.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__15126.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15126);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15126);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__15128 = x;
  if (G__15128) {
    var bit__4044__auto__ = G__15128.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4044__auto__ || G__15128.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__15128.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15128);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15128);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__15130 = x;
  if (G__15130) {
    var bit__4037__auto__ = G__15130.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4037__auto__ || G__15130.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj15134 = {};
    return obj15134;
  };
  var js_obj__1 = function() {
    var G__15135__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__15135 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15135__delegate.call(this, keyvals);
    };
    G__15135.cljs$lang$maxFixedArity = 0;
    G__15135.cljs$lang$applyTo = function(arglist__15136) {
      var keyvals = cljs.core.seq(arglist__15136);
      return G__15135__delegate(keyvals);
    };
    G__15135.cljs$core$IFn$_invoke$arity$variadic = G__15135__delegate;
    return G__15135;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__15137 = i__$1 + 1;
      var G__15138 = j__$1 + 1;
      var G__15139 = len__$1 - 1;
      i__$1 = G__15137;
      j__$1 = G__15138;
      len__$1 = G__15139;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__15140 = i__$1 - 1;
      var G__15141 = j__$1 - 1;
      var G__15142 = len__$1 - 1;
      i__$1 = G__15140;
      j__$1 = G__15141;
      len__$1 = G__15142;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj15144 = {};
  return obj15144;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__15146 = s;
    if (G__15146) {
      var bit__4044__auto__ = G__15146.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4044__auto__ || G__15146.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__15146.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15146);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15146);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__15148 = s;
  if (G__15148) {
    var bit__4044__auto__ = G__15148.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4044__auto__ || G__15148.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__15148.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15148);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15148);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3400__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3400__auto__) {
    return or__3400__auto__;
  } else {
    var G__15152 = f;
    if (G__15152) {
      var bit__4044__auto__ = G__15152.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4044__auto__ || G__15152.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__15152.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__15152);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__15152);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__15153__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__15154 = cljs.core.conj.call(null, s, x__$1);
              var G__15155 = etc;
              s = G__15154;
              xs = G__15155;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__15153 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15153__delegate.call(this, x, y, more);
    };
    G__15153.cljs$lang$maxFixedArity = 2;
    G__15153.cljs$lang$applyTo = function(arglist__15156) {
      var x = cljs.core.first(arglist__15156);
      arglist__15156 = cljs.core.next(arglist__15156);
      var y = cljs.core.first(arglist__15156);
      var more = cljs.core.rest(arglist__15156);
      return G__15153__delegate(x, y, more);
    };
    G__15153.cljs$core$IFn$_invoke$arity$variadic = G__15153__delegate;
    return G__15153;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3400__auto__ = cljs.core.seq.call(null, coll);
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__15158 = x;
            if (G__15158) {
              var bit__4037__auto__ = G__15158.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4037__auto__ || G__15158.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__15159 = xs;
        var G__15160 = ys;
        var G__15161 = len;
        var G__15162 = n + 1;
        xs = G__15159;
        ys = G__15160;
        len = G__15161;
        n = G__15162;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15163 = nval;
          var G__15164 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__15163;
          coll__$1 = G__15164;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__15167 = coll;
      if (G__15167) {
        var bit__4037__auto__ = G__15167.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4037__auto__ || G__15167.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__15168 = coll;
      if (G__15168) {
        var bit__4037__auto__ = G__15168.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4037__auto__ || G__15168.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__15169__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__15169 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15169__delegate.call(this, x, y, more);
    };
    G__15169.cljs$lang$maxFixedArity = 2;
    G__15169.cljs$lang$applyTo = function(arglist__15170) {
      var x = cljs.core.first(arglist__15170);
      arglist__15170 = cljs.core.next(arglist__15170);
      var y = cljs.core.first(arglist__15170);
      var more = cljs.core.rest(arglist__15170);
      return G__15169__delegate(x, y, more);
    };
    G__15169.cljs$core$IFn$_invoke$arity$variadic = G__15169__delegate;
    return G__15169;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__15171__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__15171 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15171__delegate.call(this, x, y, more);
    };
    G__15171.cljs$lang$maxFixedArity = 2;
    G__15171.cljs$lang$applyTo = function(arglist__15172) {
      var x = cljs.core.first(arglist__15172);
      arglist__15172 = cljs.core.next(arglist__15172);
      var y = cljs.core.first(arglist__15172);
      var more = cljs.core.rest(arglist__15172);
      return G__15171__delegate(x, y, more);
    };
    G__15171.cljs$core$IFn$_invoke$arity$variadic = G__15171__delegate;
    return G__15171;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__15173__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__15173 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15173__delegate.call(this, x, y, more);
    };
    G__15173.cljs$lang$maxFixedArity = 2;
    G__15173.cljs$lang$applyTo = function(arglist__15174) {
      var x = cljs.core.first(arglist__15174);
      arglist__15174 = cljs.core.next(arglist__15174);
      var y = cljs.core.first(arglist__15174);
      var more = cljs.core.rest(arglist__15174);
      return G__15173__delegate(x, y, more);
    };
    G__15173.cljs$core$IFn$_invoke$arity$variadic = G__15173__delegate;
    return G__15173;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__15175__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__15175 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15175__delegate.call(this, x, y, more);
    };
    G__15175.cljs$lang$maxFixedArity = 2;
    G__15175.cljs$lang$applyTo = function(arglist__15176) {
      var x = cljs.core.first(arglist__15176);
      arglist__15176 = cljs.core.next(arglist__15176);
      var y = cljs.core.first(arglist__15176);
      var more = cljs.core.rest(arglist__15176);
      return G__15175__delegate(x, y, more);
    };
    G__15175.cljs$core$IFn$_invoke$arity$variadic = G__15175__delegate;
    return G__15175;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__15177__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__15178 = y;
            var G__15179 = cljs.core.first.call(null, more);
            var G__15180 = cljs.core.next.call(null, more);
            x = G__15178;
            y = G__15179;
            more = G__15180;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15177 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15177__delegate.call(this, x, y, more);
    };
    G__15177.cljs$lang$maxFixedArity = 2;
    G__15177.cljs$lang$applyTo = function(arglist__15181) {
      var x = cljs.core.first(arglist__15181);
      arglist__15181 = cljs.core.next(arglist__15181);
      var y = cljs.core.first(arglist__15181);
      var more = cljs.core.rest(arglist__15181);
      return G__15177__delegate(x, y, more);
    };
    G__15177.cljs$core$IFn$_invoke$arity$variadic = G__15177__delegate;
    return G__15177;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__15182__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__15183 = y;
            var G__15184 = cljs.core.first.call(null, more);
            var G__15185 = cljs.core.next.call(null, more);
            x = G__15183;
            y = G__15184;
            more = G__15185;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15182 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15182__delegate.call(this, x, y, more);
    };
    G__15182.cljs$lang$maxFixedArity = 2;
    G__15182.cljs$lang$applyTo = function(arglist__15186) {
      var x = cljs.core.first(arglist__15186);
      arglist__15186 = cljs.core.next(arglist__15186);
      var y = cljs.core.first(arglist__15186);
      var more = cljs.core.rest(arglist__15186);
      return G__15182__delegate(x, y, more);
    };
    G__15182.cljs$core$IFn$_invoke$arity$variadic = G__15182__delegate;
    return G__15182;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__15187__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__15188 = y;
            var G__15189 = cljs.core.first.call(null, more);
            var G__15190 = cljs.core.next.call(null, more);
            x = G__15188;
            y = G__15189;
            more = G__15190;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15187 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15187__delegate.call(this, x, y, more);
    };
    G__15187.cljs$lang$maxFixedArity = 2;
    G__15187.cljs$lang$applyTo = function(arglist__15191) {
      var x = cljs.core.first(arglist__15191);
      arglist__15191 = cljs.core.next(arglist__15191);
      var y = cljs.core.first(arglist__15191);
      var more = cljs.core.rest(arglist__15191);
      return G__15187__delegate(x, y, more);
    };
    G__15187.cljs$core$IFn$_invoke$arity$variadic = G__15187__delegate;
    return G__15187;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__15192__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__15193 = y;
            var G__15194 = cljs.core.first.call(null, more);
            var G__15195 = cljs.core.next.call(null, more);
            x = G__15193;
            y = G__15194;
            more = G__15195;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15192 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15192__delegate.call(this, x, y, more);
    };
    G__15192.cljs$lang$maxFixedArity = 2;
    G__15192.cljs$lang$applyTo = function(arglist__15196) {
      var x = cljs.core.first(arglist__15196);
      arglist__15196 = cljs.core.next(arglist__15196);
      var y = cljs.core.first(arglist__15196);
      var more = cljs.core.rest(arglist__15196);
      return G__15192__delegate(x, y, more);
    };
    G__15192.cljs$core$IFn$_invoke$arity$variadic = G__15192__delegate;
    return G__15192;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3707__auto__ = x;
    var y__3708__auto__ = y;
    return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
  };
  var max__3 = function() {
    var G__15197__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3707__auto__ = x;
        var y__3708__auto__ = y;
        return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
      }(), more);
    };
    var G__15197 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15197__delegate.call(this, x, y, more);
    };
    G__15197.cljs$lang$maxFixedArity = 2;
    G__15197.cljs$lang$applyTo = function(arglist__15198) {
      var x = cljs.core.first(arglist__15198);
      arglist__15198 = cljs.core.next(arglist__15198);
      var y = cljs.core.first(arglist__15198);
      var more = cljs.core.rest(arglist__15198);
      return G__15197__delegate(x, y, more);
    };
    G__15197.cljs$core$IFn$_invoke$arity$variadic = G__15197__delegate;
    return G__15197;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3714__auto__ = x;
    var y__3715__auto__ = y;
    return x__3714__auto__ < y__3715__auto__ ? x__3714__auto__ : y__3715__auto__;
  };
  var min__3 = function() {
    var G__15199__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3714__auto__ = x;
        var y__3715__auto__ = y;
        return x__3714__auto__ < y__3715__auto__ ? x__3714__auto__ : y__3715__auto__;
      }(), more);
    };
    var G__15199 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15199__delegate.call(this, x, y, more);
    };
    G__15199.cljs$lang$maxFixedArity = 2;
    G__15199.cljs$lang$applyTo = function(arglist__15200) {
      var x = cljs.core.first(arglist__15200);
      arglist__15200 = cljs.core.next(arglist__15200);
      var y = cljs.core.first(arglist__15200);
      var more = cljs.core.rest(arglist__15200);
      return G__15199__delegate(x, y, more);
    };
    G__15199.cljs$core$IFn$_invoke$arity$variadic = G__15199__delegate;
    return G__15199;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__15201__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__15201 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15201__delegate.call(this, x, y, more);
    };
    G__15201.cljs$lang$maxFixedArity = 2;
    G__15201.cljs$lang$applyTo = function(arglist__15202) {
      var x = cljs.core.first(arglist__15202);
      arglist__15202 = cljs.core.next(arglist__15202);
      var y = cljs.core.first(arglist__15202);
      var more = cljs.core.rest(arglist__15202);
      return G__15201__delegate(x, y, more);
    };
    G__15201.cljs$core$IFn$_invoke$arity$variadic = G__15201__delegate;
    return G__15201;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__15203__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__15203 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15203__delegate.call(this, x, y, more);
    };
    G__15203.cljs$lang$maxFixedArity = 2;
    G__15203.cljs$lang$applyTo = function(arglist__15204) {
      var x = cljs.core.first(arglist__15204);
      arglist__15204 = cljs.core.next(arglist__15204);
      var y = cljs.core.first(arglist__15204);
      var more = cljs.core.rest(arglist__15204);
      return G__15203__delegate(x, y, more);
    };
    G__15203.cljs$core$IFn$_invoke$arity$variadic = G__15203__delegate;
    return G__15203;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__15205__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__15205 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15205__delegate.call(this, x, y, more);
    };
    G__15205.cljs$lang$maxFixedArity = 2;
    G__15205.cljs$lang$applyTo = function(arglist__15206) {
      var x = cljs.core.first(arglist__15206);
      arglist__15206 = cljs.core.next(arglist__15206);
      var y = cljs.core.first(arglist__15206);
      var more = cljs.core.rest(arglist__15206);
      return G__15205__delegate(x, y, more);
    };
    G__15205.cljs$core$IFn$_invoke$arity$variadic = G__15205__delegate;
    return G__15205;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__15207__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__15207 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15207__delegate.call(this, x, y, more);
    };
    G__15207.cljs$lang$maxFixedArity = 2;
    G__15207.cljs$lang$applyTo = function(arglist__15208) {
      var x = cljs.core.first(arglist__15208);
      arglist__15208 = cljs.core.next(arglist__15208);
      var y = cljs.core.first(arglist__15208);
      var more = cljs.core.rest(arglist__15208);
      return G__15207__delegate(x, y, more);
    };
    G__15207.cljs$core$IFn$_invoke$arity$variadic = G__15207__delegate;
    return G__15207;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__15209__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__15209 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15209__delegate.call(this, x, y, more);
    };
    G__15209.cljs$lang$maxFixedArity = 2;
    G__15209.cljs$lang$applyTo = function(arglist__15210) {
      var x = cljs.core.first(arglist__15210);
      arglist__15210 = cljs.core.next(arglist__15210);
      var y = cljs.core.first(arglist__15210);
      var more = cljs.core.rest(arglist__15210);
      return G__15209__delegate(x, y, more);
    };
    G__15209.cljs$core$IFn$_invoke$arity$variadic = G__15209__delegate;
    return G__15209;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__15211__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__15211 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15211__delegate.call(this, x, y, more);
    };
    G__15211.cljs$lang$maxFixedArity = 2;
    G__15211.cljs$lang$applyTo = function(arglist__15212) {
      var x = cljs.core.first(arglist__15212);
      arglist__15212 = cljs.core.next(arglist__15212);
      var y = cljs.core.first(arglist__15212);
      var more = cljs.core.rest(arglist__15212);
      return G__15211__delegate(x, y, more);
    };
    G__15211.cljs$core$IFn$_invoke$arity$variadic = G__15211__delegate;
    return G__15211;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__15213__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__15213 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15213__delegate.call(this, x, y, more);
    };
    G__15213.cljs$lang$maxFixedArity = 2;
    G__15213.cljs$lang$applyTo = function(arglist__15214) {
      var x = cljs.core.first(arglist__15214);
      arglist__15214 = cljs.core.next(arglist__15214);
      var y = cljs.core.first(arglist__15214);
      var more = cljs.core.rest(arglist__15214);
      return G__15213__delegate(x, y, more);
    };
    G__15213.cljs$core$IFn$_invoke$arity$variadic = G__15213__delegate;
    return G__15213;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__15215__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__15216 = y;
            var G__15217 = cljs.core.first.call(null, more);
            var G__15218 = cljs.core.next.call(null, more);
            x = G__15216;
            y = G__15217;
            more = G__15218;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15215 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15215__delegate.call(this, x, y, more);
    };
    G__15215.cljs$lang$maxFixedArity = 2;
    G__15215.cljs$lang$applyTo = function(arglist__15219) {
      var x = cljs.core.first(arglist__15219);
      arglist__15219 = cljs.core.next(arglist__15219);
      var y = cljs.core.first(arglist__15219);
      var more = cljs.core.rest(arglist__15219);
      return G__15215__delegate(x, y, more);
    };
    G__15215.cljs$core$IFn$_invoke$arity$variadic = G__15215__delegate;
    return G__15215;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__15220 = n__$1 - 1;
      var G__15221 = cljs.core.next.call(null, xs);
      n__$1 = G__15220;
      xs = G__15221;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__15222__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__15223 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__15224 = cljs.core.next.call(null, more);
          sb = G__15223;
          more = G__15224;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__15222 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15222__delegate.call(this, x, ys);
    };
    G__15222.cljs$lang$maxFixedArity = 1;
    G__15222.cljs$lang$applyTo = function(arglist__15225) {
      var x = cljs.core.first(arglist__15225);
      var ys = cljs.core.rest(arglist__15225);
      return G__15222__delegate(x, ys);
    };
    G__15222.cljs$core$IFn$_invoke$arity$variadic = G__15222__delegate;
    return G__15222;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__15226 = cljs.core.next.call(null, xs);
            var G__15227 = cljs.core.next.call(null, ys);
            xs = G__15226;
            ys = G__15227;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__15228 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__15229 = cljs.core.next.call(null, s);
        res = G__15228;
        s = G__15229;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__15230 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__15231 = cljs.core.next.call(null, s);
      h = G__15230;
      s = G__15231;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__15232 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__15233 = cljs.core.next.call(null, s__$1);
      h = G__15232;
      s__$1 = G__15233;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__15240_15246 = cljs.core.seq.call(null, fn_map);
  var chunk__15241_15247 = null;
  var count__15242_15248 = 0;
  var i__15243_15249 = 0;
  while (true) {
    if (i__15243_15249 < count__15242_15248) {
      var vec__15244_15250 = cljs.core._nth.call(null, chunk__15241_15247, i__15243_15249);
      var key_name_15251 = cljs.core.nth.call(null, vec__15244_15250, 0, null);
      var f_15252 = cljs.core.nth.call(null, vec__15244_15250, 1, null);
      var str_name_15253 = cljs.core.name.call(null, key_name_15251);
      obj[str_name_15253] = f_15252;
      var G__15254 = seq__15240_15246;
      var G__15255 = chunk__15241_15247;
      var G__15256 = count__15242_15248;
      var G__15257 = i__15243_15249 + 1;
      seq__15240_15246 = G__15254;
      chunk__15241_15247 = G__15255;
      count__15242_15248 = G__15256;
      i__15243_15249 = G__15257;
      continue;
    } else {
      var temp__4092__auto___15258 = cljs.core.seq.call(null, seq__15240_15246);
      if (temp__4092__auto___15258) {
        var seq__15240_15259__$1 = temp__4092__auto___15258;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15240_15259__$1)) {
          var c__4142__auto___15260 = cljs.core.chunk_first.call(null, seq__15240_15259__$1);
          var G__15261 = cljs.core.chunk_rest.call(null, seq__15240_15259__$1);
          var G__15262 = c__4142__auto___15260;
          var G__15263 = cljs.core.count.call(null, c__4142__auto___15260);
          var G__15264 = 0;
          seq__15240_15246 = G__15261;
          chunk__15241_15247 = G__15262;
          count__15242_15248 = G__15263;
          i__15243_15249 = G__15264;
          continue;
        } else {
          var vec__15245_15265 = cljs.core.first.call(null, seq__15240_15259__$1);
          var key_name_15266 = cljs.core.nth.call(null, vec__15245_15265, 0, null);
          var f_15267 = cljs.core.nth.call(null, vec__15245_15265, 1, null);
          var str_name_15268 = cljs.core.name.call(null, key_name_15266);
          obj[str_name_15268] = f_15267;
          var G__15269 = cljs.core.next.call(null, seq__15240_15259__$1);
          var G__15270 = null;
          var G__15271 = 0;
          var G__15272 = 0;
          seq__15240_15246 = G__15269;
          chunk__15241_15247 = G__15270;
          count__15242_15248 = G__15271;
          i__15243_15249 = G__15272;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$ = true;
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__15274 = coll;
  if (G__15274) {
    var bit__4044__auto__ = G__15274.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4044__auto__ || G__15274.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__15274.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__15274);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__15274);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__15275 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__15275;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__15276 = i - 1;
        var G__15277 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__15276;
        r = G__15277;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__15278) {
    var xs = cljs.core.seq(arglist__15278);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$ = true;
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3400__auto__ = coll == null;
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      var G__15282 = coll;
      if (G__15282) {
        var bit__4037__auto__ = G__15282.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__15282.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__15284 = x;
  if (G__15284) {
    var bit__4044__auto__ = G__15284.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4044__auto__ || G__15284.cljs$core$IList$) {
      return true;
    } else {
      if (!G__15284.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__15284);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__15284);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__15286 = null;
  var G__15286__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__15286__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__15286 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15286__2.call(this, self__, coll);
      case 3:
        return G__15286__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15286;
}();
cljs.core.Keyword.prototype.apply = function(self__, args15285) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15285)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.cljs$core$ICloneable$ = true;
cljs.core.Keyword.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Keyword(self__.ns, self__.name, self__.fqn, self__._hash);
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__15288 = x;
    if (G__15288) {
      var bit__4037__auto__ = G__15288.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4037__auto__ || G__15288.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__15289 = ls.sval();
        ls = G__15289;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__15291 = s;
    if (G__15291) {
      var bit__4037__auto__ = G__15291.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4037__auto__ || G__15291.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__15292 = cljs.core.next.call(null, s__$1);
      s__$1 = G__15292;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_15293 = 0;
  var xs_15294 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_15294) {
      ret[i_15293] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_15294));
      var G__15295 = i_15293 + 1;
      var G__15296 = cljs.core.next.call(null, xs_15294);
      i_15293 = G__15295;
      xs_15294 = G__15296;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15297 = i + 1;
          var G__15298 = cljs.core.next.call(null, s__$1);
          i = G__15297;
          s__$1 = G__15298;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___15299 = size;
      var i_15300 = 0;
      while (true) {
        if (i_15300 < n__4242__auto___15299) {
          a[i_15300] = init_val_or_seq;
          var G__15301 = i_15300 + 1;
          i_15300 = G__15301;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15302 = i + 1;
          var G__15303 = cljs.core.next.call(null, s__$1);
          i = G__15302;
          s__$1 = G__15303;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___15304 = size;
      var i_15305 = 0;
      while (true) {
        if (i_15305 < n__4242__auto___15304) {
          a[i_15305] = init_val_or_seq;
          var G__15306 = i_15305 + 1;
          i_15305 = G__15306;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15307 = i + 1;
          var G__15308 = cljs.core.next.call(null, s__$1);
          i = G__15307;
          s__$1 = G__15308;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___15309 = size;
      var i_15310 = 0;
      while (true) {
        if (i_15310 < n__4242__auto___15309) {
          a[i_15310] = init_val_or_seq;
          var G__15311 = i_15310 + 1;
          i_15310 = G__15311;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15312 = i + 1;
          var G__15313 = cljs.core.next.call(null, s__$1);
          i = G__15312;
          s__$1 = G__15313;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___15314 = size;
      var i_15315 = 0;
      while (true) {
        if (i_15315 < n__4242__auto___15314) {
          a[i_15315] = init_val_or_seq;
          var G__15316 = i_15315 + 1;
          i_15315 = G__15316;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__15317 = cljs.core.next.call(null, s__$1);
        var G__15318 = i - 1;
        var G__15319 = sum + 1;
        s__$1 = G__15317;
        i = G__15318;
        sum = G__15319;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__15320__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__15320 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15320__delegate.call(this, x, y, zs);
    };
    G__15320.cljs$lang$maxFixedArity = 2;
    G__15320.cljs$lang$applyTo = function(arglist__15321) {
      var x = cljs.core.first(arglist__15321);
      arglist__15321 = cljs.core.next(arglist__15321);
      var y = cljs.core.first(arglist__15321);
      var zs = cljs.core.rest(arglist__15321);
      return G__15320__delegate(x, y, zs);
    };
    G__15320.cljs$core$IFn$_invoke$arity$variadic = G__15320__delegate;
    return G__15320;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__15322__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__15322 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15322__delegate.call(this, a, b, c, d, more);
    };
    G__15322.cljs$lang$maxFixedArity = 4;
    G__15322.cljs$lang$applyTo = function(arglist__15323) {
      var a = cljs.core.first(arglist__15323);
      arglist__15323 = cljs.core.next(arglist__15323);
      var b = cljs.core.first(arglist__15323);
      arglist__15323 = cljs.core.next(arglist__15323);
      var c = cljs.core.first(arglist__15323);
      arglist__15323 = cljs.core.next(arglist__15323);
      var d = cljs.core.first(arglist__15323);
      var more = cljs.core.rest(arglist__15323);
      return G__15322__delegate(a, b, c, d, more);
    };
    G__15322.cljs$core$IFn$_invoke$arity$variadic = G__15322__delegate;
    return G__15322;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val);
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key);
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val);
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__15324__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__15324 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__15324__delegate.call(this, f, a, b, c, d, args);
    };
    G__15324.cljs$lang$maxFixedArity = 5;
    G__15324.cljs$lang$applyTo = function(arglist__15325) {
      var f = cljs.core.first(arglist__15325);
      arglist__15325 = cljs.core.next(arglist__15325);
      var a = cljs.core.first(arglist__15325);
      arglist__15325 = cljs.core.next(arglist__15325);
      var b = cljs.core.first(arglist__15325);
      arglist__15325 = cljs.core.next(arglist__15325);
      var c = cljs.core.first(arglist__15325);
      arglist__15325 = cljs.core.next(arglist__15325);
      var d = cljs.core.first(arglist__15325);
      var args = cljs.core.rest(arglist__15325);
      return G__15324__delegate(f, a, b, c, d, args);
    };
    G__15324.cljs$core$IFn$_invoke$arity$variadic = G__15324__delegate;
    return G__15324;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__15326__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__15326 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__15326__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__15326.cljs$lang$maxFixedArity = 6;
    G__15326.cljs$lang$applyTo = function(arglist__15327) {
      var obj = cljs.core.first(arglist__15327);
      arglist__15327 = cljs.core.next(arglist__15327);
      var f = cljs.core.first(arglist__15327);
      arglist__15327 = cljs.core.next(arglist__15327);
      var a = cljs.core.first(arglist__15327);
      arglist__15327 = cljs.core.next(arglist__15327);
      var b = cljs.core.first(arglist__15327);
      arglist__15327 = cljs.core.next(arglist__15327);
      var c = cljs.core.first(arglist__15327);
      arglist__15327 = cljs.core.next(arglist__15327);
      var d = cljs.core.first(arglist__15327);
      var args = cljs.core.rest(arglist__15327);
      return G__15326__delegate(obj, f, a, b, c, d, args);
    };
    G__15326.cljs$core$IFn$_invoke$arity$variadic = G__15326__delegate;
    return G__15326;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__15328__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__15328 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15328__delegate.call(this, x, y, more);
    };
    G__15328.cljs$lang$maxFixedArity = 2;
    G__15328.cljs$lang$applyTo = function(arglist__15329) {
      var x = cljs.core.first(arglist__15329);
      arglist__15329 = cljs.core.next(arglist__15329);
      var y = cljs.core.first(arglist__15329);
      var more = cljs.core.rest(arglist__15329);
      return G__15328__delegate(x, y, more);
    };
    G__15328.cljs$core$IFn$_invoke$arity$variadic = G__15328__delegate;
    return G__15328;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__15330 = pred;
        var G__15331 = cljs.core.next.call(null, coll);
        pred = G__15330;
        coll = G__15331;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3400__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        var G__15332 = pred;
        var G__15333 = cljs.core.next.call(null, coll);
        pred = G__15332;
        coll = G__15333;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__15334 = null;
    var G__15334__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__15334__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__15334__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__15334__3 = function() {
      var G__15335__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__15335 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__15335__delegate.call(this, x, y, zs);
      };
      G__15335.cljs$lang$maxFixedArity = 2;
      G__15335.cljs$lang$applyTo = function(arglist__15336) {
        var x = cljs.core.first(arglist__15336);
        arglist__15336 = cljs.core.next(arglist__15336);
        var y = cljs.core.first(arglist__15336);
        var zs = cljs.core.rest(arglist__15336);
        return G__15335__delegate(x, y, zs);
      };
      G__15335.cljs$core$IFn$_invoke$arity$variadic = G__15335__delegate;
      return G__15335;
    }();
    G__15334 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__15334__0.call(this);
        case 1:
          return G__15334__1.call(this, x);
        case 2:
          return G__15334__2.call(this, x, y);
        default:
          return G__15334__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15334.cljs$lang$maxFixedArity = 2;
    G__15334.cljs$lang$applyTo = G__15334__3.cljs$lang$applyTo;
    return G__15334;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__15337__delegate = function(args) {
      return x;
    };
    var G__15337 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15337__delegate.call(this, args);
    };
    G__15337.cljs$lang$maxFixedArity = 0;
    G__15337.cljs$lang$applyTo = function(arglist__15338) {
      var args = cljs.core.seq(arglist__15338);
      return G__15337__delegate(args);
    };
    G__15337.cljs$core$IFn$_invoke$arity$variadic = G__15337__delegate;
    return G__15337;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__15339 = null;
      var G__15339__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__15339__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__15339__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__15339__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__15339__4 = function() {
        var G__15340__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__15340 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15340__delegate.call(this, x, y, z, args);
        };
        G__15340.cljs$lang$maxFixedArity = 3;
        G__15340.cljs$lang$applyTo = function(arglist__15341) {
          var x = cljs.core.first(arglist__15341);
          arglist__15341 = cljs.core.next(arglist__15341);
          var y = cljs.core.first(arglist__15341);
          arglist__15341 = cljs.core.next(arglist__15341);
          var z = cljs.core.first(arglist__15341);
          var args = cljs.core.rest(arglist__15341);
          return G__15340__delegate(x, y, z, args);
        };
        G__15340.cljs$core$IFn$_invoke$arity$variadic = G__15340__delegate;
        return G__15340;
      }();
      G__15339 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15339__0.call(this);
          case 1:
            return G__15339__1.call(this, x);
          case 2:
            return G__15339__2.call(this, x, y);
          case 3:
            return G__15339__3.call(this, x, y, z);
          default:
            return G__15339__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15339.cljs$lang$maxFixedArity = 3;
      G__15339.cljs$lang$applyTo = G__15339__4.cljs$lang$applyTo;
      return G__15339;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__15342 = null;
      var G__15342__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__15342__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__15342__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__15342__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__15342__4 = function() {
        var G__15343__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__15343 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15343__delegate.call(this, x, y, z, args);
        };
        G__15343.cljs$lang$maxFixedArity = 3;
        G__15343.cljs$lang$applyTo = function(arglist__15344) {
          var x = cljs.core.first(arglist__15344);
          arglist__15344 = cljs.core.next(arglist__15344);
          var y = cljs.core.first(arglist__15344);
          arglist__15344 = cljs.core.next(arglist__15344);
          var z = cljs.core.first(arglist__15344);
          var args = cljs.core.rest(arglist__15344);
          return G__15343__delegate(x, y, z, args);
        };
        G__15343.cljs$core$IFn$_invoke$arity$variadic = G__15343__delegate;
        return G__15343;
      }();
      G__15342 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15342__0.call(this);
          case 1:
            return G__15342__1.call(this, x);
          case 2:
            return G__15342__2.call(this, x, y);
          case 3:
            return G__15342__3.call(this, x, y, z);
          default:
            return G__15342__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15342.cljs$lang$maxFixedArity = 3;
      G__15342.cljs$lang$applyTo = G__15342__4.cljs$lang$applyTo;
      return G__15342;
    }();
  };
  var comp__4 = function() {
    var G__15345__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__15346__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__15347 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__15348 = cljs.core.next.call(null, fs__$2);
              ret = G__15347;
              fs__$2 = G__15348;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__15346 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__15346__delegate.call(this, args);
        };
        G__15346.cljs$lang$maxFixedArity = 0;
        G__15346.cljs$lang$applyTo = function(arglist__15349) {
          var args = cljs.core.seq(arglist__15349);
          return G__15346__delegate(args);
        };
        G__15346.cljs$core$IFn$_invoke$arity$variadic = G__15346__delegate;
        return G__15346;
      }();
    };
    var G__15345 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15345__delegate.call(this, f1, f2, f3, fs);
    };
    G__15345.cljs$lang$maxFixedArity = 3;
    G__15345.cljs$lang$applyTo = function(arglist__15350) {
      var f1 = cljs.core.first(arglist__15350);
      arglist__15350 = cljs.core.next(arglist__15350);
      var f2 = cljs.core.first(arglist__15350);
      arglist__15350 = cljs.core.next(arglist__15350);
      var f3 = cljs.core.first(arglist__15350);
      var fs = cljs.core.rest(arglist__15350);
      return G__15345__delegate(f1, f2, f3, fs);
    };
    G__15345.cljs$core$IFn$_invoke$arity$variadic = G__15345__delegate;
    return G__15345;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__15351__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__15351 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15351__delegate.call(this, args);
      };
      G__15351.cljs$lang$maxFixedArity = 0;
      G__15351.cljs$lang$applyTo = function(arglist__15352) {
        var args = cljs.core.seq(arglist__15352);
        return G__15351__delegate(args);
      };
      G__15351.cljs$core$IFn$_invoke$arity$variadic = G__15351__delegate;
      return G__15351;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__15353__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__15353 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15353__delegate.call(this, args);
      };
      G__15353.cljs$lang$maxFixedArity = 0;
      G__15353.cljs$lang$applyTo = function(arglist__15354) {
        var args = cljs.core.seq(arglist__15354);
        return G__15353__delegate(args);
      };
      G__15353.cljs$core$IFn$_invoke$arity$variadic = G__15353__delegate;
      return G__15353;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__15355__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__15355 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15355__delegate.call(this, args);
      };
      G__15355.cljs$lang$maxFixedArity = 0;
      G__15355.cljs$lang$applyTo = function(arglist__15356) {
        var args = cljs.core.seq(arglist__15356);
        return G__15355__delegate(args);
      };
      G__15355.cljs$core$IFn$_invoke$arity$variadic = G__15355__delegate;
      return G__15355;
    }();
  };
  var partial__5 = function() {
    var G__15357__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__15358__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__15358 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__15358__delegate.call(this, args);
        };
        G__15358.cljs$lang$maxFixedArity = 0;
        G__15358.cljs$lang$applyTo = function(arglist__15359) {
          var args = cljs.core.seq(arglist__15359);
          return G__15358__delegate(args);
        };
        G__15358.cljs$core$IFn$_invoke$arity$variadic = G__15358__delegate;
        return G__15358;
      }();
    };
    var G__15357 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15357__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__15357.cljs$lang$maxFixedArity = 4;
    G__15357.cljs$lang$applyTo = function(arglist__15360) {
      var f = cljs.core.first(arglist__15360);
      arglist__15360 = cljs.core.next(arglist__15360);
      var arg1 = cljs.core.first(arglist__15360);
      arglist__15360 = cljs.core.next(arglist__15360);
      var arg2 = cljs.core.first(arglist__15360);
      arglist__15360 = cljs.core.next(arglist__15360);
      var arg3 = cljs.core.first(arglist__15360);
      var more = cljs.core.rest(arglist__15360);
      return G__15357__delegate(f, arg1, arg2, arg3, more);
    };
    G__15357.cljs$core$IFn$_invoke$arity$variadic = G__15357__delegate;
    return G__15357;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__15361 = null;
      var G__15361__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__15361__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__15361__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__15361__4 = function() {
        var G__15362__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__15362 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15362__delegate.call(this, a, b, c, ds);
        };
        G__15362.cljs$lang$maxFixedArity = 3;
        G__15362.cljs$lang$applyTo = function(arglist__15363) {
          var a = cljs.core.first(arglist__15363);
          arglist__15363 = cljs.core.next(arglist__15363);
          var b = cljs.core.first(arglist__15363);
          arglist__15363 = cljs.core.next(arglist__15363);
          var c = cljs.core.first(arglist__15363);
          var ds = cljs.core.rest(arglist__15363);
          return G__15362__delegate(a, b, c, ds);
        };
        G__15362.cljs$core$IFn$_invoke$arity$variadic = G__15362__delegate;
        return G__15362;
      }();
      G__15361 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__15361__1.call(this, a);
          case 2:
            return G__15361__2.call(this, a, b);
          case 3:
            return G__15361__3.call(this, a, b, c);
          default:
            return G__15361__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15361.cljs$lang$maxFixedArity = 3;
      G__15361.cljs$lang$applyTo = G__15361__4.cljs$lang$applyTo;
      return G__15361;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__15364 = null;
      var G__15364__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__15364__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__15364__4 = function() {
        var G__15365__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__15365 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15365__delegate.call(this, a, b, c, ds);
        };
        G__15365.cljs$lang$maxFixedArity = 3;
        G__15365.cljs$lang$applyTo = function(arglist__15366) {
          var a = cljs.core.first(arglist__15366);
          arglist__15366 = cljs.core.next(arglist__15366);
          var b = cljs.core.first(arglist__15366);
          arglist__15366 = cljs.core.next(arglist__15366);
          var c = cljs.core.first(arglist__15366);
          var ds = cljs.core.rest(arglist__15366);
          return G__15365__delegate(a, b, c, ds);
        };
        G__15365.cljs$core$IFn$_invoke$arity$variadic = G__15365__delegate;
        return G__15365;
      }();
      G__15364 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__15364__2.call(this, a, b);
          case 3:
            return G__15364__3.call(this, a, b, c);
          default:
            return G__15364__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15364.cljs$lang$maxFixedArity = 3;
      G__15364.cljs$lang$applyTo = G__15364__4.cljs$lang$applyTo;
      return G__15364;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__15367 = null;
      var G__15367__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__15367__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__15367__4 = function() {
        var G__15368__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__15368 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15368__delegate.call(this, a, b, c, ds);
        };
        G__15368.cljs$lang$maxFixedArity = 3;
        G__15368.cljs$lang$applyTo = function(arglist__15369) {
          var a = cljs.core.first(arglist__15369);
          arglist__15369 = cljs.core.next(arglist__15369);
          var b = cljs.core.first(arglist__15369);
          arglist__15369 = cljs.core.next(arglist__15369);
          var c = cljs.core.first(arglist__15369);
          var ds = cljs.core.rest(arglist__15369);
          return G__15368__delegate(a, b, c, ds);
        };
        G__15368.cljs$core$IFn$_invoke$arity$variadic = G__15368__delegate;
        return G__15368;
      }();
      G__15367 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__15367__2.call(this, a, b);
          case 3:
            return G__15367__3.call(this, a, b, c);
          default:
            return G__15367__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15367.cljs$lang$maxFixedArity = 3;
      G__15367.cljs$lang$applyTo = G__15367__4.cljs$lang$applyTo;
      return G__15367;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___15370 = size;
          var i_15371 = 0;
          while (true) {
            if (i_15371 < n__4242__auto___15370) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_15371, cljs.core._nth.call(null, c, i_15371)));
              var G__15372 = i_15371 + 1;
              i_15371 = G__15372;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4242__auto___15373 = size;
        var i_15374 = 0;
        while (true) {
          if (i_15374 < n__4242__auto___15373) {
            var x_15375 = f.call(null, cljs.core._nth.call(null, c, i_15374));
            if (x_15375 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_15375);
            }
            var G__15376 = i_15374 + 1;
            i_15374 = G__15376;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___15377 = size;
          var i_15378 = 0;
          while (true) {
            if (i_15378 < n__4242__auto___15377) {
              var x_15379 = f.call(null, idx + i_15378, cljs.core._nth.call(null, c, i_15378));
              if (x_15379 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_15379);
              }
              var G__15380 = i_15378 + 1;
              i_15378 = G__15380;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            return p.call(null, y);
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__15387__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__15387 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15387__delegate.call(this, x, y, z, args);
        };
        G__15387.cljs$lang$maxFixedArity = 3;
        G__15387.cljs$lang$applyTo = function(arglist__15388) {
          var x = cljs.core.first(arglist__15388);
          arglist__15388 = cljs.core.next(arglist__15388);
          var y = cljs.core.first(arglist__15388);
          arglist__15388 = cljs.core.next(arglist__15388);
          var z = cljs.core.first(arglist__15388);
          var args = cljs.core.rest(arglist__15388);
          return G__15387__delegate(x, y, z, args);
        };
        G__15387.cljs$core$IFn$_invoke$arity$variadic = G__15387__delegate;
        return G__15387;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__15389__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__15381_SHARP_) {
            var and__3388__auto__ = p1.call(null, p1__15381_SHARP_);
            if (cljs.core.truth_(and__3388__auto__)) {
              return p2.call(null, p1__15381_SHARP_);
            } else {
              return and__3388__auto__;
            }
          }, args));
        };
        var G__15389 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15389__delegate.call(this, x, y, z, args);
        };
        G__15389.cljs$lang$maxFixedArity = 3;
        G__15389.cljs$lang$applyTo = function(arglist__15390) {
          var x = cljs.core.first(arglist__15390);
          arglist__15390 = cljs.core.next(arglist__15390);
          var y = cljs.core.first(arglist__15390);
          arglist__15390 = cljs.core.next(arglist__15390);
          var z = cljs.core.first(arglist__15390);
          var args = cljs.core.rest(arglist__15390);
          return G__15389__delegate(x, y, z, args);
        };
        G__15389.cljs$core$IFn$_invoke$arity$variadic = G__15389__delegate;
        return G__15389;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    var and__3388__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3388__auto____$5)) {
                      var and__3388__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3388__auto____$6)) {
                        var and__3388__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3388__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3388__auto____$7;
                        }
                      } else {
                        return and__3388__auto____$6;
                      }
                    } else {
                      return and__3388__auto____$5;
                    }
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__15391__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__15382_SHARP_) {
            var and__3388__auto__ = p1.call(null, p1__15382_SHARP_);
            if (cljs.core.truth_(and__3388__auto__)) {
              var and__3388__auto____$1 = p2.call(null, p1__15382_SHARP_);
              if (cljs.core.truth_(and__3388__auto____$1)) {
                return p3.call(null, p1__15382_SHARP_);
              } else {
                return and__3388__auto____$1;
              }
            } else {
              return and__3388__auto__;
            }
          }, args));
        };
        var G__15391 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15391__delegate.call(this, x, y, z, args);
        };
        G__15391.cljs$lang$maxFixedArity = 3;
        G__15391.cljs$lang$applyTo = function(arglist__15392) {
          var x = cljs.core.first(arglist__15392);
          arglist__15392 = cljs.core.next(arglist__15392);
          var y = cljs.core.first(arglist__15392);
          arglist__15392 = cljs.core.next(arglist__15392);
          var z = cljs.core.first(arglist__15392);
          var args = cljs.core.rest(arglist__15392);
          return G__15391__delegate(x, y, z, args);
        };
        G__15391.cljs$core$IFn$_invoke$arity$variadic = G__15391__delegate;
        return G__15391;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__15393__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__15383_SHARP_) {
            return p1__15383_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__15384_SHARP_) {
            var and__3388__auto__ = p1__15384_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3388__auto__)) {
              return p1__15384_SHARP_.call(null, y);
            } else {
              return and__3388__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__15385_SHARP_) {
            var and__3388__auto__ = p1__15385_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3388__auto__)) {
              var and__3388__auto____$1 = p1__15385_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3388__auto____$1)) {
                return p1__15385_SHARP_.call(null, z);
              } else {
                return and__3388__auto____$1;
              }
            } else {
              return and__3388__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__15394__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__15386_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__15386_SHARP_, args);
            }, ps__$1));
          };
          var G__15394 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__15394__delegate.call(this, x, y, z, args);
          };
          G__15394.cljs$lang$maxFixedArity = 3;
          G__15394.cljs$lang$applyTo = function(arglist__15395) {
            var x = cljs.core.first(arglist__15395);
            arglist__15395 = cljs.core.next(arglist__15395);
            var y = cljs.core.first(arglist__15395);
            arglist__15395 = cljs.core.next(arglist__15395);
            var z = cljs.core.first(arglist__15395);
            var args = cljs.core.rest(arglist__15395);
            return G__15394__delegate(x, y, z, args);
          };
          G__15394.cljs$core$IFn$_invoke$arity$variadic = G__15394__delegate;
          return G__15394;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__15393 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15393__delegate.call(this, p1, p2, p3, ps);
    };
    G__15393.cljs$lang$maxFixedArity = 3;
    G__15393.cljs$lang$applyTo = function(arglist__15396) {
      var p1 = cljs.core.first(arglist__15396);
      arglist__15396 = cljs.core.next(arglist__15396);
      var p2 = cljs.core.first(arglist__15396);
      arglist__15396 = cljs.core.next(arglist__15396);
      var p3 = cljs.core.first(arglist__15396);
      var ps = cljs.core.rest(arglist__15396);
      return G__15393__delegate(p1, p2, p3, ps);
    };
    G__15393.cljs$core$IFn$_invoke$arity$variadic = G__15393__delegate;
    return G__15393;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3400__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3400__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__15403__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__15403 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15403__delegate.call(this, x, y, z, args);
        };
        G__15403.cljs$lang$maxFixedArity = 3;
        G__15403.cljs$lang$applyTo = function(arglist__15404) {
          var x = cljs.core.first(arglist__15404);
          arglist__15404 = cljs.core.next(arglist__15404);
          var y = cljs.core.first(arglist__15404);
          arglist__15404 = cljs.core.next(arglist__15404);
          var z = cljs.core.first(arglist__15404);
          var args = cljs.core.rest(arglist__15404);
          return G__15403__delegate(x, y, z, args);
        };
        G__15403.cljs$core$IFn$_invoke$arity$variadic = G__15403__delegate;
        return G__15403;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__15405__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__15397_SHARP_) {
              var or__3400__auto____$1 = p1.call(null, p1__15397_SHARP_);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                return p2.call(null, p1__15397_SHARP_);
              }
            }, args);
          }
        };
        var G__15405 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15405__delegate.call(this, x, y, z, args);
        };
        G__15405.cljs$lang$maxFixedArity = 3;
        G__15405.cljs$lang$applyTo = function(arglist__15406) {
          var x = cljs.core.first(arglist__15406);
          arglist__15406 = cljs.core.next(arglist__15406);
          var y = cljs.core.first(arglist__15406);
          arglist__15406 = cljs.core.next(arglist__15406);
          var z = cljs.core.first(arglist__15406);
          var args = cljs.core.rest(arglist__15406);
          return G__15405__delegate(x, y, z, args);
        };
        G__15405.cljs$core$IFn$_invoke$arity$variadic = G__15405__delegate;
        return G__15405;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  var or__3400__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3400__auto____$5)) {
                    return or__3400__auto____$5;
                  } else {
                    var or__3400__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3400__auto____$6)) {
                      return or__3400__auto____$6;
                    } else {
                      var or__3400__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3400__auto____$7)) {
                        return or__3400__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__15407__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__15398_SHARP_) {
              var or__3400__auto____$1 = p1.call(null, p1__15398_SHARP_);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                var or__3400__auto____$2 = p2.call(null, p1__15398_SHARP_);
                if (cljs.core.truth_(or__3400__auto____$2)) {
                  return or__3400__auto____$2;
                } else {
                  return p3.call(null, p1__15398_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__15407 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15407__delegate.call(this, x, y, z, args);
        };
        G__15407.cljs$lang$maxFixedArity = 3;
        G__15407.cljs$lang$applyTo = function(arglist__15408) {
          var x = cljs.core.first(arglist__15408);
          arglist__15408 = cljs.core.next(arglist__15408);
          var y = cljs.core.first(arglist__15408);
          arglist__15408 = cljs.core.next(arglist__15408);
          var z = cljs.core.first(arglist__15408);
          var args = cljs.core.rest(arglist__15408);
          return G__15407__delegate(x, y, z, args);
        };
        G__15407.cljs$core$IFn$_invoke$arity$variadic = G__15407__delegate;
        return G__15407;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__15409__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__15399_SHARP_) {
            return p1__15399_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__15400_SHARP_) {
            var or__3400__auto__ = p1__15400_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return p1__15400_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__15401_SHARP_) {
            var or__3400__auto__ = p1__15401_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              var or__3400__auto____$1 = p1__15401_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                return p1__15401_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__15410__delegate = function(x, y, z, args) {
            var or__3400__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__15402_SHARP_) {
                return cljs.core.some.call(null, p1__15402_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__15410 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__15410__delegate.call(this, x, y, z, args);
          };
          G__15410.cljs$lang$maxFixedArity = 3;
          G__15410.cljs$lang$applyTo = function(arglist__15411) {
            var x = cljs.core.first(arglist__15411);
            arglist__15411 = cljs.core.next(arglist__15411);
            var y = cljs.core.first(arglist__15411);
            arglist__15411 = cljs.core.next(arglist__15411);
            var z = cljs.core.first(arglist__15411);
            var args = cljs.core.rest(arglist__15411);
            return G__15410__delegate(x, y, z, args);
          };
          G__15410.cljs$core$IFn$_invoke$arity$variadic = G__15410__delegate;
          return G__15410;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__15409 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15409__delegate.call(this, p1, p2, p3, ps);
    };
    G__15409.cljs$lang$maxFixedArity = 3;
    G__15409.cljs$lang$applyTo = function(arglist__15412) {
      var p1 = cljs.core.first(arglist__15412);
      arglist__15412 = cljs.core.next(arglist__15412);
      var p2 = cljs.core.first(arglist__15412);
      arglist__15412 = cljs.core.next(arglist__15412);
      var p3 = cljs.core.first(arglist__15412);
      var ps = cljs.core.rest(arglist__15412);
      return G__15409__delegate(p1, p2, p3, ps);
    };
    G__15409.cljs$core$IFn$_invoke$arity$variadic = G__15409__delegate;
    return G__15409;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___15414 = size;
          var i_15415 = 0;
          while (true) {
            if (i_15415 < n__4242__auto___15414) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_15415)));
              var G__15416 = i_15415 + 1;
              i_15415 = G__15416;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__15417__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__15413_SHARP_) {
        return cljs.core.apply.call(null, f, p1__15413_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__15417 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15417__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__15417.cljs$lang$maxFixedArity = 4;
    G__15417.cljs$lang$applyTo = function(arglist__15418) {
      var f = cljs.core.first(arglist__15418);
      arglist__15418 = cljs.core.next(arglist__15418);
      var c1 = cljs.core.first(arglist__15418);
      arglist__15418 = cljs.core.next(arglist__15418);
      var c2 = cljs.core.first(arglist__15418);
      arglist__15418 = cljs.core.next(arglist__15418);
      var c3 = cljs.core.first(arglist__15418);
      var colls = cljs.core.rest(arglist__15418);
      return G__15417__delegate(f, c1, c2, c3, colls);
    };
    G__15417.cljs$core$IFn$_invoke$arity$variadic = G__15417__delegate;
    return G__15417;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__15419 = n__$1 - 1;
        var G__15420 = cljs.core.rest.call(null, s);
        n__$1 = G__15419;
        coll__$1 = G__15420;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__15421 = cljs.core.next.call(null, s);
      var G__15422 = cljs.core.next.call(null, lead);
      s = G__15421;
      lead = G__15422;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3388__auto__ = s;
        if (and__3388__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3388__auto__;
        }
      }())) {
        var G__15423 = pred__$1;
        var G__15424 = cljs.core.rest.call(null, s);
        pred__$1 = G__15423;
        coll__$1 = G__15424;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__15425__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__15425 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15425__delegate.call(this, c1, c2, colls);
    };
    G__15425.cljs$lang$maxFixedArity = 2;
    G__15425.cljs$lang$applyTo = function(arglist__15426) {
      var c1 = cljs.core.first(arglist__15426);
      arglist__15426 = cljs.core.next(arglist__15426);
      var c2 = cljs.core.first(arglist__15426);
      var colls = cljs.core.rest(arglist__15426);
      return G__15425__delegate(c1, c2, colls);
    };
    G__15425.cljs$core$IFn$_invoke$arity$variadic = G__15425__delegate;
    return G__15425;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__15427__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__15427 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15427__delegate.call(this, f, coll, colls);
    };
    G__15427.cljs$lang$maxFixedArity = 2;
    G__15427.cljs$lang$applyTo = function(arglist__15428) {
      var f = cljs.core.first(arglist__15428);
      arglist__15428 = cljs.core.next(arglist__15428);
      var coll = cljs.core.first(arglist__15428);
      var colls = cljs.core.rest(arglist__15428);
      return G__15427__delegate(f, coll, colls);
    };
    G__15427.cljs$core$IFn$_invoke$arity$variadic = G__15427__delegate;
    return G__15427;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4242__auto___15429 = size;
        var i_15430 = 0;
        while (true) {
          if (i_15430 < n__4242__auto___15429) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_15430)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_15430));
            } else {
            }
            var G__15431 = i_15430 + 1;
            i_15430 = G__15431;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__15432_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__15432_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__15434 = to;
      if (G__15434) {
        var bit__4037__auto__ = G__15434.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4037__auto__ || G__15434.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__15435__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__15435 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15435__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__15435.cljs$lang$maxFixedArity = 4;
    G__15435.cljs$lang$applyTo = function(arglist__15436) {
      var f = cljs.core.first(arglist__15436);
      arglist__15436 = cljs.core.next(arglist__15436);
      var c1 = cljs.core.first(arglist__15436);
      arglist__15436 = cljs.core.next(arglist__15436);
      var c2 = cljs.core.first(arglist__15436);
      arglist__15436 = cljs.core.next(arglist__15436);
      var c3 = cljs.core.first(arglist__15436);
      var colls = cljs.core.rest(arglist__15436);
      return G__15435__delegate(f, c1, c2, c3, colls);
    };
    G__15435.cljs$core$IFn$_invoke$arity$variadic = G__15435__delegate;
    return G__15435;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__15438 = m__$1;
          if (G__15438) {
            var bit__4044__auto__ = G__15438.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4044__auto__ || G__15438.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__15438.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__15438);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__15438);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__15439 = sentinel;
            var G__15440 = m__$2;
            var G__15441 = cljs.core.next.call(null, ks__$1);
            sentinel = G__15439;
            m__$1 = G__15440;
            ks__$1 = G__15441;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__15442, v) {
  var vec__15444 = p__15442;
  var k = cljs.core.nth.call(null, vec__15444, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__15444, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__15445, f) {
    var vec__15455 = p__15445;
    var k = cljs.core.nth.call(null, vec__15455, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15455, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__15446, f, a) {
    var vec__15456 = p__15446;
    var k = cljs.core.nth.call(null, vec__15456, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15456, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__15447, f, a, b) {
    var vec__15457 = p__15447;
    var k = cljs.core.nth.call(null, vec__15457, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15457, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__15448, f, a, b, c) {
    var vec__15458 = p__15448;
    var k = cljs.core.nth.call(null, vec__15458, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15458, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__15460__delegate = function(m, p__15449, f, a, b, c, args) {
      var vec__15459 = p__15449;
      var k = cljs.core.nth.call(null, vec__15459, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__15459, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__15460 = function(m, p__15449, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__15460__delegate.call(this, m, p__15449, f, a, b, c, args);
    };
    G__15460.cljs$lang$maxFixedArity = 6;
    G__15460.cljs$lang$applyTo = function(arglist__15461) {
      var m = cljs.core.first(arglist__15461);
      arglist__15461 = cljs.core.next(arglist__15461);
      var p__15449 = cljs.core.first(arglist__15461);
      arglist__15461 = cljs.core.next(arglist__15461);
      var f = cljs.core.first(arglist__15461);
      arglist__15461 = cljs.core.next(arglist__15461);
      var a = cljs.core.first(arglist__15461);
      arglist__15461 = cljs.core.next(arglist__15461);
      var b = cljs.core.first(arglist__15461);
      arglist__15461 = cljs.core.next(arglist__15461);
      var c = cljs.core.first(arglist__15461);
      var args = cljs.core.rest(arglist__15461);
      return G__15460__delegate(m, p__15449, f, a, b, c, args);
    };
    G__15460.cljs$core$IFn$_invoke$arity$variadic = G__15460__delegate;
    return G__15460;
  }();
  update_in = function(m, p__15449, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__15449, f);
      case 4:
        return update_in__4.call(this, m, p__15449, f, a);
      case 5:
        return update_in__5.call(this, m, p__15449, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__15449, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__15449, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__15462 = ll - 5;
      var G__15463 = r;
      ll = G__15462;
      ret = G__15463;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__15464 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__15465 = level - 5;
          node = G__15464;
          level = G__15465;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__15467 = null;
  var G__15467__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__15467__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__15467 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15467__2.call(this, self__, k);
      case 3:
        return G__15467__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15467;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args15466) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15466)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__15468 = j + 1;
              var G__15469 = init__$2;
              j = G__15468;
              init__$1 = G__15469;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__15470 = i + step_init[0];
        i = G__15470;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4242__auto___15471 = len;
    var i_15472 = 0;
    while (true) {
      if (i_15472 < n__4242__auto___15471) {
        new_tail[i_15472] = self__.tail[i_15472];
        var G__15473 = i_15472 + 1;
        i_15472 = G__15473;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__15474 = i + 1;
        var G__15475 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__15474;
        out = G__15475;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__15476) {
    var args = cljs.core.seq(arglist__15476);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3707__auto__ = self__.end;
    var y__3708__auto__ = v_pos + 1;
    return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__15478 = null;
  var G__15478__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__15478__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__15478 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15478__2.call(this, self__, k);
      case 3:
        return G__15478__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15478;
}();
cljs.core.Subvec.prototype.apply = function(self__, args15477) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15477)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$ = true;
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__15479 = meta;
      var G__15480 = v.v;
      var G__15481 = v.start + start;
      var G__15482 = v.start + end;
      var G__15483 = __hash;
      meta = G__15479;
      v = G__15480;
      start = G__15481;
      end = G__15482;
      __hash = G__15483;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj15487 = {};
    return obj15487;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__15488 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__15489 = level - 5;
          node = G__15488;
          level = G__15489;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__15491 = null;
  var G__15491__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15491__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15491 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15491__2.call(this, self__, k);
      case 3:
        return G__15491__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15491;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args15490) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15490)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3400__auto__ = self__.rear;
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3400__auto__ = self__.front;
    if (cljs.core.truth_(or__3400__auto__)) {
      return or__3400__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__15492 = i + incr;
        i = G__15492;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__15493 = i + 1;
      var G__15494 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__15493;
      out = G__15494;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj15498 = {};
    return obj15498;
  }();
  var l = ks.length;
  var i_15499 = 0;
  while (true) {
    if (i_15499 < l) {
      var k_15500 = ks[i_15499];
      new_obj[k_15500] = obj[k_15500];
      var G__15501 = i_15499 + 1;
      i_15499 = G__15501;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__15504 = null;
  var G__15504__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15504__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15504 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15504__2.call(this, self__, k);
      case 3:
        return G__15504__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15504;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args15503) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15503)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15505 = cljs.core.rest.call(null, keys__$1);
        var G__15506 = init__$2;
        keys__$1 = G__15505;
        init__$1 = G__15506;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__15502_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15502_SHARP_, self__.strobj[p1__15502_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj15508 = {};
  return obj15508;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15509 = i + 2;
          i = G__15509;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15510 = i + 2;
          i = G__15510;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15511 = i + 2;
          i = G__15511;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15512 = i + 2;
          i = G__15512;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15513 = i + 2;
          i = G__15513;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_15514 = 0;
  while (true) {
    if (i_15514 < l) {
      narr[i_15514] = arr[i_15514];
      var G__15515 = i_15514 + 1;
      i_15514 = G__15515;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj15518 = {};
    return obj15518;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__15519 = cljs.core.aclone.call(null, self__.arr);
          G__15519[idx + 1] = v;
          return G__15519;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__15520 = null;
  var G__15520__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15520__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15520 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15520__2.call(this, self__, k);
      case 3:
        return G__15520__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15520;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args15516) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15516)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15521 = i + 2;
        var G__15522 = init__$2;
        i = G__15521;
        init__$1 = G__15522;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__15523 = s + 2;
            var G__15524 = d;
            s = G__15523;
            d = G__15524;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__15525 = s + 2;
              var G__15526 = d + 2;
              s = G__15525;
              d = G__15526;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__15527 = i + 2;
        var G__15528 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__15527;
        ret = G__15528;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__15529_15531 = self__.arr;
      G__15529_15531.pop();
      G__15529_15531.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__15530 = o;
      if (G__15530) {
        var bit__4044__auto__ = G__15530.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4044__auto__ || G__15530.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15530.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15530);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15530);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__15532 = cljs.core.next.call(null, es);
          var G__15533 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__15532;
          tcoll__$2 = G__15533;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__15534 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__15535 = i + 2;
      out = G__15534;
      i = G__15535;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__15538 = cljs.core.aclone.call(null, arr);
    G__15538[i] = a;
    return G__15538;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__15539 = cljs.core.aclone.call(null, arr);
    G__15539[i] = a;
    G__15539[j] = b;
    return G__15539;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15540 = i + 2;
        var G__15541 = init__$2;
        i = G__15540;
        init__$1 = G__15541;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_15542 = 0;
        var j_15543 = 0;
        while (true) {
          if (i_15542 < 32) {
            if ((self__.bitmap >>> i_15542 & 1) === 0) {
              var G__15544 = i_15542 + 1;
              var G__15545 = j_15543;
              i_15542 = G__15544;
              j_15543 = G__15545;
              continue;
            } else {
              nodes[i_15542] = !(self__.arr[j_15543] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_15543]), self__.arr[j_15543], self__.arr[j_15543 + 1], added_leaf_QMARK_) : self__.arr[j_15543 + 1];
              var G__15546 = i_15542 + 1;
              var G__15547 = j_15543 + 2;
              i_15542 = G__15546;
              j_15543 = G__15547;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_15548 = 0;
      var j_15549 = 0;
      while (true) {
        if (i_15548 < 32) {
          if ((self__.bitmap >>> i_15548 & 1) === 0) {
            var G__15550 = i_15548 + 1;
            var G__15551 = j_15549;
            i_15548 = G__15550;
            j_15549 = G__15551;
            continue;
          } else {
            nodes[i_15548] = !(self__.arr[j_15549] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_15549]), self__.arr[j_15549], self__.arr[j_15549 + 1], added_leaf_QMARK_) : self__.arr[j_15549 + 1];
            var G__15552 = i_15548 + 1;
            var G__15553 = j_15549 + 2;
            i_15548 = G__15552;
            j_15549 = G__15553;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__15554 = i + 1;
        var G__15555 = j + 2;
        var G__15556 = bitmap | 1 << i;
        i = G__15554;
        j = G__15555;
        bitmap = G__15556;
        continue;
      } else {
        var G__15557 = i + 1;
        var G__15558 = j;
        var G__15559 = bitmap;
        i = G__15557;
        j = G__15558;
        bitmap = G__15559;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__15560 = i + 1;
          var G__15561 = init__$2;
          i = G__15560;
          init__$1 = G__15561;
          continue;
        }
      } else {
        var G__15562 = i + 1;
        var G__15563 = init__$1;
        i = G__15562;
        init__$1 = G__15563;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__15564 = i + 2;
        i = G__15564;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__15565 = j + 2;
                j = G__15565;
                continue;
              }
            } else {
              var G__15566 = j + 2;
              j = G__15566;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__15567 = j + 1;
              j = G__15567;
              continue;
            }
          } else {
            var G__15568 = j + 1;
            j = G__15568;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj15571 = {};
    return obj15571;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__15572 = null;
  var G__15572__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15572__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15572 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15572__2.call(this, self__, k);
      case 3:
        return G__15572__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15572;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args15569) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15569)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__15573 = i + 1;
      var G__15574 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__15573;
      out = G__15574;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__15575 = o;
      if (G__15575) {
        var bit__4044__auto__ = G__15575.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4044__auto__ || G__15575.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15575.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15575);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15575);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__15576 = cljs.core.next.call(null, es);
          var G__15577 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__15576;
          tcoll__$1 = G__15577;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__15578 = ascending_QMARK_ ? t.left : t.right;
      var G__15579 = cljs.core.conj.call(null, stack__$1, t);
      t = G__15578;
      stack__$1 = G__15579;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__15581 = null;
  var G__15581__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15581__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15581 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15581__2.call(this, self__, k);
      case 3:
        return G__15581__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15581;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args15580) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15580)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__15583 = null;
  var G__15583__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15583__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15583 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15583__2.call(this, self__, k);
      case 3:
        return G__15583__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15583;
}();
cljs.core.RedNode.prototype.apply = function(self__, args15582) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15582)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__15585 = null;
  var G__15585__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15585__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15585 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15585__2.call(this, self__, k);
      case 3:
        return G__15585__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15585;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args15584) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15584)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__15586 = t.left;
          t = G__15586;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__15587 = t.right;
            t = G__15587;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__15588 = cljs.core.conj.call(null, stack, t);
              var G__15589 = t.left;
              stack = G__15588;
              t = G__15589;
              continue;
            } else {
              var G__15590 = stack;
              var G__15591 = t.right;
              stack = G__15590;
              t = G__15591;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__15592 = cljs.core.conj.call(null, stack, t);
                var G__15593 = t.right;
                stack = G__15592;
                t = G__15593;
                continue;
              } else {
                var G__15594 = stack;
                var G__15595 = t.left;
                stack = G__15594;
                t = G__15595;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__15596 = cljs.core.nnext.call(null, in$);
        var G__15597 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15596;
        out = G__15597;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__15598) {
    var keyvals = cljs.core.seq(arglist__15598);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__15599) {
    var keyvals = cljs.core.seq(arglist__15599);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj15603 = {};
      return obj15603;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__15604 = cljs.core.nnext.call(null, kvs);
        kvs = G__15604;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__15605) {
    var keyvals = cljs.core.seq(arglist__15605);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__15606 = cljs.core.nnext.call(null, in$);
        var G__15607 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15606;
        out = G__15607;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__15608) {
    var keyvals = cljs.core.seq(arglist__15608);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__15609 = cljs.core.nnext.call(null, in$);
        var G__15610 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15609;
        out = G__15610;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__15611) {
    var comparator = cljs.core.first(arglist__15611);
    var keyvals = cljs.core.rest(arglist__15611);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15612 = self__.mseq;
    if (G__15612) {
      var bit__4044__auto__ = G__15612.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__15612.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15612.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15612);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15612);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15613 = self__.mseq;
    if (G__15613) {
      var bit__4044__auto__ = G__15613.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__15613.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15613.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15613);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15613);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15614 = self__.mseq;
    if (G__15614) {
      var bit__4044__auto__ = G__15614.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__15614.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15614.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15614);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15614);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15615 = self__.mseq;
    if (G__15615) {
      var bit__4044__auto__ = G__15615.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__15615.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15615.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15615);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15615);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__15616_SHARP_, p2__15617_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3400__auto__ = p1__15616_SHARP_;
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__15617_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__15618) {
    var maps = cljs.core.seq(arglist__15618);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3400__auto__ = m1;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__15619) {
    var f = cljs.core.first(arglist__15619);
    var maps = cljs.core.rest(arglist__15619);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__15620 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__15621 = cljs.core.next.call(null, keys);
      ret = G__15620;
      keys = G__15621;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__15624 = null;
  var G__15624__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15624__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15624 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15624__2.call(this, self__, k);
      case 3:
        return G__15624__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15624;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args15623) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15623)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__15622_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__15622_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__15625 = i + 1;
        var G__15626 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__15625;
        out = G__15626;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__15627 = i + 1;
        var G__15628 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__15627;
        out = G__15628;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__15630 = null;
  var G__15630__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__15630__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__15630 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15630__2.call(this, self__, k);
      case 3:
        return G__15630__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15630;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args15629) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15629)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__15633 = null;
  var G__15633__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15633__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15633 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15633__2.call(this, self__, k);
      case 3:
        return G__15633__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15633;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args15632) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15632)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__15631_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__15631_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4236__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4236__auto__.length) {
        var G__15634 = i + 1;
        var G__15635 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__15634;
        res = G__15635;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__15636 = cljs.core._next.call(null, in$__$1);
            var G__15637 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__15636;
            out = G__15637;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__15638__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__15638 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15638__delegate.call(this, keys);
    };
    G__15638.cljs$lang$maxFixedArity = 0;
    G__15638.cljs$lang$applyTo = function(arglist__15639) {
      var keys = cljs.core.seq(arglist__15639);
      return G__15638__delegate(keys);
    };
    G__15638.cljs$core$IFn$_invoke$arity$variadic = G__15638__delegate;
    return G__15638;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__15640) {
    var keys = cljs.core.seq(arglist__15640);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__15641) {
    var comparator = cljs.core.first(arglist__15641);
    var keys = cljs.core.rest(arglist__15641);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__15642_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__15642_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__15642_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__15649, seen__$1) {
        while (true) {
          var vec__15650 = p__15649;
          var f = cljs.core.nth.call(null, vec__15650, 0, null);
          var xs__$1 = vec__15650;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__15651 = cljs.core.rest.call(null, s);
              var G__15652 = seen__$1;
              p__15649 = G__15651;
              seen__$1 = G__15652;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__15653 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__15654 = cljs.core.next.call(null, s__$1);
      ret = G__15653;
      s__$1 = G__15654;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__15656 = x;
    if (G__15656) {
      var bit__4037__auto__ = G__15656.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4037__auto__ || G__15656.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__15657 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__15658 = cljs.core.next.call(null, ks);
      var G__15659 = cljs.core.next.call(null, vs);
      map = G__15657;
      ks = G__15658;
      vs = G__15659;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__15662__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__15660_SHARP_, p2__15661_SHARP_) {
        return max_key.call(null, k, p1__15660_SHARP_, p2__15661_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__15662 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15662__delegate.call(this, k, x, y, more);
    };
    G__15662.cljs$lang$maxFixedArity = 3;
    G__15662.cljs$lang$applyTo = function(arglist__15663) {
      var k = cljs.core.first(arglist__15663);
      arglist__15663 = cljs.core.next(arglist__15663);
      var x = cljs.core.first(arglist__15663);
      arglist__15663 = cljs.core.next(arglist__15663);
      var y = cljs.core.first(arglist__15663);
      var more = cljs.core.rest(arglist__15663);
      return G__15662__delegate(k, x, y, more);
    };
    G__15662.cljs$core$IFn$_invoke$arity$variadic = G__15662__delegate;
    return G__15662;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__15666__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__15664_SHARP_, p2__15665_SHARP_) {
        return min_key.call(null, k, p1__15664_SHARP_, p2__15665_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__15666 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15666__delegate.call(this, k, x, y, more);
    };
    G__15666.cljs$lang$maxFixedArity = 3;
    G__15666.cljs$lang$applyTo = function(arglist__15667) {
      var k = cljs.core.first(arglist__15667);
      arglist__15667 = cljs.core.next(arglist__15667);
      var x = cljs.core.first(arglist__15667);
      arglist__15667 = cljs.core.next(arglist__15667);
      var y = cljs.core.first(arglist__15667);
      var more = cljs.core.rest(arglist__15667);
      return G__15666__delegate(k, x, y, more);
    };
    G__15666.cljs$core$IFn$_invoke$arity$variadic = G__15666__delegate;
    return G__15666;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__15670 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__15670, 0, null);
        var s = vec__15670;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__15671 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__15671, 0, null);
      var s = vec__15671;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__15674 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__15674, 0, null);
        var s = vec__15674;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__15675 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__15675, 0, null);
      var s = vec__15675;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$ = true;
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__15676_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__15676_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__15687 = null;
      var G__15687__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__15687__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__15687__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__15687__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__15687__4 = function() {
        var G__15688__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__15688 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15688__delegate.call(this, x, y, z, args);
        };
        G__15688.cljs$lang$maxFixedArity = 3;
        G__15688.cljs$lang$applyTo = function(arglist__15689) {
          var x = cljs.core.first(arglist__15689);
          arglist__15689 = cljs.core.next(arglist__15689);
          var y = cljs.core.first(arglist__15689);
          arglist__15689 = cljs.core.next(arglist__15689);
          var z = cljs.core.first(arglist__15689);
          var args = cljs.core.rest(arglist__15689);
          return G__15688__delegate(x, y, z, args);
        };
        G__15688.cljs$core$IFn$_invoke$arity$variadic = G__15688__delegate;
        return G__15688;
      }();
      G__15687 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15687__0.call(this);
          case 1:
            return G__15687__1.call(this, x);
          case 2:
            return G__15687__2.call(this, x, y);
          case 3:
            return G__15687__3.call(this, x, y, z);
          default:
            return G__15687__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15687.cljs$lang$maxFixedArity = 3;
      G__15687.cljs$lang$applyTo = G__15687__4.cljs$lang$applyTo;
      return G__15687;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__15690 = null;
      var G__15690__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__15690__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__15690__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__15690__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__15690__4 = function() {
        var G__15691__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__15691 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15691__delegate.call(this, x, y, z, args);
        };
        G__15691.cljs$lang$maxFixedArity = 3;
        G__15691.cljs$lang$applyTo = function(arglist__15692) {
          var x = cljs.core.first(arglist__15692);
          arglist__15692 = cljs.core.next(arglist__15692);
          var y = cljs.core.first(arglist__15692);
          arglist__15692 = cljs.core.next(arglist__15692);
          var z = cljs.core.first(arglist__15692);
          var args = cljs.core.rest(arglist__15692);
          return G__15691__delegate(x, y, z, args);
        };
        G__15691.cljs$core$IFn$_invoke$arity$variadic = G__15691__delegate;
        return G__15691;
      }();
      G__15690 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15690__0.call(this);
          case 1:
            return G__15690__1.call(this, x);
          case 2:
            return G__15690__2.call(this, x, y);
          case 3:
            return G__15690__3.call(this, x, y, z);
          default:
            return G__15690__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15690.cljs$lang$maxFixedArity = 3;
      G__15690.cljs$lang$applyTo = G__15690__4.cljs$lang$applyTo;
      return G__15690;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__15693 = null;
      var G__15693__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__15693__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__15693__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__15693__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__15693__4 = function() {
        var G__15694__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__15694 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15694__delegate.call(this, x, y, z, args);
        };
        G__15694.cljs$lang$maxFixedArity = 3;
        G__15694.cljs$lang$applyTo = function(arglist__15695) {
          var x = cljs.core.first(arglist__15695);
          arglist__15695 = cljs.core.next(arglist__15695);
          var y = cljs.core.first(arglist__15695);
          arglist__15695 = cljs.core.next(arglist__15695);
          var z = cljs.core.first(arglist__15695);
          var args = cljs.core.rest(arglist__15695);
          return G__15694__delegate(x, y, z, args);
        };
        G__15694.cljs$core$IFn$_invoke$arity$variadic = G__15694__delegate;
        return G__15694;
      }();
      G__15693 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15693__0.call(this);
          case 1:
            return G__15693__1.call(this, x);
          case 2:
            return G__15693__2.call(this, x, y);
          case 3:
            return G__15693__3.call(this, x, y, z);
          default:
            return G__15693__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15693.cljs$lang$maxFixedArity = 3;
      G__15693.cljs$lang$applyTo = G__15693__4.cljs$lang$applyTo;
      return G__15693;
    }();
  };
  var juxt__4 = function() {
    var G__15696__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__15697 = null;
        var G__15697__0 = function() {
          return cljs.core.reduce.call(null, function(p1__15677_SHARP_, p2__15678_SHARP_) {
            return cljs.core.conj.call(null, p1__15677_SHARP_, p2__15678_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__15697__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__15679_SHARP_, p2__15680_SHARP_) {
            return cljs.core.conj.call(null, p1__15679_SHARP_, p2__15680_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__15697__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__15681_SHARP_, p2__15682_SHARP_) {
            return cljs.core.conj.call(null, p1__15681_SHARP_, p2__15682_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__15697__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__15683_SHARP_, p2__15684_SHARP_) {
            return cljs.core.conj.call(null, p1__15683_SHARP_, p2__15684_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__15697__4 = function() {
          var G__15698__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__15685_SHARP_, p2__15686_SHARP_) {
              return cljs.core.conj.call(null, p1__15685_SHARP_, cljs.core.apply.call(null, p2__15686_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__15698 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__15698__delegate.call(this, x, y, z, args);
          };
          G__15698.cljs$lang$maxFixedArity = 3;
          G__15698.cljs$lang$applyTo = function(arglist__15699) {
            var x = cljs.core.first(arglist__15699);
            arglist__15699 = cljs.core.next(arglist__15699);
            var y = cljs.core.first(arglist__15699);
            arglist__15699 = cljs.core.next(arglist__15699);
            var z = cljs.core.first(arglist__15699);
            var args = cljs.core.rest(arglist__15699);
            return G__15698__delegate(x, y, z, args);
          };
          G__15698.cljs$core$IFn$_invoke$arity$variadic = G__15698__delegate;
          return G__15698;
        }();
        G__15697 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__15697__0.call(this);
            case 1:
              return G__15697__1.call(this, x);
            case 2:
              return G__15697__2.call(this, x, y);
            case 3:
              return G__15697__3.call(this, x, y, z);
            default:
              return G__15697__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__15697.cljs$lang$maxFixedArity = 3;
        G__15697.cljs$lang$applyTo = G__15697__4.cljs$lang$applyTo;
        return G__15697;
      }();
    };
    var G__15696 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15696__delegate.call(this, f, g, h, fs);
    };
    G__15696.cljs$lang$maxFixedArity = 3;
    G__15696.cljs$lang$applyTo = function(arglist__15700) {
      var f = cljs.core.first(arglist__15700);
      arglist__15700 = cljs.core.next(arglist__15700);
      var g = cljs.core.first(arglist__15700);
      arglist__15700 = cljs.core.next(arglist__15700);
      var h = cljs.core.first(arglist__15700);
      var fs = cljs.core.rest(arglist__15700);
      return G__15696__delegate(f, g, h, fs);
    };
    G__15696.cljs$core$IFn$_invoke$arity$variadic = G__15696__delegate;
    return G__15696;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__15701 = cljs.core.next.call(null, coll);
        coll = G__15701;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__15702 = n - 1;
        var G__15703 = cljs.core.next.call(null, coll);
        n = G__15702;
        coll = G__15703;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__15705 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__15705, 0, null);
  var flags = cljs.core.nth.call(null, vec__15705, 1, null);
  var pattern = cljs.core.nth.call(null, vec__15705, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_15707 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_15708__$1 = cljs.core.next.call(null, coll);
      var n_15709 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_15708__$1 && (n_15709 == null || !(n_15709 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_15708__$1), writer, opts);
          var G__15710 = cljs.core.next.call(null, coll_15708__$1);
          var G__15711 = n_15709 - 1;
          coll_15708__$1 = G__15710;
          n_15709 = G__15711;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_15707;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__15716 = cljs.core.seq.call(null, ss);
    var chunk__15717 = null;
    var count__15718 = 0;
    var i__15719 = 0;
    while (true) {
      if (i__15719 < count__15718) {
        var s = cljs.core._nth.call(null, chunk__15717, i__15719);
        cljs.core._write.call(null, writer, s);
        var G__15720 = seq__15716;
        var G__15721 = chunk__15717;
        var G__15722 = count__15718;
        var G__15723 = i__15719 + 1;
        seq__15716 = G__15720;
        chunk__15717 = G__15721;
        count__15718 = G__15722;
        i__15719 = G__15723;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__15716);
        if (temp__4092__auto__) {
          var seq__15716__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15716__$1)) {
            var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__15716__$1);
            var G__15724 = cljs.core.chunk_rest.call(null, seq__15716__$1);
            var G__15725 = c__4142__auto__;
            var G__15726 = cljs.core.count.call(null, c__4142__auto__);
            var G__15727 = 0;
            seq__15716 = G__15724;
            chunk__15717 = G__15725;
            count__15718 = G__15726;
            i__15719 = G__15727;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__15716__$1);
            cljs.core._write.call(null, writer, s);
            var G__15728 = cljs.core.next.call(null, seq__15716__$1);
            var G__15729 = null;
            var G__15730 = 0;
            var G__15731 = 0;
            seq__15716 = G__15728;
            chunk__15717 = G__15729;
            count__15718 = G__15730;
            i__15719 = G__15731;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__15732) {
    var writer = cljs.core.first(arglist__15732);
    var ss = cljs.core.rest(arglist__15732);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj15734 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj15734;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3388__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = function() {
              var G__15740 = obj;
              if (G__15740) {
                var bit__4044__auto__ = G__15740.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4044__auto__ || G__15740.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__15740.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15740);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15740);
              }
            }();
            if (and__3388__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__15741 = obj;
              if (G__15741) {
                var bit__4037__auto__ = G__15741.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4037__auto__ || G__15741.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__15743 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__15743;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__15742 = obj;
                              if (G__15742) {
                                var bit__4044__auto__ = G__15742.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4044__auto__ || G__15742.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__15742.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__15742);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__15742);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__15748 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__15749 = null;
  var count__15750 = 0;
  var i__15751 = 0;
  while (true) {
    if (i__15751 < count__15750) {
      var obj = cljs.core._nth.call(null, chunk__15749, i__15751);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__15752 = seq__15748;
      var G__15753 = chunk__15749;
      var G__15754 = count__15750;
      var G__15755 = i__15751 + 1;
      seq__15748 = G__15752;
      chunk__15749 = G__15753;
      count__15750 = G__15754;
      i__15751 = G__15755;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__15748);
      if (temp__4092__auto__) {
        var seq__15748__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15748__$1)) {
          var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__15748__$1);
          var G__15756 = cljs.core.chunk_rest.call(null, seq__15748__$1);
          var G__15757 = c__4142__auto__;
          var G__15758 = cljs.core.count.call(null, c__4142__auto__);
          var G__15759 = 0;
          seq__15748 = G__15756;
          chunk__15749 = G__15757;
          count__15750 = G__15758;
          i__15751 = G__15759;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__15748__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__15760 = cljs.core.next.call(null, seq__15748__$1);
          var G__15761 = null;
          var G__15762 = 0;
          var G__15763 = 0;
          seq__15748 = G__15760;
          chunk__15749 = G__15761;
          count__15750 = G__15762;
          i__15751 = G__15763;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__15764) {
    var objs = cljs.core.seq(arglist__15764);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__15765) {
    var objs = cljs.core.seq(arglist__15765);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__15766) {
    var objs = cljs.core.seq(arglist__15766);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__15767) {
    var objs = cljs.core.seq(arglist__15767);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__15768) {
    var objs = cljs.core.seq(arglist__15768);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__15769) {
    var objs = cljs.core.seq(arglist__15769);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__15770) {
    var objs = cljs.core.seq(arglist__15770);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__15771) {
    var objs = cljs.core.seq(arglist__15771);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__15772 = cljs.core.seq.call(null, self__.watches);
  var chunk__15773 = null;
  var count__15774 = 0;
  var i__15775 = 0;
  while (true) {
    if (i__15775 < count__15774) {
      var vec__15776 = cljs.core._nth.call(null, chunk__15773, i__15775);
      var key = cljs.core.nth.call(null, vec__15776, 0, null);
      var f = cljs.core.nth.call(null, vec__15776, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__15778 = seq__15772;
      var G__15779 = chunk__15773;
      var G__15780 = count__15774;
      var G__15781 = i__15775 + 1;
      seq__15772 = G__15778;
      chunk__15773 = G__15779;
      count__15774 = G__15780;
      i__15775 = G__15781;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__15772);
      if (temp__4092__auto__) {
        var seq__15772__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15772__$1)) {
          var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__15772__$1);
          var G__15782 = cljs.core.chunk_rest.call(null, seq__15772__$1);
          var G__15783 = c__4142__auto__;
          var G__15784 = cljs.core.count.call(null, c__4142__auto__);
          var G__15785 = 0;
          seq__15772 = G__15782;
          chunk__15773 = G__15783;
          count__15774 = G__15784;
          i__15775 = G__15785;
          continue;
        } else {
          var vec__15777 = cljs.core.first.call(null, seq__15772__$1);
          var key = cljs.core.nth.call(null, vec__15777, 0, null);
          var f = cljs.core.nth.call(null, vec__15777, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__15786 = cljs.core.next.call(null, seq__15772__$1);
          var G__15787 = null;
          var G__15788 = 0;
          var G__15789 = 0;
          seq__15772 = G__15786;
          chunk__15773 = G__15787;
          count__15774 = G__15788;
          i__15775 = G__15789;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__15793__delegate = function(x, p__15790) {
      var map__15792 = p__15790;
      var map__15792__$1 = cljs.core.seq_QMARK_.call(null, map__15792) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15792) : map__15792;
      var validator = cljs.core.get.call(null, map__15792__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__15792__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__15793 = function(x, var_args) {
      var p__15790 = null;
      if (arguments.length > 1) {
        p__15790 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15793__delegate.call(this, x, p__15790);
    };
    G__15793.cljs$lang$maxFixedArity = 1;
    G__15793.cljs$lang$applyTo = function(arglist__15794) {
      var x = cljs.core.first(arglist__15794);
      var p__15790 = cljs.core.rest(arglist__15794);
      return G__15793__delegate(x, p__15790);
    };
    G__15793.cljs$core$IFn$_invoke$arity$variadic = G__15793__delegate;
    return G__15793;
  }();
  atom = function(x, var_args) {
    var p__15790 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_15795 = a.validator;
  if (validate_15795 == null) {
  } else {
    if (cljs.core.truth_(validate_15795.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_15796 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_15796, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__15797__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__15797 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__15797__delegate.call(this, a, f, x, y, z, more);
    };
    G__15797.cljs$lang$maxFixedArity = 5;
    G__15797.cljs$lang$applyTo = function(arglist__15798) {
      var a = cljs.core.first(arglist__15798);
      arglist__15798 = cljs.core.next(arglist__15798);
      var f = cljs.core.first(arglist__15798);
      arglist__15798 = cljs.core.next(arglist__15798);
      var x = cljs.core.first(arglist__15798);
      arglist__15798 = cljs.core.next(arglist__15798);
      var y = cljs.core.first(arglist__15798);
      arglist__15798 = cljs.core.next(arglist__15798);
      var z = cljs.core.first(arglist__15798);
      var more = cljs.core.rest(arglist__15798);
      return G__15797__delegate(a, f, x, y, z, more);
    };
    G__15797.cljs$core$IFn$_invoke$arity$variadic = G__15797__delegate;
    return G__15797;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__15799) {
    var iref = cljs.core.first(arglist__15799);
    arglist__15799 = cljs.core.next(arglist__15799);
    var f = cljs.core.first(arglist__15799);
    var args = cljs.core.rest(arglist__15799);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__15800) {
    var map__15801 = p__15800;
    var map__15801__$1 = cljs.core.seq_QMARK_.call(null, map__15801) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15801) : map__15801;
    var curr_state = map__15801__$1;
    var done = cljs.core.get.call(null, map__15801__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj15803 = {};
  return obj15803;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__15805 = k;
    if (G__15805) {
      var bit__4044__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3400__auto__ = bit__4044__auto__;
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return G__15805.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__15805.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15805);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15805);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__15819 = x;
      if (G__15819) {
        var bit__4044__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3400__auto__ = bit__4044__auto__;
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return G__15819.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__15819.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15819);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15819);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj15821 = {};
              return obj15821;
            }();
            var seq__15822_15832 = cljs.core.seq.call(null, x);
            var chunk__15823_15833 = null;
            var count__15824_15834 = 0;
            var i__15825_15835 = 0;
            while (true) {
              if (i__15825_15835 < count__15824_15834) {
                var vec__15826_15836 = cljs.core._nth.call(null, chunk__15823_15833, i__15825_15835);
                var k_15837 = cljs.core.nth.call(null, vec__15826_15836, 0, null);
                var v_15838 = cljs.core.nth.call(null, vec__15826_15836, 1, null);
                m[cljs.core.key__GT_js.call(null, k_15837)] = clj__GT_js.call(null, v_15838);
                var G__15839 = seq__15822_15832;
                var G__15840 = chunk__15823_15833;
                var G__15841 = count__15824_15834;
                var G__15842 = i__15825_15835 + 1;
                seq__15822_15832 = G__15839;
                chunk__15823_15833 = G__15840;
                count__15824_15834 = G__15841;
                i__15825_15835 = G__15842;
                continue;
              } else {
                var temp__4092__auto___15843 = cljs.core.seq.call(null, seq__15822_15832);
                if (temp__4092__auto___15843) {
                  var seq__15822_15844__$1 = temp__4092__auto___15843;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__15822_15844__$1)) {
                    var c__4142__auto___15845 = cljs.core.chunk_first.call(null, seq__15822_15844__$1);
                    var G__15846 = cljs.core.chunk_rest.call(null, seq__15822_15844__$1);
                    var G__15847 = c__4142__auto___15845;
                    var G__15848 = cljs.core.count.call(null, c__4142__auto___15845);
                    var G__15849 = 0;
                    seq__15822_15832 = G__15846;
                    chunk__15823_15833 = G__15847;
                    count__15824_15834 = G__15848;
                    i__15825_15835 = G__15849;
                    continue;
                  } else {
                    var vec__15827_15850 = cljs.core.first.call(null, seq__15822_15844__$1);
                    var k_15851 = cljs.core.nth.call(null, vec__15827_15850, 0, null);
                    var v_15852 = cljs.core.nth.call(null, vec__15827_15850, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_15851)] = clj__GT_js.call(null, v_15852);
                    var G__15853 = cljs.core.next.call(null, seq__15822_15844__$1);
                    var G__15854 = null;
                    var G__15855 = 0;
                    var G__15856 = 0;
                    seq__15822_15832 = G__15853;
                    chunk__15823_15833 = G__15854;
                    count__15824_15834 = G__15855;
                    i__15825_15835 = G__15856;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__15828_15857 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__15829_15858 = null;
              var count__15830_15859 = 0;
              var i__15831_15860 = 0;
              while (true) {
                if (i__15831_15860 < count__15830_15859) {
                  var x_15861__$1 = cljs.core._nth.call(null, chunk__15829_15858, i__15831_15860);
                  arr.push(x_15861__$1);
                  var G__15862 = seq__15828_15857;
                  var G__15863 = chunk__15829_15858;
                  var G__15864 = count__15830_15859;
                  var G__15865 = i__15831_15860 + 1;
                  seq__15828_15857 = G__15862;
                  chunk__15829_15858 = G__15863;
                  count__15830_15859 = G__15864;
                  i__15831_15860 = G__15865;
                  continue;
                } else {
                  var temp__4092__auto___15866 = cljs.core.seq.call(null, seq__15828_15857);
                  if (temp__4092__auto___15866) {
                    var seq__15828_15867__$1 = temp__4092__auto___15866;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__15828_15867__$1)) {
                      var c__4142__auto___15868 = cljs.core.chunk_first.call(null, seq__15828_15867__$1);
                      var G__15869 = cljs.core.chunk_rest.call(null, seq__15828_15867__$1);
                      var G__15870 = c__4142__auto___15868;
                      var G__15871 = cljs.core.count.call(null, c__4142__auto___15868);
                      var G__15872 = 0;
                      seq__15828_15857 = G__15869;
                      chunk__15829_15858 = G__15870;
                      count__15830_15859 = G__15871;
                      i__15831_15860 = G__15872;
                      continue;
                    } else {
                      var x_15873__$1 = cljs.core.first.call(null, seq__15828_15867__$1);
                      arr.push(x_15873__$1);
                      var G__15874 = cljs.core.next.call(null, seq__15828_15867__$1);
                      var G__15875 = null;
                      var G__15876 = 0;
                      var G__15877 = 0;
                      seq__15828_15857 = G__15874;
                      chunk__15829_15858 = G__15875;
                      count__15830_15859 = G__15876;
                      i__15831_15860 = G__15877;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj15879 = {};
  return obj15879;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__15900__delegate = function(x, opts) {
      if (function() {
        var G__15890 = x;
        if (G__15890) {
          var bit__4044__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3400__auto__ = bit__4044__auto__;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return G__15890.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__15890.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__15890);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__15890);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__15891 = opts;
          var map__15891__$1 = cljs.core.seq_QMARK_.call(null, map__15891) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15891) : map__15891;
          var keywordize_keys = cljs.core.get.call(null, map__15891__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__15891, map__15891__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4111__auto__ = function(map__15891, map__15891__$1, keywordize_keys, keyfn) {
                          return function iter__15896(s__15897) {
                            return new cljs.core.LazySeq(null, function(map__15891, map__15891__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__15897__$1 = s__15897;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__15897__$1);
                                  if (temp__4092__auto__) {
                                    var s__15897__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__15897__$2)) {
                                      var c__4109__auto__ = cljs.core.chunk_first.call(null, s__15897__$2);
                                      var size__4110__auto__ = cljs.core.count.call(null, c__4109__auto__);
                                      var b__15899 = cljs.core.chunk_buffer.call(null, size__4110__auto__);
                                      if (function() {
                                        var i__15898 = 0;
                                        while (true) {
                                          if (i__15898 < size__4110__auto__) {
                                            var k = cljs.core._nth.call(null, c__4109__auto__, i__15898);
                                            cljs.core.chunk_append.call(null, b__15899, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__15901 = i__15898 + 1;
                                            i__15898 = G__15901;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15899), iter__15896.call(null, cljs.core.chunk_rest.call(null, s__15897__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15899), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__15897__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__15896.call(null, cljs.core.rest.call(null, s__15897__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__15891, map__15891__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__15891, map__15891__$1, keywordize_keys, keyfn);
                        return iter__4111__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__15891, map__15891__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__15900 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15900__delegate.call(this, x, opts);
    };
    G__15900.cljs$lang$maxFixedArity = 1;
    G__15900.cljs$lang$applyTo = function(arglist__15902) {
      var x = cljs.core.first(arglist__15902);
      var opts = cljs.core.rest(arglist__15902);
      return G__15900__delegate(x, opts);
    };
    G__15900.cljs$core$IFn$_invoke$arity$variadic = G__15900__delegate;
    return G__15900;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__15903__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__15903 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15903__delegate.call(this, args);
    };
    G__15903.cljs$lang$maxFixedArity = 0;
    G__15903.cljs$lang$applyTo = function(arglist__15904) {
      var args = cljs.core.seq(arglist__15904);
      return G__15903__delegate(args);
    };
    G__15903.cljs$core$IFn$_invoke$arity$variadic = G__15903__delegate;
    return G__15903;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__15905 = ret;
        f = G__15905;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__15906__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__15906 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15906__delegate.call(this, f, args);
    };
    G__15906.cljs$lang$maxFixedArity = 1;
    G__15906.cljs$lang$applyTo = function(arglist__15907) {
      var f = cljs.core.first(arglist__15907);
      var args = cljs.core.rest(arglist__15907);
      return G__15906__delegate(f, args);
    };
    G__15906.cljs$core$IFn$_invoke$arity$variadic = G__15906__delegate;
    return G__15906;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__15908) {
    var f = cljs.core.first(arglist__15908);
    var args = cljs.core.rest(arglist__15908);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3400__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      var or__3400__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3400__auto____$1) {
        return or__3400__auto____$1;
      } else {
        var and__3388__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3388__auto__) {
          var and__3388__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3388__auto____$1) {
            var and__3388__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3388__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__15909 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__15910 = i + 1;
                  ret = G__15909;
                  i = G__15910;
                  continue;
                }
                break;
              }
            } else {
              return and__3388__auto____$2;
            }
          } else {
            return and__3388__auto____$1;
          }
        } else {
          return and__3388__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3400__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3400__auto__)) {
      return or__3400__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__15911_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__15911_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__15911_SHARP_), cljs.core.second.call(null, p1__15911_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__15912_SHARP_, p2__15913_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__15912_SHARP_, p2__15913_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3400__auto__ = cljs.core.truth_(function() {
    var and__3388__auto__ = xprefs;
    if (cljs.core.truth_(and__3388__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3388__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    var or__3400__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__15914 = cljs.core.rest.call(null, ps);
          ps = G__15914;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3400__auto____$1)) {
      return or__3400__auto____$1;
    } else {
      var or__3400__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__15915 = cljs.core.rest.call(null, ps);
            ps = G__15915;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3400__auto____$2)) {
        return or__3400__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3400__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__15918) {
    var vec__15919 = p__15918;
    var k = cljs.core.nth.call(null, vec__15919, 0, null);
    var _ = cljs.core.nth.call(null, vec__15919, 1, null);
    var e = vec__15919;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3400__auto__ = be == null;
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj15921 = {};
  return obj15921;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._reset[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._reset["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._add_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._add_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._remove_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._remove_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._prefer_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._get_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._get_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._methods[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._methods["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._prefers[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._prefers["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._dispatch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dispatch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__15922__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__15922 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__15922__delegate.call(this, _, args);
  };
  G__15922.cljs$lang$maxFixedArity = 1;
  G__15922.cljs$lang$applyTo = function(arglist__15923) {
    var _ = cljs.core.first(arglist__15923);
    var args = cljs.core.rest(arglist__15923);
    return G__15922__delegate(_, args);
  };
  G__15922.cljs$core$IFn$_invoke$arity$variadic = G__15922__delegate;
  return G__15922;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$ICloneable$ = true;
cljs.core.UUID.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.UUID(self__.uuid);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("cljs_uuid.core");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid.core.make_random = function make_random() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16);
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16);
  };
  return new cljs.core.UUID((new goog.string.StringBuffer(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null))).toString());
};
cljs_uuid.core.make_v4 = cljs_uuid.core.make_random;
cljs_uuid.core.make_random_string = function make_random_string() {
  return cljs_uuid.core.make_random.call(null).uuid;
};
goog.provide("chaperone.crossover.user");
goog.require("cljs.core");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.user.User = function(id, firstname, lastname, password, email, photo, last_logged_in, __meta, __extmap) {
  this.id = id;
  this.firstname = firstname;
  this.lastname = lastname;
  this.password = password;
  this.email = email;
  this.photo = photo;
  this.last_logged_in = last_logged_in;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 7) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k18359, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k18359, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k18359, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229))) {
      return self__.firstname;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k18359, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043))) {
        return self__.lastname;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k18359, new cljs.core.Keyword(null, "password", "password", 2230889997))) {
          return self__.password;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k18359, new cljs.core.Keyword(null, "email", "email", 1110523662))) {
            return self__.email;
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, k18359, new cljs.core.Keyword(null, "photo", "photo", 1120547236))) {
              return self__.photo;
            } else {
              if (cljs.core.keyword_identical_QMARK_.call(null, k18359, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907))) {
                return self__.last_logged_in;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return cljs.core.get.call(null, self__.__extmap, k18359, else__3983__auto__);
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__18358) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__18361 = cljs.core.keyword_identical_QMARK_;
  var expr__18362 = k__3988__auto__;
  if (cljs.core.truth_(pred__18361.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__18362))) {
    return new chaperone.crossover.user.User(G__18358, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__18361.call(null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), expr__18362))) {
      return new chaperone.crossover.user.User(self__.id, G__18358, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__18361.call(null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), expr__18362))) {
        return new chaperone.crossover.user.User(self__.id, self__.firstname, G__18358, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__18361.call(null, new cljs.core.Keyword(null, "password", "password", 2230889997), expr__18362))) {
          return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, G__18358, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__18361.call(null, new cljs.core.Keyword(null, "email", "email", 1110523662), expr__18362))) {
            return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, G__18358, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__18361.call(null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), expr__18362))) {
              return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, G__18358, self__.last_logged_in, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__18361.call(null, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), expr__18362))) {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, G__18358, self__.__meta, self__.__extmap, null);
              } else {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__18358), null);
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.user.User{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.user.User.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__18358) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, G__18358, self__.__extmap, self__.__hash);
};
chaperone.crossover.user.User.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.user.User.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), null, new cljs.core.Keyword(null, "email", "email", 1110523662), null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), null, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), null, new cljs.core.Keyword(null, "password", "password", 2230889997), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.user.User.cljs$lang$type = true;
chaperone.crossover.user.User.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.user/User");
};
chaperone.crossover.user.User.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.user/User");
};
chaperone.crossover.user.__GT_User = function __GT_User(id, firstname, lastname, password, email, photo, last_logged_in) {
  return new chaperone.crossover.user.User(id, firstname, lastname, password, email, photo, last_logged_in);
};
chaperone.crossover.user.map__GT_User = function map__GT_User(G__18360) {
  return new chaperone.crossover.user.User((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__18360), (new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(G__18360), (new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(G__18360), (new cljs.core.Keyword(null, "password", "password", 2230889997)).cljs$core$IFn$_invoke$arity$1(G__18360), (new cljs.core.Keyword(null, "email", "email", 
  1110523662)).cljs$core$IFn$_invoke$arity$1(G__18360), (new cljs.core.Keyword(null, "photo", "photo", 1120547236)).cljs$core$IFn$_invoke$arity$1(G__18360), (new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)).cljs$core$IFn$_invoke$arity$1(G__18360), null, cljs.core.dissoc.call(null, G__18360, new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), 
  new cljs.core.Keyword(null, "password", "password", 2230889997), new cljs.core.Keyword(null, "email", "email", 1110523662), new cljs.core.Keyword(null, "photo", "photo", 1120547236), new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)));
};
chaperone.crossover.user.new_user = function() {
  var new_user__delegate = function(firstname, lastname, email, password, p__18364) {
    var map__18366 = p__18364;
    var map__18366__$1 = cljs.core.seq_QMARK_.call(null, map__18366) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18366) : map__18366;
    var last_logged_in = cljs.core.get.call(null, map__18366__$1, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907));
    var photo = cljs.core.get.call(null, map__18366__$1, new cljs.core.Keyword(null, "photo", "photo", 1120547236));
    return chaperone.crossover.user.__GT_User.call(null, cljs_uuid.core.make_random_string.call(null), firstname, lastname, password, email, photo, last_logged_in);
  };
  var new_user = function(firstname, lastname, email, password, var_args) {
    var p__18364 = null;
    if (arguments.length > 4) {
      p__18364 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
    }
    return new_user__delegate.call(this, firstname, lastname, email, password, p__18364);
  };
  new_user.cljs$lang$maxFixedArity = 4;
  new_user.cljs$lang$applyTo = function(arglist__18367) {
    var firstname = cljs.core.first(arglist__18367);
    arglist__18367 = cljs.core.next(arglist__18367);
    var lastname = cljs.core.first(arglist__18367);
    arglist__18367 = cljs.core.next(arglist__18367);
    var email = cljs.core.first(arglist__18367);
    arglist__18367 = cljs.core.next(arglist__18367);
    var password = cljs.core.first(arglist__18367);
    var p__18364 = cljs.core.rest(arglist__18367);
    return new_user__delegate(firstname, lastname, email, password, p__18364);
  };
  new_user.cljs$core$IFn$_invoke$arity$variadic = new_user__delegate;
  return new_user;
}();
chaperone.crossover.user.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "chaperone.crossover.user.User", "chaperone.crossover.user.User", -826432028, null), chaperone.crossover.user.map__GT_User], null);
};
goog.provide("chaperone.crossover.rpc");
goog.require("cljs.core");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.rpc.Request = function(id, category, action, data, __meta, __extmap) {
  this.id = id;
  this.category = category;
  this.action = action;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k14895, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14895, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k14895, new cljs.core.Keyword(null, "category", "category", 1064415344))) {
      return self__.category;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k14895, new cljs.core.Keyword(null, "action", "action", 3885920680))) {
        return self__.action;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k14895, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
          return self__.data;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.get.call(null, self__.__extmap, k14895, else__3983__auto__);
          } else {
            return null;
          }
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__14894) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__14897 = cljs.core.keyword_identical_QMARK_;
  var expr__14898 = k__3988__auto__;
  if (cljs.core.truth_(pred__14897.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__14898))) {
    return new chaperone.crossover.rpc.Request(G__14894, self__.category, self__.action, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14897.call(null, new cljs.core.Keyword(null, "category", "category", 1064415344), expr__14898))) {
      return new chaperone.crossover.rpc.Request(self__.id, G__14894, self__.action, self__.data, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__14897.call(null, new cljs.core.Keyword(null, "action", "action", 3885920680), expr__14898))) {
        return new chaperone.crossover.rpc.Request(self__.id, self__.category, G__14894, self__.data, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__14897.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__14898))) {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, G__14894, self__.__meta, self__.__extmap, null);
        } else {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__14894), null);
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.rpc.Request{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__14894) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, G__14894, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "action", "action", 3885920680), null, new cljs.core.Keyword(null, "id", "id", 1013907597), null, new cljs.core.Keyword(null, "category", "category", 1064415344), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.rpc.Request.cljs$lang$type = true;
chaperone.crossover.rpc.Request.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.Request.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.__GT_Request = function __GT_Request(id, category, action, data) {
  return new chaperone.crossover.rpc.Request(id, category, action, data);
};
chaperone.crossover.rpc.map__GT_Request = function map__GT_Request(G__14896) {
  return new chaperone.crossover.rpc.Request((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__14896), (new cljs.core.Keyword(null, "category", "category", 1064415344)).cljs$core$IFn$_invoke$arity$1(G__14896), (new cljs.core.Keyword(null, "action", "action", 3885920680)).cljs$core$IFn$_invoke$arity$1(G__14896), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__14896), null, cljs.core.dissoc.call(null, G__14896, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), new cljs.core.Keyword(null, "category", "category", 1064415344), new cljs.core.Keyword(null, "action", "action", 3885920680), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.Response = function(request, data, __meta, __extmap) {
  this.request = request;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k14901, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14901, new cljs.core.Keyword(null, "request", "request", 2109597185))) {
    return self__.request;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k14901, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
      return self__.data;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k14901, else__3983__auto__);
      } else {
        return null;
      }
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__14900) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__14903 = cljs.core.keyword_identical_QMARK_;
  var expr__14904 = k__3988__auto__;
  if (cljs.core.truth_(pred__14903.call(null, new cljs.core.Keyword(null, "request", "request", 2109597185), expr__14904))) {
    return new chaperone.crossover.rpc.Response(G__14900, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14903.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__14904))) {
      return new chaperone.crossover.rpc.Response(self__.request, G__14900, self__.__meta, self__.__extmap, null);
    } else {
      return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__14900), null);
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.rpc.Response{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__14900) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.rpc.Response(self__.request, self__.data, G__14900, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "request", "request", 2109597185), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.rpc.Response.cljs$lang$type = true;
chaperone.crossover.rpc.Response.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.Response.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.__GT_Response = function __GT_Response(request, data) {
  return new chaperone.crossover.rpc.Response(request, data);
};
chaperone.crossover.rpc.map__GT_Response = function map__GT_Response(G__14902) {
  return new chaperone.crossover.rpc.Response((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(G__14902), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__14902), null, cljs.core.dissoc.call(null, G__14902, new cljs.core.Keyword(null, "request", "request", 2109597185), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.new_request = function new_request(category, action, data) {
  return chaperone.crossover.rpc.__GT_Request.call(null, cljs_uuid.core.make_random.call(null), category, action, data);
};
chaperone.crossover.rpc.new_response = function new_response(request, data) {
  return chaperone.crossover.rpc.__GT_Response.call(null, request, data);
};
chaperone.crossover.rpc.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "chaperone.crossover.rpc.Request", "chaperone.crossover.rpc.Request", -174529060, null), chaperone.crossover.rpc.map__GT_Request, new cljs.core.Symbol(null, "chaperone.crossover.rpc.Response", "chaperone.crossover.rpc.Response", 908805862, null), chaperone.crossover.rpc.map__GT_Response], null);
};
chaperone.crossover.rpc.all_edn_readers = function all_edn_readers() {
  return cljs.core.merge.call(null, chaperone.crossover.rpc.edn_readers.call(null), chaperone.crossover.user.edn_readers.call(null));
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj17919 = {};
  return obj17919;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3388__auto__ = reader;
    if (and__3388__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4021__auto__ = reader == null ? null : reader;
    return function() {
      var or__3400__auto__ = cljs.reader.read_char[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.read_char["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3388__auto__ = reader;
    if (and__3388__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4021__auto__ = reader == null ? null : reader;
    return function() {
      var or__3400__auto__ = cljs.reader.unread[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.unread["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3400__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__17920) {
    var rdr = cljs.core.first(arglist__17920);
    var msg = cljs.core.rest(arglist__17920);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3388__auto__ = !(ch === "#");
  if (and__3388__auto__) {
    var and__3388__auto____$1 = !(ch === "'");
    if (and__3388__auto____$1) {
      var and__3388__auto____$2 = !(ch === ":");
      if (and__3388__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3388__auto____$2;
      }
    } else {
      return and__3388__auto____$1;
    }
  } else {
    return and__3388__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__17921 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__17922 = cljs.reader.read_char.call(null, rdr);
      sb = G__17921;
      ch = G__17922;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__17923 = cljs.reader.read_char.call(null, rdr);
      ch = G__17923;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__17924 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__17924;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__17925 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__17925;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3400__auto__ = ch == null;
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3400__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__17926 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__17927 = cljs.reader.read_char.call(null, reader);
      buffer = G__17926;
      ch = G__17927;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__17928 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__17929 = cljs.reader.read_char.call(null, reader);
        buffer = G__17928;
        ch = G__17929;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__17930 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__17931 = cljs.reader.read_char.call(null, reader);
            buffer = G__17930;
            ch = G__17931;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__17933 = o;
    if (G__17933) {
      var bit__4044__auto__ = G__17933.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4044__auto__ || G__17933.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__17933.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__17933);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__17933);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__17934 = reader;
        var G__17935 = eof_is_error;
        var G__17936 = sentinel;
        var G__17937 = is_recursive;
        reader = G__17934;
        eof_is_error = G__17935;
        sentinel = G__17936;
        is_recursive = G__17937;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__17938 = cljs.reader.read_comment.call(null, reader, ch);
          var G__17939 = eof_is_error;
          var G__17940 = sentinel;
          var G__17941 = is_recursive;
          reader = G__17938;
          eof_is_error = G__17939;
          sentinel = G__17940;
          is_recursive = G__17941;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__17942 = reader;
              var G__17943 = eof_is_error;
              var G__17944 = sentinel;
              var G__17945 = is_recursive;
              reader = G__17942;
              eof_is_error = G__17943;
              sentinel = G__17944;
              is_recursive = G__17945;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__17946 = b.append("0");
            b = G__17946;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__17948 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__17948, 0, null);
  var years = cljs.core.nth.call(null, vec__17948, 1, null);
  var months = cljs.core.nth.call(null, vec__17948, 2, null);
  var days = cljs.core.nth.call(null, vec__17948, 3, null);
  var hours = cljs.core.nth.call(null, vec__17948, 4, null);
  var minutes = cljs.core.nth.call(null, vec__17948, 5, null);
  var seconds = cljs.core.nth.call(null, vec__17948, 6, null);
  var fraction = cljs.core.nth.call(null, vec__17948, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__17948, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__17948, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__17948, 10, null);
  var v = vec__17948;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__17950 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__17950, 0, null);
    var months = cljs.core.nth.call(null, vec__17950, 1, null);
    var days = cljs.core.nth.call(null, vec__17950, 2, null);
    var hours = cljs.core.nth.call(null, vec__17950, 3, null);
    var minutes = cljs.core.nth.call(null, vec__17950, 4, null);
    var seconds = cljs.core.nth.call(null, vec__17950, 5, null);
    var ms = cljs.core.nth.call(null, vec__17950, 6, null);
    var offset = cljs.core.nth.call(null, vec__17950, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__17963_17975 = cljs.core.seq.call(null, form);
    var chunk__17964_17976 = null;
    var count__17965_17977 = 0;
    var i__17966_17978 = 0;
    while (true) {
      if (i__17966_17978 < count__17965_17977) {
        var x_17979 = cljs.core._nth.call(null, chunk__17964_17976, i__17966_17978);
        arr.push(x_17979);
        var G__17980 = seq__17963_17975;
        var G__17981 = chunk__17964_17976;
        var G__17982 = count__17965_17977;
        var G__17983 = i__17966_17978 + 1;
        seq__17963_17975 = G__17980;
        chunk__17964_17976 = G__17981;
        count__17965_17977 = G__17982;
        i__17966_17978 = G__17983;
        continue;
      } else {
        var temp__4092__auto___17984 = cljs.core.seq.call(null, seq__17963_17975);
        if (temp__4092__auto___17984) {
          var seq__17963_17985__$1 = temp__4092__auto___17984;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17963_17985__$1)) {
            var c__4142__auto___17986 = cljs.core.chunk_first.call(null, seq__17963_17985__$1);
            var G__17987 = cljs.core.chunk_rest.call(null, seq__17963_17985__$1);
            var G__17988 = c__4142__auto___17986;
            var G__17989 = cljs.core.count.call(null, c__4142__auto___17986);
            var G__17990 = 0;
            seq__17963_17975 = G__17987;
            chunk__17964_17976 = G__17988;
            count__17965_17977 = G__17989;
            i__17966_17978 = G__17990;
            continue;
          } else {
            var x_17991 = cljs.core.first.call(null, seq__17963_17985__$1);
            arr.push(x_17991);
            var G__17992 = cljs.core.next.call(null, seq__17963_17985__$1);
            var G__17993 = null;
            var G__17994 = 0;
            var G__17995 = 0;
            seq__17963_17975 = G__17992;
            chunk__17964_17976 = G__17993;
            count__17965_17977 = G__17994;
            i__17966_17978 = G__17995;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj17968 = {};
        return obj17968;
      }();
      var seq__17969_17996 = cljs.core.seq.call(null, form);
      var chunk__17970_17997 = null;
      var count__17971_17998 = 0;
      var i__17972_17999 = 0;
      while (true) {
        if (i__17972_17999 < count__17971_17998) {
          var vec__17973_18000 = cljs.core._nth.call(null, chunk__17970_17997, i__17972_17999);
          var k_18001 = cljs.core.nth.call(null, vec__17973_18000, 0, null);
          var v_18002 = cljs.core.nth.call(null, vec__17973_18000, 1, null);
          obj[cljs.core.name.call(null, k_18001)] = v_18002;
          var G__18003 = seq__17969_17996;
          var G__18004 = chunk__17970_17997;
          var G__18005 = count__17971_17998;
          var G__18006 = i__17972_17999 + 1;
          seq__17969_17996 = G__18003;
          chunk__17970_17997 = G__18004;
          count__17971_17998 = G__18005;
          i__17972_17999 = G__18006;
          continue;
        } else {
          var temp__4092__auto___18007 = cljs.core.seq.call(null, seq__17969_17996);
          if (temp__4092__auto___18007) {
            var seq__17969_18008__$1 = temp__4092__auto___18007;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__17969_18008__$1)) {
              var c__4142__auto___18009 = cljs.core.chunk_first.call(null, seq__17969_18008__$1);
              var G__18010 = cljs.core.chunk_rest.call(null, seq__17969_18008__$1);
              var G__18011 = c__4142__auto___18009;
              var G__18012 = cljs.core.count.call(null, c__4142__auto___18009);
              var G__18013 = 0;
              seq__17969_17996 = G__18010;
              chunk__17970_17997 = G__18011;
              count__17971_17998 = G__18012;
              i__17972_17999 = G__18013;
              continue;
            } else {
              var vec__17974_18014 = cljs.core.first.call(null, seq__17969_18008__$1);
              var k_18015 = cljs.core.nth.call(null, vec__17974_18014, 0, null);
              var v_18016 = cljs.core.nth.call(null, vec__17974_18014, 1, null);
              obj[cljs.core.name.call(null, k_18015)] = v_18016;
              var G__18017 = cljs.core.next.call(null, seq__17969_18008__$1);
              var G__18018 = null;
              var G__18019 = 0;
              var G__18020 = 0;
              seq__17969_17996 = G__18017;
              chunk__17970_17997 = G__18018;
              count__17971_17998 = G__18019;
              i__17972_17999 = G__18020;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj17862 = {};
  return obj17862;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3388__auto__ = port;
    if (and__3388__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4021__auto__ = port == null ? null : port;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj17864 = {};
  return obj17864;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3388__auto__ = port;
    if (and__3388__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4021__auto__ = port == null ? null : port;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj17866 = {};
  return obj17866;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3388__auto__ = chan;
    if (and__3388__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4021__auto__ = chan == null ? null : chan;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj17868 = {};
  return obj17868;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3388__auto__ = h;
    if (and__3388__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4021__auto__ = h == null ? null : h;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3388__auto__ = h;
    if (and__3388__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4021__auto__ = h == null ? null : h;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj17870 = {};
  return obj17870;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t17888 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t17888 = function(f, fn_handler, meta17889) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta17889 = meta17889;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t17888.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t17888.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t17888";
    cljs.core.async.impl.ioc_helpers.t17888.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.ioc-helpers/t17888");
    };
    cljs.core.async.impl.ioc_helpers.t17888.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t17888.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t17888.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t17888.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17890) {
      var self__ = this;
      var _17890__$1 = this;
      return self__.meta17889;
    };
    cljs.core.async.impl.ioc_helpers.t17888.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17890, meta17889__$1) {
      var self__ = this;
      var _17890__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t17888(self__.f, self__.fn_handler, meta17889__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t17888 = function __GT_t17888(f__$1, fn_handler__$1, meta17889) {
      return new cljs.core.async.impl.ioc_helpers.t17888(f__$1, fn_handler__$1, meta17889);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t17888(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e17892) {
    if (e17892 instanceof Object) {
      var ex = e17892;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e17892;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_17895_17897 = state;
    statearr_17895_17897[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_17895_17897[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_17896_17898 = state;
    statearr_17896_17898[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_17896_17898[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_17901_17903 = state;
    statearr_17901_17903[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_17901_17903[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_17902_17904 = state;
    statearr_17902_17904[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_17902_17904[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__17905) {
    var map__17910 = p__17905;
    var map__17910__$1 = cljs.core.seq_QMARK_.call(null, map__17910) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17910) : map__17910;
    var opts = map__17910__$1;
    var statearr_17911_17914 = state;
    statearr_17911_17914[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_17912_17915 = state;
      statearr_17912_17915[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_17913_17916 = state;
      statearr_17913_17916[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__17905 = null;
    if (arguments.length > 3) {
      p__17905 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__17905);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__17917) {
    var state = cljs.core.first(arglist__17917);
    arglist__17917 = cljs.core.next(arglist__17917);
    var cont_block = cljs.core.first(arglist__17917);
    arglist__17917 = cljs.core.next(arglist__17917);
    var ports = cljs.core.first(arglist__17917);
    var p__17905 = cljs.core.rest(arglist__17917);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__17905);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__17882 = cnt + 1;
      cnt = G__17882;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4242__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4242__auto__) {
      var v_17883 = this$.pop();
      if (keep_QMARK_.call(null, v_17883)) {
        this$.unshift(v_17883);
      } else {
      }
      var G__17884 = x + 1;
      x = G__17884;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_17871 = 0;
  while (true) {
    var m_17872 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_17872 == null) {
    } else {
      m_17872.call(null);
      if (count_17871 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__17873 = count_17871 + 1;
        count_17871 = G__17873;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3388__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3388__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t17877 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t17877 = function(val, box, meta17878) {
      this.val = val;
      this.box = box;
      this.meta17878 = meta17878;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t17877.cljs$lang$type = true;
    cljs.core.async.impl.channels.t17877.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t17877";
    cljs.core.async.impl.channels.t17877.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.channels/t17877");
    };
    cljs.core.async.impl.channels.t17877.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t17877.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17879) {
      var self__ = this;
      var _17879__$1 = this;
      return self__.meta17878;
    };
    cljs.core.async.impl.channels.t17877.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17879, meta17878__$1) {
      var self__ = this;
      var _17879__$1 = this;
      return new cljs.core.async.impl.channels.t17877(self__.val, self__.box, meta17878__$1);
    };
    cljs.core.async.impl.channels.__GT_t17877 = function __GT_t17877(val__$1, box__$1, meta17878) {
      return new cljs.core.async.impl.channels.t17877(val__$1, box__$1, meta17878);
    };
  }
  return new cljs.core.async.impl.channels.t17877(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_17880 = self__.takes.pop();
      if (taker_17880 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_17880)) {
          var take_cb_17881 = cljs.core.async.impl.protocols.commit.call(null, taker_17880);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_17881, taker_17880) {
            return function() {
              return take_cb_17881.call(null, null);
            };
          }(take_cb_17881, taker_17880));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__17837 = level + 1;
        level = G__17837;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_17838 = 0;
    while (true) {
      if (i_17838 < arr.length) {
        arr[i_17838] = null;
        var G__17839 = i_17838 + 1;
        i_17838 = G__17839;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__17840 = x_SINGLEQUOTE_;
                x__$1 = G__17840;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__17841 = x__$1;
        var G__17842 = k;
        var G__17843 = level - 1;
        var G__17844 = update;
        x = G__17841;
        k = G__17842;
        level = G__17843;
        update = G__17844;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_17845 = self__.level + 1;
      while (true) {
        if (i_17845 <= new_level + 1) {
          update[i_17845] = self__.header;
          var G__17846 = i_17845 + 1;
          i_17845 = G__17846;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_17847 = 0;
    while (true) {
      if (i_17847 <= self__.level) {
        var links_17848 = update[i_17847].forward;
        if (links_17848[i_17847] === x__$1) {
          links_17848[i_17847] = x__$1.forward[i_17847];
          var G__17849 = i_17847 + 1;
          i_17847 = G__17849;
          continue;
        } else {
          var G__17850 = i_17847 + 1;
          i_17847 = G__17850;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__17851 = x_SINGLEQUOTE_;
              x__$1 = G__17851;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__17852 = nx;
        var G__17853 = level__$1 - 1;
        x = G__17852;
        level__$1 = G__17853;
        continue;
      } else {
        var G__17854 = x;
        var G__17855 = level__$1 - 1;
        x = G__17854;
        level__$1 = G__17855;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__17856 = x_SINGLEQUOTE_;
              x__$1 = G__17856;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__17857 = nx;
        var G__17858 = level__$1 - 1;
        x = G__17857;
        level__$1 = G__17858;
        continue;
      } else {
        var G__17859 = x;
        var G__17860 = level__$1 - 1;
        x = G__17859;
        level__$1 = G__17860;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3400__auto__ = cljs.core.truth_(function() {
    var and__3388__auto__ = me;
    if (cljs.core.truth_(and__3388__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3388__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t15927 !== "undefined") {
  } else {
    cljs.core.async.t15927 = function(f, fn_handler, meta15928) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta15928 = meta15928;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15927.cljs$lang$type = true;
    cljs.core.async.t15927.cljs$lang$ctorStr = "cljs.core.async/t15927";
    cljs.core.async.t15927.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15927");
    };
    cljs.core.async.t15927.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15927.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t15927.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t15927.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15929) {
      var self__ = this;
      var _15929__$1 = this;
      return self__.meta15928;
    };
    cljs.core.async.t15927.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15929, meta15928__$1) {
      var self__ = this;
      var _15929__$1 = this;
      return new cljs.core.async.t15927(self__.f, self__.fn_handler, meta15928__$1);
    };
    cljs.core.async.__GT_t15927 = function __GT_t15927(f__$1, fn_handler__$1, meta15928) {
      return new cljs.core.async.t15927(f__$1, fn_handler__$1, meta15928);
    };
  }
  return new cljs.core.async.t15927(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_15930 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_15930);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_15930);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3388__auto__ = ret;
      if (cljs.core.truth_(and__3388__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3388__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4242__auto___15931 = n;
  var x_15932 = 0;
  while (true) {
    if (x_15932 < n__4242__auto___15931) {
      a[x_15932] = 0;
      var G__15933 = x_15932 + 1;
      x_15932 = G__15933;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__15934 = i + 1;
      i = G__15934;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t15938 !== "undefined") {
  } else {
    cljs.core.async.t15938 = function(flag, alt_flag, meta15939) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta15939 = meta15939;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15938.cljs$lang$type = true;
    cljs.core.async.t15938.cljs$lang$ctorStr = "cljs.core.async/t15938";
    cljs.core.async.t15938.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15938");
    };
    cljs.core.async.t15938.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15938.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t15938.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t15938.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15940) {
      var self__ = this;
      var _15940__$1 = this;
      return self__.meta15939;
    };
    cljs.core.async.t15938.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15940, meta15939__$1) {
      var self__ = this;
      var _15940__$1 = this;
      return new cljs.core.async.t15938(self__.flag, self__.alt_flag, meta15939__$1);
    };
    cljs.core.async.__GT_t15938 = function __GT_t15938(flag__$1, alt_flag__$1, meta15939) {
      return new cljs.core.async.t15938(flag__$1, alt_flag__$1, meta15939);
    };
  }
  return new cljs.core.async.t15938(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t15944 !== "undefined") {
  } else {
    cljs.core.async.t15944 = function(cb, flag, alt_handler, meta15945) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta15945 = meta15945;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15944.cljs$lang$type = true;
    cljs.core.async.t15944.cljs$lang$ctorStr = "cljs.core.async/t15944";
    cljs.core.async.t15944.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15944");
    };
    cljs.core.async.t15944.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15944.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t15944.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t15944.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15946) {
      var self__ = this;
      var _15946__$1 = this;
      return self__.meta15945;
    };
    cljs.core.async.t15944.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15946, meta15945__$1) {
      var self__ = this;
      var _15946__$1 = this;
      return new cljs.core.async.t15944(self__.cb, self__.flag, self__.alt_handler, meta15945__$1);
    };
    cljs.core.async.__GT_t15944 = function __GT_t15944(cb__$1, flag__$1, alt_handler__$1, meta15945) {
      return new cljs.core.async.t15944(cb__$1, flag__$1, alt_handler__$1, meta15945);
    };
  }
  return new cljs.core.async.t15944(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__15947_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15947_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3400__auto__ = wport;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__15948 = i + 1;
          i = G__15948;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3400__auto__ = ret;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3388__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3388__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3388__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__15949) {
    var map__15951 = p__15949;
    var map__15951__$1 = cljs.core.seq_QMARK_.call(null, map__15951) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15951) : map__15951;
    var opts = map__15951__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__15949 = null;
    if (arguments.length > 1) {
      p__15949 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__15949);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__15952) {
    var ports = cljs.core.first(arglist__15952);
    var p__15949 = cljs.core.rest(arglist__15952);
    return alts_BANG___delegate(ports, p__15949);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t15960 !== "undefined") {
  } else {
    cljs.core.async.t15960 = function(ch, f, map_LT_, meta15961) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta15961 = meta15961;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15960.cljs$lang$type = true;
    cljs.core.async.t15960.cljs$lang$ctorStr = "cljs.core.async/t15960";
    cljs.core.async.t15960.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15960");
    };
    cljs.core.async.t15960.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t15960.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t15960.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t15960.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t15963 !== "undefined") {
        } else {
          cljs.core.async.t15963 = function(fn1, _, meta15961, ch, f, map_LT_, meta15964) {
            this.fn1 = fn1;
            this._ = _;
            this.meta15961 = meta15961;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta15964 = meta15964;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t15963.cljs$lang$type = true;
          cljs.core.async.t15963.cljs$lang$ctorStr = "cljs.core.async/t15963";
          cljs.core.async.t15963.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
            return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15963");
          };
          cljs.core.async.t15963.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t15963.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t15963.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t15963.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__15953_SHARP_) {
                return f1.call(null, p1__15953_SHARP_ == null ? null : self__.f.call(null, p1__15953_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t15963.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15965) {
            var self__ = this;
            var _15965__$1 = this;
            return self__.meta15964;
          };
          cljs.core.async.t15963.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15965, meta15964__$1) {
            var self__ = this;
            var _15965__$1 = this;
            return new cljs.core.async.t15963(self__.fn1, self__._, self__.meta15961, self__.ch, self__.f, self__.map_LT_, meta15964__$1);
          };
          cljs.core.async.__GT_t15963 = function __GT_t15963(fn1__$1, ___$2, meta15961__$1, ch__$2, f__$2, map_LT___$2, meta15964) {
            return new cljs.core.async.t15963(fn1__$1, ___$2, meta15961__$1, ch__$2, f__$2, map_LT___$2, meta15964);
          };
        }
        return new cljs.core.async.t15963(fn1, ___$1, self__.meta15961, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3388__auto__ = ret;
        if (cljs.core.truth_(and__3388__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3388__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t15960.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t15960.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t15960.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15962) {
      var self__ = this;
      var _15962__$1 = this;
      return self__.meta15961;
    };
    cljs.core.async.t15960.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15962, meta15961__$1) {
      var self__ = this;
      var _15962__$1 = this;
      return new cljs.core.async.t15960(self__.ch, self__.f, self__.map_LT_, meta15961__$1);
    };
    cljs.core.async.__GT_t15960 = function __GT_t15960(ch__$1, f__$1, map_LT___$1, meta15961) {
      return new cljs.core.async.t15960(ch__$1, f__$1, map_LT___$1, meta15961);
    };
  }
  return new cljs.core.async.t15960(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t15969 !== "undefined") {
  } else {
    cljs.core.async.t15969 = function(ch, f, map_GT_, meta15970) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta15970 = meta15970;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15969.cljs$lang$type = true;
    cljs.core.async.t15969.cljs$lang$ctorStr = "cljs.core.async/t15969";
    cljs.core.async.t15969.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15969");
    };
    cljs.core.async.t15969.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t15969.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t15969.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t15969.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t15969.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t15969.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t15969.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15971) {
      var self__ = this;
      var _15971__$1 = this;
      return self__.meta15970;
    };
    cljs.core.async.t15969.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15971, meta15970__$1) {
      var self__ = this;
      var _15971__$1 = this;
      return new cljs.core.async.t15969(self__.ch, self__.f, self__.map_GT_, meta15970__$1);
    };
    cljs.core.async.__GT_t15969 = function __GT_t15969(ch__$1, f__$1, map_GT___$1, meta15970) {
      return new cljs.core.async.t15969(ch__$1, f__$1, map_GT___$1, meta15970);
    };
  }
  return new cljs.core.async.t15969(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t15975 !== "undefined") {
  } else {
    cljs.core.async.t15975 = function(ch, p, filter_GT_, meta15976) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta15976 = meta15976;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15975.cljs$lang$type = true;
    cljs.core.async.t15975.cljs$lang$ctorStr = "cljs.core.async/t15975";
    cljs.core.async.t15975.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15975");
    };
    cljs.core.async.t15975.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t15975.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t15975.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t15975.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t15975.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t15975.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t15975.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15977) {
      var self__ = this;
      var _15977__$1 = this;
      return self__.meta15976;
    };
    cljs.core.async.t15975.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15977, meta15976__$1) {
      var self__ = this;
      var _15977__$1 = this;
      return new cljs.core.async.t15975(self__.ch, self__.p, self__.filter_GT_, meta15976__$1);
    };
    cljs.core.async.__GT_t15975 = function __GT_t15975(ch__$1, p__$1, filter_GT___$1, meta15976) {
      return new cljs.core.async.t15975(ch__$1, p__$1, filter_GT___$1, meta15976);
    };
  }
  return new cljs.core.async.t15975(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5408__auto___16052 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_16035) {
          var state_val_16036 = state_16035[1];
          if (state_val_16036 === 1) {
            var state_16035__$1 = state_16035;
            var statearr_16037_16053 = state_16035__$1;
            statearr_16037_16053[2] = null;
            statearr_16037_16053[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16036 === 2) {
              var state_16035__$1 = state_16035;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16035__$1, 4, ch);
            } else {
              if (state_val_16036 === 3) {
                var inst_16033 = state_16035[2];
                var state_16035__$1 = state_16035;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16035__$1, inst_16033);
              } else {
                if (state_val_16036 === 4) {
                  var inst_16017 = state_16035[5];
                  var inst_16017__$1 = state_16035[2];
                  var inst_16018 = inst_16017__$1 == null;
                  var state_16035__$1 = function() {
                    var statearr_16038 = state_16035;
                    statearr_16038[5] = inst_16017__$1;
                    return statearr_16038;
                  }();
                  if (cljs.core.truth_(inst_16018)) {
                    var statearr_16039_16054 = state_16035__$1;
                    statearr_16039_16054[1] = 5;
                  } else {
                    var statearr_16040_16055 = state_16035__$1;
                    statearr_16040_16055[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16036 === 5) {
                    var inst_16020 = cljs.core.async.close_BANG_.call(null, out);
                    var state_16035__$1 = state_16035;
                    var statearr_16041_16056 = state_16035__$1;
                    statearr_16041_16056[2] = inst_16020;
                    statearr_16041_16056[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16036 === 6) {
                      var inst_16017 = state_16035[5];
                      var inst_16022 = p.call(null, inst_16017);
                      var state_16035__$1 = state_16035;
                      if (cljs.core.truth_(inst_16022)) {
                        var statearr_16042_16057 = state_16035__$1;
                        statearr_16042_16057[1] = 8;
                      } else {
                        var statearr_16043_16058 = state_16035__$1;
                        statearr_16043_16058[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16036 === 7) {
                        var inst_16031 = state_16035[2];
                        var state_16035__$1 = state_16035;
                        var statearr_16044_16059 = state_16035__$1;
                        statearr_16044_16059[2] = inst_16031;
                        statearr_16044_16059[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16036 === 8) {
                          var inst_16017 = state_16035[5];
                          var state_16035__$1 = state_16035;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16035__$1, 11, out, inst_16017);
                        } else {
                          if (state_val_16036 === 9) {
                            var state_16035__$1 = state_16035;
                            var statearr_16045_16060 = state_16035__$1;
                            statearr_16045_16060[2] = null;
                            statearr_16045_16060[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16036 === 10) {
                              var inst_16028 = state_16035[2];
                              var state_16035__$1 = function() {
                                var statearr_16046 = state_16035;
                                statearr_16046[6] = inst_16028;
                                return statearr_16046;
                              }();
                              var statearr_16047_16061 = state_16035__$1;
                              statearr_16047_16061[2] = null;
                              statearr_16047_16061[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16036 === 11) {
                                var inst_16025 = state_16035[2];
                                var state_16035__$1 = state_16035;
                                var statearr_16048_16062 = state_16035__$1;
                                statearr_16048_16062[2] = inst_16025;
                                statearr_16048_16062[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_16050 = [null, null, null, null, null, null, null];
              statearr_16050[0] = state_machine__5396__auto__;
              statearr_16050[1] = 1;
              return statearr_16050;
            };
            var state_machine__5396__auto____1 = function(state_16035) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_16035);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_16035) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_16035);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_16051 = f__5409__auto__.call(null);
        statearr_16051[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___16052;
        return statearr_16051;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_16210) {
        var state_val_16211 = state_16210[1];
        if (state_val_16211 === 1) {
          var state_16210__$1 = state_16210;
          var statearr_16212_16245 = state_16210__$1;
          statearr_16212_16245[2] = null;
          statearr_16212_16245[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_16211 === 2) {
            var state_16210__$1 = state_16210;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16210__$1, 4, in$);
          } else {
            if (state_val_16211 === 3) {
              var inst_16208 = state_16210[2];
              var state_16210__$1 = state_16210;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16210__$1, inst_16208);
            } else {
              if (state_val_16211 === 4) {
                var inst_16156 = state_16210[5];
                var inst_16156__$1 = state_16210[2];
                var inst_16157 = inst_16156__$1 == null;
                var state_16210__$1 = function() {
                  var statearr_16213 = state_16210;
                  statearr_16213[5] = inst_16156__$1;
                  return statearr_16213;
                }();
                if (cljs.core.truth_(inst_16157)) {
                  var statearr_16214_16246 = state_16210__$1;
                  statearr_16214_16246[1] = 5;
                } else {
                  var statearr_16215_16247 = state_16210__$1;
                  statearr_16215_16247[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16211 === 5) {
                  var inst_16159 = cljs.core.async.close_BANG_.call(null, out);
                  var state_16210__$1 = state_16210;
                  var statearr_16216_16248 = state_16210__$1;
                  statearr_16216_16248[2] = inst_16159;
                  statearr_16216_16248[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16211 === 6) {
                    var inst_16156 = state_16210[5];
                    var inst_16161 = f.call(null, inst_16156);
                    var inst_16166 = cljs.core.seq.call(null, inst_16161);
                    var inst_16167 = inst_16166;
                    var inst_16168 = null;
                    var inst_16169 = 0;
                    var inst_16170 = 0;
                    var state_16210__$1 = function() {
                      var statearr_16217 = state_16210;
                      statearr_16217[6] = inst_16170;
                      statearr_16217[7] = inst_16169;
                      statearr_16217[8] = inst_16167;
                      statearr_16217[9] = inst_16168;
                      return statearr_16217;
                    }();
                    var statearr_16218_16249 = state_16210__$1;
                    statearr_16218_16249[2] = null;
                    statearr_16218_16249[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16211 === 7) {
                      var inst_16206 = state_16210[2];
                      var state_16210__$1 = state_16210;
                      var statearr_16219_16250 = state_16210__$1;
                      statearr_16219_16250[2] = inst_16206;
                      statearr_16219_16250[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16211 === 8) {
                        var inst_16170 = state_16210[6];
                        var inst_16169 = state_16210[7];
                        var inst_16172 = inst_16170 < inst_16169;
                        var inst_16173 = inst_16172;
                        var state_16210__$1 = state_16210;
                        if (cljs.core.truth_(inst_16173)) {
                          var statearr_16220_16251 = state_16210__$1;
                          statearr_16220_16251[1] = 10;
                        } else {
                          var statearr_16221_16252 = state_16210__$1;
                          statearr_16221_16252[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16211 === 9) {
                          var inst_16203 = state_16210[2];
                          var state_16210__$1 = function() {
                            var statearr_16222 = state_16210;
                            statearr_16222[10] = inst_16203;
                            return statearr_16222;
                          }();
                          var statearr_16223_16253 = state_16210__$1;
                          statearr_16223_16253[2] = null;
                          statearr_16223_16253[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16211 === 10) {
                            var inst_16170 = state_16210[6];
                            var inst_16168 = state_16210[9];
                            var inst_16175 = cljs.core._nth.call(null, inst_16168, inst_16170);
                            var state_16210__$1 = state_16210;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16210__$1, 13, out, inst_16175);
                          } else {
                            if (state_val_16211 === 11) {
                              var inst_16167 = state_16210[8];
                              var inst_16181 = state_16210[11];
                              var inst_16181__$1 = cljs.core.seq.call(null, inst_16167);
                              var state_16210__$1 = function() {
                                var statearr_16227 = state_16210;
                                statearr_16227[11] = inst_16181__$1;
                                return statearr_16227;
                              }();
                              if (inst_16181__$1) {
                                var statearr_16228_16254 = state_16210__$1;
                                statearr_16228_16254[1] = 14;
                              } else {
                                var statearr_16229_16255 = state_16210__$1;
                                statearr_16229_16255[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16211 === 12) {
                                var inst_16201 = state_16210[2];
                                var state_16210__$1 = state_16210;
                                var statearr_16230_16256 = state_16210__$1;
                                statearr_16230_16256[2] = inst_16201;
                                statearr_16230_16256[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_16211 === 13) {
                                  var inst_16170 = state_16210[6];
                                  var inst_16169 = state_16210[7];
                                  var inst_16167 = state_16210[8];
                                  var inst_16168 = state_16210[9];
                                  var inst_16177 = state_16210[2];
                                  var inst_16178 = inst_16170 + 1;
                                  var tmp16224 = inst_16169;
                                  var tmp16225 = inst_16167;
                                  var tmp16226 = inst_16168;
                                  var inst_16167__$1 = tmp16225;
                                  var inst_16168__$1 = tmp16226;
                                  var inst_16169__$1 = tmp16224;
                                  var inst_16170__$1 = inst_16178;
                                  var state_16210__$1 = function() {
                                    var statearr_16231 = state_16210;
                                    statearr_16231[6] = inst_16170__$1;
                                    statearr_16231[7] = inst_16169__$1;
                                    statearr_16231[8] = inst_16167__$1;
                                    statearr_16231[9] = inst_16168__$1;
                                    statearr_16231[12] = inst_16177;
                                    return statearr_16231;
                                  }();
                                  var statearr_16232_16257 = state_16210__$1;
                                  statearr_16232_16257[2] = null;
                                  statearr_16232_16257[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_16211 === 14) {
                                    var inst_16181 = state_16210[11];
                                    var inst_16183 = cljs.core.chunked_seq_QMARK_.call(null, inst_16181);
                                    var state_16210__$1 = state_16210;
                                    if (inst_16183) {
                                      var statearr_16233_16258 = state_16210__$1;
                                      statearr_16233_16258[1] = 17;
                                    } else {
                                      var statearr_16234_16259 = state_16210__$1;
                                      statearr_16234_16259[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_16211 === 15) {
                                      var state_16210__$1 = state_16210;
                                      var statearr_16235_16260 = state_16210__$1;
                                      statearr_16235_16260[2] = null;
                                      statearr_16235_16260[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_16211 === 16) {
                                        var inst_16199 = state_16210[2];
                                        var state_16210__$1 = state_16210;
                                        var statearr_16236_16261 = state_16210__$1;
                                        statearr_16236_16261[2] = inst_16199;
                                        statearr_16236_16261[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_16211 === 17) {
                                          var inst_16181 = state_16210[11];
                                          var inst_16185 = cljs.core.chunk_first.call(null, inst_16181);
                                          var inst_16186 = cljs.core.chunk_rest.call(null, inst_16181);
                                          var inst_16187 = cljs.core.count.call(null, inst_16185);
                                          var inst_16167 = inst_16186;
                                          var inst_16168 = inst_16185;
                                          var inst_16169 = inst_16187;
                                          var inst_16170 = 0;
                                          var state_16210__$1 = function() {
                                            var statearr_16237 = state_16210;
                                            statearr_16237[6] = inst_16170;
                                            statearr_16237[7] = inst_16169;
                                            statearr_16237[8] = inst_16167;
                                            statearr_16237[9] = inst_16168;
                                            return statearr_16237;
                                          }();
                                          var statearr_16238_16262 = state_16210__$1;
                                          statearr_16238_16262[2] = null;
                                          statearr_16238_16262[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_16211 === 18) {
                                            var inst_16181 = state_16210[11];
                                            var inst_16190 = cljs.core.first.call(null, inst_16181);
                                            var state_16210__$1 = state_16210;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16210__$1, 20, out, inst_16190);
                                          } else {
                                            if (state_val_16211 === 19) {
                                              var inst_16196 = state_16210[2];
                                              var state_16210__$1 = state_16210;
                                              var statearr_16239_16263 = state_16210__$1;
                                              statearr_16239_16263[2] = inst_16196;
                                              statearr_16239_16263[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_16211 === 20) {
                                                var inst_16181 = state_16210[11];
                                                var inst_16192 = state_16210[2];
                                                var inst_16193 = cljs.core.next.call(null, inst_16181);
                                                var inst_16167 = inst_16193;
                                                var inst_16168 = null;
                                                var inst_16169 = 0;
                                                var inst_16170 = 0;
                                                var state_16210__$1 = function() {
                                                  var statearr_16240 = state_16210;
                                                  statearr_16240[6] = inst_16170;
                                                  statearr_16240[13] = inst_16192;
                                                  statearr_16240[7] = inst_16169;
                                                  statearr_16240[8] = inst_16167;
                                                  statearr_16240[9] = inst_16168;
                                                  return statearr_16240;
                                                }();
                                                var statearr_16241_16264 = state_16210__$1;
                                                statearr_16241_16264[2] = null;
                                                statearr_16241_16264[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_16243 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_16243[0] = state_machine__5396__auto__;
            statearr_16243[1] = 1;
            return statearr_16243;
          };
          var state_machine__5396__auto____1 = function(state_16210) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_16210);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_16210) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_16210);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_16244 = f__5409__auto__.call(null);
      statearr_16244[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
      return statearr_16244;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return c__5408__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5408__auto___16337 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_16320) {
          var state_val_16321 = state_16320[1];
          if (state_val_16321 === 1) {
            var state_16320__$1 = state_16320;
            var statearr_16322_16338 = state_16320__$1;
            statearr_16322_16338[2] = null;
            statearr_16322_16338[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16321 === 2) {
              var state_16320__$1 = state_16320;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16320__$1, 4, from);
            } else {
              if (state_val_16321 === 3) {
                var inst_16318 = state_16320[2];
                var state_16320__$1 = state_16320;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16320__$1, inst_16318);
              } else {
                if (state_val_16321 === 4) {
                  var inst_16303 = state_16320[5];
                  var inst_16303__$1 = state_16320[2];
                  var inst_16304 = inst_16303__$1 == null;
                  var state_16320__$1 = function() {
                    var statearr_16323 = state_16320;
                    statearr_16323[5] = inst_16303__$1;
                    return statearr_16323;
                  }();
                  if (cljs.core.truth_(inst_16304)) {
                    var statearr_16324_16339 = state_16320__$1;
                    statearr_16324_16339[1] = 5;
                  } else {
                    var statearr_16325_16340 = state_16320__$1;
                    statearr_16325_16340[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16321 === 5) {
                    var state_16320__$1 = state_16320;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_16326_16341 = state_16320__$1;
                      statearr_16326_16341[1] = 8;
                    } else {
                      var statearr_16327_16342 = state_16320__$1;
                      statearr_16327_16342[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16321 === 6) {
                      var inst_16303 = state_16320[5];
                      var state_16320__$1 = state_16320;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16320__$1, 11, to, inst_16303);
                    } else {
                      if (state_val_16321 === 7) {
                        var inst_16316 = state_16320[2];
                        var state_16320__$1 = state_16320;
                        var statearr_16328_16343 = state_16320__$1;
                        statearr_16328_16343[2] = inst_16316;
                        statearr_16328_16343[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16321 === 8) {
                          var inst_16307 = cljs.core.async.close_BANG_.call(null, to);
                          var state_16320__$1 = state_16320;
                          var statearr_16329_16344 = state_16320__$1;
                          statearr_16329_16344[2] = inst_16307;
                          statearr_16329_16344[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16321 === 9) {
                            var state_16320__$1 = state_16320;
                            var statearr_16330_16345 = state_16320__$1;
                            statearr_16330_16345[2] = null;
                            statearr_16330_16345[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16321 === 10) {
                              var inst_16310 = state_16320[2];
                              var state_16320__$1 = state_16320;
                              var statearr_16331_16346 = state_16320__$1;
                              statearr_16331_16346[2] = inst_16310;
                              statearr_16331_16346[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16321 === 11) {
                                var inst_16313 = state_16320[2];
                                var state_16320__$1 = function() {
                                  var statearr_16332 = state_16320;
                                  statearr_16332[6] = inst_16313;
                                  return statearr_16332;
                                }();
                                var statearr_16333_16347 = state_16320__$1;
                                statearr_16333_16347[2] = null;
                                statearr_16333_16347[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_16335 = [null, null, null, null, null, null, null];
              statearr_16335[0] = state_machine__5396__auto__;
              statearr_16335[1] = 1;
              return statearr_16335;
            };
            var state_machine__5396__auto____1 = function(state_16320) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_16320);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_16320) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_16320);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_16336 = f__5409__auto__.call(null);
        statearr_16336[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___16337;
        return statearr_16336;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5408__auto___16426 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_16408) {
          var state_val_16409 = state_16408[1];
          if (state_val_16409 === 1) {
            var state_16408__$1 = state_16408;
            var statearr_16410_16427 = state_16408__$1;
            statearr_16410_16427[2] = null;
            statearr_16410_16427[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16409 === 2) {
              var state_16408__$1 = state_16408;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16408__$1, 4, ch);
            } else {
              if (state_val_16409 === 3) {
                var inst_16406 = state_16408[2];
                var state_16408__$1 = state_16408;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16408__$1, inst_16406);
              } else {
                if (state_val_16409 === 4) {
                  var inst_16389 = state_16408[5];
                  var inst_16389__$1 = state_16408[2];
                  var inst_16390 = inst_16389__$1 == null;
                  var state_16408__$1 = function() {
                    var statearr_16411 = state_16408;
                    statearr_16411[5] = inst_16389__$1;
                    return statearr_16411;
                  }();
                  if (cljs.core.truth_(inst_16390)) {
                    var statearr_16412_16428 = state_16408__$1;
                    statearr_16412_16428[1] = 5;
                  } else {
                    var statearr_16413_16429 = state_16408__$1;
                    statearr_16413_16429[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16409 === 5) {
                    var inst_16392 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_16393 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_16408__$1 = function() {
                      var statearr_16414 = state_16408;
                      statearr_16414[6] = inst_16392;
                      return statearr_16414;
                    }();
                    var statearr_16415_16430 = state_16408__$1;
                    statearr_16415_16430[2] = inst_16393;
                    statearr_16415_16430[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16409 === 6) {
                      var inst_16389 = state_16408[5];
                      var inst_16395 = p.call(null, inst_16389);
                      var state_16408__$1 = state_16408;
                      if (cljs.core.truth_(inst_16395)) {
                        var statearr_16416_16431 = state_16408__$1;
                        statearr_16416_16431[1] = 9;
                      } else {
                        var statearr_16417_16432 = state_16408__$1;
                        statearr_16417_16432[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16409 === 7) {
                        var inst_16404 = state_16408[2];
                        var state_16408__$1 = state_16408;
                        var statearr_16418_16433 = state_16408__$1;
                        statearr_16418_16433[2] = inst_16404;
                        statearr_16418_16433[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16409 === 8) {
                          var inst_16401 = state_16408[2];
                          var state_16408__$1 = function() {
                            var statearr_16419 = state_16408;
                            statearr_16419[7] = inst_16401;
                            return statearr_16419;
                          }();
                          var statearr_16420_16434 = state_16408__$1;
                          statearr_16420_16434[2] = null;
                          statearr_16420_16434[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16409 === 9) {
                            var state_16408__$1 = state_16408;
                            var statearr_16421_16435 = state_16408__$1;
                            statearr_16421_16435[2] = tc;
                            statearr_16421_16435[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16409 === 10) {
                              var state_16408__$1 = state_16408;
                              var statearr_16422_16436 = state_16408__$1;
                              statearr_16422_16436[2] = fc;
                              statearr_16422_16436[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16409 === 11) {
                                var inst_16389 = state_16408[5];
                                var inst_16399 = state_16408[2];
                                var state_16408__$1 = state_16408;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16408__$1, 8, inst_16399, inst_16389);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_16424 = [null, null, null, null, null, null, null, null];
              statearr_16424[0] = state_machine__5396__auto__;
              statearr_16424[1] = 1;
              return statearr_16424;
            };
            var state_machine__5396__auto____1 = function(state_16408) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_16408);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_16408) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_16408);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_16425 = f__5409__auto__.call(null);
        statearr_16425[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___16426;
        return statearr_16425;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_16479) {
        var state_val_16480 = state_16479[1];
        if (state_val_16480 === 7) {
          var inst_16475 = state_16479[2];
          var state_16479__$1 = state_16479;
          var statearr_16481_16493 = state_16479__$1;
          statearr_16481_16493[2] = inst_16475;
          statearr_16481_16493[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_16480 === 6) {
            var inst_16465 = state_16479[5];
            var inst_16468 = state_16479[6];
            var inst_16472 = f.call(null, inst_16465, inst_16468);
            var inst_16465__$1 = inst_16472;
            var state_16479__$1 = function() {
              var statearr_16482 = state_16479;
              statearr_16482[5] = inst_16465__$1;
              return statearr_16482;
            }();
            var statearr_16483_16494 = state_16479__$1;
            statearr_16483_16494[2] = null;
            statearr_16483_16494[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16480 === 5) {
              var inst_16465 = state_16479[5];
              var state_16479__$1 = state_16479;
              var statearr_16484_16495 = state_16479__$1;
              statearr_16484_16495[2] = inst_16465;
              statearr_16484_16495[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16480 === 4) {
                var inst_16468 = state_16479[6];
                var inst_16468__$1 = state_16479[2];
                var inst_16469 = inst_16468__$1 == null;
                var state_16479__$1 = function() {
                  var statearr_16485 = state_16479;
                  statearr_16485[6] = inst_16468__$1;
                  return statearr_16485;
                }();
                if (cljs.core.truth_(inst_16469)) {
                  var statearr_16486_16496 = state_16479__$1;
                  statearr_16486_16496[1] = 5;
                } else {
                  var statearr_16487_16497 = state_16479__$1;
                  statearr_16487_16497[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16480 === 3) {
                  var inst_16477 = state_16479[2];
                  var state_16479__$1 = state_16479;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16479__$1, inst_16477);
                } else {
                  if (state_val_16480 === 2) {
                    var state_16479__$1 = state_16479;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16479__$1, 4, ch);
                  } else {
                    if (state_val_16480 === 1) {
                      var inst_16465 = init;
                      var state_16479__$1 = function() {
                        var statearr_16488 = state_16479;
                        statearr_16488[5] = inst_16465;
                        return statearr_16488;
                      }();
                      var statearr_16489_16498 = state_16479__$1;
                      statearr_16489_16498[2] = null;
                      statearr_16489_16498[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_16491 = [null, null, null, null, null, null, null];
            statearr_16491[0] = state_machine__5396__auto__;
            statearr_16491[1] = 1;
            return statearr_16491;
          };
          var state_machine__5396__auto____1 = function(state_16479) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_16479);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_16479) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_16479);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_16492 = f__5409__auto__.call(null);
      statearr_16492[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
      return statearr_16492;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return c__5408__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_16556) {
          var state_val_16557 = state_16556[1];
          if (state_val_16557 === 1) {
            var inst_16536 = cljs.core.seq.call(null, coll);
            var inst_16537 = inst_16536;
            var state_16556__$1 = function() {
              var statearr_16558 = state_16556;
              statearr_16558[5] = inst_16537;
              return statearr_16558;
            }();
            var statearr_16559_16573 = state_16556__$1;
            statearr_16559_16573[2] = null;
            statearr_16559_16573[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16557 === 2) {
              var inst_16537 = state_16556[5];
              var state_16556__$1 = state_16556;
              if (cljs.core.truth_(inst_16537)) {
                var statearr_16560_16574 = state_16556__$1;
                statearr_16560_16574[1] = 4;
              } else {
                var statearr_16561_16575 = state_16556__$1;
                statearr_16561_16575[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16557 === 3) {
                var inst_16554 = state_16556[2];
                var state_16556__$1 = state_16556;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16556__$1, inst_16554);
              } else {
                if (state_val_16557 === 4) {
                  var inst_16537 = state_16556[5];
                  var inst_16540 = cljs.core.first.call(null, inst_16537);
                  var state_16556__$1 = state_16556;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16556__$1, 7, ch, inst_16540);
                } else {
                  if (state_val_16557 === 5) {
                    var state_16556__$1 = state_16556;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_16562_16576 = state_16556__$1;
                      statearr_16562_16576[1] = 8;
                    } else {
                      var statearr_16563_16577 = state_16556__$1;
                      statearr_16563_16577[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16557 === 6) {
                      var inst_16552 = state_16556[2];
                      var state_16556__$1 = state_16556;
                      var statearr_16564_16578 = state_16556__$1;
                      statearr_16564_16578[2] = inst_16552;
                      statearr_16564_16578[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16557 === 7) {
                        var inst_16537 = state_16556[5];
                        var inst_16542 = state_16556[2];
                        var inst_16543 = cljs.core.next.call(null, inst_16537);
                        var inst_16537__$1 = inst_16543;
                        var state_16556__$1 = function() {
                          var statearr_16565 = state_16556;
                          statearr_16565[6] = inst_16542;
                          statearr_16565[5] = inst_16537__$1;
                          return statearr_16565;
                        }();
                        var statearr_16566_16579 = state_16556__$1;
                        statearr_16566_16579[2] = null;
                        statearr_16566_16579[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16557 === 8) {
                          var inst_16547 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_16556__$1 = state_16556;
                          var statearr_16567_16580 = state_16556__$1;
                          statearr_16567_16580[2] = inst_16547;
                          statearr_16567_16580[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16557 === 9) {
                            var state_16556__$1 = state_16556;
                            var statearr_16568_16581 = state_16556__$1;
                            statearr_16568_16581[2] = null;
                            statearr_16568_16581[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16557 === 10) {
                              var inst_16550 = state_16556[2];
                              var state_16556__$1 = state_16556;
                              var statearr_16569_16582 = state_16556__$1;
                              statearr_16569_16582[2] = inst_16550;
                              statearr_16569_16582[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_16571 = [null, null, null, null, null, null, null];
              statearr_16571[0] = state_machine__5396__auto__;
              statearr_16571[1] = 1;
              return statearr_16571;
            };
            var state_machine__5396__auto____1 = function(state_16556) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_16556);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_16556) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_16556);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_16572 = f__5409__auto__.call(null);
        statearr_16572[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
        return statearr_16572;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return c__5408__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj16584 = {};
  return obj16584;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3388__auto__ = _;
    if (and__3388__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4021__auto__ = _ == null ? null : _;
    return function() {
      var or__3400__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj16586 = {};
  return obj16586;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t16799 !== "undefined") {
    } else {
      cljs.core.async.t16799 = function(cs, ch, mult, meta16800) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta16800 = meta16800;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t16799.cljs$lang$type = true;
      cljs.core.async.t16799.cljs$lang$ctorStr = "cljs.core.async/t16799";
      cljs.core.async.t16799.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t16799");
        };
      }(cs);
      cljs.core.async.t16799.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t16799.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t16799.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t16799.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t16799.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t16799.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t16799.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_16801) {
          var self__ = this;
          var _16801__$1 = this;
          return self__.meta16800;
        };
      }(cs);
      cljs.core.async.t16799.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_16801, meta16800__$1) {
          var self__ = this;
          var _16801__$1 = this;
          return new cljs.core.async.t16799(self__.cs, self__.ch, self__.mult, meta16800__$1);
        };
      }(cs);
      cljs.core.async.__GT_t16799 = function(cs) {
        return function __GT_t16799(cs__$1, ch__$1, mult__$1, meta16800) {
          return new cljs.core.async.t16799(cs__$1, ch__$1, mult__$1, meta16800);
        };
      }(cs);
    }
    return new cljs.core.async.t16799(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5408__auto___17011 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_16929) {
        var state_val_16930 = state_16929[1];
        if (state_val_16930 === 32) {
          try {
            var inst_16804 = state_16929[5];
            var inst_16880 = state_16929[6];
            var inst_16886 = cljs.core.async.put_BANG_.call(null, inst_16880, inst_16804, done);
            var state_16929__$1 = state_16929;
            var statearr_16933_17012 = state_16929__$1;
            statearr_16933_17012[2] = inst_16886;
            statearr_16933_17012[1] = 30;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } catch (e16931) {
            if (e16931 instanceof Object) {
              var ex__5389__auto__ = e16931;
              var statearr_16932_17013 = state_16929;
              statearr_16932_17013[1] = 31;
              statearr_16932_17013[2] = ex__5389__auto__;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e16931;
              } else {
                return null;
              }
            }
          }
        } else {
          if (state_val_16930 === 1) {
            var state_16929__$1 = state_16929;
            var statearr_16934_17014 = state_16929__$1;
            statearr_16934_17014[2] = null;
            statearr_16934_17014[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16930 === 33) {
              var inst_16892 = state_16929[7];
              var inst_16894 = cljs.core.chunked_seq_QMARK_.call(null, inst_16892);
              var state_16929__$1 = state_16929;
              if (inst_16894) {
                var statearr_16935_17015 = state_16929__$1;
                statearr_16935_17015[1] = 36;
              } else {
                var statearr_16936_17016 = state_16929__$1;
                statearr_16936_17016[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16930 === 2) {
                var state_16929__$1 = state_16929;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16929__$1, 4, ch);
              } else {
                if (state_val_16930 === 34) {
                  var state_16929__$1 = state_16929;
                  var statearr_16937_17017 = state_16929__$1;
                  statearr_16937_17017[2] = null;
                  statearr_16937_17017[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16930 === 3) {
                    var inst_16927 = state_16929[2];
                    var state_16929__$1 = state_16929;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16929__$1, inst_16927);
                  } else {
                    if (state_val_16930 === 35) {
                      var inst_16916 = state_16929[2];
                      var state_16929__$1 = state_16929;
                      var statearr_16938_17018 = state_16929__$1;
                      statearr_16938_17018[2] = inst_16916;
                      statearr_16938_17018[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16930 === 4) {
                        var inst_16804 = state_16929[5];
                        var inst_16804__$1 = state_16929[2];
                        var inst_16805 = inst_16804__$1 == null;
                        var state_16929__$1 = function() {
                          var statearr_16939 = state_16929;
                          statearr_16939[5] = inst_16804__$1;
                          return statearr_16939;
                        }();
                        if (cljs.core.truth_(inst_16805)) {
                          var statearr_16940_17019 = state_16929__$1;
                          statearr_16940_17019[1] = 5;
                        } else {
                          var statearr_16941_17020 = state_16929__$1;
                          statearr_16941_17020[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16930 === 36) {
                          var inst_16892 = state_16929[7];
                          var inst_16896 = cljs.core.chunk_first.call(null, inst_16892);
                          var inst_16897 = cljs.core.chunk_rest.call(null, inst_16892);
                          var inst_16898 = cljs.core.count.call(null, inst_16896);
                          var inst_16872 = inst_16897;
                          var inst_16873 = inst_16896;
                          var inst_16874 = inst_16898;
                          var inst_16875 = 0;
                          var state_16929__$1 = function() {
                            var statearr_16942 = state_16929;
                            statearr_16942[8] = inst_16875;
                            statearr_16942[9] = inst_16873;
                            statearr_16942[10] = inst_16874;
                            statearr_16942[11] = inst_16872;
                            return statearr_16942;
                          }();
                          var statearr_16943_17021 = state_16929__$1;
                          statearr_16943_17021[2] = null;
                          statearr_16943_17021[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16930 === 5) {
                            var inst_16811 = cljs.core.deref.call(null, cs);
                            var inst_16812 = cljs.core.seq.call(null, inst_16811);
                            var inst_16813 = inst_16812;
                            var inst_16814 = null;
                            var inst_16815 = 0;
                            var inst_16816 = 0;
                            var state_16929__$1 = function() {
                              var statearr_16944 = state_16929;
                              statearr_16944[12] = inst_16813;
                              statearr_16944[13] = inst_16814;
                              statearr_16944[14] = inst_16815;
                              statearr_16944[15] = inst_16816;
                              return statearr_16944;
                            }();
                            var statearr_16945_17022 = state_16929__$1;
                            statearr_16945_17022[2] = null;
                            statearr_16945_17022[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16930 === 37) {
                              var inst_16892 = state_16929[7];
                              var inst_16901 = cljs.core.first.call(null, inst_16892);
                              var state_16929__$1 = function() {
                                var statearr_16946 = state_16929;
                                statearr_16946[16] = inst_16901;
                                return statearr_16946;
                              }();
                              var statearr_16947_17023 = state_16929__$1;
                              statearr_16947_17023[2] = null;
                              statearr_16947_17023[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16930 === 6) {
                                var inst_16863 = cljs.core.deref.call(null, cs);
                                var inst_16864 = cljs.core.keys.call(null, inst_16863);
                                var inst_16865 = cljs.core.count.call(null, inst_16864);
                                var inst_16866 = cljs.core.reset_BANG_.call(null, dctr, inst_16865);
                                var inst_16871 = cljs.core.seq.call(null, inst_16864);
                                var inst_16872 = inst_16871;
                                var inst_16873 = null;
                                var inst_16874 = 0;
                                var inst_16875 = 0;
                                var state_16929__$1 = function() {
                                  var statearr_16948 = state_16929;
                                  statearr_16948[8] = inst_16875;
                                  statearr_16948[9] = inst_16873;
                                  statearr_16948[10] = inst_16874;
                                  statearr_16948[11] = inst_16872;
                                  statearr_16948[17] = inst_16866;
                                  return statearr_16948;
                                }();
                                var statearr_16949_17024 = state_16929__$1;
                                statearr_16949_17024[2] = null;
                                statearr_16949_17024[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_16930 === 38) {
                                  var inst_16913 = state_16929[2];
                                  var state_16929__$1 = state_16929;
                                  var statearr_16950_17025 = state_16929__$1;
                                  statearr_16950_17025[2] = inst_16913;
                                  statearr_16950_17025[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_16930 === 7) {
                                    var inst_16925 = state_16929[2];
                                    var state_16929__$1 = state_16929;
                                    var statearr_16951_17026 = state_16929__$1;
                                    statearr_16951_17026[2] = inst_16925;
                                    statearr_16951_17026[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_16930 === 39) {
                                      var inst_16892 = state_16929[7];
                                      var inst_16909 = state_16929[2];
                                      var inst_16910 = cljs.core.next.call(null, inst_16892);
                                      var inst_16872 = inst_16910;
                                      var inst_16873 = null;
                                      var inst_16874 = 0;
                                      var inst_16875 = 0;
                                      var state_16929__$1 = function() {
                                        var statearr_16952 = state_16929;
                                        statearr_16952[8] = inst_16875;
                                        statearr_16952[9] = inst_16873;
                                        statearr_16952[10] = inst_16874;
                                        statearr_16952[11] = inst_16872;
                                        statearr_16952[18] = inst_16909;
                                        return statearr_16952;
                                      }();
                                      var statearr_16953_17027 = state_16929__$1;
                                      statearr_16953_17027[2] = null;
                                      statearr_16953_17027[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_16930 === 8) {
                                        var inst_16815 = state_16929[14];
                                        var inst_16816 = state_16929[15];
                                        var inst_16818 = inst_16816 < inst_16815;
                                        var inst_16819 = inst_16818;
                                        var state_16929__$1 = state_16929;
                                        if (cljs.core.truth_(inst_16819)) {
                                          var statearr_16954_17028 = state_16929__$1;
                                          statearr_16954_17028[1] = 10;
                                        } else {
                                          var statearr_16955_17029 = state_16929__$1;
                                          statearr_16955_17029[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_16930 === 40) {
                                          var inst_16901 = state_16929[16];
                                          var inst_16902 = state_16929[2];
                                          var inst_16903 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_16904 = cljs.core.async.untap_STAR_.call(null, m, inst_16901);
                                          var state_16929__$1 = function() {
                                            var statearr_16956 = state_16929;
                                            statearr_16956[19] = inst_16902;
                                            statearr_16956[20] = inst_16903;
                                            return statearr_16956;
                                          }();
                                          var statearr_16957_17030 = state_16929__$1;
                                          statearr_16957_17030[2] = inst_16904;
                                          statearr_16957_17030[1] = 39;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_16930 === 9) {
                                            var inst_16861 = state_16929[2];
                                            var state_16929__$1 = state_16929;
                                            var statearr_16958_17031 = state_16929__$1;
                                            statearr_16958_17031[2] = inst_16861;
                                            statearr_16958_17031[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_16930 === 41) {
                                              try {
                                                var inst_16901 = state_16929[16];
                                                var inst_16804 = state_16929[5];
                                                var inst_16907 = cljs.core.async.put_BANG_.call(null, inst_16901, inst_16804, done);
                                                var state_16929__$1 = state_16929;
                                                var statearr_16961_17032 = state_16929__$1;
                                                statearr_16961_17032[2] = inst_16907;
                                                statearr_16961_17032[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } catch (e16959) {
                                                if (e16959 instanceof Object) {
                                                  var ex__5389__auto__ = e16959;
                                                  var statearr_16960_17033 = state_16929;
                                                  statearr_16960_17033[1] = 40;
                                                  statearr_16960_17033[2] = ex__5389__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                    throw e16959;
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            } else {
                                              if (state_val_16930 === 10) {
                                                var inst_16814 = state_16929[13];
                                                var inst_16816 = state_16929[15];
                                                var inst_16822 = cljs.core._nth.call(null, inst_16814, inst_16816);
                                                var inst_16823 = cljs.core.nth.call(null, inst_16822, 0, null);
                                                var inst_16824 = cljs.core.nth.call(null, inst_16822, 1, null);
                                                var state_16929__$1 = function() {
                                                  var statearr_16962 = state_16929;
                                                  statearr_16962[21] = inst_16823;
                                                  return statearr_16962;
                                                }();
                                                if (cljs.core.truth_(inst_16824)) {
                                                  var statearr_16963_17034 = state_16929__$1;
                                                  statearr_16963_17034[1] = 13;
                                                } else {
                                                  var statearr_16964_17035 = state_16929__$1;
                                                  statearr_16964_17035[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_16930 === 42) {
                                                  var inst_16922 = state_16929[2];
                                                  var state_16929__$1 = function() {
                                                    var statearr_16965 = state_16929;
                                                    statearr_16965[22] = inst_16922;
                                                    return statearr_16965;
                                                  }();
                                                  var statearr_16966_17036 = state_16929__$1;
                                                  statearr_16966_17036[2] = null;
                                                  statearr_16966_17036[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_16930 === 11) {
                                                    var inst_16833 = state_16929[23];
                                                    var inst_16813 = state_16929[12];
                                                    var inst_16833__$1 = cljs.core.seq.call(null, inst_16813);
                                                    var state_16929__$1 = function() {
                                                      var statearr_16967 = state_16929;
                                                      statearr_16967[23] = inst_16833__$1;
                                                      return statearr_16967;
                                                    }();
                                                    if (inst_16833__$1) {
                                                      var statearr_16968_17037 = state_16929__$1;
                                                      statearr_16968_17037[1] = 16;
                                                    } else {
                                                      var statearr_16969_17038 = state_16929__$1;
                                                      statearr_16969_17038[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_16930 === 12) {
                                                      var inst_16859 = state_16929[2];
                                                      var state_16929__$1 = state_16929;
                                                      var statearr_16970_17039 = state_16929__$1;
                                                      statearr_16970_17039[2] = inst_16859;
                                                      statearr_16970_17039[1] = 9;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_16930 === 13) {
                                                        var inst_16823 = state_16929[21];
                                                        var inst_16826 = cljs.core.async.close_BANG_.call(null, inst_16823);
                                                        var state_16929__$1 = state_16929;
                                                        var statearr_16974_17040 = state_16929__$1;
                                                        statearr_16974_17040[2] = inst_16826;
                                                        statearr_16974_17040[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_16930 === 14) {
                                                          var state_16929__$1 = state_16929;
                                                          var statearr_16975_17041 = state_16929__$1;
                                                          statearr_16975_17041[2] = null;
                                                          statearr_16975_17041[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_16930 === 15) {
                                                            var inst_16813 = state_16929[12];
                                                            var inst_16814 = state_16929[13];
                                                            var inst_16815 = state_16929[14];
                                                            var inst_16816 = state_16929[15];
                                                            var inst_16829 = state_16929[2];
                                                            var inst_16830 = inst_16816 + 1;
                                                            var tmp16971 = inst_16813;
                                                            var tmp16972 = inst_16814;
                                                            var tmp16973 = inst_16815;
                                                            var inst_16813__$1 = tmp16971;
                                                            var inst_16814__$1 = tmp16972;
                                                            var inst_16815__$1 = tmp16973;
                                                            var inst_16816__$1 = inst_16830;
                                                            var state_16929__$1 = function() {
                                                              var statearr_16976 = state_16929;
                                                              statearr_16976[12] = inst_16813__$1;
                                                              statearr_16976[13] = inst_16814__$1;
                                                              statearr_16976[14] = inst_16815__$1;
                                                              statearr_16976[15] = inst_16816__$1;
                                                              statearr_16976[24] = inst_16829;
                                                              return statearr_16976;
                                                            }();
                                                            var statearr_16977_17042 = state_16929__$1;
                                                            statearr_16977_17042[2] = null;
                                                            statearr_16977_17042[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_16930 === 16) {
                                                              var inst_16833 = state_16929[23];
                                                              var inst_16835 = cljs.core.chunked_seq_QMARK_.call(null, inst_16833);
                                                              var state_16929__$1 = state_16929;
                                                              if (inst_16835) {
                                                                var statearr_16978_17043 = state_16929__$1;
                                                                statearr_16978_17043[1] = 19;
                                                              } else {
                                                                var statearr_16979_17044 = state_16929__$1;
                                                                statearr_16979_17044[1] = 20;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_16930 === 17) {
                                                                var state_16929__$1 = state_16929;
                                                                var statearr_16980_17045 = state_16929__$1;
                                                                statearr_16980_17045[2] = null;
                                                                statearr_16980_17045[1] = 18;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_16930 === 18) {
                                                                  var inst_16857 = state_16929[2];
                                                                  var state_16929__$1 = state_16929;
                                                                  var statearr_16981_17046 = state_16929__$1;
                                                                  statearr_16981_17046[2] = inst_16857;
                                                                  statearr_16981_17046[1] = 12;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_16930 === 19) {
                                                                    var inst_16833 = state_16929[23];
                                                                    var inst_16837 = cljs.core.chunk_first.call(null, inst_16833);
                                                                    var inst_16838 = cljs.core.chunk_rest.call(null, inst_16833);
                                                                    var inst_16839 = cljs.core.count.call(null, inst_16837);
                                                                    var inst_16813 = inst_16838;
                                                                    var inst_16814 = inst_16837;
                                                                    var inst_16815 = inst_16839;
                                                                    var inst_16816 = 0;
                                                                    var state_16929__$1 = function() {
                                                                      var statearr_16982 = state_16929;
                                                                      statearr_16982[12] = inst_16813;
                                                                      statearr_16982[13] = inst_16814;
                                                                      statearr_16982[14] = inst_16815;
                                                                      statearr_16982[15] = inst_16816;
                                                                      return statearr_16982;
                                                                    }();
                                                                    var statearr_16983_17047 = state_16929__$1;
                                                                    statearr_16983_17047[2] = null;
                                                                    statearr_16983_17047[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_16930 === 20) {
                                                                      var inst_16833 = state_16929[23];
                                                                      var inst_16843 = cljs.core.first.call(null, inst_16833);
                                                                      var inst_16844 = cljs.core.nth.call(null, inst_16843, 0, null);
                                                                      var inst_16845 = cljs.core.nth.call(null, inst_16843, 1, null);
                                                                      var state_16929__$1 = function() {
                                                                        var statearr_16984 = state_16929;
                                                                        statearr_16984[25] = inst_16844;
                                                                        return statearr_16984;
                                                                      }();
                                                                      if (cljs.core.truth_(inst_16845)) {
                                                                        var statearr_16985_17048 = state_16929__$1;
                                                                        statearr_16985_17048[1] = 22;
                                                                      } else {
                                                                        var statearr_16986_17049 = state_16929__$1;
                                                                        statearr_16986_17049[1] = 23;
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_16930 === 21) {
                                                                        var inst_16854 = state_16929[2];
                                                                        var state_16929__$1 = state_16929;
                                                                        var statearr_16987_17050 = state_16929__$1;
                                                                        statearr_16987_17050[2] = inst_16854;
                                                                        statearr_16987_17050[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_16930 === 22) {
                                                                          var inst_16844 = state_16929[25];
                                                                          var inst_16847 = cljs.core.async.close_BANG_.call(null, inst_16844);
                                                                          var state_16929__$1 = state_16929;
                                                                          var statearr_16988_17051 = state_16929__$1;
                                                                          statearr_16988_17051[2] = inst_16847;
                                                                          statearr_16988_17051[1] = 24;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_16930 === 23) {
                                                                            var state_16929__$1 = state_16929;
                                                                            var statearr_16989_17052 = state_16929__$1;
                                                                            statearr_16989_17052[2] = null;
                                                                            statearr_16989_17052[1] = 24;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_16930 === 24) {
                                                                              var inst_16833 = state_16929[23];
                                                                              var inst_16850 = state_16929[2];
                                                                              var inst_16851 = cljs.core.next.call(null, inst_16833);
                                                                              var inst_16813 = inst_16851;
                                                                              var inst_16814 = null;
                                                                              var inst_16815 = 0;
                                                                              var inst_16816 = 0;
                                                                              var state_16929__$1 = function() {
                                                                                var statearr_16990 = state_16929;
                                                                                statearr_16990[12] = inst_16813;
                                                                                statearr_16990[13] = inst_16814;
                                                                                statearr_16990[14] = inst_16815;
                                                                                statearr_16990[15] = inst_16816;
                                                                                statearr_16990[26] = inst_16850;
                                                                                return statearr_16990;
                                                                              }();
                                                                              var statearr_16991_17053 = state_16929__$1;
                                                                              statearr_16991_17053[2] = null;
                                                                              statearr_16991_17053[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_16930 === 25) {
                                                                                var inst_16875 = state_16929[8];
                                                                                var inst_16874 = state_16929[10];
                                                                                var inst_16877 = inst_16875 < inst_16874;
                                                                                var inst_16878 = inst_16877;
                                                                                var state_16929__$1 = state_16929;
                                                                                if (cljs.core.truth_(inst_16878)) {
                                                                                  var statearr_16992_17054 = state_16929__$1;
                                                                                  statearr_16992_17054[1] = 27;
                                                                                } else {
                                                                                  var statearr_16993_17055 = state_16929__$1;
                                                                                  statearr_16993_17055[1] = 28;
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_16930 === 26) {
                                                                                  var inst_16920 = state_16929[2];
                                                                                  var state_16929__$1 = function() {
                                                                                    var statearr_16994 = state_16929;
                                                                                    statearr_16994[27] = inst_16920;
                                                                                    return statearr_16994;
                                                                                  }();
                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16929__$1, 42, dchan);
                                                                                } else {
                                                                                  if (state_val_16930 === 27) {
                                                                                    var inst_16875 = state_16929[8];
                                                                                    var inst_16873 = state_16929[9];
                                                                                    var inst_16880 = cljs.core._nth.call(null, inst_16873, inst_16875);
                                                                                    var state_16929__$1 = function() {
                                                                                      var statearr_16995 = state_16929;
                                                                                      statearr_16995[6] = inst_16880;
                                                                                      return statearr_16995;
                                                                                    }();
                                                                                    var statearr_16996_17056 = state_16929__$1;
                                                                                    statearr_16996_17056[2] = null;
                                                                                    statearr_16996_17056[1] = 32;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_16930 === 28) {
                                                                                      var inst_16872 = state_16929[11];
                                                                                      var inst_16892 = state_16929[7];
                                                                                      var inst_16892__$1 = cljs.core.seq.call(null, inst_16872);
                                                                                      var state_16929__$1 = function() {
                                                                                        var statearr_17000 = state_16929;
                                                                                        statearr_17000[7] = inst_16892__$1;
                                                                                        return statearr_17000;
                                                                                      }();
                                                                                      if (inst_16892__$1) {
                                                                                        var statearr_17001_17057 = state_16929__$1;
                                                                                        statearr_17001_17057[1] = 33;
                                                                                      } else {
                                                                                        var statearr_17002_17058 = state_16929__$1;
                                                                                        statearr_17002_17058[1] = 34;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_16930 === 29) {
                                                                                        var inst_16918 = state_16929[2];
                                                                                        var state_16929__$1 = state_16929;
                                                                                        var statearr_17003_17059 = state_16929__$1;
                                                                                        statearr_17003_17059[2] = inst_16918;
                                                                                        statearr_17003_17059[1] = 26;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_16930 === 30) {
                                                                                          var inst_16875 = state_16929[8];
                                                                                          var inst_16873 = state_16929[9];
                                                                                          var inst_16874 = state_16929[10];
                                                                                          var inst_16872 = state_16929[11];
                                                                                          var inst_16888 = state_16929[2];
                                                                                          var inst_16889 = inst_16875 + 1;
                                                                                          var tmp16997 = inst_16873;
                                                                                          var tmp16998 = inst_16874;
                                                                                          var tmp16999 = inst_16872;
                                                                                          var inst_16872__$1 = tmp16999;
                                                                                          var inst_16873__$1 = tmp16997;
                                                                                          var inst_16874__$1 = tmp16998;
                                                                                          var inst_16875__$1 = inst_16889;
                                                                                          var state_16929__$1 = function() {
                                                                                            var statearr_17004 = state_16929;
                                                                                            statearr_17004[8] = inst_16875__$1;
                                                                                            statearr_17004[9] = inst_16873__$1;
                                                                                            statearr_17004[10] = inst_16874__$1;
                                                                                            statearr_17004[11] = inst_16872__$1;
                                                                                            statearr_17004[28] = inst_16888;
                                                                                            return statearr_17004;
                                                                                          }();
                                                                                          var statearr_17005_17060 = state_16929__$1;
                                                                                          statearr_17005_17060[2] = null;
                                                                                          statearr_17005_17060[1] = 25;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_16930 === 31) {
                                                                                            var inst_16880 = state_16929[6];
                                                                                            var inst_16881 = state_16929[2];
                                                                                            var inst_16882 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                            var inst_16883 = cljs.core.async.untap_STAR_.call(null, m, inst_16880);
                                                                                            var state_16929__$1 = function() {
                                                                                              var statearr_17006 = state_16929;
                                                                                              statearr_17006[29] = inst_16882;
                                                                                              statearr_17006[30] = inst_16881;
                                                                                              return statearr_17006;
                                                                                            }();
                                                                                            var statearr_17007_17061 = state_16929__$1;
                                                                                            statearr_17007_17061[2] = inst_16883;
                                                                                            statearr_17007_17061[1] = 30;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            return null;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_17009 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_17009[0] = state_machine__5396__auto__;
            statearr_17009[1] = 1;
            return statearr_17009;
          };
          var state_machine__5396__auto____1 = function(state_16929) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_16929);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_16929) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_16929);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_17010 = f__5409__auto__.call(null);
      statearr_17010[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17011;
      return statearr_17010;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj17063 = {};
  return obj17063;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t17169 !== "undefined") {
    } else {
      cljs.core.async.t17169 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta17170) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta17170 = meta17170;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t17169.cljs$lang$type = true;
      cljs.core.async.t17169.cljs$lang$ctorStr = "cljs.core.async/t17169";
      cljs.core.async.t17169.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t17169");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17169.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t17169.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17169.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17169.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17169.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17169.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17169.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t17169.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17169.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_17171) {
          var self__ = this;
          var _17171__$1 = this;
          return self__.meta17170;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17169.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_17171, meta17170__$1) {
          var self__ = this;
          var _17171__$1 = this;
          return new cljs.core.async.t17169(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta17170__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t17169 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t17169(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta17170) {
          return new cljs.core.async.t17169(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta17170);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t17169(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__5408__auto___17274 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_17236) {
        var state_val_17237 = state_17236[1];
        if (state_val_17237 === 1) {
          var inst_17175 = state_17236[5];
          var inst_17175__$1 = calc_state.call(null);
          var inst_17176 = cljs.core.seq_QMARK_.call(null, inst_17175__$1);
          var state_17236__$1 = function() {
            var statearr_17238 = state_17236;
            statearr_17238[5] = inst_17175__$1;
            return statearr_17238;
          }();
          if (inst_17176) {
            var statearr_17239_17275 = state_17236__$1;
            statearr_17239_17275[1] = 2;
          } else {
            var statearr_17240_17276 = state_17236__$1;
            statearr_17240_17276[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_17237 === 2) {
            var inst_17175 = state_17236[5];
            var inst_17178 = cljs.core.apply.call(null, cljs.core.hash_map, inst_17175);
            var state_17236__$1 = state_17236;
            var statearr_17241_17277 = state_17236__$1;
            statearr_17241_17277[2] = inst_17178;
            statearr_17241_17277[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_17237 === 3) {
              var inst_17175 = state_17236[5];
              var state_17236__$1 = state_17236;
              var statearr_17242_17278 = state_17236__$1;
              statearr_17242_17278[2] = inst_17175;
              statearr_17242_17278[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17237 === 4) {
                var inst_17175 = state_17236[5];
                var inst_17181 = state_17236[2];
                var inst_17182 = cljs.core.get.call(null, inst_17181, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_17183 = cljs.core.get.call(null, inst_17181, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_17184 = cljs.core.get.call(null, inst_17181, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_17185 = inst_17175;
                var state_17236__$1 = function() {
                  var statearr_17243 = state_17236;
                  statearr_17243[6] = inst_17182;
                  statearr_17243[7] = inst_17183;
                  statearr_17243[8] = inst_17184;
                  statearr_17243[9] = inst_17185;
                  return statearr_17243;
                }();
                var statearr_17244_17279 = state_17236__$1;
                statearr_17244_17279[2] = null;
                statearr_17244_17279[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_17237 === 5) {
                  var inst_17185 = state_17236[9];
                  var inst_17188 = cljs.core.seq_QMARK_.call(null, inst_17185);
                  var state_17236__$1 = state_17236;
                  if (inst_17188) {
                    var statearr_17245_17280 = state_17236__$1;
                    statearr_17245_17280[1] = 7;
                  } else {
                    var statearr_17246_17281 = state_17236__$1;
                    statearr_17246_17281[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17237 === 6) {
                    var inst_17234 = state_17236[2];
                    var state_17236__$1 = state_17236;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17236__$1, inst_17234);
                  } else {
                    if (state_val_17237 === 7) {
                      var inst_17185 = state_17236[9];
                      var inst_17190 = cljs.core.apply.call(null, cljs.core.hash_map, inst_17185);
                      var state_17236__$1 = state_17236;
                      var statearr_17247_17282 = state_17236__$1;
                      statearr_17247_17282[2] = inst_17190;
                      statearr_17247_17282[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17237 === 8) {
                        var inst_17185 = state_17236[9];
                        var state_17236__$1 = state_17236;
                        var statearr_17248_17283 = state_17236__$1;
                        statearr_17248_17283[2] = inst_17185;
                        statearr_17248_17283[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17237 === 9) {
                          var inst_17193 = state_17236[10];
                          var inst_17193__$1 = state_17236[2];
                          var inst_17194 = cljs.core.get.call(null, inst_17193__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_17195 = cljs.core.get.call(null, inst_17193__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_17196 = cljs.core.get.call(null, inst_17193__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_17236__$1 = function() {
                            var statearr_17249 = state_17236;
                            statearr_17249[10] = inst_17193__$1;
                            statearr_17249[11] = inst_17195;
                            statearr_17249[12] = inst_17196;
                            return statearr_17249;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_17236__$1, 10, inst_17194);
                        } else {
                          if (state_val_17237 === 10) {
                            var inst_17201 = state_17236[13];
                            var inst_17200 = state_17236[14];
                            var inst_17199 = state_17236[2];
                            var inst_17200__$1 = cljs.core.nth.call(null, inst_17199, 0, null);
                            var inst_17201__$1 = cljs.core.nth.call(null, inst_17199, 1, null);
                            var inst_17202 = inst_17200__$1 == null;
                            var inst_17203 = cljs.core._EQ_.call(null, inst_17201__$1, change);
                            var inst_17204 = inst_17202 || inst_17203;
                            var state_17236__$1 = function() {
                              var statearr_17250 = state_17236;
                              statearr_17250[13] = inst_17201__$1;
                              statearr_17250[14] = inst_17200__$1;
                              return statearr_17250;
                            }();
                            if (cljs.core.truth_(inst_17204)) {
                              var statearr_17251_17284 = state_17236__$1;
                              statearr_17251_17284[1] = 11;
                            } else {
                              var statearr_17252_17285 = state_17236__$1;
                              statearr_17252_17285[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17237 === 11) {
                              var inst_17200 = state_17236[14];
                              var inst_17206 = inst_17200 == null;
                              var state_17236__$1 = state_17236;
                              if (cljs.core.truth_(inst_17206)) {
                                var statearr_17253_17286 = state_17236__$1;
                                statearr_17253_17286[1] = 14;
                              } else {
                                var statearr_17254_17287 = state_17236__$1;
                                statearr_17254_17287[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17237 === 12) {
                                var inst_17201 = state_17236[13];
                                var inst_17215 = state_17236[15];
                                var inst_17196 = state_17236[12];
                                var inst_17215__$1 = inst_17196.call(null, inst_17201);
                                var state_17236__$1 = function() {
                                  var statearr_17255 = state_17236;
                                  statearr_17255[15] = inst_17215__$1;
                                  return statearr_17255;
                                }();
                                if (cljs.core.truth_(inst_17215__$1)) {
                                  var statearr_17256_17288 = state_17236__$1;
                                  statearr_17256_17288[1] = 17;
                                } else {
                                  var statearr_17257_17289 = state_17236__$1;
                                  statearr_17257_17289[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17237 === 13) {
                                  var inst_17232 = state_17236[2];
                                  var state_17236__$1 = state_17236;
                                  var statearr_17258_17290 = state_17236__$1;
                                  statearr_17258_17290[2] = inst_17232;
                                  statearr_17258_17290[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17237 === 14) {
                                    var inst_17201 = state_17236[13];
                                    var inst_17208 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_17201);
                                    var state_17236__$1 = state_17236;
                                    var statearr_17259_17291 = state_17236__$1;
                                    statearr_17259_17291[2] = inst_17208;
                                    statearr_17259_17291[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17237 === 15) {
                                      var state_17236__$1 = state_17236;
                                      var statearr_17260_17292 = state_17236__$1;
                                      statearr_17260_17292[2] = null;
                                      statearr_17260_17292[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17237 === 16) {
                                        var inst_17211 = state_17236[2];
                                        var inst_17212 = calc_state.call(null);
                                        var inst_17185 = inst_17212;
                                        var state_17236__$1 = function() {
                                          var statearr_17261 = state_17236;
                                          statearr_17261[9] = inst_17185;
                                          statearr_17261[16] = inst_17211;
                                          return statearr_17261;
                                        }();
                                        var statearr_17262_17293 = state_17236__$1;
                                        statearr_17262_17293[2] = null;
                                        statearr_17262_17293[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17237 === 17) {
                                          var inst_17215 = state_17236[15];
                                          var state_17236__$1 = state_17236;
                                          var statearr_17263_17294 = state_17236__$1;
                                          statearr_17263_17294[2] = inst_17215;
                                          statearr_17263_17294[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_17237 === 18) {
                                            var inst_17201 = state_17236[13];
                                            var inst_17195 = state_17236[11];
                                            var inst_17196 = state_17236[12];
                                            var inst_17218 = cljs.core.empty_QMARK_.call(null, inst_17196);
                                            var inst_17219 = inst_17195.call(null, inst_17201);
                                            var inst_17220 = cljs.core.not.call(null, inst_17219);
                                            var inst_17221 = inst_17218 && inst_17220;
                                            var state_17236__$1 = state_17236;
                                            var statearr_17264_17295 = state_17236__$1;
                                            statearr_17264_17295[2] = inst_17221;
                                            statearr_17264_17295[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_17237 === 19) {
                                              var inst_17223 = state_17236[2];
                                              var state_17236__$1 = state_17236;
                                              if (cljs.core.truth_(inst_17223)) {
                                                var statearr_17265_17296 = state_17236__$1;
                                                statearr_17265_17296[1] = 20;
                                              } else {
                                                var statearr_17266_17297 = state_17236__$1;
                                                statearr_17266_17297[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_17237 === 20) {
                                                var inst_17200 = state_17236[14];
                                                var state_17236__$1 = state_17236;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17236__$1, 23, out, inst_17200);
                                              } else {
                                                if (state_val_17237 === 21) {
                                                  var state_17236__$1 = state_17236;
                                                  var statearr_17267_17298 = state_17236__$1;
                                                  statearr_17267_17298[2] = null;
                                                  statearr_17267_17298[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_17237 === 22) {
                                                    var inst_17193 = state_17236[10];
                                                    var inst_17229 = state_17236[2];
                                                    var inst_17185 = inst_17193;
                                                    var state_17236__$1 = function() {
                                                      var statearr_17268 = state_17236;
                                                      statearr_17268[9] = inst_17185;
                                                      statearr_17268[17] = inst_17229;
                                                      return statearr_17268;
                                                    }();
                                                    var statearr_17269_17299 = state_17236__$1;
                                                    statearr_17269_17299[2] = null;
                                                    statearr_17269_17299[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_17237 === 23) {
                                                      var inst_17226 = state_17236[2];
                                                      var state_17236__$1 = state_17236;
                                                      var statearr_17270_17300 = state_17236__$1;
                                                      statearr_17270_17300[2] = inst_17226;
                                                      statearr_17270_17300[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_17272 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_17272[0] = state_machine__5396__auto__;
            statearr_17272[1] = 1;
            return statearr_17272;
          };
          var state_machine__5396__auto____1 = function(state_17236) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_17236);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_17236) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_17236);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_17273 = f__5409__auto__.call(null);
      statearr_17273[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17274;
      return statearr_17273;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj17302 = {};
  return obj17302;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3388__auto__ = p;
    if (and__3388__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4021__auto__ = p == null ? null : p;
    return function() {
      var or__3400__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3388__auto__ = p;
    if (and__3388__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4021__auto__ = p == null ? null : p;
    return function() {
      var or__3400__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3388__auto__ = p;
      if (and__3388__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4021__auto__ = p == null ? null : p;
      return function() {
        var or__3400__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3388__auto__ = p;
      if (and__3388__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4021__auto__ = p == null ? null : p;
      return function() {
        var or__3400__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3400__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3400__auto__, mults) {
            return function(p1__17303_SHARP_) {
              if (cljs.core.truth_(p1__17303_SHARP_.call(null, topic))) {
                return p1__17303_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__17303_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3400__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t17427 !== "undefined") {
      } else {
        cljs.core.async.t17427 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta17428) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta17428 = meta17428;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t17427.cljs$lang$type = true;
        cljs.core.async.t17427.cljs$lang$ctorStr = "cljs.core.async/t17427";
        cljs.core.async.t17427.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
            return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t17427");
          };
        }(mults, ensure_mult);
        cljs.core.async.t17427.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t17427.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17427.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t17427.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17427.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17427.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t17427.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t17427.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_17429) {
            var self__ = this;
            var _17429__$1 = this;
            return self__.meta17428;
          };
        }(mults, ensure_mult);
        cljs.core.async.t17427.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_17429, meta17428__$1) {
            var self__ = this;
            var _17429__$1 = this;
            return new cljs.core.async.t17427(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta17428__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t17427 = function(mults, ensure_mult) {
          return function __GT_t17427(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta17428) {
            return new cljs.core.async.t17427(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta17428);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t17427(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5408__auto___17550 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_17502) {
          var state_val_17503 = state_17502[1];
          if (state_val_17503 === 1) {
            var state_17502__$1 = state_17502;
            var statearr_17504_17551 = state_17502__$1;
            statearr_17504_17551[2] = null;
            statearr_17504_17551[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_17503 === 2) {
              var state_17502__$1 = state_17502;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17502__$1, 4, ch);
            } else {
              if (state_val_17503 === 3) {
                var inst_17500 = state_17502[2];
                var state_17502__$1 = state_17502;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17502__$1, inst_17500);
              } else {
                if (state_val_17503 === 4) {
                  var inst_17432 = state_17502[5];
                  var inst_17432__$1 = state_17502[2];
                  var inst_17433 = inst_17432__$1 == null;
                  var state_17502__$1 = function() {
                    var statearr_17505 = state_17502;
                    statearr_17505[5] = inst_17432__$1;
                    return statearr_17505;
                  }();
                  if (cljs.core.truth_(inst_17433)) {
                    var statearr_17506_17552 = state_17502__$1;
                    statearr_17506_17552[1] = 5;
                  } else {
                    var statearr_17507_17553 = state_17502__$1;
                    statearr_17507_17553[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17503 === 5) {
                    var inst_17439 = cljs.core.deref.call(null, mults);
                    var inst_17440 = cljs.core.vals.call(null, inst_17439);
                    var inst_17441 = cljs.core.seq.call(null, inst_17440);
                    var inst_17442 = inst_17441;
                    var inst_17443 = null;
                    var inst_17444 = 0;
                    var inst_17445 = 0;
                    var state_17502__$1 = function() {
                      var statearr_17508 = state_17502;
                      statearr_17508[6] = inst_17445;
                      statearr_17508[7] = inst_17443;
                      statearr_17508[8] = inst_17444;
                      statearr_17508[9] = inst_17442;
                      return statearr_17508;
                    }();
                    var statearr_17509_17554 = state_17502__$1;
                    statearr_17509_17554[2] = null;
                    statearr_17509_17554[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_17503 === 6) {
                      var inst_17432 = state_17502[5];
                      var inst_17480 = state_17502[10];
                      var inst_17482 = state_17502[11];
                      var inst_17480__$1 = topic_fn.call(null, inst_17432);
                      var inst_17481 = cljs.core.deref.call(null, mults);
                      var inst_17482__$1 = cljs.core.get.call(null, inst_17481, inst_17480__$1);
                      var state_17502__$1 = function() {
                        var statearr_17510 = state_17502;
                        statearr_17510[10] = inst_17480__$1;
                        statearr_17510[11] = inst_17482__$1;
                        return statearr_17510;
                      }();
                      if (cljs.core.truth_(inst_17482__$1)) {
                        var statearr_17511_17555 = state_17502__$1;
                        statearr_17511_17555[1] = 19;
                      } else {
                        var statearr_17512_17556 = state_17502__$1;
                        statearr_17512_17556[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17503 === 7) {
                        var inst_17498 = state_17502[2];
                        var state_17502__$1 = state_17502;
                        var statearr_17513_17557 = state_17502__$1;
                        statearr_17513_17557[2] = inst_17498;
                        statearr_17513_17557[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17503 === 8) {
                          var inst_17445 = state_17502[6];
                          var inst_17444 = state_17502[8];
                          var inst_17447 = inst_17445 < inst_17444;
                          var inst_17448 = inst_17447;
                          var state_17502__$1 = state_17502;
                          if (cljs.core.truth_(inst_17448)) {
                            var statearr_17517_17558 = state_17502__$1;
                            statearr_17517_17558[1] = 10;
                          } else {
                            var statearr_17518_17559 = state_17502__$1;
                            statearr_17518_17559[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17503 === 9) {
                            var inst_17478 = state_17502[2];
                            var state_17502__$1 = state_17502;
                            var statearr_17519_17560 = state_17502__$1;
                            statearr_17519_17560[2] = inst_17478;
                            statearr_17519_17560[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17503 === 10) {
                              var inst_17445 = state_17502[6];
                              var inst_17443 = state_17502[7];
                              var inst_17444 = state_17502[8];
                              var inst_17442 = state_17502[9];
                              var inst_17450 = cljs.core._nth.call(null, inst_17443, inst_17445);
                              var inst_17451 = cljs.core.async.muxch_STAR_.call(null, inst_17450);
                              var inst_17452 = cljs.core.async.close_BANG_.call(null, inst_17451);
                              var inst_17453 = inst_17445 + 1;
                              var tmp17514 = inst_17443;
                              var tmp17515 = inst_17444;
                              var tmp17516 = inst_17442;
                              var inst_17442__$1 = tmp17516;
                              var inst_17443__$1 = tmp17514;
                              var inst_17444__$1 = tmp17515;
                              var inst_17445__$1 = inst_17453;
                              var state_17502__$1 = function() {
                                var statearr_17520 = state_17502;
                                statearr_17520[6] = inst_17445__$1;
                                statearr_17520[7] = inst_17443__$1;
                                statearr_17520[8] = inst_17444__$1;
                                statearr_17520[9] = inst_17442__$1;
                                statearr_17520[12] = inst_17452;
                                return statearr_17520;
                              }();
                              var statearr_17521_17561 = state_17502__$1;
                              statearr_17521_17561[2] = null;
                              statearr_17521_17561[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17503 === 11) {
                                var inst_17442 = state_17502[9];
                                var inst_17456 = state_17502[13];
                                var inst_17456__$1 = cljs.core.seq.call(null, inst_17442);
                                var state_17502__$1 = function() {
                                  var statearr_17522 = state_17502;
                                  statearr_17522[13] = inst_17456__$1;
                                  return statearr_17522;
                                }();
                                if (inst_17456__$1) {
                                  var statearr_17523_17562 = state_17502__$1;
                                  statearr_17523_17562[1] = 13;
                                } else {
                                  var statearr_17524_17563 = state_17502__$1;
                                  statearr_17524_17563[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17503 === 12) {
                                  var inst_17476 = state_17502[2];
                                  var state_17502__$1 = state_17502;
                                  var statearr_17525_17564 = state_17502__$1;
                                  statearr_17525_17564[2] = inst_17476;
                                  statearr_17525_17564[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17503 === 13) {
                                    var inst_17456 = state_17502[13];
                                    var inst_17458 = cljs.core.chunked_seq_QMARK_.call(null, inst_17456);
                                    var state_17502__$1 = state_17502;
                                    if (inst_17458) {
                                      var statearr_17526_17565 = state_17502__$1;
                                      statearr_17526_17565[1] = 16;
                                    } else {
                                      var statearr_17527_17566 = state_17502__$1;
                                      statearr_17527_17566[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17503 === 14) {
                                      var state_17502__$1 = state_17502;
                                      var statearr_17528_17567 = state_17502__$1;
                                      statearr_17528_17567[2] = null;
                                      statearr_17528_17567[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17503 === 15) {
                                        var inst_17474 = state_17502[2];
                                        var state_17502__$1 = state_17502;
                                        var statearr_17529_17568 = state_17502__$1;
                                        statearr_17529_17568[2] = inst_17474;
                                        statearr_17529_17568[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17503 === 16) {
                                          var inst_17456 = state_17502[13];
                                          var inst_17460 = cljs.core.chunk_first.call(null, inst_17456);
                                          var inst_17461 = cljs.core.chunk_rest.call(null, inst_17456);
                                          var inst_17462 = cljs.core.count.call(null, inst_17460);
                                          var inst_17442 = inst_17461;
                                          var inst_17443 = inst_17460;
                                          var inst_17444 = inst_17462;
                                          var inst_17445 = 0;
                                          var state_17502__$1 = function() {
                                            var statearr_17530 = state_17502;
                                            statearr_17530[6] = inst_17445;
                                            statearr_17530[7] = inst_17443;
                                            statearr_17530[8] = inst_17444;
                                            statearr_17530[9] = inst_17442;
                                            return statearr_17530;
                                          }();
                                          var statearr_17531_17569 = state_17502__$1;
                                          statearr_17531_17569[2] = null;
                                          statearr_17531_17569[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_17503 === 17) {
                                            var inst_17456 = state_17502[13];
                                            var inst_17465 = cljs.core.first.call(null, inst_17456);
                                            var inst_17466 = cljs.core.async.muxch_STAR_.call(null, inst_17465);
                                            var inst_17467 = cljs.core.async.close_BANG_.call(null, inst_17466);
                                            var inst_17468 = cljs.core.next.call(null, inst_17456);
                                            var inst_17442 = inst_17468;
                                            var inst_17443 = null;
                                            var inst_17444 = 0;
                                            var inst_17445 = 0;
                                            var state_17502__$1 = function() {
                                              var statearr_17532 = state_17502;
                                              statearr_17532[6] = inst_17445;
                                              statearr_17532[7] = inst_17443;
                                              statearr_17532[8] = inst_17444;
                                              statearr_17532[9] = inst_17442;
                                              statearr_17532[14] = inst_17467;
                                              return statearr_17532;
                                            }();
                                            var statearr_17533_17570 = state_17502__$1;
                                            statearr_17533_17570[2] = null;
                                            statearr_17533_17570[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_17503 === 18) {
                                              var inst_17471 = state_17502[2];
                                              var state_17502__$1 = state_17502;
                                              var statearr_17534_17571 = state_17502__$1;
                                              statearr_17534_17571[2] = inst_17471;
                                              statearr_17534_17571[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_17503 === 19) {
                                                var state_17502__$1 = state_17502;
                                                var statearr_17535_17572 = state_17502__$1;
                                                statearr_17535_17572[2] = null;
                                                statearr_17535_17572[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_17503 === 20) {
                                                  var state_17502__$1 = state_17502;
                                                  var statearr_17536_17573 = state_17502__$1;
                                                  statearr_17536_17573[2] = null;
                                                  statearr_17536_17573[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_17503 === 21) {
                                                    var inst_17495 = state_17502[2];
                                                    var state_17502__$1 = function() {
                                                      var statearr_17537 = state_17502;
                                                      statearr_17537[15] = inst_17495;
                                                      return statearr_17537;
                                                    }();
                                                    var statearr_17538_17574 = state_17502__$1;
                                                    statearr_17538_17574[2] = null;
                                                    statearr_17538_17574[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_17503 === 22) {
                                                      var inst_17492 = state_17502[2];
                                                      var state_17502__$1 = state_17502;
                                                      var statearr_17539_17575 = state_17502__$1;
                                                      statearr_17539_17575[2] = inst_17492;
                                                      statearr_17539_17575[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_17503 === 23) {
                                                        var inst_17480 = state_17502[10];
                                                        var inst_17484 = state_17502[2];
                                                        var inst_17485 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_17480);
                                                        var state_17502__$1 = function() {
                                                          var statearr_17540 = state_17502;
                                                          statearr_17540[16] = inst_17484;
                                                          return statearr_17540;
                                                        }();
                                                        var statearr_17541_17576 = state_17502__$1;
                                                        statearr_17541_17576[2] = inst_17485;
                                                        statearr_17541_17576[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_17503 === 24) {
                                                          try {
                                                            var inst_17432 = state_17502[5];
                                                            var inst_17482 = state_17502[11];
                                                            var inst_17488 = cljs.core.async.muxch_STAR_.call(null, inst_17482);
                                                            var state_17502__$1 = state_17502;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17502__$1, 25, inst_17488, inst_17432);
                                                          } catch (e17542) {
                                                            if (e17542 instanceof Object) {
                                                              var ex__5389__auto__ = e17542;
                                                              var statearr_17543_17577 = state_17502;
                                                              statearr_17543_17577[1] = 23;
                                                              statearr_17543_17577[2] = ex__5389__auto__;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                throw e17542;
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        } else {
                                                          if (state_val_17503 === 25) {
                                                            try {
                                                              var inst_17490 = state_17502[2];
                                                              var state_17502__$1 = state_17502;
                                                              var statearr_17546_17578 = state_17502__$1;
                                                              statearr_17546_17578[2] = inst_17490;
                                                              statearr_17546_17578[1] = 22;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } catch (e17544) {
                                                              if (e17544 instanceof Object) {
                                                                var ex__5389__auto__ = e17544;
                                                                var statearr_17545_17579 = state_17502;
                                                                statearr_17545_17579[1] = 23;
                                                                statearr_17545_17579[2] = ex__5389__auto__;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                  throw e17544;
                                                                } else {
                                                                  return null;
                                                                }
                                                              }
                                                            }
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_17548 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17548[0] = state_machine__5396__auto__;
              statearr_17548[1] = 1;
              return statearr_17548;
            };
            var state_machine__5396__auto____1 = function(state_17502) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_17502);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_17502) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_17502);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_17549 = f__5409__auto__.call(null);
        statearr_17549[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17550;
        return statearr_17549;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5408__auto___17710 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_17682) {
          var state_val_17683 = state_17682[1];
          if (state_val_17683 === 1) {
            var state_17682__$1 = state_17682;
            var statearr_17684_17711 = state_17682__$1;
            statearr_17684_17711[2] = null;
            statearr_17684_17711[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_17683 === 2) {
              var inst_17646 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_17647 = 0;
              var state_17682__$1 = function() {
                var statearr_17685 = state_17682;
                statearr_17685[5] = inst_17647;
                statearr_17685[6] = inst_17646;
                return statearr_17685;
              }();
              var statearr_17686_17712 = state_17682__$1;
              statearr_17686_17712[2] = null;
              statearr_17686_17712[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17683 === 3) {
                var inst_17680 = state_17682[2];
                var state_17682__$1 = state_17682;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17682__$1, inst_17680);
              } else {
                if (state_val_17683 === 4) {
                  var inst_17647 = state_17682[5];
                  var inst_17649 = inst_17647 < cnt;
                  var state_17682__$1 = state_17682;
                  if (cljs.core.truth_(inst_17649)) {
                    var statearr_17687_17713 = state_17682__$1;
                    statearr_17687_17713[1] = 6;
                  } else {
                    var statearr_17688_17714 = state_17682__$1;
                    statearr_17688_17714[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17683 === 5) {
                    var inst_17666 = state_17682[2];
                    var state_17682__$1 = function() {
                      var statearr_17689 = state_17682;
                      statearr_17689[7] = inst_17666;
                      return statearr_17689;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17682__$1, 12, dchan);
                  } else {
                    if (state_val_17683 === 6) {
                      var state_17682__$1 = state_17682;
                      var statearr_17690_17715 = state_17682__$1;
                      statearr_17690_17715[2] = null;
                      statearr_17690_17715[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17683 === 7) {
                        var state_17682__$1 = state_17682;
                        var statearr_17691_17716 = state_17682__$1;
                        statearr_17691_17716[2] = null;
                        statearr_17691_17716[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17683 === 8) {
                          var inst_17664 = state_17682[2];
                          var state_17682__$1 = state_17682;
                          var statearr_17692_17717 = state_17682__$1;
                          statearr_17692_17717[2] = inst_17664;
                          statearr_17692_17717[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17683 === 9) {
                            var inst_17647 = state_17682[5];
                            var inst_17659 = state_17682[2];
                            var inst_17660 = inst_17647 + 1;
                            var inst_17647__$1 = inst_17660;
                            var state_17682__$1 = function() {
                              var statearr_17693 = state_17682;
                              statearr_17693[5] = inst_17647__$1;
                              statearr_17693[8] = inst_17659;
                              return statearr_17693;
                            }();
                            var statearr_17694_17718 = state_17682__$1;
                            statearr_17694_17718[2] = null;
                            statearr_17694_17718[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17683 === 10) {
                              var inst_17651 = state_17682[2];
                              var inst_17652 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_17682__$1 = function() {
                                var statearr_17695 = state_17682;
                                statearr_17695[9] = inst_17651;
                                return statearr_17695;
                              }();
                              var statearr_17696_17719 = state_17682__$1;
                              statearr_17696_17719[2] = inst_17652;
                              statearr_17696_17719[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17683 === 11) {
                                try {
                                  var inst_17647 = state_17682[5];
                                  var inst_17655 = chs__$1.call(null, inst_17647);
                                  var inst_17656 = done.call(null, inst_17647);
                                  var inst_17657 = cljs.core.async.take_BANG_.call(null, inst_17655, inst_17656);
                                  var state_17682__$1 = state_17682;
                                  var statearr_17699_17720 = state_17682__$1;
                                  statearr_17699_17720[2] = inst_17657;
                                  statearr_17699_17720[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } catch (e17697) {
                                  if (e17697 instanceof Object) {
                                    var ex__5389__auto__ = e17697;
                                    var statearr_17698_17721 = state_17682;
                                    statearr_17698_17721[1] = 10;
                                    statearr_17698_17721[2] = ex__5389__auto__;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                      throw e17697;
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              } else {
                                if (state_val_17683 === 12) {
                                  var inst_17668 = state_17682[10];
                                  var inst_17668__$1 = state_17682[2];
                                  var inst_17669 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_17668__$1);
                                  var state_17682__$1 = function() {
                                    var statearr_17700 = state_17682;
                                    statearr_17700[10] = inst_17668__$1;
                                    return statearr_17700;
                                  }();
                                  if (cljs.core.truth_(inst_17669)) {
                                    var statearr_17701_17722 = state_17682__$1;
                                    statearr_17701_17722[1] = 13;
                                  } else {
                                    var statearr_17702_17723 = state_17682__$1;
                                    statearr_17702_17723[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17683 === 13) {
                                    var inst_17671 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_17682__$1 = state_17682;
                                    var statearr_17703_17724 = state_17682__$1;
                                    statearr_17703_17724[2] = inst_17671;
                                    statearr_17703_17724[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17683 === 14) {
                                      var inst_17668 = state_17682[10];
                                      var inst_17673 = cljs.core.apply.call(null, f, inst_17668);
                                      var state_17682__$1 = state_17682;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17682__$1, 16, out, inst_17673);
                                    } else {
                                      if (state_val_17683 === 15) {
                                        var inst_17678 = state_17682[2];
                                        var state_17682__$1 = state_17682;
                                        var statearr_17704_17725 = state_17682__$1;
                                        statearr_17704_17725[2] = inst_17678;
                                        statearr_17704_17725[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17683 === 16) {
                                          var inst_17675 = state_17682[2];
                                          var state_17682__$1 = function() {
                                            var statearr_17705 = state_17682;
                                            statearr_17705[11] = inst_17675;
                                            return statearr_17705;
                                          }();
                                          var statearr_17706_17726 = state_17682__$1;
                                          statearr_17706_17726[2] = null;
                                          statearr_17706_17726[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_17708 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17708[0] = state_machine__5396__auto__;
              statearr_17708[1] = 1;
              return statearr_17708;
            };
            var state_machine__5396__auto____1 = function(state_17682) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_17682);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_17682) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_17682);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_17709 = f__5409__auto__.call(null);
        statearr_17709[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17710;
        return statearr_17709;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5408__auto___17826 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_17806) {
          var state_val_17807 = state_17806[1];
          if (state_val_17807 === 1) {
            var inst_17777 = cljs.core.vec.call(null, chs);
            var inst_17778 = inst_17777;
            var state_17806__$1 = function() {
              var statearr_17808 = state_17806;
              statearr_17808[5] = inst_17778;
              return statearr_17808;
            }();
            var statearr_17809_17827 = state_17806__$1;
            statearr_17809_17827[2] = null;
            statearr_17809_17827[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_17807 === 2) {
              var inst_17778 = state_17806[5];
              var inst_17780 = cljs.core.count.call(null, inst_17778);
              var inst_17781 = inst_17780 > 0;
              var state_17806__$1 = state_17806;
              if (cljs.core.truth_(inst_17781)) {
                var statearr_17810_17828 = state_17806__$1;
                statearr_17810_17828[1] = 4;
              } else {
                var statearr_17811_17829 = state_17806__$1;
                statearr_17811_17829[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17807 === 3) {
                var inst_17804 = state_17806[2];
                var state_17806__$1 = state_17806;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17806__$1, inst_17804);
              } else {
                if (state_val_17807 === 4) {
                  var inst_17778 = state_17806[5];
                  var state_17806__$1 = state_17806;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_17806__$1, 7, inst_17778);
                } else {
                  if (state_val_17807 === 5) {
                    var inst_17800 = cljs.core.async.close_BANG_.call(null, out);
                    var state_17806__$1 = state_17806;
                    var statearr_17812_17830 = state_17806__$1;
                    statearr_17812_17830[2] = inst_17800;
                    statearr_17812_17830[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_17807 === 6) {
                      var inst_17802 = state_17806[2];
                      var state_17806__$1 = state_17806;
                      var statearr_17813_17831 = state_17806__$1;
                      statearr_17813_17831[2] = inst_17802;
                      statearr_17813_17831[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17807 === 7) {
                        var inst_17786 = state_17806[6];
                        var inst_17785 = state_17806[7];
                        var inst_17785__$1 = state_17806[2];
                        var inst_17786__$1 = cljs.core.nth.call(null, inst_17785__$1, 0, null);
                        var inst_17787 = cljs.core.nth.call(null, inst_17785__$1, 1, null);
                        var inst_17788 = inst_17786__$1 == null;
                        var state_17806__$1 = function() {
                          var statearr_17814 = state_17806;
                          statearr_17814[6] = inst_17786__$1;
                          statearr_17814[8] = inst_17787;
                          statearr_17814[7] = inst_17785__$1;
                          return statearr_17814;
                        }();
                        if (cljs.core.truth_(inst_17788)) {
                          var statearr_17815_17832 = state_17806__$1;
                          statearr_17815_17832[1] = 8;
                        } else {
                          var statearr_17816_17833 = state_17806__$1;
                          statearr_17816_17833[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17807 === 8) {
                          var inst_17786 = state_17806[6];
                          var inst_17787 = state_17806[8];
                          var inst_17785 = state_17806[7];
                          var inst_17778 = state_17806[5];
                          var inst_17790 = function() {
                            var c = inst_17787;
                            var v = inst_17786;
                            var vec__17783 = inst_17785;
                            var cs = inst_17778;
                            return function(c, v, vec__17783, cs, inst_17786, inst_17787, inst_17785, inst_17778, state_val_17807) {
                              return function(p1__17727_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__17727_SHARP_);
                              };
                            }(c, v, vec__17783, cs, inst_17786, inst_17787, inst_17785, inst_17778, state_val_17807);
                          }();
                          var inst_17791 = cljs.core.filterv.call(null, inst_17790, inst_17778);
                          var inst_17778__$1 = inst_17791;
                          var state_17806__$1 = function() {
                            var statearr_17817 = state_17806;
                            statearr_17817[5] = inst_17778__$1;
                            return statearr_17817;
                          }();
                          var statearr_17818_17834 = state_17806__$1;
                          statearr_17818_17834[2] = null;
                          statearr_17818_17834[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17807 === 9) {
                            var inst_17786 = state_17806[6];
                            var state_17806__$1 = state_17806;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17806__$1, 11, out, inst_17786);
                          } else {
                            if (state_val_17807 === 10) {
                              var inst_17798 = state_17806[2];
                              var state_17806__$1 = state_17806;
                              var statearr_17820_17835 = state_17806__$1;
                              statearr_17820_17835[2] = inst_17798;
                              statearr_17820_17835[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17807 === 11) {
                                var inst_17778 = state_17806[5];
                                var inst_17795 = state_17806[2];
                                var tmp17819 = inst_17778;
                                var inst_17778__$1 = tmp17819;
                                var state_17806__$1 = function() {
                                  var statearr_17821 = state_17806;
                                  statearr_17821[9] = inst_17795;
                                  statearr_17821[5] = inst_17778__$1;
                                  return statearr_17821;
                                }();
                                var statearr_17822_17836 = state_17806__$1;
                                statearr_17822_17836[2] = null;
                                statearr_17822_17836[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_17824 = [null, null, null, null, null, null, null, null, null, null];
              statearr_17824[0] = state_machine__5396__auto__;
              statearr_17824[1] = 1;
              return statearr_17824;
            };
            var state_machine__5396__auto____1 = function(state_17806) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_17806);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_17806) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_17806);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_17825 = f__5409__auto__.call(null);
        statearr_17825[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17826;
        return statearr_17825;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("chaperone.websocket");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc.Response");
goog.require("chaperone.crossover.rpc.Request");
goog.require("chaperone.crossover.rpc");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
chaperone.websocket.create_sub_system = function create_sub_system(system, host, port) {
  var sub_system = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "host", "host", 1017112858), host, new cljs.core.Keyword(null, "port", "port", 1017351155), port, new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "request-chan-listen", "request-chan-listen", 4697980374), cljs.core.atom.call(null, false), new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712), cljs.core.async.chan.call(null), 
  new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632), cljs.core.atom.call(null, false), new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), new cljs.core.Keyword(null, "edn-readers", "edn-readers", 2679897956), chaperone.crossover.rpc.all_edn_readers.call(null)], null);
  return cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), sub_system);
};
chaperone.websocket.sub_system = function sub_system(system) {
  return(new cljs.core.Keyword(null, "websocket", "websocket", 784338745)).cljs$core$IFn$_invoke$arity$1(system);
};
chaperone.websocket.respond_BANG_ = function respond_BANG_(web_sockets, response) {
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_sockets);
  var rpc_id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(response));
  var rpc_chan = cljs.core.get.call(null, cljs.core.deref.call(null, rpc_map), rpc_id);
  cljs.core.async.put_BANG_.call(null, rpc_chan, response);
  cljs.core.async.close_BANG_.call(null, rpc_chan);
  return cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.dissoc, rpc_id);
};
chaperone.websocket.start_request_chan_listen_BANG_ = function start_request_chan_listen_BANG_(web_socket) {
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "request-chan-listen", "request-chan-listen", 4697980374)).cljs$core$IFn$_invoke$arity$1(web_socket), true);
  var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_14617) {
        var state_val_14618 = state_14617[1];
        if (state_val_14618 === 7) {
          var inst_14604 = state_14617[5];
          var inst_14607 = state_14617[2];
          var inst_14608 = cljs.core.pr_str.call(null, inst_14607);
          var inst_14609 = inst_14604.send(inst_14608);
          var state_14617__$1 = function() {
            var statearr_14619 = state_14617;
            statearr_14619[6] = inst_14609;
            return statearr_14619;
          }();
          var statearr_14620_14630 = state_14617__$1;
          statearr_14620_14630[2] = null;
          statearr_14620_14630[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_14618 === 6) {
            var inst_14613 = state_14617[2];
            var state_14617__$1 = state_14617;
            var statearr_14621_14631 = state_14617__$1;
            statearr_14621_14631[2] = inst_14613;
            statearr_14621_14631[1] = 3;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_14618 === 5) {
              var state_14617__$1 = state_14617;
              var statearr_14622_14632 = state_14617__$1;
              statearr_14622_14632[2] = null;
              statearr_14622_14632[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_14618 === 4) {
                var inst_14604 = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var inst_14605 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_14617__$1 = function() {
                  var statearr_14623 = state_14617;
                  statearr_14623[5] = inst_14604;
                  return statearr_14623;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14617__$1, 7, inst_14605);
              } else {
                if (state_val_14618 === 3) {
                  var inst_14615 = state_14617[2];
                  var state_14617__$1 = state_14617;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14617__$1, inst_14615);
                } else {
                  if (state_val_14618 === 2) {
                    var inst_14601 = (new cljs.core.Keyword(null, "request-chan-listen", "request-chan-listen", 4697980374)).cljs$core$IFn$_invoke$arity$1(web_socket);
                    var inst_14602 = cljs.core.deref.call(null, inst_14601);
                    var state_14617__$1 = state_14617;
                    if (cljs.core.truth_(inst_14602)) {
                      var statearr_14624_14633 = state_14617__$1;
                      statearr_14624_14633[1] = 4;
                    } else {
                      var statearr_14625_14634 = state_14617__$1;
                      statearr_14625_14634[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_14618 === 1) {
                      var state_14617__$1 = state_14617;
                      var statearr_14626_14635 = state_14617__$1;
                      statearr_14626_14635[2] = null;
                      statearr_14626_14635[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_14628 = [null, null, null, null, null, null, null];
            statearr_14628[0] = state_machine__5396__auto__;
            statearr_14628[1] = 1;
            return statearr_14628;
          };
          var state_machine__5396__auto____1 = function(state_14617) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_14617);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_14617) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_14617);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_14629 = f__5409__auto__.call(null);
      statearr_14629[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
      return statearr_14629;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return c__5408__auto__;
};
chaperone.websocket.start_response_chan_listen_BANG_ = function start_response_chan_listen_BANG_(web_socket) {
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632)).cljs$core$IFn$_invoke$arity$1(web_socket), true);
  var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_14680) {
        var state_val_14681 = state_14680[1];
        if (state_val_14681 === 7) {
          var inst_14670 = state_14680[2];
          var inst_14671 = cljs.reader.read_string.call(null, inst_14670);
          var inst_14672 = chaperone.websocket.respond_BANG_.call(null, web_socket, inst_14671);
          var state_14680__$1 = function() {
            var statearr_14682 = state_14680;
            statearr_14682[5] = inst_14672;
            return statearr_14682;
          }();
          var statearr_14683_14692 = state_14680__$1;
          statearr_14683_14692[2] = null;
          statearr_14683_14692[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_14681 === 6) {
            var inst_14676 = state_14680[2];
            var state_14680__$1 = state_14680;
            var statearr_14684_14693 = state_14680__$1;
            statearr_14684_14693[2] = inst_14676;
            statearr_14684_14693[1] = 3;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_14681 === 5) {
              var state_14680__$1 = state_14680;
              var statearr_14685_14694 = state_14680__$1;
              statearr_14685_14694[2] = null;
              statearr_14685_14694[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_14681 === 4) {
                var inst_14668 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_14680__$1 = state_14680;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14680__$1, 7, inst_14668);
              } else {
                if (state_val_14681 === 3) {
                  var inst_14678 = state_14680[2];
                  var state_14680__$1 = state_14680;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14680__$1, inst_14678);
                } else {
                  if (state_val_14681 === 2) {
                    var inst_14665 = (new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632)).cljs$core$IFn$_invoke$arity$1(web_socket);
                    var inst_14666 = cljs.core.deref.call(null, inst_14665);
                    var state_14680__$1 = state_14680;
                    if (cljs.core.truth_(inst_14666)) {
                      var statearr_14686_14695 = state_14680__$1;
                      statearr_14686_14695[1] = 4;
                    } else {
                      var statearr_14687_14696 = state_14680__$1;
                      statearr_14687_14696[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_14681 === 1) {
                      var state_14680__$1 = state_14680;
                      var statearr_14688_14697 = state_14680__$1;
                      statearr_14688_14697[2] = null;
                      statearr_14688_14697[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_14690 = [null, null, null, null, null, null];
            statearr_14690[0] = state_machine__5396__auto__;
            statearr_14690[1] = 1;
            return statearr_14690;
          };
          var state_machine__5396__auto____1 = function(state_14680) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_14680);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_14680) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_14680);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_14691 = f__5409__auto__.call(null);
      statearr_14691[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
      return statearr_14691;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return c__5408__auto__;
};
chaperone.websocket.connect_websocket_BANG_ = function connect_websocket_BANG_(web_socket, socket_connected) {
  var ws_url = [cljs.core.str("ws://"), cljs.core.str((new cljs.core.Keyword(null, "host", "host", 1017112858)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str(":"), cljs.core.str((new cljs.core.Keyword(null, "port", "port", 1017351155)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str("/rpc")].join("");
  var socket = new WebSocket(ws_url);
  console.log("Connecting to WS: ", ws_url);
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onopen"], null), function() {
    console.log("Connected!");
    return cljs.core.async.put_BANG_.call(null, socket_connected, true);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onerror"], null), function(e) {
    return console.error("Websocket Error: ", e);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onmessage"], null), function(e) {
    console.log("On Message: ", purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
    return cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket), purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
  });
  return socket;
};
chaperone.websocket.start_BANG_ = function start_BANG_(system) {
  var seq__14714_14730 = cljs.core.seq.call(null, chaperone.crossover.rpc.all_edn_readers.call(null));
  var chunk__14715_14731 = null;
  var count__14716_14732 = 0;
  var i__14717_14733 = 0;
  while (true) {
    if (i__14717_14733 < count__14716_14732) {
      var vec__14718_14734 = cljs.core._nth.call(null, chunk__14715_14731, i__14717_14733);
      var tag_14735 = cljs.core.nth.call(null, vec__14718_14734, 0, null);
      var f_14736 = cljs.core.nth.call(null, vec__14718_14734, 1, null);
      cljs.reader.register_tag_parser_BANG_.call(null, tag_14735, f_14736);
      var G__14737 = seq__14714_14730;
      var G__14738 = chunk__14715_14731;
      var G__14739 = count__14716_14732;
      var G__14740 = i__14717_14733 + 1;
      seq__14714_14730 = G__14737;
      chunk__14715_14731 = G__14738;
      count__14716_14732 = G__14739;
      i__14717_14733 = G__14740;
      continue;
    } else {
      var temp__4092__auto___14741 = cljs.core.seq.call(null, seq__14714_14730);
      if (temp__4092__auto___14741) {
        var seq__14714_14742__$1 = temp__4092__auto___14741;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14714_14742__$1)) {
          var c__4142__auto___14743 = cljs.core.chunk_first.call(null, seq__14714_14742__$1);
          var G__14744 = cljs.core.chunk_rest.call(null, seq__14714_14742__$1);
          var G__14745 = c__4142__auto___14743;
          var G__14746 = cljs.core.count.call(null, c__4142__auto___14743);
          var G__14747 = 0;
          seq__14714_14730 = G__14744;
          chunk__14715_14731 = G__14745;
          count__14716_14732 = G__14746;
          i__14717_14733 = G__14747;
          continue;
        } else {
          var vec__14719_14748 = cljs.core.first.call(null, seq__14714_14742__$1);
          var tag_14749 = cljs.core.nth.call(null, vec__14719_14748, 0, null);
          var f_14750 = cljs.core.nth.call(null, vec__14719_14748, 1, null);
          cljs.reader.register_tag_parser_BANG_.call(null, tag_14749, f_14750);
          var G__14751 = cljs.core.next.call(null, seq__14714_14742__$1);
          var G__14752 = null;
          var G__14753 = 0;
          var G__14754 = 0;
          seq__14714_14730 = G__14751;
          chunk__14715_14731 = G__14752;
          count__14716_14732 = G__14753;
          i__14717_14733 = G__14754;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  var socket_connected = cljs.core.async.timeout.call(null, 1E4);
  var socket = chaperone.websocket.connect_websocket_BANG_.call(null, web_socket, socket_connected);
  var web_socket__$1 = cljs.core.assoc.call(null, web_socket, new cljs.core.Keyword(null, "socket", "socket", 4411822821), socket);
  chaperone.websocket.start_response_chan_listen_BANG_.call(null, web_socket__$1);
  var system__$1 = cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), web_socket__$1);
  var c__5408__auto___14755 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_14724) {
        var state_val_14725 = state_14724[1];
        if (state_val_14725 === 2) {
          var inst_14721 = state_14724[2];
          var inst_14722 = chaperone.websocket.start_request_chan_listen_BANG_.call(null, web_socket__$1);
          var state_14724__$1 = function() {
            var statearr_14726 = state_14724;
            statearr_14726[5] = inst_14721;
            return statearr_14726;
          }();
          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14724__$1, inst_14722);
        } else {
          if (state_val_14725 === 1) {
            var state_14724__$1 = state_14724;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14724__$1, 2, socket_connected);
          } else {
            return null;
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_14728 = [null, null, null, null, null, null];
            statearr_14728[0] = state_machine__5396__auto__;
            statearr_14728[1] = 1;
            return statearr_14728;
          };
          var state_machine__5396__auto____1 = function(state_14724) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_14724);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_14724) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_14724);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_14729 = f__5409__auto__.call(null);
      statearr_14729[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___14755;
      return statearr_14729;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return system__$1;
};
chaperone.websocket.stop_BANG_ = function stop_BANG_(system) {
  var web_socket_14756 = chaperone.websocket.sub_system.call(null, system);
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket_14756));
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket_14756));
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632)).cljs$core$IFn$_invoke$arity$1(web_socket_14756), false);
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632)).cljs$core$IFn$_invoke$arity$1(web_socket_14756), false);
  return system;
};
chaperone.websocket.send_BANG_ = function send_BANG_(web_socket, request) {
  var id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(request);
  var request_chan = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
  var result_chan = cljs.core.async.chan.call(null);
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_socket);
  cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.assoc, id, result_chan);
  cljs.core.async.put_BANG_.call(null, request_chan, request);
  return result_chan;
};
goog.provide("chaperone.core");
goog.require("cljs.core");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
chaperone.core.create_system = function create_system(host, port) {
  var context = cljs.core.PersistentArrayMap.EMPTY;
  return chaperone.websocket.create_sub_system.call(null, context, host, port);
};
chaperone.core.start_BANG_ = function start_BANG_(system) {
  console.log("Starting the system");
  return chaperone.websocket.start_BANG_.call(null, system);
};
chaperone.core.stop_BANG_ = function stop_BANG_(system) {
  console.log("Stopping the system");
  return chaperone.websocket.stop_BANG_.call(null, system);
};
goog.provide("purnam.common");
goog.require("cljs.core");
purnam.common.flags = function() {
  var obj18357 = {};
  return obj18357;
}();
purnam.common.get_context = function get_context() {
  return purnam.common._STAR_pure_context_STAR_;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__18342 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__18342;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__18346 = cljs.core._EQ_;
    var expr__18347 = limit;
    if (cljs.core.truth_(pred__18346.call(null, 1, expr__18347))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__18346.call(null, 2, expr__18347))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__18349 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__18350 = limit__$1 - 1;
            var G__18351 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__18349;
            limit__$1 = G__18350;
            parts = G__18351;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__18352 = index - 1;
        index = G__18352;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___18353 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___18353)) {
        var replacement_18354 = temp__4090__auto___18353;
        buffer.append([cljs.core.str(replacement_18354)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__18355 = index + 1;
      index = G__18355;
      continue;
    }
    break;
  }
};
goog.provide("purnam.native$");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("purnam.common");
goog.require("purnam.common");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.native$.nested_val = function nested_val(p__18021, val) {
  var vec__18025 = p__18021;
  var k = cljs.core.nth.call(null, vec__18025, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__18025, 1);
  if (k == null) {
    return val;
  } else {
    var o = function() {
      var obj18027 = {};
      return obj18027;
    }();
    o[k] = nested_val.call(null, ks, val);
    return o;
  }
};
purnam.native$.nested_delete = function nested_delete(p__18028, val) {
  var vec__18030 = p__18028;
  var k = cljs.core.nth.call(null, vec__18030, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__18030, 1);
  if (ks == null) {
    delete val[k];
  } else {
    nested_delete.call(null, ks, val);
  }
  return val;
};
purnam.native$.aset_in = function() {
  var aset_in = null;
  var aset_in__2 = function(var$, arr) {
    return aset_in.call(null, var$, arr, null);
  };
  var aset_in__3 = function(var$, arr, val) {
    var vec__18032 = arr;
    var k = cljs.core.nth.call(null, vec__18032, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18032, 1);
    if (k == null) {
    } else {
      if (cljs.core.empty_QMARK_.call(null, ks)) {
        if (cljs.core.truth_(val)) {
          var$[k] = val;
        } else {
          delete var$[k];
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var temp__4090__auto___18033 = var$[k];
          if (cljs.core.truth_(temp__4090__auto___18033)) {
            var svar_18034 = temp__4090__auto___18033;
            aset_in.call(null, svar_18034, ks, val);
          } else {
            if (cljs.core.truth_(val)) {
              var$[k] = purnam.native$.nested_val.call(null, ks, val);
            } else {
            }
          }
        } else {
        }
      }
    }
    return var$;
  };
  aset_in = function(var$, arr, val) {
    switch(arguments.length) {
      case 2:
        return aset_in__2.call(this, var$, arr);
      case 3:
        return aset_in__3.call(this, var$, arr, val);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset_in.cljs$core$IFn$_invoke$arity$2 = aset_in__2;
  aset_in.cljs$core$IFn$_invoke$arity$3 = aset_in__3;
  return aset_in;
}();
purnam.native$.aget_in = function() {
  var aget_in = null;
  var aget_in__1 = function(var$) {
    return var$;
  };
  var aget_in__2 = function(var$, arr) {
    if (var$ == null) {
      return null;
    } else {
      if (cljs.core.empty_QMARK_.call(null, arr)) {
        return var$;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return aget_in.call(null, var$[cljs.core.first.call(null, arr)], cljs.core.next.call(null, arr));
        } else {
          return null;
        }
      }
    }
  };
  aget_in = function(var$, arr) {
    switch(arguments.length) {
      case 1:
        return aget_in__1.call(this, var$);
      case 2:
        return aget_in__2.call(this, var$, arr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget_in.cljs$core$IFn$_invoke$arity$1 = aget_in__1;
  aget_in.cljs$core$IFn$_invoke$arity$2 = aget_in__2;
  return aget_in;
}();
purnam.native$.js_strkey = function js_strkey(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(x)].join("");
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_obj_name = function js_obj_name(this$) {
  var temp__4090__auto__ = cljs.core.re_find.call(null, /^function (\w+)/, [cljs.core.str(this$)].join(""));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__18036 = temp__4090__auto__;
    var _ = cljs.core.nth.call(null, vec__18036, 0, null);
    var n = cljs.core.nth.call(null, vec__18036, 1, null);
    return n;
  } else {
    return "Object";
  }
};
purnam.native$.js_type = function js_type(o) {
  var ty = cljs.core.type.call(null, o);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3388__auto__ = ty;
    if (cljs.core.truth_(and__3388__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3388__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(o);
  return ty__$1;
};
purnam.native$.js_lookup = function() {
  var js_lookup = null;
  var js_lookup__2 = function(o, k) {
    return o[purnam.native$.js_strkey.call(null, k)];
  };
  var js_lookup__3 = function(o, k, not_found) {
    var s = purnam.native$.js_strkey.call(null, k);
    var temp__4090__auto__ = o[s];
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return res;
    } else {
      return not_found;
    }
  };
  js_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return js_lookup__2.call(this, o, k);
      case 3:
        return js_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_lookup.cljs$core$IFn$_invoke$arity$2 = js_lookup__2;
  js_lookup.cljs$core$IFn$_invoke$arity$3 = js_lookup__3;
  return js_lookup;
}();
purnam.native$.js_range = function js_range(n) {
  var res = new Array(n);
  var i = 0;
  while (true) {
    if (i < n) {
      res.push(i);
      var G__18037 = i + 1;
      i = G__18037;
      continue;
    } else {
      return res;
    }
    break;
  }
};
purnam.native$.js_assoc = function() {
  var js_assoc = null;
  var js_assoc__3 = function(o, k, v) {
    o[purnam.native$.js_strkey.call(null, k)] = v;
    return o;
  };
  var js_assoc__4 = function() {
    var G__18038__delegate = function(o, k, v, more) {
      while (true) {
        js_assoc.call(null, o, k, v);
        if (cljs.core.truth_(more)) {
          var G__18039 = o;
          var G__18040 = cljs.core.first.call(null, more);
          var G__18041 = cljs.core.second.call(null, more);
          var G__18042 = cljs.core.nnext.call(null, more);
          o = G__18039;
          k = G__18040;
          v = G__18041;
          more = G__18042;
          continue;
        } else {
          return o;
        }
        break;
      }
    };
    var G__18038 = function(o, k, v, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18038__delegate.call(this, o, k, v, more);
    };
    G__18038.cljs$lang$maxFixedArity = 3;
    G__18038.cljs$lang$applyTo = function(arglist__18043) {
      var o = cljs.core.first(arglist__18043);
      arglist__18043 = cljs.core.next(arglist__18043);
      var k = cljs.core.first(arglist__18043);
      arglist__18043 = cljs.core.next(arglist__18043);
      var v = cljs.core.first(arglist__18043);
      var more = cljs.core.rest(arglist__18043);
      return G__18038__delegate(o, k, v, more);
    };
    G__18038.cljs$core$IFn$_invoke$arity$variadic = G__18038__delegate;
    return G__18038;
  }();
  js_assoc = function(o, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return js_assoc__3.call(this, o, k, v);
      default:
        return js_assoc__4.cljs$core$IFn$_invoke$arity$variadic(o, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_assoc.cljs$lang$maxFixedArity = 3;
  js_assoc.cljs$lang$applyTo = js_assoc__4.cljs$lang$applyTo;
  js_assoc.cljs$core$IFn$_invoke$arity$3 = js_assoc__3;
  js_assoc.cljs$core$IFn$_invoke$arity$variadic = js_assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return js_assoc;
}();
purnam.native$.js_dissoc = function() {
  var js_dissoc__delegate = function(o, k, more) {
    while (true) {
      delete o[purnam.native$.js_strkey.call(null, k)];
      if (cljs.core.truth_(more)) {
        var G__18044 = o;
        var G__18045 = cljs.core.first.call(null, more);
        var G__18046 = cljs.core.next.call(null, more);
        o = G__18044;
        k = G__18045;
        more = G__18046;
        continue;
      } else {
        return o;
      }
      break;
    }
  };
  var js_dissoc = function(o, k, var_args) {
    var more = null;
    if (arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return js_dissoc__delegate.call(this, o, k, more);
  };
  js_dissoc.cljs$lang$maxFixedArity = 2;
  js_dissoc.cljs$lang$applyTo = function(arglist__18047) {
    var o = cljs.core.first(arglist__18047);
    arglist__18047 = cljs.core.next(arglist__18047);
    var k = cljs.core.first(arglist__18047);
    var more = cljs.core.rest(arglist__18047);
    return js_dissoc__delegate(o, k, more);
  };
  js_dissoc.cljs$core$IFn$_invoke$arity$variadic = js_dissoc__delegate;
  return js_dissoc;
}();
purnam.native$.js_empty = function js_empty(o) {
  var G__18053_18058 = goog.typeOf(o);
  if (cljs.core._EQ_.call(null, "array", G__18053_18058)) {
    o["length"] = 0;
  } else {
    if (cljs.core._EQ_.call(null, "object", G__18053_18058)) {
      var seq__18054_18059 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o));
      var chunk__18055_18060 = null;
      var count__18056_18061 = 0;
      var i__18057_18062 = 0;
      while (true) {
        if (i__18057_18062 < count__18056_18061) {
          var k_18063 = cljs.core._nth.call(null, chunk__18055_18060, i__18057_18062);
          delete o[k_18063];
          var G__18064 = seq__18054_18059;
          var G__18065 = chunk__18055_18060;
          var G__18066 = count__18056_18061;
          var G__18067 = i__18057_18062 + 1;
          seq__18054_18059 = G__18064;
          chunk__18055_18060 = G__18065;
          count__18056_18061 = G__18066;
          i__18057_18062 = G__18067;
          continue;
        } else {
          var temp__4092__auto___18068 = cljs.core.seq.call(null, seq__18054_18059);
          if (temp__4092__auto___18068) {
            var seq__18054_18069__$1 = temp__4092__auto___18068;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__18054_18069__$1)) {
              var c__4142__auto___18070 = cljs.core.chunk_first.call(null, seq__18054_18069__$1);
              var G__18071 = cljs.core.chunk_rest.call(null, seq__18054_18069__$1);
              var G__18072 = c__4142__auto___18070;
              var G__18073 = cljs.core.count.call(null, c__4142__auto___18070);
              var G__18074 = 0;
              seq__18054_18059 = G__18071;
              chunk__18055_18060 = G__18072;
              count__18056_18061 = G__18073;
              i__18057_18062 = G__18074;
              continue;
            } else {
              var k_18075 = cljs.core.first.call(null, seq__18054_18069__$1);
              delete o[k_18075];
              var G__18076 = cljs.core.next.call(null, seq__18054_18069__$1);
              var G__18077 = null;
              var G__18078 = 0;
              var G__18079 = 0;
              seq__18054_18059 = G__18076;
              chunk__18055_18060 = G__18077;
              count__18056_18061 = G__18078;
              i__18057_18062 = G__18079;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(goog.typeOf(o))].join(""));
      } else {
      }
    }
  }
  return o;
};
purnam.native$.js_merge = function() {
  var js_merge = null;
  var js_merge__2 = function(o1, o2) {
    var seq__18084_18088 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__18085_18089 = null;
    var count__18086_18090 = 0;
    var i__18087_18091 = 0;
    while (true) {
      if (i__18087_18091 < count__18086_18090) {
        var k_18092 = cljs.core._nth.call(null, chunk__18085_18089, i__18087_18091);
        o1[k_18092] = o2[k_18092];
        var G__18093 = seq__18084_18088;
        var G__18094 = chunk__18085_18089;
        var G__18095 = count__18086_18090;
        var G__18096 = i__18087_18091 + 1;
        seq__18084_18088 = G__18093;
        chunk__18085_18089 = G__18094;
        count__18086_18090 = G__18095;
        i__18087_18091 = G__18096;
        continue;
      } else {
        var temp__4092__auto___18097 = cljs.core.seq.call(null, seq__18084_18088);
        if (temp__4092__auto___18097) {
          var seq__18084_18098__$1 = temp__4092__auto___18097;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18084_18098__$1)) {
            var c__4142__auto___18099 = cljs.core.chunk_first.call(null, seq__18084_18098__$1);
            var G__18100 = cljs.core.chunk_rest.call(null, seq__18084_18098__$1);
            var G__18101 = c__4142__auto___18099;
            var G__18102 = cljs.core.count.call(null, c__4142__auto___18099);
            var G__18103 = 0;
            seq__18084_18088 = G__18100;
            chunk__18085_18089 = G__18101;
            count__18086_18090 = G__18102;
            i__18087_18091 = G__18103;
            continue;
          } else {
            var k_18104 = cljs.core.first.call(null, seq__18084_18098__$1);
            o1[k_18104] = o2[k_18104];
            var G__18105 = cljs.core.next.call(null, seq__18084_18098__$1);
            var G__18106 = null;
            var G__18107 = 0;
            var G__18108 = 0;
            seq__18084_18088 = G__18105;
            chunk__18085_18089 = G__18106;
            count__18086_18090 = G__18107;
            i__18087_18091 = G__18108;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge__3 = function() {
    var G__18109__delegate = function(o1, o2, more) {
      return cljs.core.apply.call(null, js_merge, js_merge.call(null, o1, o2), more);
    };
    var G__18109 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18109__delegate.call(this, o1, o2, more);
    };
    G__18109.cljs$lang$maxFixedArity = 2;
    G__18109.cljs$lang$applyTo = function(arglist__18110) {
      var o1 = cljs.core.first(arglist__18110);
      arglist__18110 = cljs.core.next(arglist__18110);
      var o2 = cljs.core.first(arglist__18110);
      var more = cljs.core.rest(arglist__18110);
      return G__18109__delegate(o1, o2, more);
    };
    G__18109.cljs$core$IFn$_invoke$arity$variadic = G__18109__delegate;
    return G__18109;
  }();
  js_merge = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge__2.call(this, o1, o2);
      default:
        return js_merge__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge.cljs$lang$maxFixedArity = 2;
  js_merge.cljs$lang$applyTo = js_merge__3.cljs$lang$applyTo;
  js_merge.cljs$core$IFn$_invoke$arity$2 = js_merge__2;
  js_merge.cljs$core$IFn$_invoke$arity$variadic = js_merge__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge;
}();
purnam.native$.js_merge_nil = function() {
  var js_merge_nil = null;
  var js_merge_nil__2 = function(o1, o2) {
    var seq__18115_18119 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__18116_18120 = null;
    var count__18117_18121 = 0;
    var i__18118_18122 = 0;
    while (true) {
      if (i__18118_18122 < count__18117_18121) {
        var k_18123 = cljs.core._nth.call(null, chunk__18116_18120, i__18118_18122);
        if (cljs.core.not.call(null, o1[k_18123])) {
          o1[k_18123] = o2[k_18123];
        } else {
        }
        var G__18124 = seq__18115_18119;
        var G__18125 = chunk__18116_18120;
        var G__18126 = count__18117_18121;
        var G__18127 = i__18118_18122 + 1;
        seq__18115_18119 = G__18124;
        chunk__18116_18120 = G__18125;
        count__18117_18121 = G__18126;
        i__18118_18122 = G__18127;
        continue;
      } else {
        var temp__4092__auto___18128 = cljs.core.seq.call(null, seq__18115_18119);
        if (temp__4092__auto___18128) {
          var seq__18115_18129__$1 = temp__4092__auto___18128;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18115_18129__$1)) {
            var c__4142__auto___18130 = cljs.core.chunk_first.call(null, seq__18115_18129__$1);
            var G__18131 = cljs.core.chunk_rest.call(null, seq__18115_18129__$1);
            var G__18132 = c__4142__auto___18130;
            var G__18133 = cljs.core.count.call(null, c__4142__auto___18130);
            var G__18134 = 0;
            seq__18115_18119 = G__18131;
            chunk__18116_18120 = G__18132;
            count__18117_18121 = G__18133;
            i__18118_18122 = G__18134;
            continue;
          } else {
            var k_18135 = cljs.core.first.call(null, seq__18115_18129__$1);
            if (cljs.core.not.call(null, o1[k_18135])) {
              o1[k_18135] = o2[k_18135];
            } else {
            }
            var G__18136 = cljs.core.next.call(null, seq__18115_18129__$1);
            var G__18137 = null;
            var G__18138 = 0;
            var G__18139 = 0;
            seq__18115_18119 = G__18136;
            chunk__18116_18120 = G__18137;
            count__18117_18121 = G__18138;
            i__18118_18122 = G__18139;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge_nil__3 = function() {
    var G__18140__delegate = function(o1, o2, more) {
      while (true) {
        js_merge_nil.call(null, o1, o2);
        if (cljs.core.truth_(more)) {
          var G__18141 = js_merge_nil.call(null, o1, o2);
          var G__18142 = cljs.core.first.call(null, more);
          var G__18143 = cljs.core.next.call(null, more);
          o1 = G__18141;
          o2 = G__18142;
          more = G__18143;
          continue;
        } else {
          return o1;
        }
        break;
      }
    };
    var G__18140 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18140__delegate.call(this, o1, o2, more);
    };
    G__18140.cljs$lang$maxFixedArity = 2;
    G__18140.cljs$lang$applyTo = function(arglist__18144) {
      var o1 = cljs.core.first(arglist__18144);
      arglist__18144 = cljs.core.next(arglist__18144);
      var o2 = cljs.core.first(arglist__18144);
      var more = cljs.core.rest(arglist__18144);
      return G__18140__delegate(o1, o2, more);
    };
    G__18140.cljs$core$IFn$_invoke$arity$variadic = G__18140__delegate;
    return G__18140;
  }();
  js_merge_nil = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge_nil__2.call(this, o1, o2);
      default:
        return js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge_nil.cljs$lang$maxFixedArity = 2;
  js_merge_nil.cljs$lang$applyTo = js_merge_nil__3.cljs$lang$applyTo;
  js_merge_nil.cljs$core$IFn$_invoke$arity$2 = js_merge_nil__2;
  js_merge_nil.cljs$core$IFn$_invoke$arity$variadic = js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge_nil;
}();
purnam.native$.js_replace = function js_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_merge.call(null, o1, o2);
};
purnam.native$.js_equals = function js_equals(v1, v2) {
  if (cljs.core._EQ_.call(null, v1, v2)) {
    return true;
  } else {
    var t1 = goog.typeOf(v1);
    var t2 = goog.typeOf(v2);
    if (cljs.core._EQ_.call(null, "array", t1, t2)) {
      return goog.array.equals(v1, v2, js_equals);
    } else {
      if (cljs.core._EQ_.call(null, "object", t1, t2)) {
        var ks1 = cljs.core.js_keys.call(null, v1).sort();
        var ks2 = cljs.core.js_keys.call(null, v2).sort();
        if (cljs.core.truth_(goog.array.equals(ks1, ks2))) {
          return goog.array.every(ks1, function(k) {
            return js_equals.call(null, v1[k], v2[k]);
          });
        } else {
          return false;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
  }
};
purnam.native$.js_copy = function js_copy(o) {
  return goog.object.clone(o);
};
purnam.native$.js_initial_value = function js_initial_value(v) {
  var t = goog.typeOf(v);
  if (cljs.core._EQ_.call(null, t, "object")) {
    var obj18148 = {};
    return obj18148;
  } else {
    if (cljs.core._EQ_.call(null, t, "array")) {
      return[];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return v;
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_deep_extend = function() {
  var js_deep_extend = null;
  var js_deep_extend__2 = function(to, from) {
    var visited = [from];
    var visitedlu = [to];
    js_deep_extend.call(null, to, from, visited, visitedlu);
    return to;
  };
  var js_deep_extend__4 = function(to, from, visited, visitedlu) {
    var seq__18153_18157 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, from));
    var chunk__18154_18158 = null;
    var count__18155_18159 = 0;
    var i__18156_18160 = 0;
    while (true) {
      if (i__18156_18160 < count__18155_18159) {
        var k_18161 = cljs.core._nth.call(null, chunk__18154_18158, i__18156_18160);
        var v_18162 = from[k_18161];
        var vn_18163 = purnam.native$.js_initial_value.call(null, v_18162);
        if (cljs.core.not_EQ_.call(null, v_18162, vn_18163)) {
          var i_18164 = visited.indexOf(v_18162);
          if (cljs.core._EQ_.call(null, -1, i_18164)) {
            visited.push(v_18162);
            visitedlu.push(vn_18163);
            js_deep_extend.call(null, vn_18163, v_18162, visited, visitedlu);
            to[k_18161] = vn_18163;
          } else {
            to[k_18161] = visitedlu[i_18164];
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            to[k_18161] = v_18162;
          } else {
          }
        }
        var G__18165 = seq__18153_18157;
        var G__18166 = chunk__18154_18158;
        var G__18167 = count__18155_18159;
        var G__18168 = i__18156_18160 + 1;
        seq__18153_18157 = G__18165;
        chunk__18154_18158 = G__18166;
        count__18155_18159 = G__18167;
        i__18156_18160 = G__18168;
        continue;
      } else {
        var temp__4092__auto___18169 = cljs.core.seq.call(null, seq__18153_18157);
        if (temp__4092__auto___18169) {
          var seq__18153_18170__$1 = temp__4092__auto___18169;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18153_18170__$1)) {
            var c__4142__auto___18171 = cljs.core.chunk_first.call(null, seq__18153_18170__$1);
            var G__18172 = cljs.core.chunk_rest.call(null, seq__18153_18170__$1);
            var G__18173 = c__4142__auto___18171;
            var G__18174 = cljs.core.count.call(null, c__4142__auto___18171);
            var G__18175 = 0;
            seq__18153_18157 = G__18172;
            chunk__18154_18158 = G__18173;
            count__18155_18159 = G__18174;
            i__18156_18160 = G__18175;
            continue;
          } else {
            var k_18176 = cljs.core.first.call(null, seq__18153_18170__$1);
            var v_18177 = from[k_18176];
            var vn_18178 = purnam.native$.js_initial_value.call(null, v_18177);
            if (cljs.core.not_EQ_.call(null, v_18177, vn_18178)) {
              var i_18179 = visited.indexOf(v_18177);
              if (cljs.core._EQ_.call(null, -1, i_18179)) {
                visited.push(v_18177);
                visitedlu.push(vn_18178);
                js_deep_extend.call(null, vn_18178, v_18177, visited, visitedlu);
                to[k_18176] = vn_18178;
              } else {
                to[k_18176] = visitedlu[i_18179];
              }
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                to[k_18176] = v_18177;
              } else {
              }
            }
            var G__18180 = cljs.core.next.call(null, seq__18153_18170__$1);
            var G__18181 = null;
            var G__18182 = 0;
            var G__18183 = 0;
            seq__18153_18157 = G__18180;
            chunk__18154_18158 = G__18181;
            count__18155_18159 = G__18182;
            i__18156_18160 = G__18183;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return to;
  };
  js_deep_extend = function(to, from, visited, visitedlu) {
    switch(arguments.length) {
      case 2:
        return js_deep_extend__2.call(this, to, from);
      case 4:
        return js_deep_extend__4.call(this, to, from, visited, visitedlu);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_deep_extend.cljs$core$IFn$_invoke$arity$2 = js_deep_extend__2;
  js_deep_extend.cljs$core$IFn$_invoke$arity$4 = js_deep_extend__4;
  return js_deep_extend;
}();
purnam.native$.js_deep_copy = function js_deep_copy(value) {
  var vn = purnam.native$.js_initial_value.call(null, value);
  if (cljs.core.not_EQ_.call(null, value, vn)) {
    return purnam.native$.js_deep_extend.call(null, vn, value);
  } else {
    return value;
  }
};
purnam.native$.js_deep_replace = function js_deep_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_deep_extend.call(null, o1, o2);
};
purnam.native$.js_map_STAR_ = function() {
  var js_map_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var seq__18189_18193 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__18190_18194 = null;
    var count__18191_18195 = 0;
    var i__18192_18196 = 0;
    while (true) {
      if (i__18192_18196 < count__18191_18195) {
        var i_18197 = cljs.core._nth.call(null, chunk__18190_18194, i__18192_18196);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__18189_18193, chunk__18190_18194, count__18191_18195, i__18192_18196, i_18197) {
          return function(p1__18184_SHARP_) {
            return p1__18184_SHARP_[i_18197];
          };
        }(seq__18189_18193, chunk__18190_18194, count__18191_18195, i__18192_18196, i_18197), args)));
        var G__18198 = seq__18189_18193;
        var G__18199 = chunk__18190_18194;
        var G__18200 = count__18191_18195;
        var G__18201 = i__18192_18196 + 1;
        seq__18189_18193 = G__18198;
        chunk__18190_18194 = G__18199;
        count__18191_18195 = G__18200;
        i__18192_18196 = G__18201;
        continue;
      } else {
        var temp__4092__auto___18202 = cljs.core.seq.call(null, seq__18189_18193);
        if (temp__4092__auto___18202) {
          var seq__18189_18203__$1 = temp__4092__auto___18202;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18189_18203__$1)) {
            var c__4142__auto___18204 = cljs.core.chunk_first.call(null, seq__18189_18203__$1);
            var G__18205 = cljs.core.chunk_rest.call(null, seq__18189_18203__$1);
            var G__18206 = c__4142__auto___18204;
            var G__18207 = cljs.core.count.call(null, c__4142__auto___18204);
            var G__18208 = 0;
            seq__18189_18193 = G__18205;
            chunk__18190_18194 = G__18206;
            count__18191_18195 = G__18207;
            i__18192_18196 = G__18208;
            continue;
          } else {
            var i_18209 = cljs.core.first.call(null, seq__18189_18203__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__18189_18193, chunk__18190_18194, count__18191_18195, i__18192_18196, i_18209, seq__18189_18203__$1, temp__4092__auto___18202) {
              return function(p1__18184_SHARP_) {
                return p1__18184_SHARP_[i_18209];
              };
            }(seq__18189_18193, chunk__18190_18194, count__18191_18195, i__18192_18196, i_18209, seq__18189_18203__$1, temp__4092__auto___18202), args)));
            var G__18210 = cljs.core.next.call(null, seq__18189_18203__$1);
            var G__18211 = null;
            var G__18212 = 0;
            var G__18213 = 0;
            seq__18189_18193 = G__18210;
            chunk__18190_18194 = G__18211;
            count__18191_18195 = G__18212;
            i__18192_18196 = G__18213;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map_STAR___delegate.call(this, f, args);
  };
  js_map_STAR_.cljs$lang$maxFixedArity = 1;
  js_map_STAR_.cljs$lang$applyTo = function(arglist__18214) {
    var f = cljs.core.first(arglist__18214);
    var args = cljs.core.rest(arglist__18214);
    return js_map_STAR___delegate(f, args);
  };
  js_map_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_map_STAR___delegate;
  return js_map_STAR_;
}();
purnam.native$.js_mapcat_STAR_ = function() {
  var js_mapcat_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__18215_SHARP_) {
            return p1__18215_SHARP_[i];
          };
        }(i, output__$1), args));
        var G__18216 = i + 1;
        var G__18217 = output__$1.concat(res);
        i = G__18216;
        output__$1 = G__18217;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat_STAR___delegate.call(this, f, args);
  };
  js_mapcat_STAR_.cljs$lang$maxFixedArity = 1;
  js_mapcat_STAR_.cljs$lang$applyTo = function(arglist__18218) {
    var f = cljs.core.first(arglist__18218);
    var args = cljs.core.rest(arglist__18218);
    return js_mapcat_STAR___delegate(f, args);
  };
  js_mapcat_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_mapcat_STAR___delegate;
  return js_mapcat_STAR_;
}();
purnam.native$.js_map = function() {
  var js_map__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var seq__18224_18228 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__18225_18229 = null;
    var count__18226_18230 = 0;
    var i__18227_18231 = 0;
    while (true) {
      if (i__18227_18231 < count__18226_18230) {
        var i_18232 = cljs.core._nth.call(null, chunk__18225_18229, i__18227_18231);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__18224_18228, chunk__18225_18229, count__18226_18230, i__18227_18231, i_18232) {
          return function(p1__18219_SHARP_) {
            return cljs.core.nth.call(null, p1__18219_SHARP_, i_18232);
          };
        }(seq__18224_18228, chunk__18225_18229, count__18226_18230, i__18227_18231, i_18232), args)));
        var G__18233 = seq__18224_18228;
        var G__18234 = chunk__18225_18229;
        var G__18235 = count__18226_18230;
        var G__18236 = i__18227_18231 + 1;
        seq__18224_18228 = G__18233;
        chunk__18225_18229 = G__18234;
        count__18226_18230 = G__18235;
        i__18227_18231 = G__18236;
        continue;
      } else {
        var temp__4092__auto___18237 = cljs.core.seq.call(null, seq__18224_18228);
        if (temp__4092__auto___18237) {
          var seq__18224_18238__$1 = temp__4092__auto___18237;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18224_18238__$1)) {
            var c__4142__auto___18239 = cljs.core.chunk_first.call(null, seq__18224_18238__$1);
            var G__18240 = cljs.core.chunk_rest.call(null, seq__18224_18238__$1);
            var G__18241 = c__4142__auto___18239;
            var G__18242 = cljs.core.count.call(null, c__4142__auto___18239);
            var G__18243 = 0;
            seq__18224_18228 = G__18240;
            chunk__18225_18229 = G__18241;
            count__18226_18230 = G__18242;
            i__18227_18231 = G__18243;
            continue;
          } else {
            var i_18244 = cljs.core.first.call(null, seq__18224_18238__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__18224_18228, chunk__18225_18229, count__18226_18230, i__18227_18231, i_18244, seq__18224_18238__$1, temp__4092__auto___18237) {
              return function(p1__18219_SHARP_) {
                return cljs.core.nth.call(null, p1__18219_SHARP_, i_18244);
              };
            }(seq__18224_18228, chunk__18225_18229, count__18226_18230, i__18227_18231, i_18244, seq__18224_18238__$1, temp__4092__auto___18237), args)));
            var G__18245 = cljs.core.next.call(null, seq__18224_18238__$1);
            var G__18246 = null;
            var G__18247 = 0;
            var G__18248 = 0;
            seq__18224_18228 = G__18245;
            chunk__18225_18229 = G__18246;
            count__18226_18230 = G__18247;
            i__18227_18231 = G__18248;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map__delegate.call(this, f, args);
  };
  js_map.cljs$lang$maxFixedArity = 1;
  js_map.cljs$lang$applyTo = function(arglist__18249) {
    var f = cljs.core.first(arglist__18249);
    var args = cljs.core.rest(arglist__18249);
    return js_map__delegate(f, args);
  };
  js_map.cljs$core$IFn$_invoke$arity$variadic = js_map__delegate;
  return js_map;
}();
purnam.native$.js_mapcat = function() {
  var js_mapcat__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__18250_SHARP_) {
            return cljs.core.nth.call(null, p1__18250_SHARP_, i);
          };
        }(i, output__$1), args));
        var G__18251 = i + 1;
        var G__18252 = output__$1.concat(res);
        i = G__18251;
        output__$1 = G__18252;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat__delegate.call(this, f, args);
  };
  js_mapcat.cljs$lang$maxFixedArity = 1;
  js_mapcat.cljs$lang$applyTo = function(arglist__18253) {
    var f = cljs.core.first(arglist__18253);
    var args = cljs.core.rest(arglist__18253);
    return js_mapcat__delegate(f, args);
  };
  js_mapcat.cljs$core$IFn$_invoke$arity$variadic = js_mapcat__delegate;
  return js_mapcat;
}();
purnam.native$.js_concat = function() {
  var js_concat__delegate = function(args) {
    var output = [];
    var seq__18266_18278 = cljs.core.seq.call(null, args);
    var chunk__18271_18279 = null;
    var count__18272_18280 = 0;
    var i__18273_18281 = 0;
    while (true) {
      if (i__18273_18281 < count__18272_18280) {
        var ar_18282 = cljs.core._nth.call(null, chunk__18271_18279, i__18273_18281);
        var seq__18274_18283 = cljs.core.seq.call(null, ar_18282);
        var chunk__18275_18284 = null;
        var count__18276_18285 = 0;
        var i__18277_18286 = 0;
        while (true) {
          if (i__18277_18286 < count__18276_18285) {
            var v_18287 = cljs.core._nth.call(null, chunk__18275_18284, i__18277_18286);
            output.push(v_18287);
            var G__18288 = seq__18274_18283;
            var G__18289 = chunk__18275_18284;
            var G__18290 = count__18276_18285;
            var G__18291 = i__18277_18286 + 1;
            seq__18274_18283 = G__18288;
            chunk__18275_18284 = G__18289;
            count__18276_18285 = G__18290;
            i__18277_18286 = G__18291;
            continue;
          } else {
            var temp__4092__auto___18292 = cljs.core.seq.call(null, seq__18274_18283);
            if (temp__4092__auto___18292) {
              var seq__18274_18293__$1 = temp__4092__auto___18292;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__18274_18293__$1)) {
                var c__4142__auto___18294 = cljs.core.chunk_first.call(null, seq__18274_18293__$1);
                var G__18295 = cljs.core.chunk_rest.call(null, seq__18274_18293__$1);
                var G__18296 = c__4142__auto___18294;
                var G__18297 = cljs.core.count.call(null, c__4142__auto___18294);
                var G__18298 = 0;
                seq__18274_18283 = G__18295;
                chunk__18275_18284 = G__18296;
                count__18276_18285 = G__18297;
                i__18277_18286 = G__18298;
                continue;
              } else {
                var v_18299 = cljs.core.first.call(null, seq__18274_18293__$1);
                output.push(v_18299);
                var G__18300 = cljs.core.next.call(null, seq__18274_18293__$1);
                var G__18301 = null;
                var G__18302 = 0;
                var G__18303 = 0;
                seq__18274_18283 = G__18300;
                chunk__18275_18284 = G__18301;
                count__18276_18285 = G__18302;
                i__18277_18286 = G__18303;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__18304 = seq__18266_18278;
        var G__18305 = chunk__18271_18279;
        var G__18306 = count__18272_18280;
        var G__18307 = i__18273_18281 + 1;
        seq__18266_18278 = G__18304;
        chunk__18271_18279 = G__18305;
        count__18272_18280 = G__18306;
        i__18273_18281 = G__18307;
        continue;
      } else {
        var temp__4092__auto___18308 = cljs.core.seq.call(null, seq__18266_18278);
        if (temp__4092__auto___18308) {
          var seq__18266_18309__$1 = temp__4092__auto___18308;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18266_18309__$1)) {
            var c__4142__auto___18310 = cljs.core.chunk_first.call(null, seq__18266_18309__$1);
            var G__18311 = cljs.core.chunk_rest.call(null, seq__18266_18309__$1);
            var G__18312 = c__4142__auto___18310;
            var G__18313 = cljs.core.count.call(null, c__4142__auto___18310);
            var G__18314 = 0;
            seq__18266_18278 = G__18311;
            chunk__18271_18279 = G__18312;
            count__18272_18280 = G__18313;
            i__18273_18281 = G__18314;
            continue;
          } else {
            var ar_18315 = cljs.core.first.call(null, seq__18266_18309__$1);
            var seq__18267_18316 = cljs.core.seq.call(null, ar_18315);
            var chunk__18268_18317 = null;
            var count__18269_18318 = 0;
            var i__18270_18319 = 0;
            while (true) {
              if (i__18270_18319 < count__18269_18318) {
                var v_18320 = cljs.core._nth.call(null, chunk__18268_18317, i__18270_18319);
                output.push(v_18320);
                var G__18321 = seq__18267_18316;
                var G__18322 = chunk__18268_18317;
                var G__18323 = count__18269_18318;
                var G__18324 = i__18270_18319 + 1;
                seq__18267_18316 = G__18321;
                chunk__18268_18317 = G__18322;
                count__18269_18318 = G__18323;
                i__18270_18319 = G__18324;
                continue;
              } else {
                var temp__4092__auto___18325__$1 = cljs.core.seq.call(null, seq__18267_18316);
                if (temp__4092__auto___18325__$1) {
                  var seq__18267_18326__$1 = temp__4092__auto___18325__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__18267_18326__$1)) {
                    var c__4142__auto___18327 = cljs.core.chunk_first.call(null, seq__18267_18326__$1);
                    var G__18328 = cljs.core.chunk_rest.call(null, seq__18267_18326__$1);
                    var G__18329 = c__4142__auto___18327;
                    var G__18330 = cljs.core.count.call(null, c__4142__auto___18327);
                    var G__18331 = 0;
                    seq__18267_18316 = G__18328;
                    chunk__18268_18317 = G__18329;
                    count__18269_18318 = G__18330;
                    i__18270_18319 = G__18331;
                    continue;
                  } else {
                    var v_18332 = cljs.core.first.call(null, seq__18267_18326__$1);
                    output.push(v_18332);
                    var G__18333 = cljs.core.next.call(null, seq__18267_18326__$1);
                    var G__18334 = null;
                    var G__18335 = 0;
                    var G__18336 = 0;
                    seq__18267_18316 = G__18333;
                    chunk__18268_18317 = G__18334;
                    count__18269_18318 = G__18335;
                    i__18270_18319 = G__18336;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__18337 = cljs.core.next.call(null, seq__18266_18309__$1);
            var G__18338 = null;
            var G__18339 = 0;
            var G__18340 = 0;
            seq__18266_18278 = G__18337;
            chunk__18271_18279 = G__18338;
            count__18272_18280 = G__18339;
            i__18273_18281 = G__18340;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return js_concat__delegate.call(this, args);
  };
  js_concat.cljs$lang$maxFixedArity = 0;
  js_concat.cljs$lang$applyTo = function(arglist__18341) {
    var args = cljs.core.seq(arglist__18341);
    return js_concat__delegate(args);
  };
  js_concat.cljs$core$IFn$_invoke$arity$variadic = js_concat__delegate;
  return js_concat;
}();
purnam.native$.js_LT__ = function js_LT__(obj) {
  return cljs.core.clj__GT_js.call(null, obj);
};
purnam.native$.log = function() {
  var log = null;
  var log__1 = function(x) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x)].join(""), x);
    } else {
      console.log([cljs.core.str(x)].join(""));
    }
    return x;
  };
  var log__2 = function(x, y) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""), y);
    } else {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""));
    }
    return y;
  };
  log = function(x, y) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, x);
      case 2:
        return log__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log;
}();
purnam.native$.augment_fn_string = function augment_fn_string(func) {
  if (typeof func === "string") {
    return function(x) {
      return purnam.native$.aget_in.call(null, x, clojure.string.split.call(null, func, /\./));
    };
  } else {
    return func;
  }
};
purnam.native$.check_fn = function() {
  var check_fn = null;
  var check_fn__1 = function(chk) {
    return function(x) {
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, x);
      } else {
        return cljs.core._EQ_.call(null, x, chk);
      }
    };
  };
  var check_fn__2 = function(func, chk) {
    return function(x) {
      var res = func.call(null, x);
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, res);
      } else {
        return cljs.core._EQ_.call(null, res, chk);
      }
    };
  };
  check_fn = function(func, chk) {
    switch(arguments.length) {
      case 1:
        return check_fn__1.call(this, func);
      case 2:
        return check_fn__2.call(this, func, chk);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_fn.cljs$core$IFn$_invoke$arity$1 = check_fn__1;
  check_fn.cljs$core$IFn$_invoke$arity$2 = check_fn__2;
  return check_fn;
}();
goog.provide("chaperone.ng.core");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("chaperone.core");
goog.require("chaperone.core");
chaperone.ng.core.chaperone_app = angular.module("chaperone.app", ["ngRoute"]);
chaperone.ng.core.chaperone_app_System = ["$location", function($location) {
  return chaperone.core.start_BANG_.call(null, chaperone.core.create_system.call(null, function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["host"];
    return fn_SHARP_.call(obj_SHARP_);
  }(), function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["port"];
    return fn_SHARP_.call(obj_SHARP_);
  }()));
}];
angular.module("chaperone.app").factory("System", chaperone.ng.core.chaperone_app_System);
angular.module("chaperone.app").config(["$routeProvider", function($routeProvider) {
  var G__14861 = $routeProvider;
  G__14861.when("/admin/users/add", function() {
    var G__14862 = function() {
      var obj14865 = {};
      return obj14865;
    }();
    G__14862["templateUrl"] = "/public/partials/admin/user/add-user-form.html";
    G__14862["controller"] = "AdminUserCtrl";
    return G__14862;
  }());
  G__14861.when("/admin/users/list", function() {
    var G__14866 = function() {
      var obj14869 = {};
      return obj14869;
    }();
    G__14866["templateUrl"] = "/public/partials/admin/user/list.html";
    G__14866["controller"] = "AdminUserCtrl";
    return G__14866;
  }());
  G__14861.otherwise(function() {
    var G__14870 = function() {
      var obj14873 = {};
      return obj14873;
    }();
    G__14870["templateUrl"] = "/public/partials/index.html";
    return G__14870;
  }());
  return G__14861;
}]);
goog.provide("chaperone.user");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.user.User");
goog.require("cljs.core.async");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc");
chaperone.user.save_user = function save_user(system, user) {
  var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "save", "save", 1017427183), user);
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  return chaperone.websocket.send_BANG_.call(null, web_socket, request);
};
chaperone.user.list_users = function list_users(system) {
  var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "list", "list", 1017226256), cljs.core.PersistentArrayMap.EMPTY);
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  return chaperone.websocket.send_BANG_.call(null, web_socket, request);
};
goog.provide("chaperone.ng.admin.user");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("chaperone.user");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.core");
chaperone.ng.admin.user.load_user = function load_user(system, $scope) {
  var user = chaperone.crossover.user.new_user.call(null, "", "", "", "");
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user));
};
chaperone.ng.admin.user.chaperone_app_AdminUserCtrl = ["$scope", "$location", "System", function($scope, $location, System) {
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initUserForm"], null), function() {
    purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["title"], null), "Add");
    return chaperone.ng.admin.user.load_user.call(null, System, $scope);
  });
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["saveUser"], null), function() {
    var user = chaperone.crossover.user.map__GT_User.call(null, cljs.core.js__GT_clj.call(null, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null)), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true));
    var chan = chaperone.user.save_user.call(null, System, user);
    var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_14879) {
          var state_val_14880 = state_14879[1];
          if (state_val_14880 === 2) {
            var inst_14875 = state_14879[2];
            var inst_14876 = function() {
              var result = inst_14875;
              return function(result, inst_14875, state_val_14880) {
                return function() {
                  var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
                  var fn_SHARP_ = obj_SHARP_["path"];
                  return fn_SHARP_.call(obj_SHARP_, "/admin/users/list");
                };
              }(result, inst_14875, state_val_14880);
            }();
            var inst_14877 = $scope.$apply(inst_14876);
            var state_14879__$1 = state_14879;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14879__$1, inst_14877);
          } else {
            if (state_val_14880 === 1) {
              var state_14879__$1 = state_14879;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14879__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_14882 = [null, null, null, null, null];
              statearr_14882[0] = state_machine__5396__auto__;
              statearr_14882[1] = 1;
              return statearr_14882;
            };
            var state_machine__5396__auto____1 = function(state_14879) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_14879);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_14879) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_14879);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_14883 = f__5409__auto__.call(null);
        statearr_14883[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
        return statearr_14883;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return c__5408__auto__;
  });
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initListUsers"], null), function() {
    var chan = chaperone.user.list_users.call(null, System);
    var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_14889) {
          var state_val_14890 = state_14889[1];
          if (state_val_14890 === 2) {
            var inst_14885 = state_14889[2];
            var inst_14886 = function() {
              var result = inst_14885;
              return function(result, inst_14885, state_val_14890) {
                return function() {
                  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["userList"], null), cljs.core.clj__GT_js.call(null, (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(result)));
                };
              }(result, inst_14885, state_val_14890);
            }();
            var inst_14887 = $scope.$apply(inst_14886);
            var state_14889__$1 = state_14889;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14889__$1, inst_14887);
          } else {
            if (state_val_14890 === 1) {
              var state_14889__$1 = state_14889;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14889__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_14892 = [null, null, null, null, null];
              statearr_14892[0] = state_machine__5396__auto__;
              statearr_14892[1] = 1;
              return statearr_14892;
            };
            var state_machine__5396__auto____1 = function(state_14889) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_14889);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_14889) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_14889);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_14893 = f__5409__auto__.call(null);
        statearr_14893[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
        return statearr_14893;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return c__5408__auto__;
  });
}];
angular.module("chaperone.app").controller("AdminUserCtrl", chaperone.ng.admin.user.chaperone_app_AdminUserCtrl);

//# sourceMappingURL=main.js.map