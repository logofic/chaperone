var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2138";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__14649__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__14649 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__14649__delegate.call(this, args);
    };
    G__14649.cljs$lang$maxFixedArity = 0;
    G__14649.cljs$lang$applyTo = function(arglist__14650) {
      var args = cljs.core.seq(arglist__14650);
      return G__14649__delegate(args);
    };
    G__14649.cljs$core$IFn$_invoke$arity$variadic = G__14649__delegate;
    return G__14649;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3388__auto__ = ty;
    if (cljs.core.truth_(and__3388__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3388__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4242__auto___14651 = len;
  var i_14652 = 0;
  while (true) {
    if (i_14652 < n__4242__auto___14651) {
      new_arr[i_14652] = arr[i_14652];
      var G__14653 = i_14652 + 1;
      i_14652 = G__14653;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__14654__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__14654 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14654__delegate.call(this, array, i, idxs);
    };
    G__14654.cljs$lang$maxFixedArity = 2;
    G__14654.cljs$lang$applyTo = function(arglist__14655) {
      var array = cljs.core.first(arglist__14655);
      arglist__14655 = cljs.core.next(arglist__14655);
      var i = cljs.core.first(arglist__14655);
      var idxs = cljs.core.rest(arglist__14655);
      return G__14654__delegate(array, i, idxs);
    };
    G__14654.cljs$core$IFn$_invoke$arity$variadic = G__14654__delegate;
    return G__14654;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__14656__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__14656 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14656__delegate.call(this, array, idx, idx2, idxv);
    };
    G__14656.cljs$lang$maxFixedArity = 3;
    G__14656.cljs$lang$applyTo = function(arglist__14657) {
      var array = cljs.core.first(arglist__14657);
      arglist__14657 = cljs.core.next(arglist__14657);
      var idx = cljs.core.first(arglist__14657);
      arglist__14657 = cljs.core.next(arglist__14657);
      var idx2 = cljs.core.first(arglist__14657);
      var idxv = cljs.core.rest(arglist__14657);
      return G__14656__delegate(array, idx, idx2, idxv);
    };
    G__14656.cljs$core$IFn$_invoke$arity$variadic = G__14656__delegate;
    return G__14656;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj14659 = {};
  return obj14659;
}();
cljs.core.IFn = function() {
  var obj14661 = {};
  return obj14661;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3388__auto__ = this$;
      if (and__3388__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4021__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3400__auto__ = cljs.core._invoke[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._invoke["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj14663 = {};
  return obj14663;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3388__auto__ = value;
    if (and__3388__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4021__auto__ = value == null ? null : value;
    return function() {
      var or__3400__auto__ = cljs.core._clone[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._clone["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj14665 = {};
  return obj14665;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._count[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._count["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj14667 = {};
  return obj14667;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._empty[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._empty["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj14669 = {};
  return obj14669;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._conj[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._conj["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj14671 = {};
  return obj14671;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._nth[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._nth["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._nth[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._nth["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj14673 = {};
  return obj14673;
}();
cljs.core.ISeq = function() {
  var obj14675 = {};
  return obj14675;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._rest[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._rest["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj14677 = {};
  return obj14677;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._next[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._next["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj14679 = {};
  return obj14679;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3388__auto__ = o;
      if (and__3388__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4021__auto__ = o == null ? null : o;
      return function() {
        var or__3400__auto__ = cljs.core._lookup[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._lookup["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3388__auto__ = o;
      if (and__3388__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4021__auto__ = o == null ? null : o;
      return function() {
        var or__3400__auto__ = cljs.core._lookup[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._lookup["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj14681 = {};
  return obj14681;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj14683 = {};
  return obj14683;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._dissoc[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dissoc["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj14685 = {};
  return obj14685;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._key[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._key["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._val[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._val["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj14687 = {};
  return obj14687;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._disjoin[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._disjoin["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj14689 = {};
  return obj14689;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._peek[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._peek["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._pop[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pop["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj14691 = {};
  return obj14691;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_n[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj14693 = {};
  return obj14693;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._deref[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._deref["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj14695 = {};
  return obj14695;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj14697 = {};
  return obj14697;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._meta[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._meta["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj14699 = {};
  return obj14699;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._with_meta[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._with_meta["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj14701 = {};
  return obj14701;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._reduce[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._reduce["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3388__auto__ = coll;
      if (and__3388__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4021__auto__ = coll == null ? null : coll;
      return function() {
        var or__3400__auto__ = cljs.core._reduce[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core._reduce["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj14703 = {};
  return obj14703;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj14705 = {};
  return obj14705;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._equiv[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._equiv["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj14707 = {};
  return obj14707;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._hash[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._hash["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj14709 = {};
  return obj14709;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._seq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._seq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj14711 = {};
  return obj14711;
}();
cljs.core.IList = function() {
  var obj14713 = {};
  return obj14713;
}();
cljs.core.IRecord = function() {
  var obj14715 = {};
  return obj14715;
}();
cljs.core.IReversible = function() {
  var obj14717 = {};
  return obj14717;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._rseq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._rseq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj14719 = {};
  return obj14719;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._entry_key[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._entry_key["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._comparator[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._comparator["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj14721 = {};
  return obj14721;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3388__auto__ = writer;
    if (and__3388__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4021__auto__ = writer == null ? null : writer;
    return function() {
      var or__3400__auto__ = cljs.core._write[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._write["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3388__auto__ = writer;
    if (and__3388__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4021__auto__ = writer == null ? null : writer;
    return function() {
      var or__3400__auto__ = cljs.core._flush[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._flush["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj14723 = {};
  return obj14723;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3388__auto__ = o;
    if (and__3388__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4021__auto__ = o == null ? null : o;
    return function() {
      var or__3400__auto__ = cljs.core._pr_writer[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj14725 = {};
  return obj14725;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3388__auto__ = d;
    if (and__3388__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4021__auto__ = d == null ? null : d;
    return function() {
      var or__3400__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj14727 = {};
  return obj14727;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._notify_watches[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._add_watch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._add_watch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3388__auto__ = this$;
    if (and__3388__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4021__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3400__auto__ = cljs.core._remove_watch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj14729 = {};
  return obj14729;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._as_transient[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._as_transient["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj14731 = {};
  return obj14731;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj14733 = {};
  return obj14733;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj14735 = {};
  return obj14735;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj14737 = {};
  return obj14737;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj14739 = {};
  return obj14739;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3388__auto__ = tcoll;
    if (and__3388__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4021__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3400__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj14741 = {};
  return obj14741;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._compare[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._compare["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj14743 = {};
  return obj14743;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._drop_first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._drop_first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj14745 = {};
  return obj14745;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_first[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj14747 = {};
  return obj14747;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3388__auto__ = coll;
    if (and__3388__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4021__auto__ = coll == null ? null : coll;
    return function() {
      var or__3400__auto__ = cljs.core._chunked_next[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj14749 = {};
  return obj14749;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._name[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._name["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._namespace[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._namespace["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3388__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3388__auto__) {
        return b.ns;
      } else {
        return and__3388__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3811__auto__ = self__._hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__14751 = null;
  var G__14751__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__14751__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__14751 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14751__2.call(this, self__, coll);
      case 3:
        return G__14751__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14751;
}();
cljs.core.Symbol.prototype.apply = function(self__, args14750) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14750)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.cljs$core$ICloneable$ = true;
cljs.core.Symbol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, self__._meta);
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14753 = coll;
      if (G__14753) {
        var bit__4037__auto__ = G__14753.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4037__auto__ || G__14753.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14755 = coll;
      if (G__14755) {
        var bit__4037__auto__ = G__14755.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__14755.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__14757 = coll;
      if (G__14757) {
        var bit__4037__auto__ = G__14757.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__14757.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14759 = coll;
      if (G__14759) {
        var bit__4037__auto__ = G__14759.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4037__auto__ || G__14759.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__14760__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__14761 = y;
            var G__14762 = cljs.core.first.call(null, more);
            var G__14763 = cljs.core.next.call(null, more);
            x = G__14761;
            y = G__14762;
            more = G__14763;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__14760 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14760__delegate.call(this, x, y, more);
    };
    G__14760.cljs$lang$maxFixedArity = 2;
    G__14760.cljs$lang$applyTo = function(arglist__14764) {
      var x = cljs.core.first(arglist__14764);
      arglist__14764 = cljs.core.next(arglist__14764);
      var y = cljs.core.first(arglist__14764);
      var more = cljs.core.rest(arglist__14764);
      return G__14760__delegate(x, y, more);
    };
    G__14760.cljs$core$IFn$_invoke$arity$variadic = G__14760__delegate;
    return G__14760;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__14765 = nval;
            var G__14766 = n + 1;
            val = G__14765;
            n = G__14766;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__14767 = nval;
          var G__14768 = n + 1;
          val__$1 = G__14767;
          n = G__14768;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__14769 = nval;
          var G__14770 = n + 1;
          val__$1 = G__14769;
          n = G__14770;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__14771 = nval;
            var G__14772 = n + 1;
            val = G__14771;
            n = G__14772;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__14773 = nval;
          var G__14774 = n + 1;
          val__$1 = G__14773;
          n = G__14774;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__14775 = nval;
          var G__14776 = n + 1;
          val__$1 = G__14775;
          n = G__14776;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__14778 = x;
  if (G__14778) {
    var bit__4044__auto__ = G__14778.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4044__auto__ || G__14778.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__14778.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__14778);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__14778);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__14780 = x;
  if (G__14780) {
    var bit__4044__auto__ = G__14780.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4044__auto__ || G__14780.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__14780.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__14780);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__14780);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__14781 = sn;
      s = G__14781;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__14782__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__14783 = conj.call(null, coll, x);
          var G__14784 = cljs.core.first.call(null, xs);
          var G__14785 = cljs.core.next.call(null, xs);
          coll = G__14783;
          x = G__14784;
          xs = G__14785;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__14782 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14782__delegate.call(this, coll, x, xs);
    };
    G__14782.cljs$lang$maxFixedArity = 2;
    G__14782.cljs$lang$applyTo = function(arglist__14786) {
      var coll = cljs.core.first(arglist__14786);
      arglist__14786 = cljs.core.next(arglist__14786);
      var x = cljs.core.first(arglist__14786);
      var xs = cljs.core.rest(arglist__14786);
      return G__14782__delegate(coll, x, xs);
    };
    G__14782.cljs$core$IFn$_invoke$arity$variadic = G__14782__delegate;
    return G__14782;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__14787 = cljs.core.next.call(null, s);
      var G__14788 = acc + 1;
      s = G__14787;
      acc = G__14788;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__14790 = coll;
      if (G__14790) {
        var bit__4037__auto__ = G__14790.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4037__auto__ || G__14790.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__14791 = cljs.core.next.call(null, coll);
              var G__14792 = n - 1;
              coll = G__14791;
              n = G__14792;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__14793 = cljs.core.next.call(null, coll);
              var G__14794 = n - 1;
              var G__14795 = not_found;
              coll = G__14793;
              n = G__14794;
              not_found = G__14795;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__14800 = coll;
        if (G__14800) {
          var bit__4037__auto__ = G__14800.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4037__auto__ || G__14800.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__14801 = coll;
                  if (G__14801) {
                    var bit__4044__auto__ = G__14801.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4044__auto__ || G__14801.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__14801.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__14801);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__14801);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__14802 = coll;
        if (G__14802) {
          var bit__4037__auto__ = G__14802.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4037__auto__ || G__14802.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__14803 = coll;
                  if (G__14803) {
                    var bit__4044__auto__ = G__14803.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4044__auto__ || G__14803.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__14803.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__14803);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__14803);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__14806 = o;
        if (G__14806) {
          var bit__4037__auto__ = G__14806.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4037__auto__ || G__14806.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__14807 = o;
        if (G__14807) {
          var bit__4037__auto__ = G__14807.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4037__auto__ || G__14807.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__14808__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__14809 = ret;
          var G__14810 = cljs.core.first.call(null, kvs);
          var G__14811 = cljs.core.second.call(null, kvs);
          var G__14812 = cljs.core.nnext.call(null, kvs);
          coll = G__14809;
          k = G__14810;
          v = G__14811;
          kvs = G__14812;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__14808 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14808__delegate.call(this, coll, k, v, kvs);
    };
    G__14808.cljs$lang$maxFixedArity = 3;
    G__14808.cljs$lang$applyTo = function(arglist__14813) {
      var coll = cljs.core.first(arglist__14813);
      arglist__14813 = cljs.core.next(arglist__14813);
      var k = cljs.core.first(arglist__14813);
      arglist__14813 = cljs.core.next(arglist__14813);
      var v = cljs.core.first(arglist__14813);
      var kvs = cljs.core.rest(arglist__14813);
      return G__14808__delegate(coll, k, v, kvs);
    };
    G__14808.cljs$core$IFn$_invoke$arity$variadic = G__14808__delegate;
    return G__14808;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__14814__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__14815 = ret;
            var G__14816 = cljs.core.first.call(null, ks);
            var G__14817 = cljs.core.next.call(null, ks);
            coll = G__14815;
            k = G__14816;
            ks = G__14817;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__14814 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14814__delegate.call(this, coll, k, ks);
    };
    G__14814.cljs$lang$maxFixedArity = 2;
    G__14814.cljs$lang$applyTo = function(arglist__14818) {
      var coll = cljs.core.first(arglist__14818);
      arglist__14818 = cljs.core.next(arglist__14818);
      var k = cljs.core.first(arglist__14818);
      var ks = cljs.core.rest(arglist__14818);
      return G__14814__delegate(coll, k, ks);
    };
    G__14814.cljs$core$IFn$_invoke$arity$variadic = G__14814__delegate;
    return G__14814;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3400__auto__ = goog.isFunction(f);
  if (or__3400__auto__) {
    return or__3400__auto__;
  } else {
    var G__14822 = f;
    if (G__14822) {
      var bit__4044__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3400__auto____$1 = bit__4044__auto__;
        if (cljs.core.truth_(or__3400__auto____$1)) {
          return or__3400__auto____$1;
        } else {
          return G__14822.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__14822.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__14822);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__14822);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__14830 = o;
    if (G__14830) {
      var bit__4044__auto__ = G__14830.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4044__auto__ || G__14830.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__14830.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14830);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14830);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t14831 !== "undefined") {
      } else {
        cljs.core.t14831 = function(meta, o, with_meta, meta14832) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta14832 = meta14832;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t14831.cljs$lang$type = true;
        cljs.core.t14831.cljs$lang$ctorStr = "cljs.core/t14831";
        cljs.core.t14831.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/t14831");
        };
        cljs.core.t14831.prototype.call = function() {
          var G__14835__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__14835 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__14835__delegate.call(this, self__, args);
          };
          G__14835.cljs$lang$maxFixedArity = 1;
          G__14835.cljs$lang$applyTo = function(arglist__14836) {
            var self__ = cljs.core.first(arglist__14836);
            var args = cljs.core.rest(arglist__14836);
            return G__14835__delegate(self__, args);
          };
          G__14835.cljs$core$IFn$_invoke$arity$variadic = G__14835__delegate;
          return G__14835;
        }();
        cljs.core.t14831.prototype.apply = function(self__, args14834) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14834)));
        };
        cljs.core.t14831.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__14837__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__14837 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__14837__delegate.call(this, args);
          };
          G__14837.cljs$lang$maxFixedArity = 0;
          G__14837.cljs$lang$applyTo = function(arglist__14838) {
            var args = cljs.core.seq(arglist__14838);
            return G__14837__delegate(args);
          };
          G__14837.cljs$core$IFn$_invoke$arity$variadic = G__14837__delegate;
          return G__14837;
        }();
        cljs.core.t14831.prototype.cljs$core$Fn$ = true;
        cljs.core.t14831.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14833) {
          var self__ = this;
          var _14833__$1 = this;
          return self__.meta14832;
        };
        cljs.core.t14831.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14833, meta14832__$1) {
          var self__ = this;
          var _14833__$1 = this;
          return new cljs.core.t14831(self__.meta, self__.o, self__.with_meta, meta14832__$1);
        };
        cljs.core.__GT_t14831 = function __GT_t14831(meta__$1, o__$1, with_meta__$1, meta14832) {
          return new cljs.core.t14831(meta__$1, o__$1, with_meta__$1, meta14832);
        };
      }
      return new cljs.core.t14831(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3388__auto__ = !(o == null);
    if (and__3388__auto__) {
      var G__14842 = o;
      if (G__14842) {
        var bit__4044__auto__ = G__14842.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4044__auto__ || G__14842.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__14842.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__14842);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__14842);
      }
    } else {
      return and__3388__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__14843__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__14844 = ret;
            var G__14845 = cljs.core.first.call(null, ks);
            var G__14846 = cljs.core.next.call(null, ks);
            coll = G__14844;
            k = G__14845;
            ks = G__14846;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__14843 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14843__delegate.call(this, coll, k, ks);
    };
    G__14843.cljs$lang$maxFixedArity = 2;
    G__14843.cljs$lang$applyTo = function(arglist__14847) {
      var coll = cljs.core.first(arglist__14847);
      arglist__14847 = cljs.core.next(arglist__14847);
      var k = cljs.core.first(arglist__14847);
      var ks = cljs.core.rest(arglist__14847);
      return G__14843__delegate(coll, k, ks);
    };
    G__14843.cljs$core$IFn$_invoke$arity$variadic = G__14843__delegate;
    return G__14843;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj14849 = {};
  return obj14849;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj14853 = {};
      return obj14853;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__14855 = o;
    if (G__14855) {
      var bit__4037__auto__ = G__14855.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4037__auto__ || G__14855.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__14857 = x;
    if (G__14857) {
      var bit__4044__auto__ = G__14857.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4044__auto__ || G__14857.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__14857.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__14857);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__14857);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__14859 = x;
    if (G__14859) {
      var bit__4044__auto__ = G__14859.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4044__auto__ || G__14859.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__14859.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__14859);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__14859);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__14861 = x;
  if (G__14861) {
    var bit__4044__auto__ = G__14861.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4044__auto__ || G__14861.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__14861.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__14861);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__14861);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__14863 = x;
  if (G__14863) {
    var bit__4044__auto__ = G__14863.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4044__auto__ || G__14863.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__14863.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__14863);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__14863);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__14865 = x;
  if (G__14865) {
    var bit__4044__auto__ = G__14865.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4044__auto__ || G__14865.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__14865.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__14865);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__14865);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__14867 = x;
  if (G__14867) {
    var bit__4044__auto__ = G__14867.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4044__auto__ || G__14867.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__14867.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__14867);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__14867);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__14869 = x;
    if (G__14869) {
      var bit__4044__auto__ = G__14869.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4044__auto__ || G__14869.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__14869.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__14869);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__14869);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__14871 = x;
  if (G__14871) {
    var bit__4044__auto__ = G__14871.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4044__auto__ || G__14871.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__14871.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__14871);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__14871);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__14873 = x;
  if (G__14873) {
    var bit__4037__auto__ = G__14873.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4037__auto__ || G__14873.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj14877 = {};
    return obj14877;
  };
  var js_obj__1 = function() {
    var G__14878__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__14878 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__14878__delegate.call(this, keyvals);
    };
    G__14878.cljs$lang$maxFixedArity = 0;
    G__14878.cljs$lang$applyTo = function(arglist__14879) {
      var keyvals = cljs.core.seq(arglist__14879);
      return G__14878__delegate(keyvals);
    };
    G__14878.cljs$core$IFn$_invoke$arity$variadic = G__14878__delegate;
    return G__14878;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__14880 = i__$1 + 1;
      var G__14881 = j__$1 + 1;
      var G__14882 = len__$1 - 1;
      i__$1 = G__14880;
      j__$1 = G__14881;
      len__$1 = G__14882;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__14883 = i__$1 - 1;
      var G__14884 = j__$1 - 1;
      var G__14885 = len__$1 - 1;
      i__$1 = G__14883;
      j__$1 = G__14884;
      len__$1 = G__14885;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj14887 = {};
  return obj14887;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__14889 = s;
    if (G__14889) {
      var bit__4044__auto__ = G__14889.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4044__auto__ || G__14889.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__14889.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__14889);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__14889);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__14891 = s;
  if (G__14891) {
    var bit__4044__auto__ = G__14891.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4044__auto__ || G__14891.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__14891.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__14891);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__14891);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3400__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3400__auto__) {
    return or__3400__auto__;
  } else {
    var G__14895 = f;
    if (G__14895) {
      var bit__4044__auto__ = G__14895.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4044__auto__ || G__14895.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__14895.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__14895);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__14895);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__14896__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__14897 = cljs.core.conj.call(null, s, x__$1);
              var G__14898 = etc;
              s = G__14897;
              xs = G__14898;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__14896 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14896__delegate.call(this, x, y, more);
    };
    G__14896.cljs$lang$maxFixedArity = 2;
    G__14896.cljs$lang$applyTo = function(arglist__14899) {
      var x = cljs.core.first(arglist__14899);
      arglist__14899 = cljs.core.next(arglist__14899);
      var y = cljs.core.first(arglist__14899);
      var more = cljs.core.rest(arglist__14899);
      return G__14896__delegate(x, y, more);
    };
    G__14896.cljs$core$IFn$_invoke$arity$variadic = G__14896__delegate;
    return G__14896;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3400__auto__ = cljs.core.seq.call(null, coll);
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__14901 = x;
            if (G__14901) {
              var bit__4037__auto__ = G__14901.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4037__auto__ || G__14901.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__14902 = xs;
        var G__14903 = ys;
        var G__14904 = len;
        var G__14905 = n + 1;
        xs = G__14902;
        ys = G__14903;
        len = G__14904;
        n = G__14905;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__14906 = nval;
          var G__14907 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__14906;
          coll__$1 = G__14907;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__14910 = coll;
      if (G__14910) {
        var bit__4037__auto__ = G__14910.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4037__auto__ || G__14910.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__14911 = coll;
      if (G__14911) {
        var bit__4037__auto__ = G__14911.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4037__auto__ || G__14911.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__14912__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__14912 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14912__delegate.call(this, x, y, more);
    };
    G__14912.cljs$lang$maxFixedArity = 2;
    G__14912.cljs$lang$applyTo = function(arglist__14913) {
      var x = cljs.core.first(arglist__14913);
      arglist__14913 = cljs.core.next(arglist__14913);
      var y = cljs.core.first(arglist__14913);
      var more = cljs.core.rest(arglist__14913);
      return G__14912__delegate(x, y, more);
    };
    G__14912.cljs$core$IFn$_invoke$arity$variadic = G__14912__delegate;
    return G__14912;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__14914__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__14914 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14914__delegate.call(this, x, y, more);
    };
    G__14914.cljs$lang$maxFixedArity = 2;
    G__14914.cljs$lang$applyTo = function(arglist__14915) {
      var x = cljs.core.first(arglist__14915);
      arglist__14915 = cljs.core.next(arglist__14915);
      var y = cljs.core.first(arglist__14915);
      var more = cljs.core.rest(arglist__14915);
      return G__14914__delegate(x, y, more);
    };
    G__14914.cljs$core$IFn$_invoke$arity$variadic = G__14914__delegate;
    return G__14914;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__14916__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__14916 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14916__delegate.call(this, x, y, more);
    };
    G__14916.cljs$lang$maxFixedArity = 2;
    G__14916.cljs$lang$applyTo = function(arglist__14917) {
      var x = cljs.core.first(arglist__14917);
      arglist__14917 = cljs.core.next(arglist__14917);
      var y = cljs.core.first(arglist__14917);
      var more = cljs.core.rest(arglist__14917);
      return G__14916__delegate(x, y, more);
    };
    G__14916.cljs$core$IFn$_invoke$arity$variadic = G__14916__delegate;
    return G__14916;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__14918__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__14918 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14918__delegate.call(this, x, y, more);
    };
    G__14918.cljs$lang$maxFixedArity = 2;
    G__14918.cljs$lang$applyTo = function(arglist__14919) {
      var x = cljs.core.first(arglist__14919);
      arglist__14919 = cljs.core.next(arglist__14919);
      var y = cljs.core.first(arglist__14919);
      var more = cljs.core.rest(arglist__14919);
      return G__14918__delegate(x, y, more);
    };
    G__14918.cljs$core$IFn$_invoke$arity$variadic = G__14918__delegate;
    return G__14918;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__14920__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__14921 = y;
            var G__14922 = cljs.core.first.call(null, more);
            var G__14923 = cljs.core.next.call(null, more);
            x = G__14921;
            y = G__14922;
            more = G__14923;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__14920 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14920__delegate.call(this, x, y, more);
    };
    G__14920.cljs$lang$maxFixedArity = 2;
    G__14920.cljs$lang$applyTo = function(arglist__14924) {
      var x = cljs.core.first(arglist__14924);
      arglist__14924 = cljs.core.next(arglist__14924);
      var y = cljs.core.first(arglist__14924);
      var more = cljs.core.rest(arglist__14924);
      return G__14920__delegate(x, y, more);
    };
    G__14920.cljs$core$IFn$_invoke$arity$variadic = G__14920__delegate;
    return G__14920;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__14925__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__14926 = y;
            var G__14927 = cljs.core.first.call(null, more);
            var G__14928 = cljs.core.next.call(null, more);
            x = G__14926;
            y = G__14927;
            more = G__14928;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__14925 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14925__delegate.call(this, x, y, more);
    };
    G__14925.cljs$lang$maxFixedArity = 2;
    G__14925.cljs$lang$applyTo = function(arglist__14929) {
      var x = cljs.core.first(arglist__14929);
      arglist__14929 = cljs.core.next(arglist__14929);
      var y = cljs.core.first(arglist__14929);
      var more = cljs.core.rest(arglist__14929);
      return G__14925__delegate(x, y, more);
    };
    G__14925.cljs$core$IFn$_invoke$arity$variadic = G__14925__delegate;
    return G__14925;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__14930__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__14931 = y;
            var G__14932 = cljs.core.first.call(null, more);
            var G__14933 = cljs.core.next.call(null, more);
            x = G__14931;
            y = G__14932;
            more = G__14933;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__14930 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14930__delegate.call(this, x, y, more);
    };
    G__14930.cljs$lang$maxFixedArity = 2;
    G__14930.cljs$lang$applyTo = function(arglist__14934) {
      var x = cljs.core.first(arglist__14934);
      arglist__14934 = cljs.core.next(arglist__14934);
      var y = cljs.core.first(arglist__14934);
      var more = cljs.core.rest(arglist__14934);
      return G__14930__delegate(x, y, more);
    };
    G__14930.cljs$core$IFn$_invoke$arity$variadic = G__14930__delegate;
    return G__14930;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__14935__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__14936 = y;
            var G__14937 = cljs.core.first.call(null, more);
            var G__14938 = cljs.core.next.call(null, more);
            x = G__14936;
            y = G__14937;
            more = G__14938;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__14935 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14935__delegate.call(this, x, y, more);
    };
    G__14935.cljs$lang$maxFixedArity = 2;
    G__14935.cljs$lang$applyTo = function(arglist__14939) {
      var x = cljs.core.first(arglist__14939);
      arglist__14939 = cljs.core.next(arglist__14939);
      var y = cljs.core.first(arglist__14939);
      var more = cljs.core.rest(arglist__14939);
      return G__14935__delegate(x, y, more);
    };
    G__14935.cljs$core$IFn$_invoke$arity$variadic = G__14935__delegate;
    return G__14935;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3707__auto__ = x;
    var y__3708__auto__ = y;
    return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
  };
  var max__3 = function() {
    var G__14940__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3707__auto__ = x;
        var y__3708__auto__ = y;
        return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
      }(), more);
    };
    var G__14940 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14940__delegate.call(this, x, y, more);
    };
    G__14940.cljs$lang$maxFixedArity = 2;
    G__14940.cljs$lang$applyTo = function(arglist__14941) {
      var x = cljs.core.first(arglist__14941);
      arglist__14941 = cljs.core.next(arglist__14941);
      var y = cljs.core.first(arglist__14941);
      var more = cljs.core.rest(arglist__14941);
      return G__14940__delegate(x, y, more);
    };
    G__14940.cljs$core$IFn$_invoke$arity$variadic = G__14940__delegate;
    return G__14940;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3714__auto__ = x;
    var y__3715__auto__ = y;
    return x__3714__auto__ < y__3715__auto__ ? x__3714__auto__ : y__3715__auto__;
  };
  var min__3 = function() {
    var G__14942__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3714__auto__ = x;
        var y__3715__auto__ = y;
        return x__3714__auto__ < y__3715__auto__ ? x__3714__auto__ : y__3715__auto__;
      }(), more);
    };
    var G__14942 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14942__delegate.call(this, x, y, more);
    };
    G__14942.cljs$lang$maxFixedArity = 2;
    G__14942.cljs$lang$applyTo = function(arglist__14943) {
      var x = cljs.core.first(arglist__14943);
      arglist__14943 = cljs.core.next(arglist__14943);
      var y = cljs.core.first(arglist__14943);
      var more = cljs.core.rest(arglist__14943);
      return G__14942__delegate(x, y, more);
    };
    G__14942.cljs$core$IFn$_invoke$arity$variadic = G__14942__delegate;
    return G__14942;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__14944__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__14944 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14944__delegate.call(this, x, y, more);
    };
    G__14944.cljs$lang$maxFixedArity = 2;
    G__14944.cljs$lang$applyTo = function(arglist__14945) {
      var x = cljs.core.first(arglist__14945);
      arglist__14945 = cljs.core.next(arglist__14945);
      var y = cljs.core.first(arglist__14945);
      var more = cljs.core.rest(arglist__14945);
      return G__14944__delegate(x, y, more);
    };
    G__14944.cljs$core$IFn$_invoke$arity$variadic = G__14944__delegate;
    return G__14944;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__14946__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__14946 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14946__delegate.call(this, x, y, more);
    };
    G__14946.cljs$lang$maxFixedArity = 2;
    G__14946.cljs$lang$applyTo = function(arglist__14947) {
      var x = cljs.core.first(arglist__14947);
      arglist__14947 = cljs.core.next(arglist__14947);
      var y = cljs.core.first(arglist__14947);
      var more = cljs.core.rest(arglist__14947);
      return G__14946__delegate(x, y, more);
    };
    G__14946.cljs$core$IFn$_invoke$arity$variadic = G__14946__delegate;
    return G__14946;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__14948__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__14948 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14948__delegate.call(this, x, y, more);
    };
    G__14948.cljs$lang$maxFixedArity = 2;
    G__14948.cljs$lang$applyTo = function(arglist__14949) {
      var x = cljs.core.first(arglist__14949);
      arglist__14949 = cljs.core.next(arglist__14949);
      var y = cljs.core.first(arglist__14949);
      var more = cljs.core.rest(arglist__14949);
      return G__14948__delegate(x, y, more);
    };
    G__14948.cljs$core$IFn$_invoke$arity$variadic = G__14948__delegate;
    return G__14948;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__14950__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__14950 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14950__delegate.call(this, x, y, more);
    };
    G__14950.cljs$lang$maxFixedArity = 2;
    G__14950.cljs$lang$applyTo = function(arglist__14951) {
      var x = cljs.core.first(arglist__14951);
      arglist__14951 = cljs.core.next(arglist__14951);
      var y = cljs.core.first(arglist__14951);
      var more = cljs.core.rest(arglist__14951);
      return G__14950__delegate(x, y, more);
    };
    G__14950.cljs$core$IFn$_invoke$arity$variadic = G__14950__delegate;
    return G__14950;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__14952__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__14952 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14952__delegate.call(this, x, y, more);
    };
    G__14952.cljs$lang$maxFixedArity = 2;
    G__14952.cljs$lang$applyTo = function(arglist__14953) {
      var x = cljs.core.first(arglist__14953);
      arglist__14953 = cljs.core.next(arglist__14953);
      var y = cljs.core.first(arglist__14953);
      var more = cljs.core.rest(arglist__14953);
      return G__14952__delegate(x, y, more);
    };
    G__14952.cljs$core$IFn$_invoke$arity$variadic = G__14952__delegate;
    return G__14952;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__14954__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__14954 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14954__delegate.call(this, x, y, more);
    };
    G__14954.cljs$lang$maxFixedArity = 2;
    G__14954.cljs$lang$applyTo = function(arglist__14955) {
      var x = cljs.core.first(arglist__14955);
      arglist__14955 = cljs.core.next(arglist__14955);
      var y = cljs.core.first(arglist__14955);
      var more = cljs.core.rest(arglist__14955);
      return G__14954__delegate(x, y, more);
    };
    G__14954.cljs$core$IFn$_invoke$arity$variadic = G__14954__delegate;
    return G__14954;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__14956__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__14956 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14956__delegate.call(this, x, y, more);
    };
    G__14956.cljs$lang$maxFixedArity = 2;
    G__14956.cljs$lang$applyTo = function(arglist__14957) {
      var x = cljs.core.first(arglist__14957);
      arglist__14957 = cljs.core.next(arglist__14957);
      var y = cljs.core.first(arglist__14957);
      var more = cljs.core.rest(arglist__14957);
      return G__14956__delegate(x, y, more);
    };
    G__14956.cljs$core$IFn$_invoke$arity$variadic = G__14956__delegate;
    return G__14956;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__14958__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__14959 = y;
            var G__14960 = cljs.core.first.call(null, more);
            var G__14961 = cljs.core.next.call(null, more);
            x = G__14959;
            y = G__14960;
            more = G__14961;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__14958 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14958__delegate.call(this, x, y, more);
    };
    G__14958.cljs$lang$maxFixedArity = 2;
    G__14958.cljs$lang$applyTo = function(arglist__14962) {
      var x = cljs.core.first(arglist__14962);
      arglist__14962 = cljs.core.next(arglist__14962);
      var y = cljs.core.first(arglist__14962);
      var more = cljs.core.rest(arglist__14962);
      return G__14958__delegate(x, y, more);
    };
    G__14958.cljs$core$IFn$_invoke$arity$variadic = G__14958__delegate;
    return G__14958;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__14963 = n__$1 - 1;
      var G__14964 = cljs.core.next.call(null, xs);
      n__$1 = G__14963;
      xs = G__14964;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__14965__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__14966 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__14967 = cljs.core.next.call(null, more);
          sb = G__14966;
          more = G__14967;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__14965 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__14965__delegate.call(this, x, ys);
    };
    G__14965.cljs$lang$maxFixedArity = 1;
    G__14965.cljs$lang$applyTo = function(arglist__14968) {
      var x = cljs.core.first(arglist__14968);
      var ys = cljs.core.rest(arglist__14968);
      return G__14965__delegate(x, ys);
    };
    G__14965.cljs$core$IFn$_invoke$arity$variadic = G__14965__delegate;
    return G__14965;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__14969 = cljs.core.next.call(null, xs);
            var G__14970 = cljs.core.next.call(null, ys);
            xs = G__14969;
            ys = G__14970;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__14971 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__14972 = cljs.core.next.call(null, s);
        res = G__14971;
        s = G__14972;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__14973 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__14974 = cljs.core.next.call(null, s);
      h = G__14973;
      s = G__14974;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__14975 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__14976 = cljs.core.next.call(null, s__$1);
      h = G__14975;
      s__$1 = G__14976;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__14983_14989 = cljs.core.seq.call(null, fn_map);
  var chunk__14984_14990 = null;
  var count__14985_14991 = 0;
  var i__14986_14992 = 0;
  while (true) {
    if (i__14986_14992 < count__14985_14991) {
      var vec__14987_14993 = cljs.core._nth.call(null, chunk__14984_14990, i__14986_14992);
      var key_name_14994 = cljs.core.nth.call(null, vec__14987_14993, 0, null);
      var f_14995 = cljs.core.nth.call(null, vec__14987_14993, 1, null);
      var str_name_14996 = cljs.core.name.call(null, key_name_14994);
      obj[str_name_14996] = f_14995;
      var G__14997 = seq__14983_14989;
      var G__14998 = chunk__14984_14990;
      var G__14999 = count__14985_14991;
      var G__15000 = i__14986_14992 + 1;
      seq__14983_14989 = G__14997;
      chunk__14984_14990 = G__14998;
      count__14985_14991 = G__14999;
      i__14986_14992 = G__15000;
      continue;
    } else {
      var temp__4092__auto___15001 = cljs.core.seq.call(null, seq__14983_14989);
      if (temp__4092__auto___15001) {
        var seq__14983_15002__$1 = temp__4092__auto___15001;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14983_15002__$1)) {
          var c__4142__auto___15003 = cljs.core.chunk_first.call(null, seq__14983_15002__$1);
          var G__15004 = cljs.core.chunk_rest.call(null, seq__14983_15002__$1);
          var G__15005 = c__4142__auto___15003;
          var G__15006 = cljs.core.count.call(null, c__4142__auto___15003);
          var G__15007 = 0;
          seq__14983_14989 = G__15004;
          chunk__14984_14990 = G__15005;
          count__14985_14991 = G__15006;
          i__14986_14992 = G__15007;
          continue;
        } else {
          var vec__14988_15008 = cljs.core.first.call(null, seq__14983_15002__$1);
          var key_name_15009 = cljs.core.nth.call(null, vec__14988_15008, 0, null);
          var f_15010 = cljs.core.nth.call(null, vec__14988_15008, 1, null);
          var str_name_15011 = cljs.core.name.call(null, key_name_15009);
          obj[str_name_15011] = f_15010;
          var G__15012 = cljs.core.next.call(null, seq__14983_15002__$1);
          var G__15013 = null;
          var G__15014 = 0;
          var G__15015 = 0;
          seq__14983_14989 = G__15012;
          chunk__14984_14990 = G__15013;
          count__14985_14991 = G__15014;
          i__14986_14992 = G__15015;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$ = true;
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__15017 = coll;
  if (G__15017) {
    var bit__4044__auto__ = G__15017.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4044__auto__ || G__15017.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__15017.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__15017);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__15017);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__15018 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__15018;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__15019 = i - 1;
        var G__15020 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__15019;
        r = G__15020;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__15021) {
    var xs = cljs.core.seq(arglist__15021);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$ = true;
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3400__auto__ = coll == null;
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      var G__15025 = coll;
      if (G__15025) {
        var bit__4037__auto__ = G__15025.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4037__auto__ || G__15025.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__15027 = x;
  if (G__15027) {
    var bit__4044__auto__ = G__15027.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4044__auto__ || G__15027.cljs$core$IList$) {
      return true;
    } else {
      if (!G__15027.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__15027);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__15027);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__15029 = null;
  var G__15029__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__15029__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__15029 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15029__2.call(this, self__, coll);
      case 3:
        return G__15029__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15029;
}();
cljs.core.Keyword.prototype.apply = function(self__, args15028) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15028)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.cljs$core$ICloneable$ = true;
cljs.core.Keyword.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Keyword(self__.ns, self__.name, self__.fqn, self__._hash);
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__15031 = x;
    if (G__15031) {
      var bit__4037__auto__ = G__15031.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4037__auto__ || G__15031.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__15032 = ls.sval();
        ls = G__15032;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__15034 = s;
    if (G__15034) {
      var bit__4037__auto__ = G__15034.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4037__auto__ || G__15034.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__15035 = cljs.core.next.call(null, s__$1);
      s__$1 = G__15035;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_15036 = 0;
  var xs_15037 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_15037) {
      ret[i_15036] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_15037));
      var G__15038 = i_15036 + 1;
      var G__15039 = cljs.core.next.call(null, xs_15037);
      i_15036 = G__15038;
      xs_15037 = G__15039;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15040 = i + 1;
          var G__15041 = cljs.core.next.call(null, s__$1);
          i = G__15040;
          s__$1 = G__15041;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___15042 = size;
      var i_15043 = 0;
      while (true) {
        if (i_15043 < n__4242__auto___15042) {
          a[i_15043] = init_val_or_seq;
          var G__15044 = i_15043 + 1;
          i_15043 = G__15044;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15045 = i + 1;
          var G__15046 = cljs.core.next.call(null, s__$1);
          i = G__15045;
          s__$1 = G__15046;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___15047 = size;
      var i_15048 = 0;
      while (true) {
        if (i_15048 < n__4242__auto___15047) {
          a[i_15048] = init_val_or_seq;
          var G__15049 = i_15048 + 1;
          i_15048 = G__15049;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15050 = i + 1;
          var G__15051 = cljs.core.next.call(null, s__$1);
          i = G__15050;
          s__$1 = G__15051;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___15052 = size;
      var i_15053 = 0;
      while (true) {
        if (i_15053 < n__4242__auto___15052) {
          a[i_15053] = init_val_or_seq;
          var G__15054 = i_15053 + 1;
          i_15053 = G__15054;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15055 = i + 1;
          var G__15056 = cljs.core.next.call(null, s__$1);
          i = G__15055;
          s__$1 = G__15056;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4242__auto___15057 = size;
      var i_15058 = 0;
      while (true) {
        if (i_15058 < n__4242__auto___15057) {
          a[i_15058] = init_val_or_seq;
          var G__15059 = i_15058 + 1;
          i_15058 = G__15059;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__15060 = cljs.core.next.call(null, s__$1);
        var G__15061 = i - 1;
        var G__15062 = sum + 1;
        s__$1 = G__15060;
        i = G__15061;
        sum = G__15062;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__15063__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__15063 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15063__delegate.call(this, x, y, zs);
    };
    G__15063.cljs$lang$maxFixedArity = 2;
    G__15063.cljs$lang$applyTo = function(arglist__15064) {
      var x = cljs.core.first(arglist__15064);
      arglist__15064 = cljs.core.next(arglist__15064);
      var y = cljs.core.first(arglist__15064);
      var zs = cljs.core.rest(arglist__15064);
      return G__15063__delegate(x, y, zs);
    };
    G__15063.cljs$core$IFn$_invoke$arity$variadic = G__15063__delegate;
    return G__15063;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__15065__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__15065 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15065__delegate.call(this, a, b, c, d, more);
    };
    G__15065.cljs$lang$maxFixedArity = 4;
    G__15065.cljs$lang$applyTo = function(arglist__15066) {
      var a = cljs.core.first(arglist__15066);
      arglist__15066 = cljs.core.next(arglist__15066);
      var b = cljs.core.first(arglist__15066);
      arglist__15066 = cljs.core.next(arglist__15066);
      var c = cljs.core.first(arglist__15066);
      arglist__15066 = cljs.core.next(arglist__15066);
      var d = cljs.core.first(arglist__15066);
      var more = cljs.core.rest(arglist__15066);
      return G__15065__delegate(a, b, c, d, more);
    };
    G__15065.cljs$core$IFn$_invoke$arity$variadic = G__15065__delegate;
    return G__15065;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val);
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key);
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val);
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__15067__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__15067 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__15067__delegate.call(this, f, a, b, c, d, args);
    };
    G__15067.cljs$lang$maxFixedArity = 5;
    G__15067.cljs$lang$applyTo = function(arglist__15068) {
      var f = cljs.core.first(arglist__15068);
      arglist__15068 = cljs.core.next(arglist__15068);
      var a = cljs.core.first(arglist__15068);
      arglist__15068 = cljs.core.next(arglist__15068);
      var b = cljs.core.first(arglist__15068);
      arglist__15068 = cljs.core.next(arglist__15068);
      var c = cljs.core.first(arglist__15068);
      arglist__15068 = cljs.core.next(arglist__15068);
      var d = cljs.core.first(arglist__15068);
      var args = cljs.core.rest(arglist__15068);
      return G__15067__delegate(f, a, b, c, d, args);
    };
    G__15067.cljs$core$IFn$_invoke$arity$variadic = G__15067__delegate;
    return G__15067;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__15069__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__15069 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__15069__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__15069.cljs$lang$maxFixedArity = 6;
    G__15069.cljs$lang$applyTo = function(arglist__15070) {
      var obj = cljs.core.first(arglist__15070);
      arglist__15070 = cljs.core.next(arglist__15070);
      var f = cljs.core.first(arglist__15070);
      arglist__15070 = cljs.core.next(arglist__15070);
      var a = cljs.core.first(arglist__15070);
      arglist__15070 = cljs.core.next(arglist__15070);
      var b = cljs.core.first(arglist__15070);
      arglist__15070 = cljs.core.next(arglist__15070);
      var c = cljs.core.first(arglist__15070);
      arglist__15070 = cljs.core.next(arglist__15070);
      var d = cljs.core.first(arglist__15070);
      var args = cljs.core.rest(arglist__15070);
      return G__15069__delegate(obj, f, a, b, c, d, args);
    };
    G__15069.cljs$core$IFn$_invoke$arity$variadic = G__15069__delegate;
    return G__15069;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__15071__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__15071 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15071__delegate.call(this, x, y, more);
    };
    G__15071.cljs$lang$maxFixedArity = 2;
    G__15071.cljs$lang$applyTo = function(arglist__15072) {
      var x = cljs.core.first(arglist__15072);
      arglist__15072 = cljs.core.next(arglist__15072);
      var y = cljs.core.first(arglist__15072);
      var more = cljs.core.rest(arglist__15072);
      return G__15071__delegate(x, y, more);
    };
    G__15071.cljs$core$IFn$_invoke$arity$variadic = G__15071__delegate;
    return G__15071;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__15073 = pred;
        var G__15074 = cljs.core.next.call(null, coll);
        pred = G__15073;
        coll = G__15074;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3400__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        var G__15075 = pred;
        var G__15076 = cljs.core.next.call(null, coll);
        pred = G__15075;
        coll = G__15076;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__15077 = null;
    var G__15077__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__15077__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__15077__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__15077__3 = function() {
      var G__15078__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__15078 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__15078__delegate.call(this, x, y, zs);
      };
      G__15078.cljs$lang$maxFixedArity = 2;
      G__15078.cljs$lang$applyTo = function(arglist__15079) {
        var x = cljs.core.first(arglist__15079);
        arglist__15079 = cljs.core.next(arglist__15079);
        var y = cljs.core.first(arglist__15079);
        var zs = cljs.core.rest(arglist__15079);
        return G__15078__delegate(x, y, zs);
      };
      G__15078.cljs$core$IFn$_invoke$arity$variadic = G__15078__delegate;
      return G__15078;
    }();
    G__15077 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__15077__0.call(this);
        case 1:
          return G__15077__1.call(this, x);
        case 2:
          return G__15077__2.call(this, x, y);
        default:
          return G__15077__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15077.cljs$lang$maxFixedArity = 2;
    G__15077.cljs$lang$applyTo = G__15077__3.cljs$lang$applyTo;
    return G__15077;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__15080__delegate = function(args) {
      return x;
    };
    var G__15080 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15080__delegate.call(this, args);
    };
    G__15080.cljs$lang$maxFixedArity = 0;
    G__15080.cljs$lang$applyTo = function(arglist__15081) {
      var args = cljs.core.seq(arglist__15081);
      return G__15080__delegate(args);
    };
    G__15080.cljs$core$IFn$_invoke$arity$variadic = G__15080__delegate;
    return G__15080;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__15082 = null;
      var G__15082__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__15082__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__15082__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__15082__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__15082__4 = function() {
        var G__15083__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__15083 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15083__delegate.call(this, x, y, z, args);
        };
        G__15083.cljs$lang$maxFixedArity = 3;
        G__15083.cljs$lang$applyTo = function(arglist__15084) {
          var x = cljs.core.first(arglist__15084);
          arglist__15084 = cljs.core.next(arglist__15084);
          var y = cljs.core.first(arglist__15084);
          arglist__15084 = cljs.core.next(arglist__15084);
          var z = cljs.core.first(arglist__15084);
          var args = cljs.core.rest(arglist__15084);
          return G__15083__delegate(x, y, z, args);
        };
        G__15083.cljs$core$IFn$_invoke$arity$variadic = G__15083__delegate;
        return G__15083;
      }();
      G__15082 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15082__0.call(this);
          case 1:
            return G__15082__1.call(this, x);
          case 2:
            return G__15082__2.call(this, x, y);
          case 3:
            return G__15082__3.call(this, x, y, z);
          default:
            return G__15082__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15082.cljs$lang$maxFixedArity = 3;
      G__15082.cljs$lang$applyTo = G__15082__4.cljs$lang$applyTo;
      return G__15082;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__15085 = null;
      var G__15085__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__15085__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__15085__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__15085__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__15085__4 = function() {
        var G__15086__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__15086 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15086__delegate.call(this, x, y, z, args);
        };
        G__15086.cljs$lang$maxFixedArity = 3;
        G__15086.cljs$lang$applyTo = function(arglist__15087) {
          var x = cljs.core.first(arglist__15087);
          arglist__15087 = cljs.core.next(arglist__15087);
          var y = cljs.core.first(arglist__15087);
          arglist__15087 = cljs.core.next(arglist__15087);
          var z = cljs.core.first(arglist__15087);
          var args = cljs.core.rest(arglist__15087);
          return G__15086__delegate(x, y, z, args);
        };
        G__15086.cljs$core$IFn$_invoke$arity$variadic = G__15086__delegate;
        return G__15086;
      }();
      G__15085 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15085__0.call(this);
          case 1:
            return G__15085__1.call(this, x);
          case 2:
            return G__15085__2.call(this, x, y);
          case 3:
            return G__15085__3.call(this, x, y, z);
          default:
            return G__15085__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15085.cljs$lang$maxFixedArity = 3;
      G__15085.cljs$lang$applyTo = G__15085__4.cljs$lang$applyTo;
      return G__15085;
    }();
  };
  var comp__4 = function() {
    var G__15088__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__15089__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__15090 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__15091 = cljs.core.next.call(null, fs__$2);
              ret = G__15090;
              fs__$2 = G__15091;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__15089 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__15089__delegate.call(this, args);
        };
        G__15089.cljs$lang$maxFixedArity = 0;
        G__15089.cljs$lang$applyTo = function(arglist__15092) {
          var args = cljs.core.seq(arglist__15092);
          return G__15089__delegate(args);
        };
        G__15089.cljs$core$IFn$_invoke$arity$variadic = G__15089__delegate;
        return G__15089;
      }();
    };
    var G__15088 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15088__delegate.call(this, f1, f2, f3, fs);
    };
    G__15088.cljs$lang$maxFixedArity = 3;
    G__15088.cljs$lang$applyTo = function(arglist__15093) {
      var f1 = cljs.core.first(arglist__15093);
      arglist__15093 = cljs.core.next(arglist__15093);
      var f2 = cljs.core.first(arglist__15093);
      arglist__15093 = cljs.core.next(arglist__15093);
      var f3 = cljs.core.first(arglist__15093);
      var fs = cljs.core.rest(arglist__15093);
      return G__15088__delegate(f1, f2, f3, fs);
    };
    G__15088.cljs$core$IFn$_invoke$arity$variadic = G__15088__delegate;
    return G__15088;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__15094__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__15094 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15094__delegate.call(this, args);
      };
      G__15094.cljs$lang$maxFixedArity = 0;
      G__15094.cljs$lang$applyTo = function(arglist__15095) {
        var args = cljs.core.seq(arglist__15095);
        return G__15094__delegate(args);
      };
      G__15094.cljs$core$IFn$_invoke$arity$variadic = G__15094__delegate;
      return G__15094;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__15096__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__15096 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15096__delegate.call(this, args);
      };
      G__15096.cljs$lang$maxFixedArity = 0;
      G__15096.cljs$lang$applyTo = function(arglist__15097) {
        var args = cljs.core.seq(arglist__15097);
        return G__15096__delegate(args);
      };
      G__15096.cljs$core$IFn$_invoke$arity$variadic = G__15096__delegate;
      return G__15096;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__15098__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__15098 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15098__delegate.call(this, args);
      };
      G__15098.cljs$lang$maxFixedArity = 0;
      G__15098.cljs$lang$applyTo = function(arglist__15099) {
        var args = cljs.core.seq(arglist__15099);
        return G__15098__delegate(args);
      };
      G__15098.cljs$core$IFn$_invoke$arity$variadic = G__15098__delegate;
      return G__15098;
    }();
  };
  var partial__5 = function() {
    var G__15100__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__15101__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__15101 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__15101__delegate.call(this, args);
        };
        G__15101.cljs$lang$maxFixedArity = 0;
        G__15101.cljs$lang$applyTo = function(arglist__15102) {
          var args = cljs.core.seq(arglist__15102);
          return G__15101__delegate(args);
        };
        G__15101.cljs$core$IFn$_invoke$arity$variadic = G__15101__delegate;
        return G__15101;
      }();
    };
    var G__15100 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15100__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__15100.cljs$lang$maxFixedArity = 4;
    G__15100.cljs$lang$applyTo = function(arglist__15103) {
      var f = cljs.core.first(arglist__15103);
      arglist__15103 = cljs.core.next(arglist__15103);
      var arg1 = cljs.core.first(arglist__15103);
      arglist__15103 = cljs.core.next(arglist__15103);
      var arg2 = cljs.core.first(arglist__15103);
      arglist__15103 = cljs.core.next(arglist__15103);
      var arg3 = cljs.core.first(arglist__15103);
      var more = cljs.core.rest(arglist__15103);
      return G__15100__delegate(f, arg1, arg2, arg3, more);
    };
    G__15100.cljs$core$IFn$_invoke$arity$variadic = G__15100__delegate;
    return G__15100;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__15104 = null;
      var G__15104__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__15104__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__15104__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__15104__4 = function() {
        var G__15105__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__15105 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15105__delegate.call(this, a, b, c, ds);
        };
        G__15105.cljs$lang$maxFixedArity = 3;
        G__15105.cljs$lang$applyTo = function(arglist__15106) {
          var a = cljs.core.first(arglist__15106);
          arglist__15106 = cljs.core.next(arglist__15106);
          var b = cljs.core.first(arglist__15106);
          arglist__15106 = cljs.core.next(arglist__15106);
          var c = cljs.core.first(arglist__15106);
          var ds = cljs.core.rest(arglist__15106);
          return G__15105__delegate(a, b, c, ds);
        };
        G__15105.cljs$core$IFn$_invoke$arity$variadic = G__15105__delegate;
        return G__15105;
      }();
      G__15104 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__15104__1.call(this, a);
          case 2:
            return G__15104__2.call(this, a, b);
          case 3:
            return G__15104__3.call(this, a, b, c);
          default:
            return G__15104__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15104.cljs$lang$maxFixedArity = 3;
      G__15104.cljs$lang$applyTo = G__15104__4.cljs$lang$applyTo;
      return G__15104;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__15107 = null;
      var G__15107__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__15107__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__15107__4 = function() {
        var G__15108__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__15108 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15108__delegate.call(this, a, b, c, ds);
        };
        G__15108.cljs$lang$maxFixedArity = 3;
        G__15108.cljs$lang$applyTo = function(arglist__15109) {
          var a = cljs.core.first(arglist__15109);
          arglist__15109 = cljs.core.next(arglist__15109);
          var b = cljs.core.first(arglist__15109);
          arglist__15109 = cljs.core.next(arglist__15109);
          var c = cljs.core.first(arglist__15109);
          var ds = cljs.core.rest(arglist__15109);
          return G__15108__delegate(a, b, c, ds);
        };
        G__15108.cljs$core$IFn$_invoke$arity$variadic = G__15108__delegate;
        return G__15108;
      }();
      G__15107 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__15107__2.call(this, a, b);
          case 3:
            return G__15107__3.call(this, a, b, c);
          default:
            return G__15107__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15107.cljs$lang$maxFixedArity = 3;
      G__15107.cljs$lang$applyTo = G__15107__4.cljs$lang$applyTo;
      return G__15107;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__15110 = null;
      var G__15110__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__15110__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__15110__4 = function() {
        var G__15111__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__15111 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15111__delegate.call(this, a, b, c, ds);
        };
        G__15111.cljs$lang$maxFixedArity = 3;
        G__15111.cljs$lang$applyTo = function(arglist__15112) {
          var a = cljs.core.first(arglist__15112);
          arglist__15112 = cljs.core.next(arglist__15112);
          var b = cljs.core.first(arglist__15112);
          arglist__15112 = cljs.core.next(arglist__15112);
          var c = cljs.core.first(arglist__15112);
          var ds = cljs.core.rest(arglist__15112);
          return G__15111__delegate(a, b, c, ds);
        };
        G__15111.cljs$core$IFn$_invoke$arity$variadic = G__15111__delegate;
        return G__15111;
      }();
      G__15110 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__15110__2.call(this, a, b);
          case 3:
            return G__15110__3.call(this, a, b, c);
          default:
            return G__15110__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15110.cljs$lang$maxFixedArity = 3;
      G__15110.cljs$lang$applyTo = G__15110__4.cljs$lang$applyTo;
      return G__15110;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___15113 = size;
          var i_15114 = 0;
          while (true) {
            if (i_15114 < n__4242__auto___15113) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_15114, cljs.core._nth.call(null, c, i_15114)));
              var G__15115 = i_15114 + 1;
              i_15114 = G__15115;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4242__auto___15116 = size;
        var i_15117 = 0;
        while (true) {
          if (i_15117 < n__4242__auto___15116) {
            var x_15118 = f.call(null, cljs.core._nth.call(null, c, i_15117));
            if (x_15118 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_15118);
            }
            var G__15119 = i_15117 + 1;
            i_15117 = G__15119;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___15120 = size;
          var i_15121 = 0;
          while (true) {
            if (i_15121 < n__4242__auto___15120) {
              var x_15122 = f.call(null, idx + i_15121, cljs.core._nth.call(null, c, i_15121));
              if (x_15122 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_15122);
              }
              var G__15123 = i_15121 + 1;
              i_15121 = G__15123;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            return p.call(null, y);
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__15130__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__15130 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15130__delegate.call(this, x, y, z, args);
        };
        G__15130.cljs$lang$maxFixedArity = 3;
        G__15130.cljs$lang$applyTo = function(arglist__15131) {
          var x = cljs.core.first(arglist__15131);
          arglist__15131 = cljs.core.next(arglist__15131);
          var y = cljs.core.first(arglist__15131);
          arglist__15131 = cljs.core.next(arglist__15131);
          var z = cljs.core.first(arglist__15131);
          var args = cljs.core.rest(arglist__15131);
          return G__15130__delegate(x, y, z, args);
        };
        G__15130.cljs$core$IFn$_invoke$arity$variadic = G__15130__delegate;
        return G__15130;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__15132__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__15124_SHARP_) {
            var and__3388__auto__ = p1.call(null, p1__15124_SHARP_);
            if (cljs.core.truth_(and__3388__auto__)) {
              return p2.call(null, p1__15124_SHARP_);
            } else {
              return and__3388__auto__;
            }
          }, args));
        };
        var G__15132 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15132__delegate.call(this, x, y, z, args);
        };
        G__15132.cljs$lang$maxFixedArity = 3;
        G__15132.cljs$lang$applyTo = function(arglist__15133) {
          var x = cljs.core.first(arglist__15133);
          arglist__15133 = cljs.core.next(arglist__15133);
          var y = cljs.core.first(arglist__15133);
          arglist__15133 = cljs.core.next(arglist__15133);
          var z = cljs.core.first(arglist__15133);
          var args = cljs.core.rest(arglist__15133);
          return G__15132__delegate(x, y, z, args);
        };
        G__15132.cljs$core$IFn$_invoke$arity$variadic = G__15132__delegate;
        return G__15132;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3388__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3388__auto____$1)) {
              var and__3388__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3388__auto____$2)) {
                var and__3388__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3388__auto____$3)) {
                  var and__3388__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3388__auto____$4)) {
                    var and__3388__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3388__auto____$5)) {
                      var and__3388__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3388__auto____$6)) {
                        var and__3388__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3388__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3388__auto____$7;
                        }
                      } else {
                        return and__3388__auto____$6;
                      }
                    } else {
                      return and__3388__auto____$5;
                    }
                  } else {
                    return and__3388__auto____$4;
                  }
                } else {
                  return and__3388__auto____$3;
                }
              } else {
                return and__3388__auto____$2;
              }
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__15134__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__15125_SHARP_) {
            var and__3388__auto__ = p1.call(null, p1__15125_SHARP_);
            if (cljs.core.truth_(and__3388__auto__)) {
              var and__3388__auto____$1 = p2.call(null, p1__15125_SHARP_);
              if (cljs.core.truth_(and__3388__auto____$1)) {
                return p3.call(null, p1__15125_SHARP_);
              } else {
                return and__3388__auto____$1;
              }
            } else {
              return and__3388__auto__;
            }
          }, args));
        };
        var G__15134 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15134__delegate.call(this, x, y, z, args);
        };
        G__15134.cljs$lang$maxFixedArity = 3;
        G__15134.cljs$lang$applyTo = function(arglist__15135) {
          var x = cljs.core.first(arglist__15135);
          arglist__15135 = cljs.core.next(arglist__15135);
          var y = cljs.core.first(arglist__15135);
          arglist__15135 = cljs.core.next(arglist__15135);
          var z = cljs.core.first(arglist__15135);
          var args = cljs.core.rest(arglist__15135);
          return G__15134__delegate(x, y, z, args);
        };
        G__15134.cljs$core$IFn$_invoke$arity$variadic = G__15134__delegate;
        return G__15134;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__15136__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__15126_SHARP_) {
            return p1__15126_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__15127_SHARP_) {
            var and__3388__auto__ = p1__15127_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3388__auto__)) {
              return p1__15127_SHARP_.call(null, y);
            } else {
              return and__3388__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__15128_SHARP_) {
            var and__3388__auto__ = p1__15128_SHARP_.call(null, x);
            if (cljs.core.truth_(and__3388__auto__)) {
              var and__3388__auto____$1 = p1__15128_SHARP_.call(null, y);
              if (cljs.core.truth_(and__3388__auto____$1)) {
                return p1__15128_SHARP_.call(null, z);
              } else {
                return and__3388__auto____$1;
              }
            } else {
              return and__3388__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__15137__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__15129_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__15129_SHARP_, args);
            }, ps__$1));
          };
          var G__15137 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__15137__delegate.call(this, x, y, z, args);
          };
          G__15137.cljs$lang$maxFixedArity = 3;
          G__15137.cljs$lang$applyTo = function(arglist__15138) {
            var x = cljs.core.first(arglist__15138);
            arglist__15138 = cljs.core.next(arglist__15138);
            var y = cljs.core.first(arglist__15138);
            arglist__15138 = cljs.core.next(arglist__15138);
            var z = cljs.core.first(arglist__15138);
            var args = cljs.core.rest(arglist__15138);
            return G__15137__delegate(x, y, z, args);
          };
          G__15137.cljs$core$IFn$_invoke$arity$variadic = G__15137__delegate;
          return G__15137;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__15136 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15136__delegate.call(this, p1, p2, p3, ps);
    };
    G__15136.cljs$lang$maxFixedArity = 3;
    G__15136.cljs$lang$applyTo = function(arglist__15139) {
      var p1 = cljs.core.first(arglist__15139);
      arglist__15139 = cljs.core.next(arglist__15139);
      var p2 = cljs.core.first(arglist__15139);
      arglist__15139 = cljs.core.next(arglist__15139);
      var p3 = cljs.core.first(arglist__15139);
      var ps = cljs.core.rest(arglist__15139);
      return G__15136__delegate(p1, p2, p3, ps);
    };
    G__15136.cljs$core$IFn$_invoke$arity$variadic = G__15136__delegate;
    return G__15136;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3400__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3400__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__15146__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__15146 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15146__delegate.call(this, x, y, z, args);
        };
        G__15146.cljs$lang$maxFixedArity = 3;
        G__15146.cljs$lang$applyTo = function(arglist__15147) {
          var x = cljs.core.first(arglist__15147);
          arglist__15147 = cljs.core.next(arglist__15147);
          var y = cljs.core.first(arglist__15147);
          arglist__15147 = cljs.core.next(arglist__15147);
          var z = cljs.core.first(arglist__15147);
          var args = cljs.core.rest(arglist__15147);
          return G__15146__delegate(x, y, z, args);
        };
        G__15146.cljs$core$IFn$_invoke$arity$variadic = G__15146__delegate;
        return G__15146;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__15148__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__15140_SHARP_) {
              var or__3400__auto____$1 = p1.call(null, p1__15140_SHARP_);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                return p2.call(null, p1__15140_SHARP_);
              }
            }, args);
          }
        };
        var G__15148 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15148__delegate.call(this, x, y, z, args);
        };
        G__15148.cljs$lang$maxFixedArity = 3;
        G__15148.cljs$lang$applyTo = function(arglist__15149) {
          var x = cljs.core.first(arglist__15149);
          arglist__15149 = cljs.core.next(arglist__15149);
          var y = cljs.core.first(arglist__15149);
          arglist__15149 = cljs.core.next(arglist__15149);
          var z = cljs.core.first(arglist__15149);
          var args = cljs.core.rest(arglist__15149);
          return G__15148__delegate(x, y, z, args);
        };
        G__15148.cljs$core$IFn$_invoke$arity$variadic = G__15148__delegate;
        return G__15148;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3400__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3400__auto____$1)) {
            return or__3400__auto____$1;
          } else {
            var or__3400__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3400__auto____$2)) {
              return or__3400__auto____$2;
            } else {
              var or__3400__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$3)) {
                return or__3400__auto____$3;
              } else {
                var or__3400__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3400__auto____$4)) {
                  return or__3400__auto____$4;
                } else {
                  var or__3400__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3400__auto____$5)) {
                    return or__3400__auto____$5;
                  } else {
                    var or__3400__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3400__auto____$6)) {
                      return or__3400__auto____$6;
                    } else {
                      var or__3400__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3400__auto____$7)) {
                        return or__3400__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__15150__delegate = function(x, y, z, args) {
          var or__3400__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__15141_SHARP_) {
              var or__3400__auto____$1 = p1.call(null, p1__15141_SHARP_);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                var or__3400__auto____$2 = p2.call(null, p1__15141_SHARP_);
                if (cljs.core.truth_(or__3400__auto____$2)) {
                  return or__3400__auto____$2;
                } else {
                  return p3.call(null, p1__15141_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__15150 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15150__delegate.call(this, x, y, z, args);
        };
        G__15150.cljs$lang$maxFixedArity = 3;
        G__15150.cljs$lang$applyTo = function(arglist__15151) {
          var x = cljs.core.first(arglist__15151);
          arglist__15151 = cljs.core.next(arglist__15151);
          var y = cljs.core.first(arglist__15151);
          arglist__15151 = cljs.core.next(arglist__15151);
          var z = cljs.core.first(arglist__15151);
          var args = cljs.core.rest(arglist__15151);
          return G__15150__delegate(x, y, z, args);
        };
        G__15150.cljs$core$IFn$_invoke$arity$variadic = G__15150__delegate;
        return G__15150;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__15152__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__15142_SHARP_) {
            return p1__15142_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__15143_SHARP_) {
            var or__3400__auto__ = p1__15143_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return p1__15143_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__15144_SHARP_) {
            var or__3400__auto__ = p1__15144_SHARP_.call(null, x);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              var or__3400__auto____$1 = p1__15144_SHARP_.call(null, y);
              if (cljs.core.truth_(or__3400__auto____$1)) {
                return or__3400__auto____$1;
              } else {
                return p1__15144_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__15153__delegate = function(x, y, z, args) {
            var or__3400__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__15145_SHARP_) {
                return cljs.core.some.call(null, p1__15145_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__15153 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__15153__delegate.call(this, x, y, z, args);
          };
          G__15153.cljs$lang$maxFixedArity = 3;
          G__15153.cljs$lang$applyTo = function(arglist__15154) {
            var x = cljs.core.first(arglist__15154);
            arglist__15154 = cljs.core.next(arglist__15154);
            var y = cljs.core.first(arglist__15154);
            arglist__15154 = cljs.core.next(arglist__15154);
            var z = cljs.core.first(arglist__15154);
            var args = cljs.core.rest(arglist__15154);
            return G__15153__delegate(x, y, z, args);
          };
          G__15153.cljs$core$IFn$_invoke$arity$variadic = G__15153__delegate;
          return G__15153;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__15152 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15152__delegate.call(this, p1, p2, p3, ps);
    };
    G__15152.cljs$lang$maxFixedArity = 3;
    G__15152.cljs$lang$applyTo = function(arglist__15155) {
      var p1 = cljs.core.first(arglist__15155);
      arglist__15155 = cljs.core.next(arglist__15155);
      var p2 = cljs.core.first(arglist__15155);
      arglist__15155 = cljs.core.next(arglist__15155);
      var p3 = cljs.core.first(arglist__15155);
      var ps = cljs.core.rest(arglist__15155);
      return G__15152__delegate(p1, p2, p3, ps);
    };
    G__15152.cljs$core$IFn$_invoke$arity$variadic = G__15152__delegate;
    return G__15152;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4242__auto___15157 = size;
          var i_15158 = 0;
          while (true) {
            if (i_15158 < n__4242__auto___15157) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_15158)));
              var G__15159 = i_15158 + 1;
              i_15158 = G__15159;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__15160__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__15156_SHARP_) {
        return cljs.core.apply.call(null, f, p1__15156_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__15160 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15160__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__15160.cljs$lang$maxFixedArity = 4;
    G__15160.cljs$lang$applyTo = function(arglist__15161) {
      var f = cljs.core.first(arglist__15161);
      arglist__15161 = cljs.core.next(arglist__15161);
      var c1 = cljs.core.first(arglist__15161);
      arglist__15161 = cljs.core.next(arglist__15161);
      var c2 = cljs.core.first(arglist__15161);
      arglist__15161 = cljs.core.next(arglist__15161);
      var c3 = cljs.core.first(arglist__15161);
      var colls = cljs.core.rest(arglist__15161);
      return G__15160__delegate(f, c1, c2, c3, colls);
    };
    G__15160.cljs$core$IFn$_invoke$arity$variadic = G__15160__delegate;
    return G__15160;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__15162 = n__$1 - 1;
        var G__15163 = cljs.core.rest.call(null, s);
        n__$1 = G__15162;
        coll__$1 = G__15163;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__15164 = cljs.core.next.call(null, s);
      var G__15165 = cljs.core.next.call(null, lead);
      s = G__15164;
      lead = G__15165;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3388__auto__ = s;
        if (and__3388__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3388__auto__;
        }
      }())) {
        var G__15166 = pred__$1;
        var G__15167 = cljs.core.rest.call(null, s);
        pred__$1 = G__15166;
        coll__$1 = G__15167;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__15168__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__15168 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15168__delegate.call(this, c1, c2, colls);
    };
    G__15168.cljs$lang$maxFixedArity = 2;
    G__15168.cljs$lang$applyTo = function(arglist__15169) {
      var c1 = cljs.core.first(arglist__15169);
      arglist__15169 = cljs.core.next(arglist__15169);
      var c2 = cljs.core.first(arglist__15169);
      var colls = cljs.core.rest(arglist__15169);
      return G__15168__delegate(c1, c2, colls);
    };
    G__15168.cljs$core$IFn$_invoke$arity$variadic = G__15168__delegate;
    return G__15168;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__15170__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__15170 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15170__delegate.call(this, f, coll, colls);
    };
    G__15170.cljs$lang$maxFixedArity = 2;
    G__15170.cljs$lang$applyTo = function(arglist__15171) {
      var f = cljs.core.first(arglist__15171);
      arglist__15171 = cljs.core.next(arglist__15171);
      var coll = cljs.core.first(arglist__15171);
      var colls = cljs.core.rest(arglist__15171);
      return G__15170__delegate(f, coll, colls);
    };
    G__15170.cljs$core$IFn$_invoke$arity$variadic = G__15170__delegate;
    return G__15170;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4242__auto___15172 = size;
        var i_15173 = 0;
        while (true) {
          if (i_15173 < n__4242__auto___15172) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_15173)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_15173));
            } else {
            }
            var G__15174 = i_15173 + 1;
            i_15173 = G__15174;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__15175_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__15175_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__15177 = to;
      if (G__15177) {
        var bit__4037__auto__ = G__15177.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4037__auto__ || G__15177.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__15178__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__15178 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15178__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__15178.cljs$lang$maxFixedArity = 4;
    G__15178.cljs$lang$applyTo = function(arglist__15179) {
      var f = cljs.core.first(arglist__15179);
      arglist__15179 = cljs.core.next(arglist__15179);
      var c1 = cljs.core.first(arglist__15179);
      arglist__15179 = cljs.core.next(arglist__15179);
      var c2 = cljs.core.first(arglist__15179);
      arglist__15179 = cljs.core.next(arglist__15179);
      var c3 = cljs.core.first(arglist__15179);
      var colls = cljs.core.rest(arglist__15179);
      return G__15178__delegate(f, c1, c2, c3, colls);
    };
    G__15178.cljs$core$IFn$_invoke$arity$variadic = G__15178__delegate;
    return G__15178;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__15181 = m__$1;
          if (G__15181) {
            var bit__4044__auto__ = G__15181.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4044__auto__ || G__15181.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__15181.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__15181);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__15181);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__15182 = sentinel;
            var G__15183 = m__$2;
            var G__15184 = cljs.core.next.call(null, ks__$1);
            sentinel = G__15182;
            m__$1 = G__15183;
            ks__$1 = G__15184;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__15185, v) {
  var vec__15187 = p__15185;
  var k = cljs.core.nth.call(null, vec__15187, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__15187, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__15188, f) {
    var vec__15198 = p__15188;
    var k = cljs.core.nth.call(null, vec__15198, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15198, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__15189, f, a) {
    var vec__15199 = p__15189;
    var k = cljs.core.nth.call(null, vec__15199, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15199, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__15190, f, a, b) {
    var vec__15200 = p__15190;
    var k = cljs.core.nth.call(null, vec__15200, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15200, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__15191, f, a, b, c) {
    var vec__15201 = p__15191;
    var k = cljs.core.nth.call(null, vec__15201, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15201, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__15203__delegate = function(m, p__15192, f, a, b, c, args) {
      var vec__15202 = p__15192;
      var k = cljs.core.nth.call(null, vec__15202, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__15202, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__15203 = function(m, p__15192, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__15203__delegate.call(this, m, p__15192, f, a, b, c, args);
    };
    G__15203.cljs$lang$maxFixedArity = 6;
    G__15203.cljs$lang$applyTo = function(arglist__15204) {
      var m = cljs.core.first(arglist__15204);
      arglist__15204 = cljs.core.next(arglist__15204);
      var p__15192 = cljs.core.first(arglist__15204);
      arglist__15204 = cljs.core.next(arglist__15204);
      var f = cljs.core.first(arglist__15204);
      arglist__15204 = cljs.core.next(arglist__15204);
      var a = cljs.core.first(arglist__15204);
      arglist__15204 = cljs.core.next(arglist__15204);
      var b = cljs.core.first(arglist__15204);
      arglist__15204 = cljs.core.next(arglist__15204);
      var c = cljs.core.first(arglist__15204);
      var args = cljs.core.rest(arglist__15204);
      return G__15203__delegate(m, p__15192, f, a, b, c, args);
    };
    G__15203.cljs$core$IFn$_invoke$arity$variadic = G__15203__delegate;
    return G__15203;
  }();
  update_in = function(m, p__15192, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__15192, f);
      case 4:
        return update_in__4.call(this, m, p__15192, f, a);
      case 5:
        return update_in__5.call(this, m, p__15192, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__15192, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__15192, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__15205 = ll - 5;
      var G__15206 = r;
      ll = G__15205;
      ret = G__15206;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__15207 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__15208 = level - 5;
          node = G__15207;
          level = G__15208;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__15210 = null;
  var G__15210__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__15210__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__15210 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15210__2.call(this, self__, k);
      case 3:
        return G__15210__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15210;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args15209) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15209)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__15211 = j + 1;
              var G__15212 = init__$2;
              j = G__15211;
              init__$1 = G__15212;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__15213 = i + step_init[0];
        i = G__15213;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4242__auto___15214 = len;
    var i_15215 = 0;
    while (true) {
      if (i_15215 < n__4242__auto___15214) {
        new_tail[i_15215] = self__.tail[i_15215];
        var G__15216 = i_15215 + 1;
        i_15215 = G__15216;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__15217 = i + 1;
        var G__15218 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__15217;
        out = G__15218;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__15219) {
    var args = cljs.core.seq(arglist__15219);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3707__auto__ = self__.end;
    var y__3708__auto__ = v_pos + 1;
    return x__3707__auto__ > y__3708__auto__ ? x__3707__auto__ : y__3708__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__15221 = null;
  var G__15221__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__15221__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__15221 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15221__2.call(this, self__, k);
      case 3:
        return G__15221__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15221;
}();
cljs.core.Subvec.prototype.apply = function(self__, args15220) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15220)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$ = true;
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__15222 = meta;
      var G__15223 = v.v;
      var G__15224 = v.start + start;
      var G__15225 = v.start + end;
      var G__15226 = __hash;
      meta = G__15222;
      v = G__15223;
      start = G__15224;
      end = G__15225;
      __hash = G__15226;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj15230 = {};
    return obj15230;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__15231 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__15232 = level - 5;
          node = G__15231;
          level = G__15232;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__15234 = null;
  var G__15234__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15234__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15234 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15234__2.call(this, self__, k);
      case 3:
        return G__15234__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15234;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args15233) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15233)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3400__auto__ = self__.rear;
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3400__auto__ = self__.front;
    if (cljs.core.truth_(or__3400__auto__)) {
      return or__3400__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__15235 = i + incr;
        i = G__15235;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__15236 = i + 1;
      var G__15237 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__15236;
      out = G__15237;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj15241 = {};
    return obj15241;
  }();
  var l = ks.length;
  var i_15242 = 0;
  while (true) {
    if (i_15242 < l) {
      var k_15243 = ks[i_15242];
      new_obj[k_15243] = obj[k_15243];
      var G__15244 = i_15242 + 1;
      i_15242 = G__15244;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__15247 = null;
  var G__15247__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15247__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15247 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15247__2.call(this, self__, k);
      case 3:
        return G__15247__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15247;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args15246) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15246)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15248 = cljs.core.rest.call(null, keys__$1);
        var G__15249 = init__$2;
        keys__$1 = G__15248;
        init__$1 = G__15249;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__15245_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15245_SHARP_, self__.strobj[p1__15245_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj15251 = {};
  return obj15251;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15252 = i + 2;
          i = G__15252;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15253 = i + 2;
          i = G__15253;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15254 = i + 2;
          i = G__15254;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15255 = i + 2;
          i = G__15255;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15256 = i + 2;
          i = G__15256;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_15257 = 0;
  while (true) {
    if (i_15257 < l) {
      narr[i_15257] = arr[i_15257];
      var G__15258 = i_15257 + 1;
      i_15257 = G__15258;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj15261 = {};
    return obj15261;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__15262 = cljs.core.aclone.call(null, self__.arr);
          G__15262[idx + 1] = v;
          return G__15262;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__15263 = null;
  var G__15263__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15263__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15263 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15263__2.call(this, self__, k);
      case 3:
        return G__15263__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15263;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args15259) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15259)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15264 = i + 2;
        var G__15265 = init__$2;
        i = G__15264;
        init__$1 = G__15265;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__15266 = s + 2;
            var G__15267 = d;
            s = G__15266;
            d = G__15267;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__15268 = s + 2;
              var G__15269 = d + 2;
              s = G__15268;
              d = G__15269;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__15270 = i + 2;
        var G__15271 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__15270;
        ret = G__15271;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__15272_15274 = self__.arr;
      G__15272_15274.pop();
      G__15272_15274.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__15273 = o;
      if (G__15273) {
        var bit__4044__auto__ = G__15273.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4044__auto__ || G__15273.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15273.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15273);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15273);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__15275 = cljs.core.next.call(null, es);
          var G__15276 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__15275;
          tcoll__$2 = G__15276;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__15277 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__15278 = i + 2;
      out = G__15277;
      i = G__15278;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__15281 = cljs.core.aclone.call(null, arr);
    G__15281[i] = a;
    return G__15281;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__15282 = cljs.core.aclone.call(null, arr);
    G__15282[i] = a;
    G__15282[j] = b;
    return G__15282;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15283 = i + 2;
        var G__15284 = init__$2;
        i = G__15283;
        init__$1 = G__15284;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_15285 = 0;
        var j_15286 = 0;
        while (true) {
          if (i_15285 < 32) {
            if ((self__.bitmap >>> i_15285 & 1) === 0) {
              var G__15287 = i_15285 + 1;
              var G__15288 = j_15286;
              i_15285 = G__15287;
              j_15286 = G__15288;
              continue;
            } else {
              nodes[i_15285] = !(self__.arr[j_15286] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_15286]), self__.arr[j_15286], self__.arr[j_15286 + 1], added_leaf_QMARK_) : self__.arr[j_15286 + 1];
              var G__15289 = i_15285 + 1;
              var G__15290 = j_15286 + 2;
              i_15285 = G__15289;
              j_15286 = G__15290;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_15291 = 0;
      var j_15292 = 0;
      while (true) {
        if (i_15291 < 32) {
          if ((self__.bitmap >>> i_15291 & 1) === 0) {
            var G__15293 = i_15291 + 1;
            var G__15294 = j_15292;
            i_15291 = G__15293;
            j_15292 = G__15294;
            continue;
          } else {
            nodes[i_15291] = !(self__.arr[j_15292] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_15292]), self__.arr[j_15292], self__.arr[j_15292 + 1], added_leaf_QMARK_) : self__.arr[j_15292 + 1];
            var G__15295 = i_15291 + 1;
            var G__15296 = j_15292 + 2;
            i_15291 = G__15295;
            j_15292 = G__15296;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__15297 = i + 1;
        var G__15298 = j + 2;
        var G__15299 = bitmap | 1 << i;
        i = G__15297;
        j = G__15298;
        bitmap = G__15299;
        continue;
      } else {
        var G__15300 = i + 1;
        var G__15301 = j;
        var G__15302 = bitmap;
        i = G__15300;
        j = G__15301;
        bitmap = G__15302;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__15303 = i + 1;
          var G__15304 = init__$2;
          i = G__15303;
          init__$1 = G__15304;
          continue;
        }
      } else {
        var G__15305 = i + 1;
        var G__15306 = init__$1;
        i = G__15305;
        init__$1 = G__15306;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__15307 = i + 2;
        i = G__15307;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__15308 = j + 2;
                j = G__15308;
                continue;
              }
            } else {
              var G__15309 = j + 2;
              j = G__15309;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__15310 = j + 1;
              j = G__15310;
              continue;
            }
          } else {
            var G__15311 = j + 1;
            j = G__15311;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj15314 = {};
    return obj15314;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__15315 = null;
  var G__15315__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15315__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15315 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15315__2.call(this, self__, k);
      case 3:
        return G__15315__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15315;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args15312) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15312)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__15316 = i + 1;
      var G__15317 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__15316;
      out = G__15317;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__15318 = o;
      if (G__15318) {
        var bit__4044__auto__ = G__15318.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4044__auto__ || G__15318.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15318.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15318);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15318);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__15319 = cljs.core.next.call(null, es);
          var G__15320 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__15319;
          tcoll__$1 = G__15320;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__15321 = ascending_QMARK_ ? t.left : t.right;
      var G__15322 = cljs.core.conj.call(null, stack__$1, t);
      t = G__15321;
      stack__$1 = G__15322;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__15324 = null;
  var G__15324__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15324__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15324 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15324__2.call(this, self__, k);
      case 3:
        return G__15324__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15324;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args15323) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15323)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__15326 = null;
  var G__15326__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15326__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15326 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15326__2.call(this, self__, k);
      case 3:
        return G__15326__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15326;
}();
cljs.core.RedNode.prototype.apply = function(self__, args15325) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15325)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__15328 = null;
  var G__15328__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15328__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15328 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15328__2.call(this, self__, k);
      case 3:
        return G__15328__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15328;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args15327) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15327)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__15329 = t.left;
          t = G__15329;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__15330 = t.right;
            t = G__15330;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__15331 = cljs.core.conj.call(null, stack, t);
              var G__15332 = t.left;
              stack = G__15331;
              t = G__15332;
              continue;
            } else {
              var G__15333 = stack;
              var G__15334 = t.right;
              stack = G__15333;
              t = G__15334;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__15335 = cljs.core.conj.call(null, stack, t);
                var G__15336 = t.right;
                stack = G__15335;
                t = G__15336;
                continue;
              } else {
                var G__15337 = stack;
                var G__15338 = t.left;
                stack = G__15337;
                t = G__15338;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__15339 = cljs.core.nnext.call(null, in$);
        var G__15340 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15339;
        out = G__15340;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__15341) {
    var keyvals = cljs.core.seq(arglist__15341);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__15342) {
    var keyvals = cljs.core.seq(arglist__15342);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj15346 = {};
      return obj15346;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__15347 = cljs.core.nnext.call(null, kvs);
        kvs = G__15347;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__15348) {
    var keyvals = cljs.core.seq(arglist__15348);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__15349 = cljs.core.nnext.call(null, in$);
        var G__15350 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15349;
        out = G__15350;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__15351) {
    var keyvals = cljs.core.seq(arglist__15351);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__15352 = cljs.core.nnext.call(null, in$);
        var G__15353 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15352;
        out = G__15353;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__15354) {
    var comparator = cljs.core.first(arglist__15354);
    var keyvals = cljs.core.rest(arglist__15354);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15355 = self__.mseq;
    if (G__15355) {
      var bit__4044__auto__ = G__15355.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__15355.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15355.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15355);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15355);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15356 = self__.mseq;
    if (G__15356) {
      var bit__4044__auto__ = G__15356.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__15356.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15356.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15356);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15356);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15357 = self__.mseq;
    if (G__15357) {
      var bit__4044__auto__ = G__15357.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__15357.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15357.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15357);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15357);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15358 = self__.mseq;
    if (G__15358) {
      var bit__4044__auto__ = G__15358.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4044__auto__ || G__15358.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15358.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15358);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__15358);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__15359_SHARP_, p2__15360_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3400__auto__ = p1__15359_SHARP_;
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__15360_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__15361) {
    var maps = cljs.core.seq(arglist__15361);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3400__auto__ = m1;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__15362) {
    var f = cljs.core.first(arglist__15362);
    var maps = cljs.core.rest(arglist__15362);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__15363 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__15364 = cljs.core.next.call(null, keys);
      ret = G__15363;
      keys = G__15364;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__15367 = null;
  var G__15367__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15367__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15367 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15367__2.call(this, self__, k);
      case 3:
        return G__15367__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15367;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args15366) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15366)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__15365_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__15365_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__15368 = i + 1;
        var G__15369 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__15368;
        out = G__15369;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__15370 = i + 1;
        var G__15371 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__15370;
        out = G__15371;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__15373 = null;
  var G__15373__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__15373__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__15373 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15373__2.call(this, self__, k);
      case 3:
        return G__15373__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15373;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args15372) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15372)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__15376 = null;
  var G__15376__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15376__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15376 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15376__2.call(this, self__, k);
      case 3:
        return G__15376__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15376;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args15375) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15375)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__15374_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__15374_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4236__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4236__auto__.length) {
        var G__15377 = i + 1;
        var G__15378 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__15377;
        res = G__15378;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__15379 = cljs.core._next.call(null, in$__$1);
            var G__15380 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__15379;
            out = G__15380;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__15381__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__15381 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15381__delegate.call(this, keys);
    };
    G__15381.cljs$lang$maxFixedArity = 0;
    G__15381.cljs$lang$applyTo = function(arglist__15382) {
      var keys = cljs.core.seq(arglist__15382);
      return G__15381__delegate(keys);
    };
    G__15381.cljs$core$IFn$_invoke$arity$variadic = G__15381__delegate;
    return G__15381;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__15383) {
    var keys = cljs.core.seq(arglist__15383);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__15384) {
    var comparator = cljs.core.first(arglist__15384);
    var keys = cljs.core.rest(arglist__15384);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__15385_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__15385_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__15385_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__15392, seen__$1) {
        while (true) {
          var vec__15393 = p__15392;
          var f = cljs.core.nth.call(null, vec__15393, 0, null);
          var xs__$1 = vec__15393;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__15394 = cljs.core.rest.call(null, s);
              var G__15395 = seen__$1;
              p__15392 = G__15394;
              seen__$1 = G__15395;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__15396 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__15397 = cljs.core.next.call(null, s__$1);
      ret = G__15396;
      s__$1 = G__15397;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__15399 = x;
    if (G__15399) {
      var bit__4037__auto__ = G__15399.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4037__auto__ || G__15399.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__15400 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__15401 = cljs.core.next.call(null, ks);
      var G__15402 = cljs.core.next.call(null, vs);
      map = G__15400;
      ks = G__15401;
      vs = G__15402;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__15405__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__15403_SHARP_, p2__15404_SHARP_) {
        return max_key.call(null, k, p1__15403_SHARP_, p2__15404_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__15405 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15405__delegate.call(this, k, x, y, more);
    };
    G__15405.cljs$lang$maxFixedArity = 3;
    G__15405.cljs$lang$applyTo = function(arglist__15406) {
      var k = cljs.core.first(arglist__15406);
      arglist__15406 = cljs.core.next(arglist__15406);
      var x = cljs.core.first(arglist__15406);
      arglist__15406 = cljs.core.next(arglist__15406);
      var y = cljs.core.first(arglist__15406);
      var more = cljs.core.rest(arglist__15406);
      return G__15405__delegate(k, x, y, more);
    };
    G__15405.cljs$core$IFn$_invoke$arity$variadic = G__15405__delegate;
    return G__15405;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__15409__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__15407_SHARP_, p2__15408_SHARP_) {
        return min_key.call(null, k, p1__15407_SHARP_, p2__15408_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__15409 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15409__delegate.call(this, k, x, y, more);
    };
    G__15409.cljs$lang$maxFixedArity = 3;
    G__15409.cljs$lang$applyTo = function(arglist__15410) {
      var k = cljs.core.first(arglist__15410);
      arglist__15410 = cljs.core.next(arglist__15410);
      var x = cljs.core.first(arglist__15410);
      arglist__15410 = cljs.core.next(arglist__15410);
      var y = cljs.core.first(arglist__15410);
      var more = cljs.core.rest(arglist__15410);
      return G__15409__delegate(k, x, y, more);
    };
    G__15409.cljs$core$IFn$_invoke$arity$variadic = G__15409__delegate;
    return G__15409;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__15413 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__15413, 0, null);
        var s = vec__15413;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__15414 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__15414, 0, null);
      var s = vec__15414;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__15417 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__15417, 0, null);
        var s = vec__15417;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__15418 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__15418, 0, null);
      var s = vec__15418;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$ = true;
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__15419_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__15419_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__15430 = null;
      var G__15430__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__15430__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__15430__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__15430__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__15430__4 = function() {
        var G__15431__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__15431 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15431__delegate.call(this, x, y, z, args);
        };
        G__15431.cljs$lang$maxFixedArity = 3;
        G__15431.cljs$lang$applyTo = function(arglist__15432) {
          var x = cljs.core.first(arglist__15432);
          arglist__15432 = cljs.core.next(arglist__15432);
          var y = cljs.core.first(arglist__15432);
          arglist__15432 = cljs.core.next(arglist__15432);
          var z = cljs.core.first(arglist__15432);
          var args = cljs.core.rest(arglist__15432);
          return G__15431__delegate(x, y, z, args);
        };
        G__15431.cljs$core$IFn$_invoke$arity$variadic = G__15431__delegate;
        return G__15431;
      }();
      G__15430 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15430__0.call(this);
          case 1:
            return G__15430__1.call(this, x);
          case 2:
            return G__15430__2.call(this, x, y);
          case 3:
            return G__15430__3.call(this, x, y, z);
          default:
            return G__15430__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15430.cljs$lang$maxFixedArity = 3;
      G__15430.cljs$lang$applyTo = G__15430__4.cljs$lang$applyTo;
      return G__15430;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__15433 = null;
      var G__15433__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__15433__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__15433__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__15433__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__15433__4 = function() {
        var G__15434__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__15434 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15434__delegate.call(this, x, y, z, args);
        };
        G__15434.cljs$lang$maxFixedArity = 3;
        G__15434.cljs$lang$applyTo = function(arglist__15435) {
          var x = cljs.core.first(arglist__15435);
          arglist__15435 = cljs.core.next(arglist__15435);
          var y = cljs.core.first(arglist__15435);
          arglist__15435 = cljs.core.next(arglist__15435);
          var z = cljs.core.first(arglist__15435);
          var args = cljs.core.rest(arglist__15435);
          return G__15434__delegate(x, y, z, args);
        };
        G__15434.cljs$core$IFn$_invoke$arity$variadic = G__15434__delegate;
        return G__15434;
      }();
      G__15433 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15433__0.call(this);
          case 1:
            return G__15433__1.call(this, x);
          case 2:
            return G__15433__2.call(this, x, y);
          case 3:
            return G__15433__3.call(this, x, y, z);
          default:
            return G__15433__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15433.cljs$lang$maxFixedArity = 3;
      G__15433.cljs$lang$applyTo = G__15433__4.cljs$lang$applyTo;
      return G__15433;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__15436 = null;
      var G__15436__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__15436__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__15436__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__15436__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__15436__4 = function() {
        var G__15437__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__15437 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15437__delegate.call(this, x, y, z, args);
        };
        G__15437.cljs$lang$maxFixedArity = 3;
        G__15437.cljs$lang$applyTo = function(arglist__15438) {
          var x = cljs.core.first(arglist__15438);
          arglist__15438 = cljs.core.next(arglist__15438);
          var y = cljs.core.first(arglist__15438);
          arglist__15438 = cljs.core.next(arglist__15438);
          var z = cljs.core.first(arglist__15438);
          var args = cljs.core.rest(arglist__15438);
          return G__15437__delegate(x, y, z, args);
        };
        G__15437.cljs$core$IFn$_invoke$arity$variadic = G__15437__delegate;
        return G__15437;
      }();
      G__15436 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15436__0.call(this);
          case 1:
            return G__15436__1.call(this, x);
          case 2:
            return G__15436__2.call(this, x, y);
          case 3:
            return G__15436__3.call(this, x, y, z);
          default:
            return G__15436__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15436.cljs$lang$maxFixedArity = 3;
      G__15436.cljs$lang$applyTo = G__15436__4.cljs$lang$applyTo;
      return G__15436;
    }();
  };
  var juxt__4 = function() {
    var G__15439__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__15440 = null;
        var G__15440__0 = function() {
          return cljs.core.reduce.call(null, function(p1__15420_SHARP_, p2__15421_SHARP_) {
            return cljs.core.conj.call(null, p1__15420_SHARP_, p2__15421_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__15440__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__15422_SHARP_, p2__15423_SHARP_) {
            return cljs.core.conj.call(null, p1__15422_SHARP_, p2__15423_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__15440__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__15424_SHARP_, p2__15425_SHARP_) {
            return cljs.core.conj.call(null, p1__15424_SHARP_, p2__15425_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__15440__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__15426_SHARP_, p2__15427_SHARP_) {
            return cljs.core.conj.call(null, p1__15426_SHARP_, p2__15427_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__15440__4 = function() {
          var G__15441__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__15428_SHARP_, p2__15429_SHARP_) {
              return cljs.core.conj.call(null, p1__15428_SHARP_, cljs.core.apply.call(null, p2__15429_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__15441 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__15441__delegate.call(this, x, y, z, args);
          };
          G__15441.cljs$lang$maxFixedArity = 3;
          G__15441.cljs$lang$applyTo = function(arglist__15442) {
            var x = cljs.core.first(arglist__15442);
            arglist__15442 = cljs.core.next(arglist__15442);
            var y = cljs.core.first(arglist__15442);
            arglist__15442 = cljs.core.next(arglist__15442);
            var z = cljs.core.first(arglist__15442);
            var args = cljs.core.rest(arglist__15442);
            return G__15441__delegate(x, y, z, args);
          };
          G__15441.cljs$core$IFn$_invoke$arity$variadic = G__15441__delegate;
          return G__15441;
        }();
        G__15440 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__15440__0.call(this);
            case 1:
              return G__15440__1.call(this, x);
            case 2:
              return G__15440__2.call(this, x, y);
            case 3:
              return G__15440__3.call(this, x, y, z);
            default:
              return G__15440__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__15440.cljs$lang$maxFixedArity = 3;
        G__15440.cljs$lang$applyTo = G__15440__4.cljs$lang$applyTo;
        return G__15440;
      }();
    };
    var G__15439 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15439__delegate.call(this, f, g, h, fs);
    };
    G__15439.cljs$lang$maxFixedArity = 3;
    G__15439.cljs$lang$applyTo = function(arglist__15443) {
      var f = cljs.core.first(arglist__15443);
      arglist__15443 = cljs.core.next(arglist__15443);
      var g = cljs.core.first(arglist__15443);
      arglist__15443 = cljs.core.next(arglist__15443);
      var h = cljs.core.first(arglist__15443);
      var fs = cljs.core.rest(arglist__15443);
      return G__15439__delegate(f, g, h, fs);
    };
    G__15439.cljs$core$IFn$_invoke$arity$variadic = G__15439__delegate;
    return G__15439;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__15444 = cljs.core.next.call(null, coll);
        coll = G__15444;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__15445 = n - 1;
        var G__15446 = cljs.core.next.call(null, coll);
        n = G__15445;
        coll = G__15446;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__15448 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__15448, 0, null);
  var flags = cljs.core.nth.call(null, vec__15448, 1, null);
  var pattern = cljs.core.nth.call(null, vec__15448, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_15450 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_15451__$1 = cljs.core.next.call(null, coll);
      var n_15452 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_15451__$1 && (n_15452 == null || !(n_15452 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_15451__$1), writer, opts);
          var G__15453 = cljs.core.next.call(null, coll_15451__$1);
          var G__15454 = n_15452 - 1;
          coll_15451__$1 = G__15453;
          n_15452 = G__15454;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_15450;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__15459 = cljs.core.seq.call(null, ss);
    var chunk__15460 = null;
    var count__15461 = 0;
    var i__15462 = 0;
    while (true) {
      if (i__15462 < count__15461) {
        var s = cljs.core._nth.call(null, chunk__15460, i__15462);
        cljs.core._write.call(null, writer, s);
        var G__15463 = seq__15459;
        var G__15464 = chunk__15460;
        var G__15465 = count__15461;
        var G__15466 = i__15462 + 1;
        seq__15459 = G__15463;
        chunk__15460 = G__15464;
        count__15461 = G__15465;
        i__15462 = G__15466;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__15459);
        if (temp__4092__auto__) {
          var seq__15459__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15459__$1)) {
            var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__15459__$1);
            var G__15467 = cljs.core.chunk_rest.call(null, seq__15459__$1);
            var G__15468 = c__4142__auto__;
            var G__15469 = cljs.core.count.call(null, c__4142__auto__);
            var G__15470 = 0;
            seq__15459 = G__15467;
            chunk__15460 = G__15468;
            count__15461 = G__15469;
            i__15462 = G__15470;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__15459__$1);
            cljs.core._write.call(null, writer, s);
            var G__15471 = cljs.core.next.call(null, seq__15459__$1);
            var G__15472 = null;
            var G__15473 = 0;
            var G__15474 = 0;
            seq__15459 = G__15471;
            chunk__15460 = G__15472;
            count__15461 = G__15473;
            i__15462 = G__15474;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__15475) {
    var writer = cljs.core.first(arglist__15475);
    var ss = cljs.core.rest(arglist__15475);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj15477 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj15477;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3388__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3388__auto__)) {
            var and__3388__auto____$1 = function() {
              var G__15483 = obj;
              if (G__15483) {
                var bit__4044__auto__ = G__15483.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4044__auto__ || G__15483.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__15483.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15483);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15483);
              }
            }();
            if (and__3388__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3388__auto____$1;
            }
          } else {
            return and__3388__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__15484 = obj;
              if (G__15484) {
                var bit__4037__auto__ = G__15484.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4037__auto__ || G__15484.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__15486 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__15486;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__15485 = obj;
                              if (G__15485) {
                                var bit__4044__auto__ = G__15485.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4044__auto__ || G__15485.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__15485.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__15485);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__15485);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__15491 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__15492 = null;
  var count__15493 = 0;
  var i__15494 = 0;
  while (true) {
    if (i__15494 < count__15493) {
      var obj = cljs.core._nth.call(null, chunk__15492, i__15494);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__15495 = seq__15491;
      var G__15496 = chunk__15492;
      var G__15497 = count__15493;
      var G__15498 = i__15494 + 1;
      seq__15491 = G__15495;
      chunk__15492 = G__15496;
      count__15493 = G__15497;
      i__15494 = G__15498;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__15491);
      if (temp__4092__auto__) {
        var seq__15491__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15491__$1)) {
          var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__15491__$1);
          var G__15499 = cljs.core.chunk_rest.call(null, seq__15491__$1);
          var G__15500 = c__4142__auto__;
          var G__15501 = cljs.core.count.call(null, c__4142__auto__);
          var G__15502 = 0;
          seq__15491 = G__15499;
          chunk__15492 = G__15500;
          count__15493 = G__15501;
          i__15494 = G__15502;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__15491__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__15503 = cljs.core.next.call(null, seq__15491__$1);
          var G__15504 = null;
          var G__15505 = 0;
          var G__15506 = 0;
          seq__15491 = G__15503;
          chunk__15492 = G__15504;
          count__15493 = G__15505;
          i__15494 = G__15506;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__15507) {
    var objs = cljs.core.seq(arglist__15507);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__15508) {
    var objs = cljs.core.seq(arglist__15508);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__15509) {
    var objs = cljs.core.seq(arglist__15509);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__15510) {
    var objs = cljs.core.seq(arglist__15510);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__15511) {
    var objs = cljs.core.seq(arglist__15511);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__15512) {
    var objs = cljs.core.seq(arglist__15512);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__15513) {
    var objs = cljs.core.seq(arglist__15513);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__15514) {
    var objs = cljs.core.seq(arglist__15514);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__15515 = cljs.core.seq.call(null, self__.watches);
  var chunk__15516 = null;
  var count__15517 = 0;
  var i__15518 = 0;
  while (true) {
    if (i__15518 < count__15517) {
      var vec__15519 = cljs.core._nth.call(null, chunk__15516, i__15518);
      var key = cljs.core.nth.call(null, vec__15519, 0, null);
      var f = cljs.core.nth.call(null, vec__15519, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__15521 = seq__15515;
      var G__15522 = chunk__15516;
      var G__15523 = count__15517;
      var G__15524 = i__15518 + 1;
      seq__15515 = G__15521;
      chunk__15516 = G__15522;
      count__15517 = G__15523;
      i__15518 = G__15524;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__15515);
      if (temp__4092__auto__) {
        var seq__15515__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15515__$1)) {
          var c__4142__auto__ = cljs.core.chunk_first.call(null, seq__15515__$1);
          var G__15525 = cljs.core.chunk_rest.call(null, seq__15515__$1);
          var G__15526 = c__4142__auto__;
          var G__15527 = cljs.core.count.call(null, c__4142__auto__);
          var G__15528 = 0;
          seq__15515 = G__15525;
          chunk__15516 = G__15526;
          count__15517 = G__15527;
          i__15518 = G__15528;
          continue;
        } else {
          var vec__15520 = cljs.core.first.call(null, seq__15515__$1);
          var key = cljs.core.nth.call(null, vec__15520, 0, null);
          var f = cljs.core.nth.call(null, vec__15520, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__15529 = cljs.core.next.call(null, seq__15515__$1);
          var G__15530 = null;
          var G__15531 = 0;
          var G__15532 = 0;
          seq__15515 = G__15529;
          chunk__15516 = G__15530;
          count__15517 = G__15531;
          i__15518 = G__15532;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__15536__delegate = function(x, p__15533) {
      var map__15535 = p__15533;
      var map__15535__$1 = cljs.core.seq_QMARK_.call(null, map__15535) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15535) : map__15535;
      var validator = cljs.core.get.call(null, map__15535__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__15535__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__15536 = function(x, var_args) {
      var p__15533 = null;
      if (arguments.length > 1) {
        p__15533 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15536__delegate.call(this, x, p__15533);
    };
    G__15536.cljs$lang$maxFixedArity = 1;
    G__15536.cljs$lang$applyTo = function(arglist__15537) {
      var x = cljs.core.first(arglist__15537);
      var p__15533 = cljs.core.rest(arglist__15537);
      return G__15536__delegate(x, p__15533);
    };
    G__15536.cljs$core$IFn$_invoke$arity$variadic = G__15536__delegate;
    return G__15536;
  }();
  atom = function(x, var_args) {
    var p__15533 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_15538 = a.validator;
  if (validate_15538 == null) {
  } else {
    if (cljs.core.truth_(validate_15538.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_15539 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_15539, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__15540__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__15540 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__15540__delegate.call(this, a, f, x, y, z, more);
    };
    G__15540.cljs$lang$maxFixedArity = 5;
    G__15540.cljs$lang$applyTo = function(arglist__15541) {
      var a = cljs.core.first(arglist__15541);
      arglist__15541 = cljs.core.next(arglist__15541);
      var f = cljs.core.first(arglist__15541);
      arglist__15541 = cljs.core.next(arglist__15541);
      var x = cljs.core.first(arglist__15541);
      arglist__15541 = cljs.core.next(arglist__15541);
      var y = cljs.core.first(arglist__15541);
      arglist__15541 = cljs.core.next(arglist__15541);
      var z = cljs.core.first(arglist__15541);
      var more = cljs.core.rest(arglist__15541);
      return G__15540__delegate(a, f, x, y, z, more);
    };
    G__15540.cljs$core$IFn$_invoke$arity$variadic = G__15540__delegate;
    return G__15540;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__15542) {
    var iref = cljs.core.first(arglist__15542);
    arglist__15542 = cljs.core.next(arglist__15542);
    var f = cljs.core.first(arglist__15542);
    var args = cljs.core.rest(arglist__15542);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__15543) {
    var map__15544 = p__15543;
    var map__15544__$1 = cljs.core.seq_QMARK_.call(null, map__15544) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15544) : map__15544;
    var curr_state = map__15544__$1;
    var done = cljs.core.get.call(null, map__15544__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj15546 = {};
  return obj15546;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__15548 = k;
    if (G__15548) {
      var bit__4044__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3400__auto__ = bit__4044__auto__;
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return G__15548.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__15548.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15548);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15548);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__15562 = x;
      if (G__15562) {
        var bit__4044__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3400__auto__ = bit__4044__auto__;
          if (cljs.core.truth_(or__3400__auto__)) {
            return or__3400__auto__;
          } else {
            return G__15562.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__15562.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15562);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__15562);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj15564 = {};
              return obj15564;
            }();
            var seq__15565_15575 = cljs.core.seq.call(null, x);
            var chunk__15566_15576 = null;
            var count__15567_15577 = 0;
            var i__15568_15578 = 0;
            while (true) {
              if (i__15568_15578 < count__15567_15577) {
                var vec__15569_15579 = cljs.core._nth.call(null, chunk__15566_15576, i__15568_15578);
                var k_15580 = cljs.core.nth.call(null, vec__15569_15579, 0, null);
                var v_15581 = cljs.core.nth.call(null, vec__15569_15579, 1, null);
                m[cljs.core.key__GT_js.call(null, k_15580)] = clj__GT_js.call(null, v_15581);
                var G__15582 = seq__15565_15575;
                var G__15583 = chunk__15566_15576;
                var G__15584 = count__15567_15577;
                var G__15585 = i__15568_15578 + 1;
                seq__15565_15575 = G__15582;
                chunk__15566_15576 = G__15583;
                count__15567_15577 = G__15584;
                i__15568_15578 = G__15585;
                continue;
              } else {
                var temp__4092__auto___15586 = cljs.core.seq.call(null, seq__15565_15575);
                if (temp__4092__auto___15586) {
                  var seq__15565_15587__$1 = temp__4092__auto___15586;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__15565_15587__$1)) {
                    var c__4142__auto___15588 = cljs.core.chunk_first.call(null, seq__15565_15587__$1);
                    var G__15589 = cljs.core.chunk_rest.call(null, seq__15565_15587__$1);
                    var G__15590 = c__4142__auto___15588;
                    var G__15591 = cljs.core.count.call(null, c__4142__auto___15588);
                    var G__15592 = 0;
                    seq__15565_15575 = G__15589;
                    chunk__15566_15576 = G__15590;
                    count__15567_15577 = G__15591;
                    i__15568_15578 = G__15592;
                    continue;
                  } else {
                    var vec__15570_15593 = cljs.core.first.call(null, seq__15565_15587__$1);
                    var k_15594 = cljs.core.nth.call(null, vec__15570_15593, 0, null);
                    var v_15595 = cljs.core.nth.call(null, vec__15570_15593, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_15594)] = clj__GT_js.call(null, v_15595);
                    var G__15596 = cljs.core.next.call(null, seq__15565_15587__$1);
                    var G__15597 = null;
                    var G__15598 = 0;
                    var G__15599 = 0;
                    seq__15565_15575 = G__15596;
                    chunk__15566_15576 = G__15597;
                    count__15567_15577 = G__15598;
                    i__15568_15578 = G__15599;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__15571_15600 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__15572_15601 = null;
              var count__15573_15602 = 0;
              var i__15574_15603 = 0;
              while (true) {
                if (i__15574_15603 < count__15573_15602) {
                  var x_15604__$1 = cljs.core._nth.call(null, chunk__15572_15601, i__15574_15603);
                  arr.push(x_15604__$1);
                  var G__15605 = seq__15571_15600;
                  var G__15606 = chunk__15572_15601;
                  var G__15607 = count__15573_15602;
                  var G__15608 = i__15574_15603 + 1;
                  seq__15571_15600 = G__15605;
                  chunk__15572_15601 = G__15606;
                  count__15573_15602 = G__15607;
                  i__15574_15603 = G__15608;
                  continue;
                } else {
                  var temp__4092__auto___15609 = cljs.core.seq.call(null, seq__15571_15600);
                  if (temp__4092__auto___15609) {
                    var seq__15571_15610__$1 = temp__4092__auto___15609;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__15571_15610__$1)) {
                      var c__4142__auto___15611 = cljs.core.chunk_first.call(null, seq__15571_15610__$1);
                      var G__15612 = cljs.core.chunk_rest.call(null, seq__15571_15610__$1);
                      var G__15613 = c__4142__auto___15611;
                      var G__15614 = cljs.core.count.call(null, c__4142__auto___15611);
                      var G__15615 = 0;
                      seq__15571_15600 = G__15612;
                      chunk__15572_15601 = G__15613;
                      count__15573_15602 = G__15614;
                      i__15574_15603 = G__15615;
                      continue;
                    } else {
                      var x_15616__$1 = cljs.core.first.call(null, seq__15571_15610__$1);
                      arr.push(x_15616__$1);
                      var G__15617 = cljs.core.next.call(null, seq__15571_15610__$1);
                      var G__15618 = null;
                      var G__15619 = 0;
                      var G__15620 = 0;
                      seq__15571_15600 = G__15617;
                      chunk__15572_15601 = G__15618;
                      count__15573_15602 = G__15619;
                      i__15574_15603 = G__15620;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj15622 = {};
  return obj15622;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3388__auto__ = x;
    if (and__3388__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4021__auto__ = x == null ? null : x;
    return function() {
      var or__3400__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__15643__delegate = function(x, opts) {
      if (function() {
        var G__15633 = x;
        if (G__15633) {
          var bit__4044__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3400__auto__ = bit__4044__auto__;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return G__15633.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__15633.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__15633);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__15633);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__15634 = opts;
          var map__15634__$1 = cljs.core.seq_QMARK_.call(null, map__15634) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15634) : map__15634;
          var keywordize_keys = cljs.core.get.call(null, map__15634__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__15634, map__15634__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4111__auto__ = function(map__15634, map__15634__$1, keywordize_keys, keyfn) {
                          return function iter__15639(s__15640) {
                            return new cljs.core.LazySeq(null, function(map__15634, map__15634__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__15640__$1 = s__15640;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__15640__$1);
                                  if (temp__4092__auto__) {
                                    var s__15640__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__15640__$2)) {
                                      var c__4109__auto__ = cljs.core.chunk_first.call(null, s__15640__$2);
                                      var size__4110__auto__ = cljs.core.count.call(null, c__4109__auto__);
                                      var b__15642 = cljs.core.chunk_buffer.call(null, size__4110__auto__);
                                      if (function() {
                                        var i__15641 = 0;
                                        while (true) {
                                          if (i__15641 < size__4110__auto__) {
                                            var k = cljs.core._nth.call(null, c__4109__auto__, i__15641);
                                            cljs.core.chunk_append.call(null, b__15642, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__15644 = i__15641 + 1;
                                            i__15641 = G__15644;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15642), iter__15639.call(null, cljs.core.chunk_rest.call(null, s__15640__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15642), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__15640__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__15639.call(null, cljs.core.rest.call(null, s__15640__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__15634, map__15634__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__15634, map__15634__$1, keywordize_keys, keyfn);
                        return iter__4111__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__15634, map__15634__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__15643 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15643__delegate.call(this, x, opts);
    };
    G__15643.cljs$lang$maxFixedArity = 1;
    G__15643.cljs$lang$applyTo = function(arglist__15645) {
      var x = cljs.core.first(arglist__15645);
      var opts = cljs.core.rest(arglist__15645);
      return G__15643__delegate(x, opts);
    };
    G__15643.cljs$core$IFn$_invoke$arity$variadic = G__15643__delegate;
    return G__15643;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__15646__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__15646 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15646__delegate.call(this, args);
    };
    G__15646.cljs$lang$maxFixedArity = 0;
    G__15646.cljs$lang$applyTo = function(arglist__15647) {
      var args = cljs.core.seq(arglist__15647);
      return G__15646__delegate(args);
    };
    G__15646.cljs$core$IFn$_invoke$arity$variadic = G__15646__delegate;
    return G__15646;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__15648 = ret;
        f = G__15648;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__15649__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__15649 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15649__delegate.call(this, f, args);
    };
    G__15649.cljs$lang$maxFixedArity = 1;
    G__15649.cljs$lang$applyTo = function(arglist__15650) {
      var f = cljs.core.first(arglist__15650);
      var args = cljs.core.rest(arglist__15650);
      return G__15649__delegate(f, args);
    };
    G__15649.cljs$core$IFn$_invoke$arity$variadic = G__15649__delegate;
    return G__15649;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__15651) {
    var f = cljs.core.first(arglist__15651);
    var args = cljs.core.rest(arglist__15651);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3400__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3400__auto__) {
      return or__3400__auto__;
    } else {
      var or__3400__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3400__auto____$1) {
        return or__3400__auto____$1;
      } else {
        var and__3388__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3388__auto__) {
          var and__3388__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3388__auto____$1) {
            var and__3388__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3388__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__15652 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__15653 = i + 1;
                  ret = G__15652;
                  i = G__15653;
                  continue;
                }
                break;
              }
            } else {
              return and__3388__auto____$2;
            }
          } else {
            return and__3388__auto____$1;
          }
        } else {
          return and__3388__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3400__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3400__auto__)) {
      return or__3400__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__15654_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__15654_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__15654_SHARP_), cljs.core.second.call(null, p1__15654_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__15655_SHARP_, p2__15656_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__15655_SHARP_, p2__15656_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3400__auto__ = cljs.core.truth_(function() {
    var and__3388__auto__ = xprefs;
    if (cljs.core.truth_(and__3388__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3388__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    var or__3400__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__15657 = cljs.core.rest.call(null, ps);
          ps = G__15657;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3400__auto____$1)) {
      return or__3400__auto____$1;
    } else {
      var or__3400__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__15658 = cljs.core.rest.call(null, ps);
            ps = G__15658;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3400__auto____$2)) {
        return or__3400__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3400__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__15661) {
    var vec__15662 = p__15661;
    var k = cljs.core.nth.call(null, vec__15662, 0, null);
    var _ = cljs.core.nth.call(null, vec__15662, 1, null);
    var e = vec__15662;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3400__auto__ = be == null;
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj15664 = {};
  return obj15664;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._reset[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._reset["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._add_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._add_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._remove_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._remove_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._prefer_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._get_method[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._get_method["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._methods[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._methods["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._prefers[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._prefers["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3388__auto__ = mf;
    if (and__3388__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4021__auto__ = mf == null ? null : mf;
    return function() {
      var or__3400__auto__ = cljs.core._dispatch[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core._dispatch["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__15665__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__15665 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__15665__delegate.call(this, _, args);
  };
  G__15665.cljs$lang$maxFixedArity = 1;
  G__15665.cljs$lang$applyTo = function(arglist__15666) {
    var _ = cljs.core.first(arglist__15666);
    var args = cljs.core.rest(arglist__15666);
    return G__15665__delegate(_, args);
  };
  G__15665.cljs$core$IFn$_invoke$arity$variadic = G__15665__delegate;
  return G__15665;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$ICloneable$ = true;
cljs.core.UUID.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.UUID(self__.uuid);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("cljs_uuid.core");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid.core.make_random = function make_random() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16);
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16);
  };
  return new cljs.core.UUID((new goog.string.StringBuffer(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null))).toString());
};
cljs_uuid.core.make_v4 = cljs_uuid.core.make_random;
cljs_uuid.core.make_random_string = function make_random_string() {
  return cljs_uuid.core.make_random.call(null).uuid;
};
goog.provide("chaperone.crossover.user");
goog.require("cljs.core");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.user.User = function(id, firstname, lastname, password, email, photo, last_logged_in, __meta, __extmap) {
  this.id = id;
  this.firstname = firstname;
  this.lastname = lastname;
  this.password = password;
  this.email = email;
  this.photo = photo;
  this.last_logged_in = last_logged_in;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 7) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.user.User.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k17765, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k17765, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k17765, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229))) {
      return self__.firstname;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k17765, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043))) {
        return self__.lastname;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k17765, new cljs.core.Keyword(null, "password", "password", 2230889997))) {
          return self__.password;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k17765, new cljs.core.Keyword(null, "email", "email", 1110523662))) {
            return self__.email;
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, k17765, new cljs.core.Keyword(null, "photo", "photo", 1120547236))) {
              return self__.photo;
            } else {
              if (cljs.core.keyword_identical_QMARK_.call(null, k17765, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907))) {
                return self__.last_logged_in;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return cljs.core.get.call(null, self__.__extmap, k17765, else__3983__auto__);
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__17764) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__17767 = cljs.core.keyword_identical_QMARK_;
  var expr__17768 = k__3988__auto__;
  if (cljs.core.truth_(pred__17767.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__17768))) {
    return new chaperone.crossover.user.User(G__17764, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__17767.call(null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), expr__17768))) {
      return new chaperone.crossover.user.User(self__.id, G__17764, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__17767.call(null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), expr__17768))) {
        return new chaperone.crossover.user.User(self__.id, self__.firstname, G__17764, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__17767.call(null, new cljs.core.Keyword(null, "password", "password", 2230889997), expr__17768))) {
          return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, G__17764, self__.email, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__17767.call(null, new cljs.core.Keyword(null, "email", "email", 1110523662), expr__17768))) {
            return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, G__17764, self__.photo, self__.last_logged_in, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__17767.call(null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), expr__17768))) {
              return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, G__17764, self__.last_logged_in, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__17767.call(null, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), expr__17768))) {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, G__17764, self__.__meta, self__.__extmap, null);
              } else {
                return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__17764), null);
              }
            }
          }
        }
      }
    }
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.user.User{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.user.User.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), self__.firstname], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), self__.lastname], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "email", "email", 1110523662), self__.email], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "photo", "photo", 1120547236), self__.photo], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), self__.last_logged_in], null)], null), self__.__extmap));
};
chaperone.crossover.user.User.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.user.User.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.user.User.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__17764) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, G__17764, self__.__extmap, self__.__hash);
};
chaperone.crossover.user.User.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.user.User.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907), null, new cljs.core.Keyword(null, "photo", "photo", 1120547236), null, new cljs.core.Keyword(null, "email", "email", 1110523662), null, new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), null, new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), null, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), null, new cljs.core.Keyword(null, "password", "password", 2230889997), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.user.User(self__.id, self__.firstname, self__.lastname, self__.password, self__.email, self__.photo, self__.last_logged_in, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.user.User.cljs$lang$type = true;
chaperone.crossover.user.User.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.user/User");
};
chaperone.crossover.user.User.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.user/User");
};
chaperone.crossover.user.__GT_User = function __GT_User(id, firstname, lastname, password, email, photo, last_logged_in) {
  return new chaperone.crossover.user.User(id, firstname, lastname, password, email, photo, last_logged_in);
};
chaperone.crossover.user.map__GT_User = function map__GT_User(G__17766) {
  return new chaperone.crossover.user.User((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__17766), (new cljs.core.Keyword(null, "firstname", "firstname", 1147693229)).cljs$core$IFn$_invoke$arity$1(G__17766), (new cljs.core.Keyword(null, "lastname", "lastname", 3850225043)).cljs$core$IFn$_invoke$arity$1(G__17766), (new cljs.core.Keyword(null, "password", "password", 2230889997)).cljs$core$IFn$_invoke$arity$1(G__17766), (new cljs.core.Keyword(null, "email", "email", 
  1110523662)).cljs$core$IFn$_invoke$arity$1(G__17766), (new cljs.core.Keyword(null, "photo", "photo", 1120547236)).cljs$core$IFn$_invoke$arity$1(G__17766), (new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)).cljs$core$IFn$_invoke$arity$1(G__17766), null, cljs.core.dissoc.call(null, G__17766, new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Keyword(null, "firstname", "firstname", 1147693229), new cljs.core.Keyword(null, "lastname", "lastname", 3850225043), 
  new cljs.core.Keyword(null, "password", "password", 2230889997), new cljs.core.Keyword(null, "email", "email", 1110523662), new cljs.core.Keyword(null, "photo", "photo", 1120547236), new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907)));
};
chaperone.crossover.user.new_user = function() {
  var new_user__delegate = function(firstname, lastname, email, password, p__17770) {
    var map__17772 = p__17770;
    var map__17772__$1 = cljs.core.seq_QMARK_.call(null, map__17772) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17772) : map__17772;
    var last_logged_in = cljs.core.get.call(null, map__17772__$1, new cljs.core.Keyword(null, "last-logged-in", "last-logged-in", 1486904907));
    var photo = cljs.core.get.call(null, map__17772__$1, new cljs.core.Keyword(null, "photo", "photo", 1120547236));
    return chaperone.crossover.user.__GT_User.call(null, cljs_uuid.core.make_random_string.call(null), firstname, lastname, password, email, photo, last_logged_in);
  };
  var new_user = function(firstname, lastname, email, password, var_args) {
    var p__17770 = null;
    if (arguments.length > 4) {
      p__17770 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
    }
    return new_user__delegate.call(this, firstname, lastname, email, password, p__17770);
  };
  new_user.cljs$lang$maxFixedArity = 4;
  new_user.cljs$lang$applyTo = function(arglist__17773) {
    var firstname = cljs.core.first(arglist__17773);
    arglist__17773 = cljs.core.next(arglist__17773);
    var lastname = cljs.core.first(arglist__17773);
    arglist__17773 = cljs.core.next(arglist__17773);
    var email = cljs.core.first(arglist__17773);
    arglist__17773 = cljs.core.next(arglist__17773);
    var password = cljs.core.first(arglist__17773);
    var p__17770 = cljs.core.rest(arglist__17773);
    return new_user__delegate(firstname, lastname, email, password, p__17770);
  };
  new_user.cljs$core$IFn$_invoke$arity$variadic = new_user__delegate;
  return new_user;
}();
chaperone.crossover.user.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "chaperone.crossover.user.User", "chaperone.crossover.user.User", -826432028, null), chaperone.crossover.user.map__GT_User], null);
};
goog.provide("chaperone.crossover.rpc");
goog.require("cljs.core");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("cljs_uuid.core");
goog.require("cljs_uuid.core");
chaperone.crossover.rpc.Request = function(id, category, action, data, __meta, __extmap) {
  this.id = id;
  this.category = category;
  this.action = action;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k14638, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14638, new cljs.core.Keyword(null, "id", "id", 1013907597))) {
    return self__.id;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k14638, new cljs.core.Keyword(null, "category", "category", 1064415344))) {
      return self__.category;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k14638, new cljs.core.Keyword(null, "action", "action", 3885920680))) {
        return self__.action;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k14638, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
          return self__.data;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.get.call(null, self__.__extmap, k14638, else__3983__auto__);
          } else {
            return null;
          }
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__14637) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__14640 = cljs.core.keyword_identical_QMARK_;
  var expr__14641 = k__3988__auto__;
  if (cljs.core.truth_(pred__14640.call(null, new cljs.core.Keyword(null, "id", "id", 1013907597), expr__14641))) {
    return new chaperone.crossover.rpc.Request(G__14637, self__.category, self__.action, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14640.call(null, new cljs.core.Keyword(null, "category", "category", 1064415344), expr__14641))) {
      return new chaperone.crossover.rpc.Request(self__.id, G__14637, self__.action, self__.data, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__14640.call(null, new cljs.core.Keyword(null, "action", "action", 3885920680), expr__14641))) {
        return new chaperone.crossover.rpc.Request(self__.id, self__.category, G__14637, self__.data, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__14640.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__14641))) {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, G__14637, self__.__meta, self__.__extmap, null);
        } else {
          return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__14637), null);
        }
      }
    }
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.rpc.Request{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", 1013907597), self__.id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "category", "category", 1064415344), self__.category], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "action", "action", 3885920680), self__.action], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Request.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__14637) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, G__14637, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Request.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "action", "action", 3885920680), null, new cljs.core.Keyword(null, "id", "id", 1013907597), null, new cljs.core.Keyword(null, "category", "category", 1064415344), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.rpc.Request(self__.id, self__.category, self__.action, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.rpc.Request.cljs$lang$type = true;
chaperone.crossover.rpc.Request.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.Request.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.rpc/Request");
};
chaperone.crossover.rpc.__GT_Request = function __GT_Request(id, category, action, data) {
  return new chaperone.crossover.rpc.Request(id, category, action, data);
};
chaperone.crossover.rpc.map__GT_Request = function map__GT_Request(G__14639) {
  return new chaperone.crossover.rpc.Request((new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(G__14639), (new cljs.core.Keyword(null, "category", "category", 1064415344)).cljs$core$IFn$_invoke$arity$1(G__14639), (new cljs.core.Keyword(null, "action", "action", 3885920680)).cljs$core$IFn$_invoke$arity$1(G__14639), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__14639), null, cljs.core.dissoc.call(null, G__14639, new cljs.core.Keyword(null, 
  "id", "id", 1013907597), new cljs.core.Keyword(null, "category", "category", 1064415344), new cljs.core.Keyword(null, "action", "action", 3885920680), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.Response = function(request, data, __meta, __extmap) {
  this.request = request;
  this.data = data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IHash$_hash$arity$1 = function(this__3975__auto__) {
  var self__ = this;
  var this__3975__auto____$1 = this;
  var h__3811__auto__ = self__.__hash;
  if (!(h__3811__auto__ == null)) {
    return h__3811__auto__;
  } else {
    var h__3811__auto____$1 = cljs.core.hash_imap.call(null, this__3975__auto____$1);
    self__.__hash = h__3811__auto____$1;
    return h__3811__auto____$1;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__3980__auto__, k__3981__auto__) {
  var self__ = this;
  var this__3980__auto____$1 = this;
  return cljs.core._lookup.call(null, this__3980__auto____$1, k__3981__auto__, null);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__3982__auto__, k14644, else__3983__auto__) {
  var self__ = this;
  var this__3982__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14644, new cljs.core.Keyword(null, "request", "request", 2109597185))) {
    return self__.request;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k14644, new cljs.core.Keyword(null, "data", "data", 1016980252))) {
      return self__.data;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k14644, else__3983__auto__);
      } else {
        return null;
      }
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__3987__auto__, k__3988__auto__, G__14643) {
  var self__ = this;
  var this__3987__auto____$1 = this;
  var pred__14646 = cljs.core.keyword_identical_QMARK_;
  var expr__14647 = k__3988__auto__;
  if (cljs.core.truth_(pred__14646.call(null, new cljs.core.Keyword(null, "request", "request", 2109597185), expr__14647))) {
    return new chaperone.crossover.rpc.Response(G__14643, self__.data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14646.call(null, new cljs.core.Keyword(null, "data", "data", 1016980252), expr__14647))) {
      return new chaperone.crossover.rpc.Response(self__.request, G__14643, self__.__meta, self__.__extmap, null);
    } else {
      return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__3988__auto__, G__14643), null);
    }
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__3994__auto__, writer__3995__auto__, opts__3996__auto__) {
  var self__ = this;
  var this__3994__auto____$1 = this;
  var pr_pair__3997__auto__ = function(keyval__3998__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, cljs.core.pr_writer, "", " ", "", opts__3996__auto__, keyval__3998__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__3995__auto__, pr_pair__3997__auto__, "#chaperone.crossover.rpc.Response{", ", ", "}", opts__3996__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__3985__auto__, entry__3986__auto__) {
  var self__ = this;
  var this__3985__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__3986__auto__)) {
    return cljs.core._assoc.call(null, this__3985__auto____$1, cljs.core._nth.call(null, entry__3986__auto__, 0), cljs.core._nth.call(null, entry__3986__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__3985__auto____$1, entry__3986__auto__);
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__3992__auto__) {
  var self__ = this;
  var this__3992__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 2109597185), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252), self__.data], null)], null), self__.__extmap));
};
chaperone.crossover.rpc.Response.prototype.cljs$core$ICounted$_count$arity$1 = function(this__3984__auto__) {
  var self__ = this;
  var this__3984__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__3976__auto__, other__3977__auto__) {
  var self__ = this;
  var this__3976__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = other__3977__auto__;
    if (cljs.core.truth_(and__3388__auto__)) {
      return this__3976__auto____$1.constructor === other__3977__auto__.constructor && cljs.core.equiv_map.call(null, this__3976__auto____$1, other__3977__auto__);
    } else {
      return and__3388__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__3979__auto__, G__14643) {
  var self__ = this;
  var this__3979__auto____$1 = this;
  return new chaperone.crossover.rpc.Response(self__.request, self__.data, G__14643, self__.__extmap, self__.__hash);
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__3978__auto__) {
  var self__ = this;
  var this__3978__auto____$1 = this;
  return self__.__meta;
};
chaperone.crossover.rpc.Response.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__3989__auto__, k__3990__auto__) {
  var self__ = this;
  var this__3989__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "data", "data", 1016980252), null, new cljs.core.Keyword(null, "request", "request", 2109597185), null], null), null), k__3990__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__3989__auto____$1), self__.__meta), k__3990__auto__);
  } else {
    return new chaperone.crossover.rpc.Response(self__.request, self__.data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__3990__auto__)), null);
  }
};
chaperone.crossover.rpc.Response.cljs$lang$type = true;
chaperone.crossover.rpc.Response.cljs$lang$ctorPrSeq = function(this__4014__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.Response.cljs$lang$ctorPrWriter = function(this__4014__auto__, writer__4015__auto__) {
  return cljs.core._write.call(null, writer__4015__auto__, "chaperone.crossover.rpc/Response");
};
chaperone.crossover.rpc.__GT_Response = function __GT_Response(request, data) {
  return new chaperone.crossover.rpc.Response(request, data);
};
chaperone.crossover.rpc.map__GT_Response = function map__GT_Response(G__14645) {
  return new chaperone.crossover.rpc.Response((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(G__14645), (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(G__14645), null, cljs.core.dissoc.call(null, G__14645, new cljs.core.Keyword(null, "request", "request", 2109597185), new cljs.core.Keyword(null, "data", "data", 1016980252)));
};
chaperone.crossover.rpc.new_request = function new_request(category, action, data) {
  return chaperone.crossover.rpc.__GT_Request.call(null, cljs_uuid.core.make_random.call(null), category, action, data);
};
chaperone.crossover.rpc.new_response = function new_response(request, data) {
  return chaperone.crossover.rpc.__GT_Response.call(null, request, data);
};
chaperone.crossover.rpc.edn_readers = function edn_readers() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "chaperone.crossover.rpc.Request", "chaperone.crossover.rpc.Request", -174529060, null), chaperone.crossover.rpc.map__GT_Request, new cljs.core.Symbol(null, "chaperone.crossover.rpc.Response", "chaperone.crossover.rpc.Response", 908805862, null), chaperone.crossover.rpc.map__GT_Response], null);
};
chaperone.crossover.rpc.all_edn_readers = function all_edn_readers() {
  return cljs.core.merge.call(null, chaperone.crossover.rpc.edn_readers.call(null), chaperone.crossover.user.edn_readers.call(null));
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj15668 = {};
  return obj15668;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3388__auto__ = reader;
    if (and__3388__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4021__auto__ = reader == null ? null : reader;
    return function() {
      var or__3400__auto__ = cljs.reader.read_char[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.read_char["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3388__auto__ = reader;
    if (and__3388__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4021__auto__ = reader == null ? null : reader;
    return function() {
      var or__3400__auto__ = cljs.reader.unread[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.unread["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3400__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__15669) {
    var rdr = cljs.core.first(arglist__15669);
    var msg = cljs.core.rest(arglist__15669);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3388__auto__ = !(ch === "#");
  if (and__3388__auto__) {
    var and__3388__auto____$1 = !(ch === "'");
    if (and__3388__auto____$1) {
      var and__3388__auto____$2 = !(ch === ":");
      if (and__3388__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3388__auto____$2;
      }
    } else {
      return and__3388__auto____$1;
    }
  } else {
    return and__3388__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__15670 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__15671 = cljs.reader.read_char.call(null, rdr);
      sb = G__15670;
      ch = G__15671;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__15672 = cljs.reader.read_char.call(null, rdr);
      ch = G__15672;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__15673 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__15673;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__15674 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__15674;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3400__auto__ = ch == null;
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3400__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__15675 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__15676 = cljs.reader.read_char.call(null, reader);
      buffer = G__15675;
      ch = G__15676;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__15677 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__15678 = cljs.reader.read_char.call(null, reader);
        buffer = G__15677;
        ch = G__15678;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__15679 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__15680 = cljs.reader.read_char.call(null, reader);
            buffer = G__15679;
            ch = G__15680;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__15682 = o;
    if (G__15682) {
      var bit__4044__auto__ = G__15682.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4044__auto__ || G__15682.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15682.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15682);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15682);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__15683 = reader;
        var G__15684 = eof_is_error;
        var G__15685 = sentinel;
        var G__15686 = is_recursive;
        reader = G__15683;
        eof_is_error = G__15684;
        sentinel = G__15685;
        is_recursive = G__15686;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__15687 = cljs.reader.read_comment.call(null, reader, ch);
          var G__15688 = eof_is_error;
          var G__15689 = sentinel;
          var G__15690 = is_recursive;
          reader = G__15687;
          eof_is_error = G__15688;
          sentinel = G__15689;
          is_recursive = G__15690;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__15691 = reader;
              var G__15692 = eof_is_error;
              var G__15693 = sentinel;
              var G__15694 = is_recursive;
              reader = G__15691;
              eof_is_error = G__15692;
              sentinel = G__15693;
              is_recursive = G__15694;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__15695 = b.append("0");
            b = G__15695;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__15697 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__15697, 0, null);
  var years = cljs.core.nth.call(null, vec__15697, 1, null);
  var months = cljs.core.nth.call(null, vec__15697, 2, null);
  var days = cljs.core.nth.call(null, vec__15697, 3, null);
  var hours = cljs.core.nth.call(null, vec__15697, 4, null);
  var minutes = cljs.core.nth.call(null, vec__15697, 5, null);
  var seconds = cljs.core.nth.call(null, vec__15697, 6, null);
  var fraction = cljs.core.nth.call(null, vec__15697, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__15697, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__15697, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__15697, 10, null);
  var v = vec__15697;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3400__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3400__auto__)) {
        return or__3400__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__15699 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__15699, 0, null);
    var months = cljs.core.nth.call(null, vec__15699, 1, null);
    var days = cljs.core.nth.call(null, vec__15699, 2, null);
    var hours = cljs.core.nth.call(null, vec__15699, 3, null);
    var minutes = cljs.core.nth.call(null, vec__15699, 4, null);
    var seconds = cljs.core.nth.call(null, vec__15699, 5, null);
    var ms = cljs.core.nth.call(null, vec__15699, 6, null);
    var offset = cljs.core.nth.call(null, vec__15699, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__15712_15724 = cljs.core.seq.call(null, form);
    var chunk__15713_15725 = null;
    var count__15714_15726 = 0;
    var i__15715_15727 = 0;
    while (true) {
      if (i__15715_15727 < count__15714_15726) {
        var x_15728 = cljs.core._nth.call(null, chunk__15713_15725, i__15715_15727);
        arr.push(x_15728);
        var G__15729 = seq__15712_15724;
        var G__15730 = chunk__15713_15725;
        var G__15731 = count__15714_15726;
        var G__15732 = i__15715_15727 + 1;
        seq__15712_15724 = G__15729;
        chunk__15713_15725 = G__15730;
        count__15714_15726 = G__15731;
        i__15715_15727 = G__15732;
        continue;
      } else {
        var temp__4092__auto___15733 = cljs.core.seq.call(null, seq__15712_15724);
        if (temp__4092__auto___15733) {
          var seq__15712_15734__$1 = temp__4092__auto___15733;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15712_15734__$1)) {
            var c__4142__auto___15735 = cljs.core.chunk_first.call(null, seq__15712_15734__$1);
            var G__15736 = cljs.core.chunk_rest.call(null, seq__15712_15734__$1);
            var G__15737 = c__4142__auto___15735;
            var G__15738 = cljs.core.count.call(null, c__4142__auto___15735);
            var G__15739 = 0;
            seq__15712_15724 = G__15736;
            chunk__15713_15725 = G__15737;
            count__15714_15726 = G__15738;
            i__15715_15727 = G__15739;
            continue;
          } else {
            var x_15740 = cljs.core.first.call(null, seq__15712_15734__$1);
            arr.push(x_15740);
            var G__15741 = cljs.core.next.call(null, seq__15712_15734__$1);
            var G__15742 = null;
            var G__15743 = 0;
            var G__15744 = 0;
            seq__15712_15724 = G__15741;
            chunk__15713_15725 = G__15742;
            count__15714_15726 = G__15743;
            i__15715_15727 = G__15744;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj15717 = {};
        return obj15717;
      }();
      var seq__15718_15745 = cljs.core.seq.call(null, form);
      var chunk__15719_15746 = null;
      var count__15720_15747 = 0;
      var i__15721_15748 = 0;
      while (true) {
        if (i__15721_15748 < count__15720_15747) {
          var vec__15722_15749 = cljs.core._nth.call(null, chunk__15719_15746, i__15721_15748);
          var k_15750 = cljs.core.nth.call(null, vec__15722_15749, 0, null);
          var v_15751 = cljs.core.nth.call(null, vec__15722_15749, 1, null);
          obj[cljs.core.name.call(null, k_15750)] = v_15751;
          var G__15752 = seq__15718_15745;
          var G__15753 = chunk__15719_15746;
          var G__15754 = count__15720_15747;
          var G__15755 = i__15721_15748 + 1;
          seq__15718_15745 = G__15752;
          chunk__15719_15746 = G__15753;
          count__15720_15747 = G__15754;
          i__15721_15748 = G__15755;
          continue;
        } else {
          var temp__4092__auto___15756 = cljs.core.seq.call(null, seq__15718_15745);
          if (temp__4092__auto___15756) {
            var seq__15718_15757__$1 = temp__4092__auto___15756;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15718_15757__$1)) {
              var c__4142__auto___15758 = cljs.core.chunk_first.call(null, seq__15718_15757__$1);
              var G__15759 = cljs.core.chunk_rest.call(null, seq__15718_15757__$1);
              var G__15760 = c__4142__auto___15758;
              var G__15761 = cljs.core.count.call(null, c__4142__auto___15758);
              var G__15762 = 0;
              seq__15718_15745 = G__15759;
              chunk__15719_15746 = G__15760;
              count__15720_15747 = G__15761;
              i__15721_15748 = G__15762;
              continue;
            } else {
              var vec__15723_15763 = cljs.core.first.call(null, seq__15718_15757__$1);
              var k_15764 = cljs.core.nth.call(null, vec__15723_15763, 0, null);
              var v_15765 = cljs.core.nth.call(null, vec__15723_15763, 1, null);
              obj[cljs.core.name.call(null, k_15764)] = v_15765;
              var G__15766 = cljs.core.next.call(null, seq__15718_15757__$1);
              var G__15767 = null;
              var G__15768 = 0;
              var G__15769 = 0;
              seq__15718_15745 = G__15766;
              chunk__15719_15746 = G__15767;
              count__15720_15747 = G__15768;
              i__15721_15748 = G__15769;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj17708 = {};
  return obj17708;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3388__auto__ = port;
    if (and__3388__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4021__auto__ = port == null ? null : port;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj17710 = {};
  return obj17710;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3388__auto__ = port;
    if (and__3388__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4021__auto__ = port == null ? null : port;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj17712 = {};
  return obj17712;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3388__auto__ = chan;
    if (and__3388__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4021__auto__ = chan == null ? null : chan;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj17714 = {};
  return obj17714;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3388__auto__ = h;
    if (and__3388__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4021__auto__ = h == null ? null : h;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3388__auto__ = h;
    if (and__3388__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4021__auto__ = h == null ? null : h;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj17716 = {};
  return obj17716;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3388__auto__ = b;
    if (and__3388__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4021__auto__ = b == null ? null : b;
    return function() {
      var or__3400__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 4;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t17734 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t17734 = function(f, fn_handler, meta17735) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta17735 = meta17735;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t17734.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t17734.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t17734";
    cljs.core.async.impl.ioc_helpers.t17734.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.ioc-helpers/t17734");
    };
    cljs.core.async.impl.ioc_helpers.t17734.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t17734.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t17734.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t17734.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17736) {
      var self__ = this;
      var _17736__$1 = this;
      return self__.meta17735;
    };
    cljs.core.async.impl.ioc_helpers.t17734.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17736, meta17735__$1) {
      var self__ = this;
      var _17736__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t17734(self__.f, self__.fn_handler, meta17735__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t17734 = function __GT_t17734(f__$1, fn_handler__$1, meta17735) {
      return new cljs.core.async.impl.ioc_helpers.t17734(f__$1, fn_handler__$1, meta17735);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t17734(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e17738) {
    if (e17738 instanceof Object) {
      var ex = e17738;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e17738;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_17741_17743 = state;
    statearr_17741_17743[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_17741_17743[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_17742_17744 = state;
    statearr_17742_17744[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_17742_17744[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_17747_17749 = state;
    statearr_17747_17749[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_17747_17749[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_17748_17750 = state;
    statearr_17748_17750[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_17748_17750[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__17751) {
    var map__17756 = p__17751;
    var map__17756__$1 = cljs.core.seq_QMARK_.call(null, map__17756) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17756) : map__17756;
    var opts = map__17756__$1;
    var statearr_17757_17760 = state;
    statearr_17757_17760[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_17758_17761 = state;
      statearr_17758_17761[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_17759_17762 = state;
      statearr_17759_17762[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__17751 = null;
    if (arguments.length > 3) {
      p__17751 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__17751);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__17763) {
    var state = cljs.core.first(arglist__17763);
    arglist__17763 = cljs.core.next(arglist__17763);
    var cont_block = cljs.core.first(arglist__17763);
    arglist__17763 = cljs.core.next(arglist__17763);
    var ports = cljs.core.first(arglist__17763);
    var p__17751 = cljs.core.rest(arglist__17763);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__17751);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__17728 = cnt + 1;
      cnt = G__17728;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4242__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4242__auto__) {
      var v_17729 = this$.pop();
      if (keep_QMARK_.call(null, v_17729)) {
        this$.unshift(v_17729);
      } else {
      }
      var G__17730 = x + 1;
      x = G__17730;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_17717 = 0;
  while (true) {
    var m_17718 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_17718 == null) {
    } else {
      m_17718.call(null);
      if (count_17717 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__17719 = count_17717 + 1;
        count_17717 = G__17719;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3388__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3388__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3388__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t17723 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t17723 = function(val, box, meta17724) {
      this.val = val;
      this.box = box;
      this.meta17724 = meta17724;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t17723.cljs$lang$type = true;
    cljs.core.async.impl.channels.t17723.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t17723";
    cljs.core.async.impl.channels.t17723.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.channels/t17723");
    };
    cljs.core.async.impl.channels.t17723.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t17723.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17725) {
      var self__ = this;
      var _17725__$1 = this;
      return self__.meta17724;
    };
    cljs.core.async.impl.channels.t17723.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17725, meta17724__$1) {
      var self__ = this;
      var _17725__$1 = this;
      return new cljs.core.async.impl.channels.t17723(self__.val, self__.box, meta17724__$1);
    };
    cljs.core.async.impl.channels.__GT_t17723 = function __GT_t17723(val__$1, box__$1, meta17724) {
      return new cljs.core.async.impl.channels.t17723(val__$1, box__$1, meta17724);
    };
  }
  return new cljs.core.async.impl.channels.t17723(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__3965__auto__, writer__3966__auto__, opts__3967__auto__) {
  return cljs.core._write.call(null, writer__3966__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_17726 = self__.takes.pop();
      if (taker_17726 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_17726)) {
          var take_cb_17727 = cljs.core.async.impl.protocols.commit.call(null, taker_17726);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_17727, taker_17726) {
            return function() {
              return take_cb_17727.call(null, null);
            };
          }(take_cb_17727, taker_17726));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__17683 = level + 1;
        level = G__17683;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_17684 = 0;
    while (true) {
      if (i_17684 < arr.length) {
        arr[i_17684] = null;
        var G__17685 = i_17684 + 1;
        i_17684 = G__17685;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__17686 = x_SINGLEQUOTE_;
                x__$1 = G__17686;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__17687 = x__$1;
        var G__17688 = k;
        var G__17689 = level - 1;
        var G__17690 = update;
        x = G__17687;
        k = G__17688;
        level = G__17689;
        update = G__17690;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
  return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_17691 = self__.level + 1;
      while (true) {
        if (i_17691 <= new_level + 1) {
          update[i_17691] = self__.header;
          var G__17692 = i_17691 + 1;
          i_17691 = G__17692;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_17693 = 0;
    while (true) {
      if (i_17693 <= self__.level) {
        var links_17694 = update[i_17693].forward;
        if (links_17694[i_17693] === x__$1) {
          links_17694[i_17693] = x__$1.forward[i_17693];
          var G__17695 = i_17693 + 1;
          i_17693 = G__17695;
          continue;
        } else {
          var G__17696 = i_17693 + 1;
          i_17693 = G__17696;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__17697 = x_SINGLEQUOTE_;
              x__$1 = G__17697;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__17698 = nx;
        var G__17699 = level__$1 - 1;
        x = G__17698;
        level__$1 = G__17699;
        continue;
      } else {
        var G__17700 = x;
        var G__17701 = level__$1 - 1;
        x = G__17700;
        level__$1 = G__17701;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__17702 = x_SINGLEQUOTE_;
              x__$1 = G__17702;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__17703 = nx;
        var G__17704 = level__$1 - 1;
        x = G__17703;
        level__$1 = G__17704;
        continue;
      } else {
        var G__17705 = x;
        var G__17706 = level__$1 - 1;
        x = G__17705;
        level__$1 = G__17706;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3400__auto__ = cljs.core.truth_(function() {
    var and__3388__auto__ = me;
    if (cljs.core.truth_(and__3388__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3388__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t15773 !== "undefined") {
  } else {
    cljs.core.async.t15773 = function(f, fn_handler, meta15774) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta15774 = meta15774;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15773.cljs$lang$type = true;
    cljs.core.async.t15773.cljs$lang$ctorStr = "cljs.core.async/t15773";
    cljs.core.async.t15773.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15773");
    };
    cljs.core.async.t15773.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15773.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t15773.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t15773.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15775) {
      var self__ = this;
      var _15775__$1 = this;
      return self__.meta15774;
    };
    cljs.core.async.t15773.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15775, meta15774__$1) {
      var self__ = this;
      var _15775__$1 = this;
      return new cljs.core.async.t15773(self__.f, self__.fn_handler, meta15774__$1);
    };
    cljs.core.async.__GT_t15773 = function __GT_t15773(f__$1, fn_handler__$1, meta15774) {
      return new cljs.core.async.t15773(f__$1, fn_handler__$1, meta15774);
    };
  }
  return new cljs.core.async.t15773(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_15776 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_15776);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_15776);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3388__auto__ = ret;
      if (cljs.core.truth_(and__3388__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3388__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4242__auto___15777 = n;
  var x_15778 = 0;
  while (true) {
    if (x_15778 < n__4242__auto___15777) {
      a[x_15778] = 0;
      var G__15779 = x_15778 + 1;
      x_15778 = G__15779;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__15780 = i + 1;
      i = G__15780;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t15784 !== "undefined") {
  } else {
    cljs.core.async.t15784 = function(flag, alt_flag, meta15785) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta15785 = meta15785;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15784.cljs$lang$type = true;
    cljs.core.async.t15784.cljs$lang$ctorStr = "cljs.core.async/t15784";
    cljs.core.async.t15784.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15784");
    };
    cljs.core.async.t15784.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15784.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t15784.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t15784.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15786) {
      var self__ = this;
      var _15786__$1 = this;
      return self__.meta15785;
    };
    cljs.core.async.t15784.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15786, meta15785__$1) {
      var self__ = this;
      var _15786__$1 = this;
      return new cljs.core.async.t15784(self__.flag, self__.alt_flag, meta15785__$1);
    };
    cljs.core.async.__GT_t15784 = function __GT_t15784(flag__$1, alt_flag__$1, meta15785) {
      return new cljs.core.async.t15784(flag__$1, alt_flag__$1, meta15785);
    };
  }
  return new cljs.core.async.t15784(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t15790 !== "undefined") {
  } else {
    cljs.core.async.t15790 = function(cb, flag, alt_handler, meta15791) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta15791 = meta15791;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15790.cljs$lang$type = true;
    cljs.core.async.t15790.cljs$lang$ctorStr = "cljs.core.async/t15790";
    cljs.core.async.t15790.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15790");
    };
    cljs.core.async.t15790.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15790.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t15790.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t15790.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15792) {
      var self__ = this;
      var _15792__$1 = this;
      return self__.meta15791;
    };
    cljs.core.async.t15790.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15792, meta15791__$1) {
      var self__ = this;
      var _15792__$1 = this;
      return new cljs.core.async.t15790(self__.cb, self__.flag, self__.alt_handler, meta15791__$1);
    };
    cljs.core.async.__GT_t15790 = function __GT_t15790(cb__$1, flag__$1, alt_handler__$1, meta15791) {
      return new cljs.core.async.t15790(cb__$1, flag__$1, alt_handler__$1, meta15791);
    };
  }
  return new cljs.core.async.t15790(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__15793_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15793_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3400__auto__ = wport;
            if (cljs.core.truth_(or__3400__auto__)) {
              return or__3400__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__15794 = i + 1;
          i = G__15794;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3400__auto__ = ret;
  if (cljs.core.truth_(or__3400__auto__)) {
    return or__3400__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__3388__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3388__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3388__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__15795) {
    var map__15797 = p__15795;
    var map__15797__$1 = cljs.core.seq_QMARK_.call(null, map__15797) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15797) : map__15797;
    var opts = map__15797__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__15795 = null;
    if (arguments.length > 1) {
      p__15795 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__15795);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__15798) {
    var ports = cljs.core.first(arglist__15798);
    var p__15795 = cljs.core.rest(arglist__15798);
    return alts_BANG___delegate(ports, p__15795);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t15806 !== "undefined") {
  } else {
    cljs.core.async.t15806 = function(ch, f, map_LT_, meta15807) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta15807 = meta15807;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15806.cljs$lang$type = true;
    cljs.core.async.t15806.cljs$lang$ctorStr = "cljs.core.async/t15806";
    cljs.core.async.t15806.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15806");
    };
    cljs.core.async.t15806.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t15806.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t15806.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t15806.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t15809 !== "undefined") {
        } else {
          cljs.core.async.t15809 = function(fn1, _, meta15807, ch, f, map_LT_, meta15810) {
            this.fn1 = fn1;
            this._ = _;
            this.meta15807 = meta15807;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta15810 = meta15810;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t15809.cljs$lang$type = true;
          cljs.core.async.t15809.cljs$lang$ctorStr = "cljs.core.async/t15809";
          cljs.core.async.t15809.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
            return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15809");
          };
          cljs.core.async.t15809.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t15809.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t15809.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t15809.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__15799_SHARP_) {
                return f1.call(null, p1__15799_SHARP_ == null ? null : self__.f.call(null, p1__15799_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t15809.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15811) {
            var self__ = this;
            var _15811__$1 = this;
            return self__.meta15810;
          };
          cljs.core.async.t15809.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15811, meta15810__$1) {
            var self__ = this;
            var _15811__$1 = this;
            return new cljs.core.async.t15809(self__.fn1, self__._, self__.meta15807, self__.ch, self__.f, self__.map_LT_, meta15810__$1);
          };
          cljs.core.async.__GT_t15809 = function __GT_t15809(fn1__$1, ___$2, meta15807__$1, ch__$2, f__$2, map_LT___$2, meta15810) {
            return new cljs.core.async.t15809(fn1__$1, ___$2, meta15807__$1, ch__$2, f__$2, map_LT___$2, meta15810);
          };
        }
        return new cljs.core.async.t15809(fn1, ___$1, self__.meta15807, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3388__auto__ = ret;
        if (cljs.core.truth_(and__3388__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3388__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t15806.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t15806.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t15806.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15808) {
      var self__ = this;
      var _15808__$1 = this;
      return self__.meta15807;
    };
    cljs.core.async.t15806.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15808, meta15807__$1) {
      var self__ = this;
      var _15808__$1 = this;
      return new cljs.core.async.t15806(self__.ch, self__.f, self__.map_LT_, meta15807__$1);
    };
    cljs.core.async.__GT_t15806 = function __GT_t15806(ch__$1, f__$1, map_LT___$1, meta15807) {
      return new cljs.core.async.t15806(ch__$1, f__$1, map_LT___$1, meta15807);
    };
  }
  return new cljs.core.async.t15806(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t15815 !== "undefined") {
  } else {
    cljs.core.async.t15815 = function(ch, f, map_GT_, meta15816) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta15816 = meta15816;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15815.cljs$lang$type = true;
    cljs.core.async.t15815.cljs$lang$ctorStr = "cljs.core.async/t15815";
    cljs.core.async.t15815.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15815");
    };
    cljs.core.async.t15815.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t15815.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t15815.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t15815.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t15815.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t15815.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t15815.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15817) {
      var self__ = this;
      var _15817__$1 = this;
      return self__.meta15816;
    };
    cljs.core.async.t15815.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15817, meta15816__$1) {
      var self__ = this;
      var _15817__$1 = this;
      return new cljs.core.async.t15815(self__.ch, self__.f, self__.map_GT_, meta15816__$1);
    };
    cljs.core.async.__GT_t15815 = function __GT_t15815(ch__$1, f__$1, map_GT___$1, meta15816) {
      return new cljs.core.async.t15815(ch__$1, f__$1, map_GT___$1, meta15816);
    };
  }
  return new cljs.core.async.t15815(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t15821 !== "undefined") {
  } else {
    cljs.core.async.t15821 = function(ch, p, filter_GT_, meta15822) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta15822 = meta15822;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t15821.cljs$lang$type = true;
    cljs.core.async.t15821.cljs$lang$ctorStr = "cljs.core.async/t15821";
    cljs.core.async.t15821.cljs$lang$ctorPrWriter = function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
      return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t15821");
    };
    cljs.core.async.t15821.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t15821.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t15821.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t15821.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t15821.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t15821.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t15821.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15823) {
      var self__ = this;
      var _15823__$1 = this;
      return self__.meta15822;
    };
    cljs.core.async.t15821.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15823, meta15822__$1) {
      var self__ = this;
      var _15823__$1 = this;
      return new cljs.core.async.t15821(self__.ch, self__.p, self__.filter_GT_, meta15822__$1);
    };
    cljs.core.async.__GT_t15821 = function __GT_t15821(ch__$1, p__$1, filter_GT___$1, meta15822) {
      return new cljs.core.async.t15821(ch__$1, p__$1, filter_GT___$1, meta15822);
    };
  }
  return new cljs.core.async.t15821(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5408__auto___15898 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_15881) {
          var state_val_15882 = state_15881[1];
          if (state_val_15882 === 1) {
            var state_15881__$1 = state_15881;
            var statearr_15883_15899 = state_15881__$1;
            statearr_15883_15899[2] = null;
            statearr_15883_15899[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_15882 === 2) {
              var state_15881__$1 = state_15881;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15881__$1, 4, ch);
            } else {
              if (state_val_15882 === 3) {
                var inst_15879 = state_15881[2];
                var state_15881__$1 = state_15881;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15881__$1, inst_15879);
              } else {
                if (state_val_15882 === 4) {
                  var inst_15863 = state_15881[5];
                  var inst_15863__$1 = state_15881[2];
                  var inst_15864 = inst_15863__$1 == null;
                  var state_15881__$1 = function() {
                    var statearr_15884 = state_15881;
                    statearr_15884[5] = inst_15863__$1;
                    return statearr_15884;
                  }();
                  if (cljs.core.truth_(inst_15864)) {
                    var statearr_15885_15900 = state_15881__$1;
                    statearr_15885_15900[1] = 5;
                  } else {
                    var statearr_15886_15901 = state_15881__$1;
                    statearr_15886_15901[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_15882 === 5) {
                    var inst_15866 = cljs.core.async.close_BANG_.call(null, out);
                    var state_15881__$1 = state_15881;
                    var statearr_15887_15902 = state_15881__$1;
                    statearr_15887_15902[2] = inst_15866;
                    statearr_15887_15902[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_15882 === 6) {
                      var inst_15863 = state_15881[5];
                      var inst_15868 = p.call(null, inst_15863);
                      var state_15881__$1 = state_15881;
                      if (cljs.core.truth_(inst_15868)) {
                        var statearr_15888_15903 = state_15881__$1;
                        statearr_15888_15903[1] = 8;
                      } else {
                        var statearr_15889_15904 = state_15881__$1;
                        statearr_15889_15904[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_15882 === 7) {
                        var inst_15877 = state_15881[2];
                        var state_15881__$1 = state_15881;
                        var statearr_15890_15905 = state_15881__$1;
                        statearr_15890_15905[2] = inst_15877;
                        statearr_15890_15905[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_15882 === 8) {
                          var inst_15863 = state_15881[5];
                          var state_15881__$1 = state_15881;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15881__$1, 11, out, inst_15863);
                        } else {
                          if (state_val_15882 === 9) {
                            var state_15881__$1 = state_15881;
                            var statearr_15891_15906 = state_15881__$1;
                            statearr_15891_15906[2] = null;
                            statearr_15891_15906[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_15882 === 10) {
                              var inst_15874 = state_15881[2];
                              var state_15881__$1 = function() {
                                var statearr_15892 = state_15881;
                                statearr_15892[6] = inst_15874;
                                return statearr_15892;
                              }();
                              var statearr_15893_15907 = state_15881__$1;
                              statearr_15893_15907[2] = null;
                              statearr_15893_15907[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_15882 === 11) {
                                var inst_15871 = state_15881[2];
                                var state_15881__$1 = state_15881;
                                var statearr_15894_15908 = state_15881__$1;
                                statearr_15894_15908[2] = inst_15871;
                                statearr_15894_15908[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_15896 = [null, null, null, null, null, null, null];
              statearr_15896[0] = state_machine__5396__auto__;
              statearr_15896[1] = 1;
              return statearr_15896;
            };
            var state_machine__5396__auto____1 = function(state_15881) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_15881);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_15881) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_15881);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_15897 = f__5409__auto__.call(null);
        statearr_15897[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___15898;
        return statearr_15897;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_16056) {
        var state_val_16057 = state_16056[1];
        if (state_val_16057 === 1) {
          var state_16056__$1 = state_16056;
          var statearr_16058_16091 = state_16056__$1;
          statearr_16058_16091[2] = null;
          statearr_16058_16091[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_16057 === 2) {
            var state_16056__$1 = state_16056;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16056__$1, 4, in$);
          } else {
            if (state_val_16057 === 3) {
              var inst_16054 = state_16056[2];
              var state_16056__$1 = state_16056;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16056__$1, inst_16054);
            } else {
              if (state_val_16057 === 4) {
                var inst_16002 = state_16056[5];
                var inst_16002__$1 = state_16056[2];
                var inst_16003 = inst_16002__$1 == null;
                var state_16056__$1 = function() {
                  var statearr_16059 = state_16056;
                  statearr_16059[5] = inst_16002__$1;
                  return statearr_16059;
                }();
                if (cljs.core.truth_(inst_16003)) {
                  var statearr_16060_16092 = state_16056__$1;
                  statearr_16060_16092[1] = 5;
                } else {
                  var statearr_16061_16093 = state_16056__$1;
                  statearr_16061_16093[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16057 === 5) {
                  var inst_16005 = cljs.core.async.close_BANG_.call(null, out);
                  var state_16056__$1 = state_16056;
                  var statearr_16062_16094 = state_16056__$1;
                  statearr_16062_16094[2] = inst_16005;
                  statearr_16062_16094[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16057 === 6) {
                    var inst_16002 = state_16056[5];
                    var inst_16007 = f.call(null, inst_16002);
                    var inst_16012 = cljs.core.seq.call(null, inst_16007);
                    var inst_16013 = inst_16012;
                    var inst_16014 = null;
                    var inst_16015 = 0;
                    var inst_16016 = 0;
                    var state_16056__$1 = function() {
                      var statearr_16063 = state_16056;
                      statearr_16063[6] = inst_16015;
                      statearr_16063[7] = inst_16016;
                      statearr_16063[8] = inst_16013;
                      statearr_16063[9] = inst_16014;
                      return statearr_16063;
                    }();
                    var statearr_16064_16095 = state_16056__$1;
                    statearr_16064_16095[2] = null;
                    statearr_16064_16095[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16057 === 7) {
                      var inst_16052 = state_16056[2];
                      var state_16056__$1 = state_16056;
                      var statearr_16065_16096 = state_16056__$1;
                      statearr_16065_16096[2] = inst_16052;
                      statearr_16065_16096[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16057 === 8) {
                        var inst_16015 = state_16056[6];
                        var inst_16016 = state_16056[7];
                        var inst_16018 = inst_16016 < inst_16015;
                        var inst_16019 = inst_16018;
                        var state_16056__$1 = state_16056;
                        if (cljs.core.truth_(inst_16019)) {
                          var statearr_16066_16097 = state_16056__$1;
                          statearr_16066_16097[1] = 10;
                        } else {
                          var statearr_16067_16098 = state_16056__$1;
                          statearr_16067_16098[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16057 === 9) {
                          var inst_16049 = state_16056[2];
                          var state_16056__$1 = function() {
                            var statearr_16068 = state_16056;
                            statearr_16068[10] = inst_16049;
                            return statearr_16068;
                          }();
                          var statearr_16069_16099 = state_16056__$1;
                          statearr_16069_16099[2] = null;
                          statearr_16069_16099[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16057 === 10) {
                            var inst_16016 = state_16056[7];
                            var inst_16014 = state_16056[9];
                            var inst_16021 = cljs.core._nth.call(null, inst_16014, inst_16016);
                            var state_16056__$1 = state_16056;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16056__$1, 13, out, inst_16021);
                          } else {
                            if (state_val_16057 === 11) {
                              var inst_16027 = state_16056[11];
                              var inst_16013 = state_16056[8];
                              var inst_16027__$1 = cljs.core.seq.call(null, inst_16013);
                              var state_16056__$1 = function() {
                                var statearr_16073 = state_16056;
                                statearr_16073[11] = inst_16027__$1;
                                return statearr_16073;
                              }();
                              if (inst_16027__$1) {
                                var statearr_16074_16100 = state_16056__$1;
                                statearr_16074_16100[1] = 14;
                              } else {
                                var statearr_16075_16101 = state_16056__$1;
                                statearr_16075_16101[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16057 === 12) {
                                var inst_16047 = state_16056[2];
                                var state_16056__$1 = state_16056;
                                var statearr_16076_16102 = state_16056__$1;
                                statearr_16076_16102[2] = inst_16047;
                                statearr_16076_16102[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_16057 === 13) {
                                  var inst_16015 = state_16056[6];
                                  var inst_16016 = state_16056[7];
                                  var inst_16013 = state_16056[8];
                                  var inst_16014 = state_16056[9];
                                  var inst_16023 = state_16056[2];
                                  var inst_16024 = inst_16016 + 1;
                                  var tmp16070 = inst_16015;
                                  var tmp16071 = inst_16013;
                                  var tmp16072 = inst_16014;
                                  var inst_16013__$1 = tmp16071;
                                  var inst_16014__$1 = tmp16072;
                                  var inst_16015__$1 = tmp16070;
                                  var inst_16016__$1 = inst_16024;
                                  var state_16056__$1 = function() {
                                    var statearr_16077 = state_16056;
                                    statearr_16077[12] = inst_16023;
                                    statearr_16077[6] = inst_16015__$1;
                                    statearr_16077[7] = inst_16016__$1;
                                    statearr_16077[8] = inst_16013__$1;
                                    statearr_16077[9] = inst_16014__$1;
                                    return statearr_16077;
                                  }();
                                  var statearr_16078_16103 = state_16056__$1;
                                  statearr_16078_16103[2] = null;
                                  statearr_16078_16103[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_16057 === 14) {
                                    var inst_16027 = state_16056[11];
                                    var inst_16029 = cljs.core.chunked_seq_QMARK_.call(null, inst_16027);
                                    var state_16056__$1 = state_16056;
                                    if (inst_16029) {
                                      var statearr_16079_16104 = state_16056__$1;
                                      statearr_16079_16104[1] = 17;
                                    } else {
                                      var statearr_16080_16105 = state_16056__$1;
                                      statearr_16080_16105[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_16057 === 15) {
                                      var state_16056__$1 = state_16056;
                                      var statearr_16081_16106 = state_16056__$1;
                                      statearr_16081_16106[2] = null;
                                      statearr_16081_16106[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_16057 === 16) {
                                        var inst_16045 = state_16056[2];
                                        var state_16056__$1 = state_16056;
                                        var statearr_16082_16107 = state_16056__$1;
                                        statearr_16082_16107[2] = inst_16045;
                                        statearr_16082_16107[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_16057 === 17) {
                                          var inst_16027 = state_16056[11];
                                          var inst_16031 = cljs.core.chunk_first.call(null, inst_16027);
                                          var inst_16032 = cljs.core.chunk_rest.call(null, inst_16027);
                                          var inst_16033 = cljs.core.count.call(null, inst_16031);
                                          var inst_16013 = inst_16032;
                                          var inst_16014 = inst_16031;
                                          var inst_16015 = inst_16033;
                                          var inst_16016 = 0;
                                          var state_16056__$1 = function() {
                                            var statearr_16083 = state_16056;
                                            statearr_16083[6] = inst_16015;
                                            statearr_16083[7] = inst_16016;
                                            statearr_16083[8] = inst_16013;
                                            statearr_16083[9] = inst_16014;
                                            return statearr_16083;
                                          }();
                                          var statearr_16084_16108 = state_16056__$1;
                                          statearr_16084_16108[2] = null;
                                          statearr_16084_16108[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_16057 === 18) {
                                            var inst_16027 = state_16056[11];
                                            var inst_16036 = cljs.core.first.call(null, inst_16027);
                                            var state_16056__$1 = state_16056;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16056__$1, 20, out, inst_16036);
                                          } else {
                                            if (state_val_16057 === 19) {
                                              var inst_16042 = state_16056[2];
                                              var state_16056__$1 = state_16056;
                                              var statearr_16085_16109 = state_16056__$1;
                                              statearr_16085_16109[2] = inst_16042;
                                              statearr_16085_16109[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_16057 === 20) {
                                                var inst_16027 = state_16056[11];
                                                var inst_16038 = state_16056[2];
                                                var inst_16039 = cljs.core.next.call(null, inst_16027);
                                                var inst_16013 = inst_16039;
                                                var inst_16014 = null;
                                                var inst_16015 = 0;
                                                var inst_16016 = 0;
                                                var state_16056__$1 = function() {
                                                  var statearr_16086 = state_16056;
                                                  statearr_16086[13] = inst_16038;
                                                  statearr_16086[6] = inst_16015;
                                                  statearr_16086[7] = inst_16016;
                                                  statearr_16086[8] = inst_16013;
                                                  statearr_16086[9] = inst_16014;
                                                  return statearr_16086;
                                                }();
                                                var statearr_16087_16110 = state_16056__$1;
                                                statearr_16087_16110[2] = null;
                                                statearr_16087_16110[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_16089 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_16089[0] = state_machine__5396__auto__;
            statearr_16089[1] = 1;
            return statearr_16089;
          };
          var state_machine__5396__auto____1 = function(state_16056) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_16056);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_16056) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_16056);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_16090 = f__5409__auto__.call(null);
      statearr_16090[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
      return statearr_16090;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return c__5408__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5408__auto___16183 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_16166) {
          var state_val_16167 = state_16166[1];
          if (state_val_16167 === 1) {
            var state_16166__$1 = state_16166;
            var statearr_16168_16184 = state_16166__$1;
            statearr_16168_16184[2] = null;
            statearr_16168_16184[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16167 === 2) {
              var state_16166__$1 = state_16166;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16166__$1, 4, from);
            } else {
              if (state_val_16167 === 3) {
                var inst_16164 = state_16166[2];
                var state_16166__$1 = state_16166;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16166__$1, inst_16164);
              } else {
                if (state_val_16167 === 4) {
                  var inst_16149 = state_16166[5];
                  var inst_16149__$1 = state_16166[2];
                  var inst_16150 = inst_16149__$1 == null;
                  var state_16166__$1 = function() {
                    var statearr_16169 = state_16166;
                    statearr_16169[5] = inst_16149__$1;
                    return statearr_16169;
                  }();
                  if (cljs.core.truth_(inst_16150)) {
                    var statearr_16170_16185 = state_16166__$1;
                    statearr_16170_16185[1] = 5;
                  } else {
                    var statearr_16171_16186 = state_16166__$1;
                    statearr_16171_16186[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16167 === 5) {
                    var state_16166__$1 = state_16166;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_16172_16187 = state_16166__$1;
                      statearr_16172_16187[1] = 8;
                    } else {
                      var statearr_16173_16188 = state_16166__$1;
                      statearr_16173_16188[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16167 === 6) {
                      var inst_16149 = state_16166[5];
                      var state_16166__$1 = state_16166;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16166__$1, 11, to, inst_16149);
                    } else {
                      if (state_val_16167 === 7) {
                        var inst_16162 = state_16166[2];
                        var state_16166__$1 = state_16166;
                        var statearr_16174_16189 = state_16166__$1;
                        statearr_16174_16189[2] = inst_16162;
                        statearr_16174_16189[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16167 === 8) {
                          var inst_16153 = cljs.core.async.close_BANG_.call(null, to);
                          var state_16166__$1 = state_16166;
                          var statearr_16175_16190 = state_16166__$1;
                          statearr_16175_16190[2] = inst_16153;
                          statearr_16175_16190[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16167 === 9) {
                            var state_16166__$1 = state_16166;
                            var statearr_16176_16191 = state_16166__$1;
                            statearr_16176_16191[2] = null;
                            statearr_16176_16191[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16167 === 10) {
                              var inst_16156 = state_16166[2];
                              var state_16166__$1 = state_16166;
                              var statearr_16177_16192 = state_16166__$1;
                              statearr_16177_16192[2] = inst_16156;
                              statearr_16177_16192[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16167 === 11) {
                                var inst_16159 = state_16166[2];
                                var state_16166__$1 = function() {
                                  var statearr_16178 = state_16166;
                                  statearr_16178[6] = inst_16159;
                                  return statearr_16178;
                                }();
                                var statearr_16179_16193 = state_16166__$1;
                                statearr_16179_16193[2] = null;
                                statearr_16179_16193[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_16181 = [null, null, null, null, null, null, null];
              statearr_16181[0] = state_machine__5396__auto__;
              statearr_16181[1] = 1;
              return statearr_16181;
            };
            var state_machine__5396__auto____1 = function(state_16166) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_16166);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_16166) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_16166);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_16182 = f__5409__auto__.call(null);
        statearr_16182[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___16183;
        return statearr_16182;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5408__auto___16272 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_16254) {
          var state_val_16255 = state_16254[1];
          if (state_val_16255 === 1) {
            var state_16254__$1 = state_16254;
            var statearr_16256_16273 = state_16254__$1;
            statearr_16256_16273[2] = null;
            statearr_16256_16273[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16255 === 2) {
              var state_16254__$1 = state_16254;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16254__$1, 4, ch);
            } else {
              if (state_val_16255 === 3) {
                var inst_16252 = state_16254[2];
                var state_16254__$1 = state_16254;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16254__$1, inst_16252);
              } else {
                if (state_val_16255 === 4) {
                  var inst_16235 = state_16254[5];
                  var inst_16235__$1 = state_16254[2];
                  var inst_16236 = inst_16235__$1 == null;
                  var state_16254__$1 = function() {
                    var statearr_16257 = state_16254;
                    statearr_16257[5] = inst_16235__$1;
                    return statearr_16257;
                  }();
                  if (cljs.core.truth_(inst_16236)) {
                    var statearr_16258_16274 = state_16254__$1;
                    statearr_16258_16274[1] = 5;
                  } else {
                    var statearr_16259_16275 = state_16254__$1;
                    statearr_16259_16275[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16255 === 5) {
                    var inst_16238 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_16239 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_16254__$1 = function() {
                      var statearr_16260 = state_16254;
                      statearr_16260[6] = inst_16238;
                      return statearr_16260;
                    }();
                    var statearr_16261_16276 = state_16254__$1;
                    statearr_16261_16276[2] = inst_16239;
                    statearr_16261_16276[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16255 === 6) {
                      var inst_16235 = state_16254[5];
                      var inst_16241 = p.call(null, inst_16235);
                      var state_16254__$1 = state_16254;
                      if (cljs.core.truth_(inst_16241)) {
                        var statearr_16262_16277 = state_16254__$1;
                        statearr_16262_16277[1] = 9;
                      } else {
                        var statearr_16263_16278 = state_16254__$1;
                        statearr_16263_16278[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16255 === 7) {
                        var inst_16250 = state_16254[2];
                        var state_16254__$1 = state_16254;
                        var statearr_16264_16279 = state_16254__$1;
                        statearr_16264_16279[2] = inst_16250;
                        statearr_16264_16279[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16255 === 8) {
                          var inst_16247 = state_16254[2];
                          var state_16254__$1 = function() {
                            var statearr_16265 = state_16254;
                            statearr_16265[7] = inst_16247;
                            return statearr_16265;
                          }();
                          var statearr_16266_16280 = state_16254__$1;
                          statearr_16266_16280[2] = null;
                          statearr_16266_16280[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16255 === 9) {
                            var state_16254__$1 = state_16254;
                            var statearr_16267_16281 = state_16254__$1;
                            statearr_16267_16281[2] = tc;
                            statearr_16267_16281[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16255 === 10) {
                              var state_16254__$1 = state_16254;
                              var statearr_16268_16282 = state_16254__$1;
                              statearr_16268_16282[2] = fc;
                              statearr_16268_16282[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16255 === 11) {
                                var inst_16235 = state_16254[5];
                                var inst_16245 = state_16254[2];
                                var state_16254__$1 = state_16254;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16254__$1, 8, inst_16245, inst_16235);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_16270 = [null, null, null, null, null, null, null, null];
              statearr_16270[0] = state_machine__5396__auto__;
              statearr_16270[1] = 1;
              return statearr_16270;
            };
            var state_machine__5396__auto____1 = function(state_16254) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_16254);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_16254) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_16254);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_16271 = f__5409__auto__.call(null);
        statearr_16271[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___16272;
        return statearr_16271;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_16325) {
        var state_val_16326 = state_16325[1];
        if (state_val_16326 === 7) {
          var inst_16321 = state_16325[2];
          var state_16325__$1 = state_16325;
          var statearr_16327_16339 = state_16325__$1;
          statearr_16327_16339[2] = inst_16321;
          statearr_16327_16339[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_16326 === 6) {
            var inst_16314 = state_16325[5];
            var inst_16311 = state_16325[6];
            var inst_16318 = f.call(null, inst_16311, inst_16314);
            var inst_16311__$1 = inst_16318;
            var state_16325__$1 = function() {
              var statearr_16328 = state_16325;
              statearr_16328[6] = inst_16311__$1;
              return statearr_16328;
            }();
            var statearr_16329_16340 = state_16325__$1;
            statearr_16329_16340[2] = null;
            statearr_16329_16340[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16326 === 5) {
              var inst_16311 = state_16325[6];
              var state_16325__$1 = state_16325;
              var statearr_16330_16341 = state_16325__$1;
              statearr_16330_16341[2] = inst_16311;
              statearr_16330_16341[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16326 === 4) {
                var inst_16314 = state_16325[5];
                var inst_16314__$1 = state_16325[2];
                var inst_16315 = inst_16314__$1 == null;
                var state_16325__$1 = function() {
                  var statearr_16331 = state_16325;
                  statearr_16331[5] = inst_16314__$1;
                  return statearr_16331;
                }();
                if (cljs.core.truth_(inst_16315)) {
                  var statearr_16332_16342 = state_16325__$1;
                  statearr_16332_16342[1] = 5;
                } else {
                  var statearr_16333_16343 = state_16325__$1;
                  statearr_16333_16343[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16326 === 3) {
                  var inst_16323 = state_16325[2];
                  var state_16325__$1 = state_16325;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16325__$1, inst_16323);
                } else {
                  if (state_val_16326 === 2) {
                    var state_16325__$1 = state_16325;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16325__$1, 4, ch);
                  } else {
                    if (state_val_16326 === 1) {
                      var inst_16311 = init;
                      var state_16325__$1 = function() {
                        var statearr_16334 = state_16325;
                        statearr_16334[6] = inst_16311;
                        return statearr_16334;
                      }();
                      var statearr_16335_16344 = state_16325__$1;
                      statearr_16335_16344[2] = null;
                      statearr_16335_16344[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_16337 = [null, null, null, null, null, null, null];
            statearr_16337[0] = state_machine__5396__auto__;
            statearr_16337[1] = 1;
            return statearr_16337;
          };
          var state_machine__5396__auto____1 = function(state_16325) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_16325);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_16325) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_16325);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_16338 = f__5409__auto__.call(null);
      statearr_16338[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
      return statearr_16338;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return c__5408__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_16402) {
          var state_val_16403 = state_16402[1];
          if (state_val_16403 === 1) {
            var inst_16382 = cljs.core.seq.call(null, coll);
            var inst_16383 = inst_16382;
            var state_16402__$1 = function() {
              var statearr_16404 = state_16402;
              statearr_16404[5] = inst_16383;
              return statearr_16404;
            }();
            var statearr_16405_16419 = state_16402__$1;
            statearr_16405_16419[2] = null;
            statearr_16405_16419[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16403 === 2) {
              var inst_16383 = state_16402[5];
              var state_16402__$1 = state_16402;
              if (cljs.core.truth_(inst_16383)) {
                var statearr_16406_16420 = state_16402__$1;
                statearr_16406_16420[1] = 4;
              } else {
                var statearr_16407_16421 = state_16402__$1;
                statearr_16407_16421[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16403 === 3) {
                var inst_16400 = state_16402[2];
                var state_16402__$1 = state_16402;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16402__$1, inst_16400);
              } else {
                if (state_val_16403 === 4) {
                  var inst_16383 = state_16402[5];
                  var inst_16386 = cljs.core.first.call(null, inst_16383);
                  var state_16402__$1 = state_16402;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16402__$1, 7, ch, inst_16386);
                } else {
                  if (state_val_16403 === 5) {
                    var state_16402__$1 = state_16402;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_16408_16422 = state_16402__$1;
                      statearr_16408_16422[1] = 8;
                    } else {
                      var statearr_16409_16423 = state_16402__$1;
                      statearr_16409_16423[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16403 === 6) {
                      var inst_16398 = state_16402[2];
                      var state_16402__$1 = state_16402;
                      var statearr_16410_16424 = state_16402__$1;
                      statearr_16410_16424[2] = inst_16398;
                      statearr_16410_16424[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16403 === 7) {
                        var inst_16383 = state_16402[5];
                        var inst_16388 = state_16402[2];
                        var inst_16389 = cljs.core.next.call(null, inst_16383);
                        var inst_16383__$1 = inst_16389;
                        var state_16402__$1 = function() {
                          var statearr_16411 = state_16402;
                          statearr_16411[6] = inst_16388;
                          statearr_16411[5] = inst_16383__$1;
                          return statearr_16411;
                        }();
                        var statearr_16412_16425 = state_16402__$1;
                        statearr_16412_16425[2] = null;
                        statearr_16412_16425[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16403 === 8) {
                          var inst_16393 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_16402__$1 = state_16402;
                          var statearr_16413_16426 = state_16402__$1;
                          statearr_16413_16426[2] = inst_16393;
                          statearr_16413_16426[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16403 === 9) {
                            var state_16402__$1 = state_16402;
                            var statearr_16414_16427 = state_16402__$1;
                            statearr_16414_16427[2] = null;
                            statearr_16414_16427[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16403 === 10) {
                              var inst_16396 = state_16402[2];
                              var state_16402__$1 = state_16402;
                              var statearr_16415_16428 = state_16402__$1;
                              statearr_16415_16428[2] = inst_16396;
                              statearr_16415_16428[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_16417 = [null, null, null, null, null, null, null];
              statearr_16417[0] = state_machine__5396__auto__;
              statearr_16417[1] = 1;
              return statearr_16417;
            };
            var state_machine__5396__auto____1 = function(state_16402) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_16402);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_16402) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_16402);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_16418 = f__5409__auto__.call(null);
        statearr_16418[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
        return statearr_16418;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return c__5408__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj16430 = {};
  return obj16430;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3388__auto__ = _;
    if (and__3388__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4021__auto__ = _ == null ? null : _;
    return function() {
      var or__3400__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj16432 = {};
  return obj16432;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t16645 !== "undefined") {
    } else {
      cljs.core.async.t16645 = function(cs, ch, mult, meta16646) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta16646 = meta16646;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t16645.cljs$lang$type = true;
      cljs.core.async.t16645.cljs$lang$ctorStr = "cljs.core.async/t16645";
      cljs.core.async.t16645.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t16645");
        };
      }(cs);
      cljs.core.async.t16645.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t16645.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t16645.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t16645.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t16645.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t16645.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t16645.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_16647) {
          var self__ = this;
          var _16647__$1 = this;
          return self__.meta16646;
        };
      }(cs);
      cljs.core.async.t16645.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_16647, meta16646__$1) {
          var self__ = this;
          var _16647__$1 = this;
          return new cljs.core.async.t16645(self__.cs, self__.ch, self__.mult, meta16646__$1);
        };
      }(cs);
      cljs.core.async.__GT_t16645 = function(cs) {
        return function __GT_t16645(cs__$1, ch__$1, mult__$1, meta16646) {
          return new cljs.core.async.t16645(cs__$1, ch__$1, mult__$1, meta16646);
        };
      }(cs);
    }
    return new cljs.core.async.t16645(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5408__auto___16857 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_16775) {
        var state_val_16776 = state_16775[1];
        if (state_val_16776 === 32) {
          try {
            var inst_16726 = state_16775[5];
            var inst_16650 = state_16775[6];
            var inst_16732 = cljs.core.async.put_BANG_.call(null, inst_16726, inst_16650, done);
            var state_16775__$1 = state_16775;
            var statearr_16779_16858 = state_16775__$1;
            statearr_16779_16858[2] = inst_16732;
            statearr_16779_16858[1] = 30;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } catch (e16777) {
            if (e16777 instanceof Object) {
              var ex__5389__auto__ = e16777;
              var statearr_16778_16859 = state_16775;
              statearr_16778_16859[1] = 31;
              statearr_16778_16859[2] = ex__5389__auto__;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e16777;
              } else {
                return null;
              }
            }
          }
        } else {
          if (state_val_16776 === 1) {
            var state_16775__$1 = state_16775;
            var statearr_16780_16860 = state_16775__$1;
            statearr_16780_16860[2] = null;
            statearr_16780_16860[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16776 === 33) {
              var inst_16738 = state_16775[7];
              var inst_16740 = cljs.core.chunked_seq_QMARK_.call(null, inst_16738);
              var state_16775__$1 = state_16775;
              if (inst_16740) {
                var statearr_16781_16861 = state_16775__$1;
                statearr_16781_16861[1] = 36;
              } else {
                var statearr_16782_16862 = state_16775__$1;
                statearr_16782_16862[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16776 === 2) {
                var state_16775__$1 = state_16775;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16775__$1, 4, ch);
              } else {
                if (state_val_16776 === 34) {
                  var state_16775__$1 = state_16775;
                  var statearr_16783_16863 = state_16775__$1;
                  statearr_16783_16863[2] = null;
                  statearr_16783_16863[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16776 === 3) {
                    var inst_16773 = state_16775[2];
                    var state_16775__$1 = state_16775;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16775__$1, inst_16773);
                  } else {
                    if (state_val_16776 === 35) {
                      var inst_16762 = state_16775[2];
                      var state_16775__$1 = state_16775;
                      var statearr_16784_16864 = state_16775__$1;
                      statearr_16784_16864[2] = inst_16762;
                      statearr_16784_16864[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16776 === 4) {
                        var inst_16650 = state_16775[6];
                        var inst_16650__$1 = state_16775[2];
                        var inst_16651 = inst_16650__$1 == null;
                        var state_16775__$1 = function() {
                          var statearr_16785 = state_16775;
                          statearr_16785[6] = inst_16650__$1;
                          return statearr_16785;
                        }();
                        if (cljs.core.truth_(inst_16651)) {
                          var statearr_16786_16865 = state_16775__$1;
                          statearr_16786_16865[1] = 5;
                        } else {
                          var statearr_16787_16866 = state_16775__$1;
                          statearr_16787_16866[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16776 === 36) {
                          var inst_16738 = state_16775[7];
                          var inst_16742 = cljs.core.chunk_first.call(null, inst_16738);
                          var inst_16743 = cljs.core.chunk_rest.call(null, inst_16738);
                          var inst_16744 = cljs.core.count.call(null, inst_16742);
                          var inst_16718 = inst_16743;
                          var inst_16719 = inst_16742;
                          var inst_16720 = inst_16744;
                          var inst_16721 = 0;
                          var state_16775__$1 = function() {
                            var statearr_16788 = state_16775;
                            statearr_16788[8] = inst_16719;
                            statearr_16788[9] = inst_16718;
                            statearr_16788[10] = inst_16720;
                            statearr_16788[11] = inst_16721;
                            return statearr_16788;
                          }();
                          var statearr_16789_16867 = state_16775__$1;
                          statearr_16789_16867[2] = null;
                          statearr_16789_16867[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16776 === 5) {
                            var inst_16657 = cljs.core.deref.call(null, cs);
                            var inst_16658 = cljs.core.seq.call(null, inst_16657);
                            var inst_16659 = inst_16658;
                            var inst_16660 = null;
                            var inst_16661 = 0;
                            var inst_16662 = 0;
                            var state_16775__$1 = function() {
                              var statearr_16790 = state_16775;
                              statearr_16790[12] = inst_16662;
                              statearr_16790[13] = inst_16661;
                              statearr_16790[14] = inst_16660;
                              statearr_16790[15] = inst_16659;
                              return statearr_16790;
                            }();
                            var statearr_16791_16868 = state_16775__$1;
                            statearr_16791_16868[2] = null;
                            statearr_16791_16868[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16776 === 37) {
                              var inst_16738 = state_16775[7];
                              var inst_16747 = cljs.core.first.call(null, inst_16738);
                              var state_16775__$1 = function() {
                                var statearr_16792 = state_16775;
                                statearr_16792[16] = inst_16747;
                                return statearr_16792;
                              }();
                              var statearr_16793_16869 = state_16775__$1;
                              statearr_16793_16869[2] = null;
                              statearr_16793_16869[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16776 === 6) {
                                var inst_16709 = cljs.core.deref.call(null, cs);
                                var inst_16710 = cljs.core.keys.call(null, inst_16709);
                                var inst_16711 = cljs.core.count.call(null, inst_16710);
                                var inst_16712 = cljs.core.reset_BANG_.call(null, dctr, inst_16711);
                                var inst_16717 = cljs.core.seq.call(null, inst_16710);
                                var inst_16718 = inst_16717;
                                var inst_16719 = null;
                                var inst_16720 = 0;
                                var inst_16721 = 0;
                                var state_16775__$1 = function() {
                                  var statearr_16794 = state_16775;
                                  statearr_16794[8] = inst_16719;
                                  statearr_16794[9] = inst_16718;
                                  statearr_16794[17] = inst_16712;
                                  statearr_16794[10] = inst_16720;
                                  statearr_16794[11] = inst_16721;
                                  return statearr_16794;
                                }();
                                var statearr_16795_16870 = state_16775__$1;
                                statearr_16795_16870[2] = null;
                                statearr_16795_16870[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_16776 === 38) {
                                  var inst_16759 = state_16775[2];
                                  var state_16775__$1 = state_16775;
                                  var statearr_16796_16871 = state_16775__$1;
                                  statearr_16796_16871[2] = inst_16759;
                                  statearr_16796_16871[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_16776 === 7) {
                                    var inst_16771 = state_16775[2];
                                    var state_16775__$1 = state_16775;
                                    var statearr_16797_16872 = state_16775__$1;
                                    statearr_16797_16872[2] = inst_16771;
                                    statearr_16797_16872[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_16776 === 39) {
                                      var inst_16738 = state_16775[7];
                                      var inst_16755 = state_16775[2];
                                      var inst_16756 = cljs.core.next.call(null, inst_16738);
                                      var inst_16718 = inst_16756;
                                      var inst_16719 = null;
                                      var inst_16720 = 0;
                                      var inst_16721 = 0;
                                      var state_16775__$1 = function() {
                                        var statearr_16798 = state_16775;
                                        statearr_16798[8] = inst_16719;
                                        statearr_16798[9] = inst_16718;
                                        statearr_16798[18] = inst_16755;
                                        statearr_16798[10] = inst_16720;
                                        statearr_16798[11] = inst_16721;
                                        return statearr_16798;
                                      }();
                                      var statearr_16799_16873 = state_16775__$1;
                                      statearr_16799_16873[2] = null;
                                      statearr_16799_16873[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_16776 === 8) {
                                        var inst_16662 = state_16775[12];
                                        var inst_16661 = state_16775[13];
                                        var inst_16664 = inst_16662 < inst_16661;
                                        var inst_16665 = inst_16664;
                                        var state_16775__$1 = state_16775;
                                        if (cljs.core.truth_(inst_16665)) {
                                          var statearr_16800_16874 = state_16775__$1;
                                          statearr_16800_16874[1] = 10;
                                        } else {
                                          var statearr_16801_16875 = state_16775__$1;
                                          statearr_16801_16875[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_16776 === 40) {
                                          var inst_16747 = state_16775[16];
                                          var inst_16748 = state_16775[2];
                                          var inst_16749 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_16750 = cljs.core.async.untap_STAR_.call(null, m, inst_16747);
                                          var state_16775__$1 = function() {
                                            var statearr_16802 = state_16775;
                                            statearr_16802[19] = inst_16748;
                                            statearr_16802[20] = inst_16749;
                                            return statearr_16802;
                                          }();
                                          var statearr_16803_16876 = state_16775__$1;
                                          statearr_16803_16876[2] = inst_16750;
                                          statearr_16803_16876[1] = 39;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_16776 === 9) {
                                            var inst_16707 = state_16775[2];
                                            var state_16775__$1 = state_16775;
                                            var statearr_16804_16877 = state_16775__$1;
                                            statearr_16804_16877[2] = inst_16707;
                                            statearr_16804_16877[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_16776 === 41) {
                                              try {
                                                var inst_16747 = state_16775[16];
                                                var inst_16650 = state_16775[6];
                                                var inst_16753 = cljs.core.async.put_BANG_.call(null, inst_16747, inst_16650, done);
                                                var state_16775__$1 = state_16775;
                                                var statearr_16807_16878 = state_16775__$1;
                                                statearr_16807_16878[2] = inst_16753;
                                                statearr_16807_16878[1] = 39;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } catch (e16805) {
                                                if (e16805 instanceof Object) {
                                                  var ex__5389__auto__ = e16805;
                                                  var statearr_16806_16879 = state_16775;
                                                  statearr_16806_16879[1] = 40;
                                                  statearr_16806_16879[2] = ex__5389__auto__;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                    throw e16805;
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            } else {
                                              if (state_val_16776 === 10) {
                                                var inst_16662 = state_16775[12];
                                                var inst_16660 = state_16775[14];
                                                var inst_16668 = cljs.core._nth.call(null, inst_16660, inst_16662);
                                                var inst_16669 = cljs.core.nth.call(null, inst_16668, 0, null);
                                                var inst_16670 = cljs.core.nth.call(null, inst_16668, 1, null);
                                                var state_16775__$1 = function() {
                                                  var statearr_16808 = state_16775;
                                                  statearr_16808[21] = inst_16669;
                                                  return statearr_16808;
                                                }();
                                                if (cljs.core.truth_(inst_16670)) {
                                                  var statearr_16809_16880 = state_16775__$1;
                                                  statearr_16809_16880[1] = 13;
                                                } else {
                                                  var statearr_16810_16881 = state_16775__$1;
                                                  statearr_16810_16881[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_16776 === 42) {
                                                  var inst_16768 = state_16775[2];
                                                  var state_16775__$1 = function() {
                                                    var statearr_16811 = state_16775;
                                                    statearr_16811[22] = inst_16768;
                                                    return statearr_16811;
                                                  }();
                                                  var statearr_16812_16882 = state_16775__$1;
                                                  statearr_16812_16882[2] = null;
                                                  statearr_16812_16882[1] = 2;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_16776 === 11) {
                                                    var inst_16679 = state_16775[23];
                                                    var inst_16659 = state_16775[15];
                                                    var inst_16679__$1 = cljs.core.seq.call(null, inst_16659);
                                                    var state_16775__$1 = function() {
                                                      var statearr_16813 = state_16775;
                                                      statearr_16813[23] = inst_16679__$1;
                                                      return statearr_16813;
                                                    }();
                                                    if (inst_16679__$1) {
                                                      var statearr_16814_16883 = state_16775__$1;
                                                      statearr_16814_16883[1] = 16;
                                                    } else {
                                                      var statearr_16815_16884 = state_16775__$1;
                                                      statearr_16815_16884[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_16776 === 12) {
                                                      var inst_16705 = state_16775[2];
                                                      var state_16775__$1 = state_16775;
                                                      var statearr_16816_16885 = state_16775__$1;
                                                      statearr_16816_16885[2] = inst_16705;
                                                      statearr_16816_16885[1] = 9;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_16776 === 13) {
                                                        var inst_16669 = state_16775[21];
                                                        var inst_16672 = cljs.core.async.close_BANG_.call(null, inst_16669);
                                                        var state_16775__$1 = state_16775;
                                                        var statearr_16820_16886 = state_16775__$1;
                                                        statearr_16820_16886[2] = inst_16672;
                                                        statearr_16820_16886[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_16776 === 14) {
                                                          var state_16775__$1 = state_16775;
                                                          var statearr_16821_16887 = state_16775__$1;
                                                          statearr_16821_16887[2] = null;
                                                          statearr_16821_16887[1] = 15;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_16776 === 15) {
                                                            var inst_16662 = state_16775[12];
                                                            var inst_16661 = state_16775[13];
                                                            var inst_16660 = state_16775[14];
                                                            var inst_16659 = state_16775[15];
                                                            var inst_16675 = state_16775[2];
                                                            var inst_16676 = inst_16662 + 1;
                                                            var tmp16817 = inst_16661;
                                                            var tmp16818 = inst_16660;
                                                            var tmp16819 = inst_16659;
                                                            var inst_16659__$1 = tmp16819;
                                                            var inst_16660__$1 = tmp16818;
                                                            var inst_16661__$1 = tmp16817;
                                                            var inst_16662__$1 = inst_16676;
                                                            var state_16775__$1 = function() {
                                                              var statearr_16822 = state_16775;
                                                              statearr_16822[12] = inst_16662__$1;
                                                              statearr_16822[13] = inst_16661__$1;
                                                              statearr_16822[14] = inst_16660__$1;
                                                              statearr_16822[24] = inst_16675;
                                                              statearr_16822[15] = inst_16659__$1;
                                                              return statearr_16822;
                                                            }();
                                                            var statearr_16823_16888 = state_16775__$1;
                                                            statearr_16823_16888[2] = null;
                                                            statearr_16823_16888[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_16776 === 16) {
                                                              var inst_16679 = state_16775[23];
                                                              var inst_16681 = cljs.core.chunked_seq_QMARK_.call(null, inst_16679);
                                                              var state_16775__$1 = state_16775;
                                                              if (inst_16681) {
                                                                var statearr_16824_16889 = state_16775__$1;
                                                                statearr_16824_16889[1] = 19;
                                                              } else {
                                                                var statearr_16825_16890 = state_16775__$1;
                                                                statearr_16825_16890[1] = 20;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_16776 === 17) {
                                                                var state_16775__$1 = state_16775;
                                                                var statearr_16826_16891 = state_16775__$1;
                                                                statearr_16826_16891[2] = null;
                                                                statearr_16826_16891[1] = 18;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_16776 === 18) {
                                                                  var inst_16703 = state_16775[2];
                                                                  var state_16775__$1 = state_16775;
                                                                  var statearr_16827_16892 = state_16775__$1;
                                                                  statearr_16827_16892[2] = inst_16703;
                                                                  statearr_16827_16892[1] = 12;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_16776 === 19) {
                                                                    var inst_16679 = state_16775[23];
                                                                    var inst_16683 = cljs.core.chunk_first.call(null, inst_16679);
                                                                    var inst_16684 = cljs.core.chunk_rest.call(null, inst_16679);
                                                                    var inst_16685 = cljs.core.count.call(null, inst_16683);
                                                                    var inst_16659 = inst_16684;
                                                                    var inst_16660 = inst_16683;
                                                                    var inst_16661 = inst_16685;
                                                                    var inst_16662 = 0;
                                                                    var state_16775__$1 = function() {
                                                                      var statearr_16828 = state_16775;
                                                                      statearr_16828[12] = inst_16662;
                                                                      statearr_16828[13] = inst_16661;
                                                                      statearr_16828[14] = inst_16660;
                                                                      statearr_16828[15] = inst_16659;
                                                                      return statearr_16828;
                                                                    }();
                                                                    var statearr_16829_16893 = state_16775__$1;
                                                                    statearr_16829_16893[2] = null;
                                                                    statearr_16829_16893[1] = 8;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_16776 === 20) {
                                                                      var inst_16679 = state_16775[23];
                                                                      var inst_16689 = cljs.core.first.call(null, inst_16679);
                                                                      var inst_16690 = cljs.core.nth.call(null, inst_16689, 0, null);
                                                                      var inst_16691 = cljs.core.nth.call(null, inst_16689, 1, null);
                                                                      var state_16775__$1 = function() {
                                                                        var statearr_16830 = state_16775;
                                                                        statearr_16830[25] = inst_16690;
                                                                        return statearr_16830;
                                                                      }();
                                                                      if (cljs.core.truth_(inst_16691)) {
                                                                        var statearr_16831_16894 = state_16775__$1;
                                                                        statearr_16831_16894[1] = 22;
                                                                      } else {
                                                                        var statearr_16832_16895 = state_16775__$1;
                                                                        statearr_16832_16895[1] = 23;
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_16776 === 21) {
                                                                        var inst_16700 = state_16775[2];
                                                                        var state_16775__$1 = state_16775;
                                                                        var statearr_16833_16896 = state_16775__$1;
                                                                        statearr_16833_16896[2] = inst_16700;
                                                                        statearr_16833_16896[1] = 18;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_16776 === 22) {
                                                                          var inst_16690 = state_16775[25];
                                                                          var inst_16693 = cljs.core.async.close_BANG_.call(null, inst_16690);
                                                                          var state_16775__$1 = state_16775;
                                                                          var statearr_16834_16897 = state_16775__$1;
                                                                          statearr_16834_16897[2] = inst_16693;
                                                                          statearr_16834_16897[1] = 24;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_16776 === 23) {
                                                                            var state_16775__$1 = state_16775;
                                                                            var statearr_16835_16898 = state_16775__$1;
                                                                            statearr_16835_16898[2] = null;
                                                                            statearr_16835_16898[1] = 24;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_16776 === 24) {
                                                                              var inst_16679 = state_16775[23];
                                                                              var inst_16696 = state_16775[2];
                                                                              var inst_16697 = cljs.core.next.call(null, inst_16679);
                                                                              var inst_16659 = inst_16697;
                                                                              var inst_16660 = null;
                                                                              var inst_16661 = 0;
                                                                              var inst_16662 = 0;
                                                                              var state_16775__$1 = function() {
                                                                                var statearr_16836 = state_16775;
                                                                                statearr_16836[12] = inst_16662;
                                                                                statearr_16836[13] = inst_16661;
                                                                                statearr_16836[14] = inst_16660;
                                                                                statearr_16836[15] = inst_16659;
                                                                                statearr_16836[26] = inst_16696;
                                                                                return statearr_16836;
                                                                              }();
                                                                              var statearr_16837_16899 = state_16775__$1;
                                                                              statearr_16837_16899[2] = null;
                                                                              statearr_16837_16899[1] = 8;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_16776 === 25) {
                                                                                var inst_16720 = state_16775[10];
                                                                                var inst_16721 = state_16775[11];
                                                                                var inst_16723 = inst_16721 < inst_16720;
                                                                                var inst_16724 = inst_16723;
                                                                                var state_16775__$1 = state_16775;
                                                                                if (cljs.core.truth_(inst_16724)) {
                                                                                  var statearr_16838_16900 = state_16775__$1;
                                                                                  statearr_16838_16900[1] = 27;
                                                                                } else {
                                                                                  var statearr_16839_16901 = state_16775__$1;
                                                                                  statearr_16839_16901[1] = 28;
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_16776 === 26) {
                                                                                  var inst_16766 = state_16775[2];
                                                                                  var state_16775__$1 = function() {
                                                                                    var statearr_16840 = state_16775;
                                                                                    statearr_16840[27] = inst_16766;
                                                                                    return statearr_16840;
                                                                                  }();
                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16775__$1, 42, dchan);
                                                                                } else {
                                                                                  if (state_val_16776 === 27) {
                                                                                    var inst_16719 = state_16775[8];
                                                                                    var inst_16721 = state_16775[11];
                                                                                    var inst_16726 = cljs.core._nth.call(null, inst_16719, inst_16721);
                                                                                    var state_16775__$1 = function() {
                                                                                      var statearr_16841 = state_16775;
                                                                                      statearr_16841[5] = inst_16726;
                                                                                      return statearr_16841;
                                                                                    }();
                                                                                    var statearr_16842_16902 = state_16775__$1;
                                                                                    statearr_16842_16902[2] = null;
                                                                                    statearr_16842_16902[1] = 32;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_16776 === 28) {
                                                                                      var inst_16718 = state_16775[9];
                                                                                      var inst_16738 = state_16775[7];
                                                                                      var inst_16738__$1 = cljs.core.seq.call(null, inst_16718);
                                                                                      var state_16775__$1 = function() {
                                                                                        var statearr_16846 = state_16775;
                                                                                        statearr_16846[7] = inst_16738__$1;
                                                                                        return statearr_16846;
                                                                                      }();
                                                                                      if (inst_16738__$1) {
                                                                                        var statearr_16847_16903 = state_16775__$1;
                                                                                        statearr_16847_16903[1] = 33;
                                                                                      } else {
                                                                                        var statearr_16848_16904 = state_16775__$1;
                                                                                        statearr_16848_16904[1] = 34;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_16776 === 29) {
                                                                                        var inst_16764 = state_16775[2];
                                                                                        var state_16775__$1 = state_16775;
                                                                                        var statearr_16849_16905 = state_16775__$1;
                                                                                        statearr_16849_16905[2] = inst_16764;
                                                                                        statearr_16849_16905[1] = 26;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_16776 === 30) {
                                                                                          var inst_16719 = state_16775[8];
                                                                                          var inst_16718 = state_16775[9];
                                                                                          var inst_16720 = state_16775[10];
                                                                                          var inst_16721 = state_16775[11];
                                                                                          var inst_16734 = state_16775[2];
                                                                                          var inst_16735 = inst_16721 + 1;
                                                                                          var tmp16843 = inst_16719;
                                                                                          var tmp16844 = inst_16718;
                                                                                          var tmp16845 = inst_16720;
                                                                                          var inst_16718__$1 = tmp16844;
                                                                                          var inst_16719__$1 = tmp16843;
                                                                                          var inst_16720__$1 = tmp16845;
                                                                                          var inst_16721__$1 = inst_16735;
                                                                                          var state_16775__$1 = function() {
                                                                                            var statearr_16850 = state_16775;
                                                                                            statearr_16850[8] = inst_16719__$1;
                                                                                            statearr_16850[9] = inst_16718__$1;
                                                                                            statearr_16850[10] = inst_16720__$1;
                                                                                            statearr_16850[28] = inst_16734;
                                                                                            statearr_16850[11] = inst_16721__$1;
                                                                                            return statearr_16850;
                                                                                          }();
                                                                                          var statearr_16851_16906 = state_16775__$1;
                                                                                          statearr_16851_16906[2] = null;
                                                                                          statearr_16851_16906[1] = 25;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_16776 === 31) {
                                                                                            var inst_16726 = state_16775[5];
                                                                                            var inst_16727 = state_16775[2];
                                                                                            var inst_16728 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                            var inst_16729 = cljs.core.async.untap_STAR_.call(null, m, inst_16726);
                                                                                            var state_16775__$1 = function() {
                                                                                              var statearr_16852 = state_16775;
                                                                                              statearr_16852[29] = inst_16727;
                                                                                              statearr_16852[30] = inst_16728;
                                                                                              return statearr_16852;
                                                                                            }();
                                                                                            var statearr_16853_16907 = state_16775__$1;
                                                                                            statearr_16853_16907[2] = inst_16729;
                                                                                            statearr_16853_16907[1] = 30;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            return null;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_16855 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_16855[0] = state_machine__5396__auto__;
            statearr_16855[1] = 1;
            return statearr_16855;
          };
          var state_machine__5396__auto____1 = function(state_16775) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_16775);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_16775) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_16775);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_16856 = f__5409__auto__.call(null);
      statearr_16856[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___16857;
      return statearr_16856;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj16909 = {};
  return obj16909;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3388__auto__ = m;
    if (and__3388__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4021__auto__ = m == null ? null : m;
    return function() {
      var or__3400__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t17015 !== "undefined") {
    } else {
      cljs.core.async.t17015 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta17016) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta17016 = meta17016;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t17015.cljs$lang$type = true;
      cljs.core.async.t17015.cljs$lang$ctorStr = "cljs.core.async/t17015";
      cljs.core.async.t17015.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
          return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t17015");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17015.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t17015.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17015.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17015.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17015.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17015.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17015.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t17015.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17015.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_17017) {
          var self__ = this;
          var _17017__$1 = this;
          return self__.meta17016;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17015.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_17017, meta17016__$1) {
          var self__ = this;
          var _17017__$1 = this;
          return new cljs.core.async.t17015(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta17016__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t17015 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t17015(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta17016) {
          return new cljs.core.async.t17015(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta17016);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t17015(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__5408__auto___17120 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_17082) {
        var state_val_17083 = state_17082[1];
        if (state_val_17083 === 1) {
          var inst_17021 = state_17082[5];
          var inst_17021__$1 = calc_state.call(null);
          var inst_17022 = cljs.core.seq_QMARK_.call(null, inst_17021__$1);
          var state_17082__$1 = function() {
            var statearr_17084 = state_17082;
            statearr_17084[5] = inst_17021__$1;
            return statearr_17084;
          }();
          if (inst_17022) {
            var statearr_17085_17121 = state_17082__$1;
            statearr_17085_17121[1] = 2;
          } else {
            var statearr_17086_17122 = state_17082__$1;
            statearr_17086_17122[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_17083 === 2) {
            var inst_17021 = state_17082[5];
            var inst_17024 = cljs.core.apply.call(null, cljs.core.hash_map, inst_17021);
            var state_17082__$1 = state_17082;
            var statearr_17087_17123 = state_17082__$1;
            statearr_17087_17123[2] = inst_17024;
            statearr_17087_17123[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_17083 === 3) {
              var inst_17021 = state_17082[5];
              var state_17082__$1 = state_17082;
              var statearr_17088_17124 = state_17082__$1;
              statearr_17088_17124[2] = inst_17021;
              statearr_17088_17124[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17083 === 4) {
                var inst_17021 = state_17082[5];
                var inst_17027 = state_17082[2];
                var inst_17028 = cljs.core.get.call(null, inst_17027, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_17029 = cljs.core.get.call(null, inst_17027, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_17030 = cljs.core.get.call(null, inst_17027, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_17031 = inst_17021;
                var state_17082__$1 = function() {
                  var statearr_17089 = state_17082;
                  statearr_17089[6] = inst_17029;
                  statearr_17089[7] = inst_17028;
                  statearr_17089[8] = inst_17030;
                  statearr_17089[9] = inst_17031;
                  return statearr_17089;
                }();
                var statearr_17090_17125 = state_17082__$1;
                statearr_17090_17125[2] = null;
                statearr_17090_17125[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_17083 === 5) {
                  var inst_17031 = state_17082[9];
                  var inst_17034 = cljs.core.seq_QMARK_.call(null, inst_17031);
                  var state_17082__$1 = state_17082;
                  if (inst_17034) {
                    var statearr_17091_17126 = state_17082__$1;
                    statearr_17091_17126[1] = 7;
                  } else {
                    var statearr_17092_17127 = state_17082__$1;
                    statearr_17092_17127[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17083 === 6) {
                    var inst_17080 = state_17082[2];
                    var state_17082__$1 = state_17082;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17082__$1, inst_17080);
                  } else {
                    if (state_val_17083 === 7) {
                      var inst_17031 = state_17082[9];
                      var inst_17036 = cljs.core.apply.call(null, cljs.core.hash_map, inst_17031);
                      var state_17082__$1 = state_17082;
                      var statearr_17093_17128 = state_17082__$1;
                      statearr_17093_17128[2] = inst_17036;
                      statearr_17093_17128[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17083 === 8) {
                        var inst_17031 = state_17082[9];
                        var state_17082__$1 = state_17082;
                        var statearr_17094_17129 = state_17082__$1;
                        statearr_17094_17129[2] = inst_17031;
                        statearr_17094_17129[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17083 === 9) {
                          var inst_17039 = state_17082[10];
                          var inst_17039__$1 = state_17082[2];
                          var inst_17040 = cljs.core.get.call(null, inst_17039__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_17041 = cljs.core.get.call(null, inst_17039__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_17042 = cljs.core.get.call(null, inst_17039__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_17082__$1 = function() {
                            var statearr_17095 = state_17082;
                            statearr_17095[10] = inst_17039__$1;
                            statearr_17095[11] = inst_17041;
                            statearr_17095[12] = inst_17042;
                            return statearr_17095;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_17082__$1, 10, inst_17040);
                        } else {
                          if (state_val_17083 === 10) {
                            var inst_17047 = state_17082[13];
                            var inst_17046 = state_17082[14];
                            var inst_17045 = state_17082[2];
                            var inst_17046__$1 = cljs.core.nth.call(null, inst_17045, 0, null);
                            var inst_17047__$1 = cljs.core.nth.call(null, inst_17045, 1, null);
                            var inst_17048 = inst_17046__$1 == null;
                            var inst_17049 = cljs.core._EQ_.call(null, inst_17047__$1, change);
                            var inst_17050 = inst_17048 || inst_17049;
                            var state_17082__$1 = function() {
                              var statearr_17096 = state_17082;
                              statearr_17096[13] = inst_17047__$1;
                              statearr_17096[14] = inst_17046__$1;
                              return statearr_17096;
                            }();
                            if (cljs.core.truth_(inst_17050)) {
                              var statearr_17097_17130 = state_17082__$1;
                              statearr_17097_17130[1] = 11;
                            } else {
                              var statearr_17098_17131 = state_17082__$1;
                              statearr_17098_17131[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17083 === 11) {
                              var inst_17046 = state_17082[14];
                              var inst_17052 = inst_17046 == null;
                              var state_17082__$1 = state_17082;
                              if (cljs.core.truth_(inst_17052)) {
                                var statearr_17099_17132 = state_17082__$1;
                                statearr_17099_17132[1] = 14;
                              } else {
                                var statearr_17100_17133 = state_17082__$1;
                                statearr_17100_17133[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17083 === 12) {
                                var inst_17061 = state_17082[15];
                                var inst_17047 = state_17082[13];
                                var inst_17042 = state_17082[12];
                                var inst_17061__$1 = inst_17042.call(null, inst_17047);
                                var state_17082__$1 = function() {
                                  var statearr_17101 = state_17082;
                                  statearr_17101[15] = inst_17061__$1;
                                  return statearr_17101;
                                }();
                                if (cljs.core.truth_(inst_17061__$1)) {
                                  var statearr_17102_17134 = state_17082__$1;
                                  statearr_17102_17134[1] = 17;
                                } else {
                                  var statearr_17103_17135 = state_17082__$1;
                                  statearr_17103_17135[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17083 === 13) {
                                  var inst_17078 = state_17082[2];
                                  var state_17082__$1 = state_17082;
                                  var statearr_17104_17136 = state_17082__$1;
                                  statearr_17104_17136[2] = inst_17078;
                                  statearr_17104_17136[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17083 === 14) {
                                    var inst_17047 = state_17082[13];
                                    var inst_17054 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_17047);
                                    var state_17082__$1 = state_17082;
                                    var statearr_17105_17137 = state_17082__$1;
                                    statearr_17105_17137[2] = inst_17054;
                                    statearr_17105_17137[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17083 === 15) {
                                      var state_17082__$1 = state_17082;
                                      var statearr_17106_17138 = state_17082__$1;
                                      statearr_17106_17138[2] = null;
                                      statearr_17106_17138[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17083 === 16) {
                                        var inst_17057 = state_17082[2];
                                        var inst_17058 = calc_state.call(null);
                                        var inst_17031 = inst_17058;
                                        var state_17082__$1 = function() {
                                          var statearr_17107 = state_17082;
                                          statearr_17107[16] = inst_17057;
                                          statearr_17107[9] = inst_17031;
                                          return statearr_17107;
                                        }();
                                        var statearr_17108_17139 = state_17082__$1;
                                        statearr_17108_17139[2] = null;
                                        statearr_17108_17139[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17083 === 17) {
                                          var inst_17061 = state_17082[15];
                                          var state_17082__$1 = state_17082;
                                          var statearr_17109_17140 = state_17082__$1;
                                          statearr_17109_17140[2] = inst_17061;
                                          statearr_17109_17140[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_17083 === 18) {
                                            var inst_17047 = state_17082[13];
                                            var inst_17041 = state_17082[11];
                                            var inst_17042 = state_17082[12];
                                            var inst_17064 = cljs.core.empty_QMARK_.call(null, inst_17042);
                                            var inst_17065 = inst_17041.call(null, inst_17047);
                                            var inst_17066 = cljs.core.not.call(null, inst_17065);
                                            var inst_17067 = inst_17064 && inst_17066;
                                            var state_17082__$1 = state_17082;
                                            var statearr_17110_17141 = state_17082__$1;
                                            statearr_17110_17141[2] = inst_17067;
                                            statearr_17110_17141[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_17083 === 19) {
                                              var inst_17069 = state_17082[2];
                                              var state_17082__$1 = state_17082;
                                              if (cljs.core.truth_(inst_17069)) {
                                                var statearr_17111_17142 = state_17082__$1;
                                                statearr_17111_17142[1] = 20;
                                              } else {
                                                var statearr_17112_17143 = state_17082__$1;
                                                statearr_17112_17143[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_17083 === 20) {
                                                var inst_17046 = state_17082[14];
                                                var state_17082__$1 = state_17082;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17082__$1, 23, out, inst_17046);
                                              } else {
                                                if (state_val_17083 === 21) {
                                                  var state_17082__$1 = state_17082;
                                                  var statearr_17113_17144 = state_17082__$1;
                                                  statearr_17113_17144[2] = null;
                                                  statearr_17113_17144[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_17083 === 22) {
                                                    var inst_17039 = state_17082[10];
                                                    var inst_17075 = state_17082[2];
                                                    var inst_17031 = inst_17039;
                                                    var state_17082__$1 = function() {
                                                      var statearr_17114 = state_17082;
                                                      statearr_17114[9] = inst_17031;
                                                      statearr_17114[17] = inst_17075;
                                                      return statearr_17114;
                                                    }();
                                                    var statearr_17115_17145 = state_17082__$1;
                                                    statearr_17115_17145[2] = null;
                                                    statearr_17115_17145[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_17083 === 23) {
                                                      var inst_17072 = state_17082[2];
                                                      var state_17082__$1 = state_17082;
                                                      var statearr_17116_17146 = state_17082__$1;
                                                      statearr_17116_17146[2] = inst_17072;
                                                      statearr_17116_17146[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_17118 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_17118[0] = state_machine__5396__auto__;
            statearr_17118[1] = 1;
            return statearr_17118;
          };
          var state_machine__5396__auto____1 = function(state_17082) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_17082);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_17082) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_17082);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_17119 = f__5409__auto__.call(null);
      statearr_17119[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17120;
      return statearr_17119;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj17148 = {};
  return obj17148;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3388__auto__ = p;
    if (and__3388__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4021__auto__ = p == null ? null : p;
    return function() {
      var or__3400__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3388__auto__ = p;
    if (and__3388__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3388__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4021__auto__ = p == null ? null : p;
    return function() {
      var or__3400__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4021__auto__)];
      if (or__3400__auto__) {
        return or__3400__auto__;
      } else {
        var or__3400__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3400__auto____$1) {
          return or__3400__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3388__auto__ = p;
      if (and__3388__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4021__auto__ = p == null ? null : p;
      return function() {
        var or__3400__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3388__auto__ = p;
      if (and__3388__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3388__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4021__auto__ = p == null ? null : p;
      return function() {
        var or__3400__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4021__auto__)];
        if (or__3400__auto__) {
          return or__3400__auto__;
        } else {
          var or__3400__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3400__auto____$1) {
            return or__3400__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3400__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3400__auto__)) {
          return or__3400__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3400__auto__, mults) {
            return function(p1__17149_SHARP_) {
              if (cljs.core.truth_(p1__17149_SHARP_.call(null, topic))) {
                return p1__17149_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__17149_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3400__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t17273 !== "undefined") {
      } else {
        cljs.core.async.t17273 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta17274) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta17274 = meta17274;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t17273.cljs$lang$type = true;
        cljs.core.async.t17273.cljs$lang$ctorStr = "cljs.core.async/t17273";
        cljs.core.async.t17273.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__3962__auto__, writer__3963__auto__, opt__3964__auto__) {
            return cljs.core._write.call(null, writer__3963__auto__, "cljs.core.async/t17273");
          };
        }(mults, ensure_mult);
        cljs.core.async.t17273.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t17273.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17273.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t17273.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17273.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17273.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t17273.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t17273.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_17275) {
            var self__ = this;
            var _17275__$1 = this;
            return self__.meta17274;
          };
        }(mults, ensure_mult);
        cljs.core.async.t17273.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_17275, meta17274__$1) {
            var self__ = this;
            var _17275__$1 = this;
            return new cljs.core.async.t17273(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta17274__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t17273 = function(mults, ensure_mult) {
          return function __GT_t17273(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta17274) {
            return new cljs.core.async.t17273(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta17274);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t17273(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5408__auto___17396 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_17348) {
          var state_val_17349 = state_17348[1];
          if (state_val_17349 === 1) {
            var state_17348__$1 = state_17348;
            var statearr_17350_17397 = state_17348__$1;
            statearr_17350_17397[2] = null;
            statearr_17350_17397[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_17349 === 2) {
              var state_17348__$1 = state_17348;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17348__$1, 4, ch);
            } else {
              if (state_val_17349 === 3) {
                var inst_17346 = state_17348[2];
                var state_17348__$1 = state_17348;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17348__$1, inst_17346);
              } else {
                if (state_val_17349 === 4) {
                  var inst_17278 = state_17348[5];
                  var inst_17278__$1 = state_17348[2];
                  var inst_17279 = inst_17278__$1 == null;
                  var state_17348__$1 = function() {
                    var statearr_17351 = state_17348;
                    statearr_17351[5] = inst_17278__$1;
                    return statearr_17351;
                  }();
                  if (cljs.core.truth_(inst_17279)) {
                    var statearr_17352_17398 = state_17348__$1;
                    statearr_17352_17398[1] = 5;
                  } else {
                    var statearr_17353_17399 = state_17348__$1;
                    statearr_17353_17399[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17349 === 5) {
                    var inst_17285 = cljs.core.deref.call(null, mults);
                    var inst_17286 = cljs.core.vals.call(null, inst_17285);
                    var inst_17287 = cljs.core.seq.call(null, inst_17286);
                    var inst_17288 = inst_17287;
                    var inst_17289 = null;
                    var inst_17290 = 0;
                    var inst_17291 = 0;
                    var state_17348__$1 = function() {
                      var statearr_17354 = state_17348;
                      statearr_17354[6] = inst_17291;
                      statearr_17354[7] = inst_17290;
                      statearr_17354[8] = inst_17289;
                      statearr_17354[9] = inst_17288;
                      return statearr_17354;
                    }();
                    var statearr_17355_17400 = state_17348__$1;
                    statearr_17355_17400[2] = null;
                    statearr_17355_17400[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_17349 === 6) {
                      var inst_17278 = state_17348[5];
                      var inst_17328 = state_17348[10];
                      var inst_17326 = state_17348[11];
                      var inst_17326__$1 = topic_fn.call(null, inst_17278);
                      var inst_17327 = cljs.core.deref.call(null, mults);
                      var inst_17328__$1 = cljs.core.get.call(null, inst_17327, inst_17326__$1);
                      var state_17348__$1 = function() {
                        var statearr_17356 = state_17348;
                        statearr_17356[10] = inst_17328__$1;
                        statearr_17356[11] = inst_17326__$1;
                        return statearr_17356;
                      }();
                      if (cljs.core.truth_(inst_17328__$1)) {
                        var statearr_17357_17401 = state_17348__$1;
                        statearr_17357_17401[1] = 19;
                      } else {
                        var statearr_17358_17402 = state_17348__$1;
                        statearr_17358_17402[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17349 === 7) {
                        var inst_17344 = state_17348[2];
                        var state_17348__$1 = state_17348;
                        var statearr_17359_17403 = state_17348__$1;
                        statearr_17359_17403[2] = inst_17344;
                        statearr_17359_17403[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17349 === 8) {
                          var inst_17291 = state_17348[6];
                          var inst_17290 = state_17348[7];
                          var inst_17293 = inst_17291 < inst_17290;
                          var inst_17294 = inst_17293;
                          var state_17348__$1 = state_17348;
                          if (cljs.core.truth_(inst_17294)) {
                            var statearr_17363_17404 = state_17348__$1;
                            statearr_17363_17404[1] = 10;
                          } else {
                            var statearr_17364_17405 = state_17348__$1;
                            statearr_17364_17405[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17349 === 9) {
                            var inst_17324 = state_17348[2];
                            var state_17348__$1 = state_17348;
                            var statearr_17365_17406 = state_17348__$1;
                            statearr_17365_17406[2] = inst_17324;
                            statearr_17365_17406[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17349 === 10) {
                              var inst_17291 = state_17348[6];
                              var inst_17290 = state_17348[7];
                              var inst_17289 = state_17348[8];
                              var inst_17288 = state_17348[9];
                              var inst_17296 = cljs.core._nth.call(null, inst_17289, inst_17291);
                              var inst_17297 = cljs.core.async.muxch_STAR_.call(null, inst_17296);
                              var inst_17298 = cljs.core.async.close_BANG_.call(null, inst_17297);
                              var inst_17299 = inst_17291 + 1;
                              var tmp17360 = inst_17290;
                              var tmp17361 = inst_17289;
                              var tmp17362 = inst_17288;
                              var inst_17288__$1 = tmp17362;
                              var inst_17289__$1 = tmp17361;
                              var inst_17290__$1 = tmp17360;
                              var inst_17291__$1 = inst_17299;
                              var state_17348__$1 = function() {
                                var statearr_17366 = state_17348;
                                statearr_17366[6] = inst_17291__$1;
                                statearr_17366[7] = inst_17290__$1;
                                statearr_17366[8] = inst_17289__$1;
                                statearr_17366[9] = inst_17288__$1;
                                statearr_17366[12] = inst_17298;
                                return statearr_17366;
                              }();
                              var statearr_17367_17407 = state_17348__$1;
                              statearr_17367_17407[2] = null;
                              statearr_17367_17407[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17349 === 11) {
                                var inst_17288 = state_17348[9];
                                var inst_17302 = state_17348[13];
                                var inst_17302__$1 = cljs.core.seq.call(null, inst_17288);
                                var state_17348__$1 = function() {
                                  var statearr_17368 = state_17348;
                                  statearr_17368[13] = inst_17302__$1;
                                  return statearr_17368;
                                }();
                                if (inst_17302__$1) {
                                  var statearr_17369_17408 = state_17348__$1;
                                  statearr_17369_17408[1] = 13;
                                } else {
                                  var statearr_17370_17409 = state_17348__$1;
                                  statearr_17370_17409[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17349 === 12) {
                                  var inst_17322 = state_17348[2];
                                  var state_17348__$1 = state_17348;
                                  var statearr_17371_17410 = state_17348__$1;
                                  statearr_17371_17410[2] = inst_17322;
                                  statearr_17371_17410[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17349 === 13) {
                                    var inst_17302 = state_17348[13];
                                    var inst_17304 = cljs.core.chunked_seq_QMARK_.call(null, inst_17302);
                                    var state_17348__$1 = state_17348;
                                    if (inst_17304) {
                                      var statearr_17372_17411 = state_17348__$1;
                                      statearr_17372_17411[1] = 16;
                                    } else {
                                      var statearr_17373_17412 = state_17348__$1;
                                      statearr_17373_17412[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17349 === 14) {
                                      var state_17348__$1 = state_17348;
                                      var statearr_17374_17413 = state_17348__$1;
                                      statearr_17374_17413[2] = null;
                                      statearr_17374_17413[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17349 === 15) {
                                        var inst_17320 = state_17348[2];
                                        var state_17348__$1 = state_17348;
                                        var statearr_17375_17414 = state_17348__$1;
                                        statearr_17375_17414[2] = inst_17320;
                                        statearr_17375_17414[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17349 === 16) {
                                          var inst_17302 = state_17348[13];
                                          var inst_17306 = cljs.core.chunk_first.call(null, inst_17302);
                                          var inst_17307 = cljs.core.chunk_rest.call(null, inst_17302);
                                          var inst_17308 = cljs.core.count.call(null, inst_17306);
                                          var inst_17288 = inst_17307;
                                          var inst_17289 = inst_17306;
                                          var inst_17290 = inst_17308;
                                          var inst_17291 = 0;
                                          var state_17348__$1 = function() {
                                            var statearr_17376 = state_17348;
                                            statearr_17376[6] = inst_17291;
                                            statearr_17376[7] = inst_17290;
                                            statearr_17376[8] = inst_17289;
                                            statearr_17376[9] = inst_17288;
                                            return statearr_17376;
                                          }();
                                          var statearr_17377_17415 = state_17348__$1;
                                          statearr_17377_17415[2] = null;
                                          statearr_17377_17415[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_17349 === 17) {
                                            var inst_17302 = state_17348[13];
                                            var inst_17311 = cljs.core.first.call(null, inst_17302);
                                            var inst_17312 = cljs.core.async.muxch_STAR_.call(null, inst_17311);
                                            var inst_17313 = cljs.core.async.close_BANG_.call(null, inst_17312);
                                            var inst_17314 = cljs.core.next.call(null, inst_17302);
                                            var inst_17288 = inst_17314;
                                            var inst_17289 = null;
                                            var inst_17290 = 0;
                                            var inst_17291 = 0;
                                            var state_17348__$1 = function() {
                                              var statearr_17378 = state_17348;
                                              statearr_17378[14] = inst_17313;
                                              statearr_17378[6] = inst_17291;
                                              statearr_17378[7] = inst_17290;
                                              statearr_17378[8] = inst_17289;
                                              statearr_17378[9] = inst_17288;
                                              return statearr_17378;
                                            }();
                                            var statearr_17379_17416 = state_17348__$1;
                                            statearr_17379_17416[2] = null;
                                            statearr_17379_17416[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_17349 === 18) {
                                              var inst_17317 = state_17348[2];
                                              var state_17348__$1 = state_17348;
                                              var statearr_17380_17417 = state_17348__$1;
                                              statearr_17380_17417[2] = inst_17317;
                                              statearr_17380_17417[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_17349 === 19) {
                                                var state_17348__$1 = state_17348;
                                                var statearr_17381_17418 = state_17348__$1;
                                                statearr_17381_17418[2] = null;
                                                statearr_17381_17418[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_17349 === 20) {
                                                  var state_17348__$1 = state_17348;
                                                  var statearr_17382_17419 = state_17348__$1;
                                                  statearr_17382_17419[2] = null;
                                                  statearr_17382_17419[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_17349 === 21) {
                                                    var inst_17341 = state_17348[2];
                                                    var state_17348__$1 = function() {
                                                      var statearr_17383 = state_17348;
                                                      statearr_17383[15] = inst_17341;
                                                      return statearr_17383;
                                                    }();
                                                    var statearr_17384_17420 = state_17348__$1;
                                                    statearr_17384_17420[2] = null;
                                                    statearr_17384_17420[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_17349 === 22) {
                                                      var inst_17338 = state_17348[2];
                                                      var state_17348__$1 = state_17348;
                                                      var statearr_17385_17421 = state_17348__$1;
                                                      statearr_17385_17421[2] = inst_17338;
                                                      statearr_17385_17421[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_17349 === 23) {
                                                        var inst_17326 = state_17348[11];
                                                        var inst_17330 = state_17348[2];
                                                        var inst_17331 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_17326);
                                                        var state_17348__$1 = function() {
                                                          var statearr_17386 = state_17348;
                                                          statearr_17386[16] = inst_17330;
                                                          return statearr_17386;
                                                        }();
                                                        var statearr_17387_17422 = state_17348__$1;
                                                        statearr_17387_17422[2] = inst_17331;
                                                        statearr_17387_17422[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_17349 === 24) {
                                                          try {
                                                            var inst_17278 = state_17348[5];
                                                            var inst_17328 = state_17348[10];
                                                            var inst_17334 = cljs.core.async.muxch_STAR_.call(null, inst_17328);
                                                            var state_17348__$1 = state_17348;
                                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17348__$1, 25, inst_17334, inst_17278);
                                                          } catch (e17388) {
                                                            if (e17388 instanceof Object) {
                                                              var ex__5389__auto__ = e17388;
                                                              var statearr_17389_17423 = state_17348;
                                                              statearr_17389_17423[1] = 23;
                                                              statearr_17389_17423[2] = ex__5389__auto__;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                throw e17388;
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        } else {
                                                          if (state_val_17349 === 25) {
                                                            try {
                                                              var inst_17336 = state_17348[2];
                                                              var state_17348__$1 = state_17348;
                                                              var statearr_17392_17424 = state_17348__$1;
                                                              statearr_17392_17424[2] = inst_17336;
                                                              statearr_17392_17424[1] = 22;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } catch (e17390) {
                                                              if (e17390 instanceof Object) {
                                                                var ex__5389__auto__ = e17390;
                                                                var statearr_17391_17425 = state_17348;
                                                                statearr_17391_17425[1] = 23;
                                                                statearr_17391_17425[2] = ex__5389__auto__;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                                                  throw e17390;
                                                                } else {
                                                                  return null;
                                                                }
                                                              }
                                                            }
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_17394 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17394[0] = state_machine__5396__auto__;
              statearr_17394[1] = 1;
              return statearr_17394;
            };
            var state_machine__5396__auto____1 = function(state_17348) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_17348);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_17348) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_17348);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_17395 = f__5409__auto__.call(null);
        statearr_17395[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17396;
        return statearr_17395;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, java.util.Arrays.copyOf.call(null, rets, cnt));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5408__auto___17556 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_17528) {
          var state_val_17529 = state_17528[1];
          if (state_val_17529 === 1) {
            var state_17528__$1 = state_17528;
            var statearr_17530_17557 = state_17528__$1;
            statearr_17530_17557[2] = null;
            statearr_17530_17557[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_17529 === 2) {
              var inst_17492 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_17493 = 0;
              var state_17528__$1 = function() {
                var statearr_17531 = state_17528;
                statearr_17531[5] = inst_17492;
                statearr_17531[6] = inst_17493;
                return statearr_17531;
              }();
              var statearr_17532_17558 = state_17528__$1;
              statearr_17532_17558[2] = null;
              statearr_17532_17558[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17529 === 3) {
                var inst_17526 = state_17528[2];
                var state_17528__$1 = state_17528;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17528__$1, inst_17526);
              } else {
                if (state_val_17529 === 4) {
                  var inst_17493 = state_17528[6];
                  var inst_17495 = inst_17493 < cnt;
                  var state_17528__$1 = state_17528;
                  if (cljs.core.truth_(inst_17495)) {
                    var statearr_17533_17559 = state_17528__$1;
                    statearr_17533_17559[1] = 6;
                  } else {
                    var statearr_17534_17560 = state_17528__$1;
                    statearr_17534_17560[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17529 === 5) {
                    var inst_17512 = state_17528[2];
                    var state_17528__$1 = function() {
                      var statearr_17535 = state_17528;
                      statearr_17535[7] = inst_17512;
                      return statearr_17535;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17528__$1, 12, dchan);
                  } else {
                    if (state_val_17529 === 6) {
                      var state_17528__$1 = state_17528;
                      var statearr_17536_17561 = state_17528__$1;
                      statearr_17536_17561[2] = null;
                      statearr_17536_17561[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17529 === 7) {
                        var state_17528__$1 = state_17528;
                        var statearr_17537_17562 = state_17528__$1;
                        statearr_17537_17562[2] = null;
                        statearr_17537_17562[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17529 === 8) {
                          var inst_17510 = state_17528[2];
                          var state_17528__$1 = state_17528;
                          var statearr_17538_17563 = state_17528__$1;
                          statearr_17538_17563[2] = inst_17510;
                          statearr_17538_17563[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17529 === 9) {
                            var inst_17493 = state_17528[6];
                            var inst_17505 = state_17528[2];
                            var inst_17506 = inst_17493 + 1;
                            var inst_17493__$1 = inst_17506;
                            var state_17528__$1 = function() {
                              var statearr_17539 = state_17528;
                              statearr_17539[6] = inst_17493__$1;
                              statearr_17539[8] = inst_17505;
                              return statearr_17539;
                            }();
                            var statearr_17540_17564 = state_17528__$1;
                            statearr_17540_17564[2] = null;
                            statearr_17540_17564[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17529 === 10) {
                              var inst_17497 = state_17528[2];
                              var inst_17498 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_17528__$1 = function() {
                                var statearr_17541 = state_17528;
                                statearr_17541[9] = inst_17497;
                                return statearr_17541;
                              }();
                              var statearr_17542_17565 = state_17528__$1;
                              statearr_17542_17565[2] = inst_17498;
                              statearr_17542_17565[1] = 9;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17529 === 11) {
                                try {
                                  var inst_17493 = state_17528[6];
                                  var inst_17501 = chs__$1.call(null, inst_17493);
                                  var inst_17502 = done.call(null, inst_17493);
                                  var inst_17503 = cljs.core.async.take_BANG_.call(null, inst_17501, inst_17502);
                                  var state_17528__$1 = state_17528;
                                  var statearr_17545_17566 = state_17528__$1;
                                  statearr_17545_17566[2] = inst_17503;
                                  statearr_17545_17566[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } catch (e17543) {
                                  if (e17543 instanceof Object) {
                                    var ex__5389__auto__ = e17543;
                                    var statearr_17544_17567 = state_17528;
                                    statearr_17544_17567[1] = 10;
                                    statearr_17544_17567[2] = ex__5389__auto__;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                      throw e17543;
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              } else {
                                if (state_val_17529 === 12) {
                                  var inst_17514 = state_17528[10];
                                  var inst_17514__$1 = state_17528[2];
                                  var inst_17515 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_17514__$1);
                                  var state_17528__$1 = function() {
                                    var statearr_17546 = state_17528;
                                    statearr_17546[10] = inst_17514__$1;
                                    return statearr_17546;
                                  }();
                                  if (cljs.core.truth_(inst_17515)) {
                                    var statearr_17547_17568 = state_17528__$1;
                                    statearr_17547_17568[1] = 13;
                                  } else {
                                    var statearr_17548_17569 = state_17528__$1;
                                    statearr_17548_17569[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17529 === 13) {
                                    var inst_17517 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_17528__$1 = state_17528;
                                    var statearr_17549_17570 = state_17528__$1;
                                    statearr_17549_17570[2] = inst_17517;
                                    statearr_17549_17570[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17529 === 14) {
                                      var inst_17514 = state_17528[10];
                                      var inst_17519 = cljs.core.apply.call(null, f, inst_17514);
                                      var state_17528__$1 = state_17528;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17528__$1, 16, out, inst_17519);
                                    } else {
                                      if (state_val_17529 === 15) {
                                        var inst_17524 = state_17528[2];
                                        var state_17528__$1 = state_17528;
                                        var statearr_17550_17571 = state_17528__$1;
                                        statearr_17550_17571[2] = inst_17524;
                                        statearr_17550_17571[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17529 === 16) {
                                          var inst_17521 = state_17528[2];
                                          var state_17528__$1 = function() {
                                            var statearr_17551 = state_17528;
                                            statearr_17551[11] = inst_17521;
                                            return statearr_17551;
                                          }();
                                          var statearr_17552_17572 = state_17528__$1;
                                          statearr_17552_17572[2] = null;
                                          statearr_17552_17572[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_17554 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17554[0] = state_machine__5396__auto__;
              statearr_17554[1] = 1;
              return statearr_17554;
            };
            var state_machine__5396__auto____1 = function(state_17528) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_17528);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_17528) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_17528);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_17555 = f__5409__auto__.call(null);
        statearr_17555[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17556;
        return statearr_17555;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5408__auto___17672 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_17652) {
          var state_val_17653 = state_17652[1];
          if (state_val_17653 === 1) {
            var inst_17623 = cljs.core.vec.call(null, chs);
            var inst_17624 = inst_17623;
            var state_17652__$1 = function() {
              var statearr_17654 = state_17652;
              statearr_17654[5] = inst_17624;
              return statearr_17654;
            }();
            var statearr_17655_17673 = state_17652__$1;
            statearr_17655_17673[2] = null;
            statearr_17655_17673[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_17653 === 2) {
              var inst_17624 = state_17652[5];
              var inst_17626 = cljs.core.count.call(null, inst_17624);
              var inst_17627 = inst_17626 > 0;
              var state_17652__$1 = state_17652;
              if (cljs.core.truth_(inst_17627)) {
                var statearr_17656_17674 = state_17652__$1;
                statearr_17656_17674[1] = 4;
              } else {
                var statearr_17657_17675 = state_17652__$1;
                statearr_17657_17675[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17653 === 3) {
                var inst_17650 = state_17652[2];
                var state_17652__$1 = state_17652;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17652__$1, inst_17650);
              } else {
                if (state_val_17653 === 4) {
                  var inst_17624 = state_17652[5];
                  var state_17652__$1 = state_17652;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_17652__$1, 7, inst_17624);
                } else {
                  if (state_val_17653 === 5) {
                    var inst_17646 = cljs.core.async.close_BANG_.call(null, out);
                    var state_17652__$1 = state_17652;
                    var statearr_17658_17676 = state_17652__$1;
                    statearr_17658_17676[2] = inst_17646;
                    statearr_17658_17676[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_17653 === 6) {
                      var inst_17648 = state_17652[2];
                      var state_17652__$1 = state_17652;
                      var statearr_17659_17677 = state_17652__$1;
                      statearr_17659_17677[2] = inst_17648;
                      statearr_17659_17677[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17653 === 7) {
                        var inst_17632 = state_17652[6];
                        var inst_17631 = state_17652[7];
                        var inst_17631__$1 = state_17652[2];
                        var inst_17632__$1 = cljs.core.nth.call(null, inst_17631__$1, 0, null);
                        var inst_17633 = cljs.core.nth.call(null, inst_17631__$1, 1, null);
                        var inst_17634 = inst_17632__$1 == null;
                        var state_17652__$1 = function() {
                          var statearr_17660 = state_17652;
                          statearr_17660[6] = inst_17632__$1;
                          statearr_17660[8] = inst_17633;
                          statearr_17660[7] = inst_17631__$1;
                          return statearr_17660;
                        }();
                        if (cljs.core.truth_(inst_17634)) {
                          var statearr_17661_17678 = state_17652__$1;
                          statearr_17661_17678[1] = 8;
                        } else {
                          var statearr_17662_17679 = state_17652__$1;
                          statearr_17662_17679[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17653 === 8) {
                          var inst_17632 = state_17652[6];
                          var inst_17633 = state_17652[8];
                          var inst_17631 = state_17652[7];
                          var inst_17624 = state_17652[5];
                          var inst_17636 = function() {
                            var c = inst_17633;
                            var v = inst_17632;
                            var vec__17629 = inst_17631;
                            var cs = inst_17624;
                            return function(c, v, vec__17629, cs, inst_17632, inst_17633, inst_17631, inst_17624, state_val_17653) {
                              return function(p1__17573_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__17573_SHARP_);
                              };
                            }(c, v, vec__17629, cs, inst_17632, inst_17633, inst_17631, inst_17624, state_val_17653);
                          }();
                          var inst_17637 = cljs.core.filterv.call(null, inst_17636, inst_17624);
                          var inst_17624__$1 = inst_17637;
                          var state_17652__$1 = function() {
                            var statearr_17663 = state_17652;
                            statearr_17663[5] = inst_17624__$1;
                            return statearr_17663;
                          }();
                          var statearr_17664_17680 = state_17652__$1;
                          statearr_17664_17680[2] = null;
                          statearr_17664_17680[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17653 === 9) {
                            var inst_17632 = state_17652[6];
                            var state_17652__$1 = state_17652;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17652__$1, 11, out, inst_17632);
                          } else {
                            if (state_val_17653 === 10) {
                              var inst_17644 = state_17652[2];
                              var state_17652__$1 = state_17652;
                              var statearr_17666_17681 = state_17652__$1;
                              statearr_17666_17681[2] = inst_17644;
                              statearr_17666_17681[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17653 === 11) {
                                var inst_17624 = state_17652[5];
                                var inst_17641 = state_17652[2];
                                var tmp17665 = inst_17624;
                                var inst_17624__$1 = tmp17665;
                                var state_17652__$1 = function() {
                                  var statearr_17667 = state_17652;
                                  statearr_17667[9] = inst_17641;
                                  statearr_17667[5] = inst_17624__$1;
                                  return statearr_17667;
                                }();
                                var statearr_17668_17682 = state_17652__$1;
                                statearr_17668_17682[2] = null;
                                statearr_17668_17682[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_17670 = [null, null, null, null, null, null, null, null, null, null];
              statearr_17670[0] = state_machine__5396__auto__;
              statearr_17670[1] = 1;
              return statearr_17670;
            };
            var state_machine__5396__auto____1 = function(state_17652) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_17652);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_17652) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_17652);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_17671 = f__5409__auto__.call(null);
        statearr_17671[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___17672;
        return statearr_17671;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
goog.provide("chaperone.websocket");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc.Response");
goog.require("chaperone.crossover.rpc.Request");
goog.require("chaperone.crossover.rpc");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("cljs.reader");
chaperone.websocket.create_sub_system = function create_sub_system(system, host, port) {
  var sub_system = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "host", "host", 1017112858), host, new cljs.core.Keyword(null, "port", "port", 1017351155), port, new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "request-chan-listen", "request-chan-listen", 4697980374), cljs.core.atom.call(null, false), new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712), cljs.core.async.chan.call(null), 
  new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632), cljs.core.atom.call(null, false), new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), new cljs.core.Keyword(null, "edn-readers", "edn-readers", 2679897956), chaperone.crossover.rpc.all_edn_readers.call(null)], null);
  return cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), sub_system);
};
chaperone.websocket.sub_system = function sub_system(system) {
  return(new cljs.core.Keyword(null, "websocket", "websocket", 784338745)).cljs$core$IFn$_invoke$arity$1(system);
};
chaperone.websocket.respond_BANG_ = function respond_BANG_(web_sockets, response) {
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_sockets);
  var rpc_id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "request", "request", 2109597185)).cljs$core$IFn$_invoke$arity$1(response));
  var rpc_chan = cljs.core.get.call(null, cljs.core.deref.call(null, rpc_map), rpc_id);
  cljs.core.async.put_BANG_.call(null, rpc_chan, response);
  cljs.core.async.close_BANG_.call(null, rpc_chan);
  return cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.dissoc, rpc_id);
};
chaperone.websocket.start_request_chan_listen_BANG_ = function start_request_chan_listen_BANG_(web_socket) {
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "request-chan-listen", "request-chan-listen", 4697980374)).cljs$core$IFn$_invoke$arity$1(web_socket), true);
  var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_14347) {
        var state_val_14348 = state_14347[1];
        if (state_val_14348 === 7) {
          var inst_14334 = state_14347[5];
          var inst_14337 = state_14347[2];
          var inst_14338 = cljs.core.pr_str.call(null, inst_14337);
          var inst_14339 = inst_14334.send(inst_14338);
          var state_14347__$1 = function() {
            var statearr_14349 = state_14347;
            statearr_14349[6] = inst_14339;
            return statearr_14349;
          }();
          var statearr_14350_14360 = state_14347__$1;
          statearr_14350_14360[2] = null;
          statearr_14350_14360[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_14348 === 6) {
            var inst_14343 = state_14347[2];
            var state_14347__$1 = state_14347;
            var statearr_14351_14361 = state_14347__$1;
            statearr_14351_14361[2] = inst_14343;
            statearr_14351_14361[1] = 3;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_14348 === 5) {
              var state_14347__$1 = state_14347;
              var statearr_14352_14362 = state_14347__$1;
              statearr_14352_14362[2] = null;
              statearr_14352_14362[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_14348 === 4) {
                var inst_14334 = (new cljs.core.Keyword(null, "socket", "socket", 4411822821)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var inst_14335 = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_14347__$1 = function() {
                  var statearr_14353 = state_14347;
                  statearr_14353[5] = inst_14334;
                  return statearr_14353;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14347__$1, 7, inst_14335);
              } else {
                if (state_val_14348 === 3) {
                  var inst_14345 = state_14347[2];
                  var state_14347__$1 = state_14347;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14347__$1, inst_14345);
                } else {
                  if (state_val_14348 === 2) {
                    var inst_14331 = (new cljs.core.Keyword(null, "request-chan-listen", "request-chan-listen", 4697980374)).cljs$core$IFn$_invoke$arity$1(web_socket);
                    var inst_14332 = cljs.core.deref.call(null, inst_14331);
                    var state_14347__$1 = state_14347;
                    if (cljs.core.truth_(inst_14332)) {
                      var statearr_14354_14363 = state_14347__$1;
                      statearr_14354_14363[1] = 4;
                    } else {
                      var statearr_14355_14364 = state_14347__$1;
                      statearr_14355_14364[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_14348 === 1) {
                      var state_14347__$1 = state_14347;
                      var statearr_14356_14365 = state_14347__$1;
                      statearr_14356_14365[2] = null;
                      statearr_14356_14365[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_14358 = [null, null, null, null, null, null, null];
            statearr_14358[0] = state_machine__5396__auto__;
            statearr_14358[1] = 1;
            return statearr_14358;
          };
          var state_machine__5396__auto____1 = function(state_14347) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_14347);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_14347) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_14347);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_14359 = f__5409__auto__.call(null);
      statearr_14359[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
      return statearr_14359;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return c__5408__auto__;
};
chaperone.websocket.start_response_chan_listen_BANG_ = function start_response_chan_listen_BANG_(web_socket) {
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632)).cljs$core$IFn$_invoke$arity$1(web_socket), true);
  var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_14410) {
        var state_val_14411 = state_14410[1];
        if (state_val_14411 === 7) {
          var inst_14400 = state_14410[2];
          var inst_14401 = cljs.reader.read_string.call(null, inst_14400);
          var inst_14402 = chaperone.websocket.respond_BANG_.call(null, web_socket, inst_14401);
          var state_14410__$1 = function() {
            var statearr_14412 = state_14410;
            statearr_14412[5] = inst_14402;
            return statearr_14412;
          }();
          var statearr_14413_14422 = state_14410__$1;
          statearr_14413_14422[2] = null;
          statearr_14413_14422[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_14411 === 6) {
            var inst_14406 = state_14410[2];
            var state_14410__$1 = state_14410;
            var statearr_14414_14423 = state_14410__$1;
            statearr_14414_14423[2] = inst_14406;
            statearr_14414_14423[1] = 3;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_14411 === 5) {
              var state_14410__$1 = state_14410;
              var statearr_14415_14424 = state_14410__$1;
              statearr_14415_14424[2] = null;
              statearr_14415_14424[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_14411 === 4) {
                var inst_14398 = (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket);
                var state_14410__$1 = state_14410;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14410__$1, 7, inst_14398);
              } else {
                if (state_val_14411 === 3) {
                  var inst_14408 = state_14410[2];
                  var state_14410__$1 = state_14410;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14410__$1, inst_14408);
                } else {
                  if (state_val_14411 === 2) {
                    var inst_14395 = (new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632)).cljs$core$IFn$_invoke$arity$1(web_socket);
                    var inst_14396 = cljs.core.deref.call(null, inst_14395);
                    var state_14410__$1 = state_14410;
                    if (cljs.core.truth_(inst_14396)) {
                      var statearr_14416_14425 = state_14410__$1;
                      statearr_14416_14425[1] = 4;
                    } else {
                      var statearr_14417_14426 = state_14410__$1;
                      statearr_14417_14426[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_14411 === 1) {
                      var state_14410__$1 = state_14410;
                      var statearr_14418_14427 = state_14410__$1;
                      statearr_14418_14427[2] = null;
                      statearr_14418_14427[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_14420 = [null, null, null, null, null, null];
            statearr_14420[0] = state_machine__5396__auto__;
            statearr_14420[1] = 1;
            return statearr_14420;
          };
          var state_machine__5396__auto____1 = function(state_14410) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_14410);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_14410) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_14410);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_14421 = f__5409__auto__.call(null);
      statearr_14421[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
      return statearr_14421;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return c__5408__auto__;
};
chaperone.websocket.connect_websocket_BANG_ = function connect_websocket_BANG_(web_socket, socket_connected) {
  var ws_url = [cljs.core.str("ws://"), cljs.core.str((new cljs.core.Keyword(null, "host", "host", 1017112858)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str(":"), cljs.core.str((new cljs.core.Keyword(null, "port", "port", 1017351155)).cljs$core$IFn$_invoke$arity$1(web_socket)), cljs.core.str("/rpc")].join("");
  var socket = new WebSocket(ws_url);
  console.log("Connecting to WS: ", ws_url);
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onopen"], null), function() {
    console.log("Connected!");
    return cljs.core.async.put_BANG_.call(null, socket_connected, true);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onerror"], null), function(e) {
    return console.error("Websocket Error: ", e);
  });
  purnam.native$.aset_in.call(null, socket, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["onmessage"], null), function(e) {
    console.log("On Message: ", purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
    return cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket), purnam.native$.aget_in.call(null, e, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["data"], null)));
  });
  return socket;
};
chaperone.websocket.start_BANG_ = function start_BANG_(system) {
  var seq__14444_14460 = cljs.core.seq.call(null, chaperone.crossover.rpc.all_edn_readers.call(null));
  var chunk__14445_14461 = null;
  var count__14446_14462 = 0;
  var i__14447_14463 = 0;
  while (true) {
    if (i__14447_14463 < count__14446_14462) {
      var vec__14448_14464 = cljs.core._nth.call(null, chunk__14445_14461, i__14447_14463);
      var tag_14465 = cljs.core.nth.call(null, vec__14448_14464, 0, null);
      var f_14466 = cljs.core.nth.call(null, vec__14448_14464, 1, null);
      cljs.reader.register_tag_parser_BANG_.call(null, tag_14465, f_14466);
      var G__14467 = seq__14444_14460;
      var G__14468 = chunk__14445_14461;
      var G__14469 = count__14446_14462;
      var G__14470 = i__14447_14463 + 1;
      seq__14444_14460 = G__14467;
      chunk__14445_14461 = G__14468;
      count__14446_14462 = G__14469;
      i__14447_14463 = G__14470;
      continue;
    } else {
      var temp__4092__auto___14471 = cljs.core.seq.call(null, seq__14444_14460);
      if (temp__4092__auto___14471) {
        var seq__14444_14472__$1 = temp__4092__auto___14471;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14444_14472__$1)) {
          var c__4142__auto___14473 = cljs.core.chunk_first.call(null, seq__14444_14472__$1);
          var G__14474 = cljs.core.chunk_rest.call(null, seq__14444_14472__$1);
          var G__14475 = c__4142__auto___14473;
          var G__14476 = cljs.core.count.call(null, c__4142__auto___14473);
          var G__14477 = 0;
          seq__14444_14460 = G__14474;
          chunk__14445_14461 = G__14475;
          count__14446_14462 = G__14476;
          i__14447_14463 = G__14477;
          continue;
        } else {
          var vec__14449_14478 = cljs.core.first.call(null, seq__14444_14472__$1);
          var tag_14479 = cljs.core.nth.call(null, vec__14449_14478, 0, null);
          var f_14480 = cljs.core.nth.call(null, vec__14449_14478, 1, null);
          cljs.reader.register_tag_parser_BANG_.call(null, tag_14479, f_14480);
          var G__14481 = cljs.core.next.call(null, seq__14444_14472__$1);
          var G__14482 = null;
          var G__14483 = 0;
          var G__14484 = 0;
          seq__14444_14460 = G__14481;
          chunk__14445_14461 = G__14482;
          count__14446_14462 = G__14483;
          i__14447_14463 = G__14484;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  var socket_connected = cljs.core.async.timeout.call(null, 1E4);
  var socket = chaperone.websocket.connect_websocket_BANG_.call(null, web_socket, socket_connected);
  var web_socket__$1 = cljs.core.assoc.call(null, web_socket, new cljs.core.Keyword(null, "socket", "socket", 4411822821), socket);
  chaperone.websocket.start_response_chan_listen_BANG_.call(null, web_socket__$1);
  var system__$1 = cljs.core.assoc.call(null, system, new cljs.core.Keyword(null, "websocket", "websocket", 784338745), web_socket__$1);
  var c__5408__auto___14485 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__5409__auto__ = function() {
      var switch__5395__auto__ = function(state_14454) {
        var state_val_14455 = state_14454[1];
        if (state_val_14455 === 2) {
          var inst_14451 = state_14454[2];
          var inst_14452 = chaperone.websocket.start_request_chan_listen_BANG_.call(null, web_socket__$1);
          var state_14454__$1 = function() {
            var statearr_14456 = state_14454;
            statearr_14456[5] = inst_14451;
            return statearr_14456;
          }();
          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14454__$1, inst_14452);
        } else {
          if (state_val_14455 === 1) {
            var state_14454__$1 = state_14454;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14454__$1, 2, socket_connected);
          } else {
            return null;
          }
        }
      };
      return function(switch__5395__auto__) {
        return function() {
          var state_machine__5396__auto__ = null;
          var state_machine__5396__auto____0 = function() {
            var statearr_14458 = [null, null, null, null, null, null];
            statearr_14458[0] = state_machine__5396__auto__;
            statearr_14458[1] = 1;
            return statearr_14458;
          };
          var state_machine__5396__auto____1 = function(state_14454) {
            while (true) {
              var result__5397__auto__ = switch__5395__auto__.call(null, state_14454);
              if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                continue;
              } else {
                return result__5397__auto__;
              }
              break;
            }
          };
          state_machine__5396__auto__ = function(state_14454) {
            switch(arguments.length) {
              case 0:
                return state_machine__5396__auto____0.call(this);
              case 1:
                return state_machine__5396__auto____1.call(this, state_14454);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
          state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
          return state_machine__5396__auto__;
        }();
      }(switch__5395__auto__);
    }();
    var state__5410__auto__ = function() {
      var statearr_14459 = f__5409__auto__.call(null);
      statearr_14459[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto___14485;
      return statearr_14459;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
  });
  return system__$1;
};
chaperone.websocket.stop_BANG_ = function stop_BANG_(system) {
  var web_socket_14486 = chaperone.websocket.sub_system.call(null, system);
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket_14486));
  cljs.core.async.close_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan", "response-chan", 2643989712)).cljs$core$IFn$_invoke$arity$1(web_socket_14486));
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632)).cljs$core$IFn$_invoke$arity$1(web_socket_14486), false);
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "response-chan-listen", "response-chan-listen", 559850632)).cljs$core$IFn$_invoke$arity$1(web_socket_14486), false);
  return system;
};
chaperone.websocket.send_BANG_ = function send_BANG_(web_socket, request) {
  var id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(request);
  var request_chan = (new cljs.core.Keyword(null, "request-chan", "request-chan", 2270492482)).cljs$core$IFn$_invoke$arity$1(web_socket);
  var result_chan = cljs.core.async.chan.call(null);
  var rpc_map = (new cljs.core.Keyword(null, "rpc-map", "rpc-map", 2409450726)).cljs$core$IFn$_invoke$arity$1(web_socket);
  cljs.core.swap_BANG_.call(null, rpc_map, cljs.core.assoc, id, result_chan);
  cljs.core.async.put_BANG_.call(null, request_chan, request);
  return result_chan;
};
goog.provide("chaperone.core");
goog.require("cljs.core");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
chaperone.core.create_system = function create_system(host, port) {
  var context = cljs.core.PersistentArrayMap.EMPTY;
  return chaperone.websocket.create_sub_system.call(null, context, host, port);
};
chaperone.core.start_BANG_ = function start_BANG_(system) {
  console.log("Starting the system");
  return chaperone.websocket.start_BANG_.call(null, system);
};
chaperone.core.stop_BANG_ = function stop_BANG_(system) {
  console.log("Stopping the system");
  return chaperone.websocket.stop_BANG_.call(null, system);
};
goog.provide("purnam.common");
goog.require("cljs.core");
purnam.common.flags = function() {
  var obj18110 = {};
  return obj18110;
}();
purnam.common.get_context = function get_context() {
  return purnam.common._STAR_pure_context_STAR_;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__18095 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__18095;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__18099 = cljs.core._EQ_;
    var expr__18100 = limit;
    if (cljs.core.truth_(pred__18099.call(null, 1, expr__18100))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__18099.call(null, 2, expr__18100))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__18102 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__18103 = limit__$1 - 1;
            var G__18104 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__18102;
            limit__$1 = G__18103;
            parts = G__18104;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__18105 = index - 1;
        index = G__18105;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___18106 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___18106)) {
        var replacement_18107 = temp__4090__auto___18106;
        buffer.append([cljs.core.str(replacement_18107)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__18108 = index + 1;
      index = G__18108;
      continue;
    }
    break;
  }
};
goog.provide("purnam.native$");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("purnam.common");
goog.require("purnam.common");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
purnam.native$.nested_val = function nested_val(p__17774, val) {
  var vec__17778 = p__17774;
  var k = cljs.core.nth.call(null, vec__17778, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__17778, 1);
  if (k == null) {
    return val;
  } else {
    var o = function() {
      var obj17780 = {};
      return obj17780;
    }();
    o[k] = nested_val.call(null, ks, val);
    return o;
  }
};
purnam.native$.nested_delete = function nested_delete(p__17781, val) {
  var vec__17783 = p__17781;
  var k = cljs.core.nth.call(null, vec__17783, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__17783, 1);
  if (ks == null) {
    delete val[k];
  } else {
    nested_delete.call(null, ks, val);
  }
  return val;
};
purnam.native$.aset_in = function() {
  var aset_in = null;
  var aset_in__2 = function(var$, arr) {
    return aset_in.call(null, var$, arr, null);
  };
  var aset_in__3 = function(var$, arr, val) {
    var vec__17785 = arr;
    var k = cljs.core.nth.call(null, vec__17785, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17785, 1);
    if (k == null) {
    } else {
      if (cljs.core.empty_QMARK_.call(null, ks)) {
        if (cljs.core.truth_(val)) {
          var$[k] = val;
        } else {
          delete var$[k];
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var temp__4090__auto___17786 = var$[k];
          if (cljs.core.truth_(temp__4090__auto___17786)) {
            var svar_17787 = temp__4090__auto___17786;
            aset_in.call(null, svar_17787, ks, val);
          } else {
            if (cljs.core.truth_(val)) {
              var$[k] = purnam.native$.nested_val.call(null, ks, val);
            } else {
            }
          }
        } else {
        }
      }
    }
    return var$;
  };
  aset_in = function(var$, arr, val) {
    switch(arguments.length) {
      case 2:
        return aset_in__2.call(this, var$, arr);
      case 3:
        return aset_in__3.call(this, var$, arr, val);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset_in.cljs$core$IFn$_invoke$arity$2 = aset_in__2;
  aset_in.cljs$core$IFn$_invoke$arity$3 = aset_in__3;
  return aset_in;
}();
purnam.native$.aget_in = function() {
  var aget_in = null;
  var aget_in__1 = function(var$) {
    return var$;
  };
  var aget_in__2 = function(var$, arr) {
    if (var$ == null) {
      return null;
    } else {
      if (cljs.core.empty_QMARK_.call(null, arr)) {
        return var$;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return aget_in.call(null, var$[cljs.core.first.call(null, arr)], cljs.core.next.call(null, arr));
        } else {
          return null;
        }
      }
    }
  };
  aget_in = function(var$, arr) {
    switch(arguments.length) {
      case 1:
        return aget_in__1.call(this, var$);
      case 2:
        return aget_in__2.call(this, var$, arr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget_in.cljs$core$IFn$_invoke$arity$1 = aget_in__1;
  aget_in.cljs$core$IFn$_invoke$arity$2 = aget_in__2;
  return aget_in;
}();
purnam.native$.js_strkey = function js_strkey(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return[cljs.core.str(x)].join("");
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_obj_name = function js_obj_name(this$) {
  var temp__4090__auto__ = cljs.core.re_find.call(null, /^function (\w+)/, [cljs.core.str(this$)].join(""));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__17789 = temp__4090__auto__;
    var _ = cljs.core.nth.call(null, vec__17789, 0, null);
    var n = cljs.core.nth.call(null, vec__17789, 1, null);
    return n;
  } else {
    return "Object";
  }
};
purnam.native$.js_type = function js_type(o) {
  var ty = cljs.core.type.call(null, o);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3388__auto__ = ty;
    if (cljs.core.truth_(and__3388__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3388__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(o);
  return ty__$1;
};
purnam.native$.js_lookup = function() {
  var js_lookup = null;
  var js_lookup__2 = function(o, k) {
    return o[purnam.native$.js_strkey.call(null, k)];
  };
  var js_lookup__3 = function(o, k, not_found) {
    var s = purnam.native$.js_strkey.call(null, k);
    var temp__4090__auto__ = o[s];
    if (cljs.core.truth_(temp__4090__auto__)) {
      var res = temp__4090__auto__;
      return res;
    } else {
      return not_found;
    }
  };
  js_lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return js_lookup__2.call(this, o, k);
      case 3:
        return js_lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_lookup.cljs$core$IFn$_invoke$arity$2 = js_lookup__2;
  js_lookup.cljs$core$IFn$_invoke$arity$3 = js_lookup__3;
  return js_lookup;
}();
purnam.native$.js_range = function js_range(n) {
  var res = new Array(n);
  var i = 0;
  while (true) {
    if (i < n) {
      res.push(i);
      var G__17790 = i + 1;
      i = G__17790;
      continue;
    } else {
      return res;
    }
    break;
  }
};
purnam.native$.js_assoc = function() {
  var js_assoc = null;
  var js_assoc__3 = function(o, k, v) {
    o[purnam.native$.js_strkey.call(null, k)] = v;
    return o;
  };
  var js_assoc__4 = function() {
    var G__17791__delegate = function(o, k, v, more) {
      while (true) {
        js_assoc.call(null, o, k, v);
        if (cljs.core.truth_(more)) {
          var G__17792 = o;
          var G__17793 = cljs.core.first.call(null, more);
          var G__17794 = cljs.core.second.call(null, more);
          var G__17795 = cljs.core.nnext.call(null, more);
          o = G__17792;
          k = G__17793;
          v = G__17794;
          more = G__17795;
          continue;
        } else {
          return o;
        }
        break;
      }
    };
    var G__17791 = function(o, k, v, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17791__delegate.call(this, o, k, v, more);
    };
    G__17791.cljs$lang$maxFixedArity = 3;
    G__17791.cljs$lang$applyTo = function(arglist__17796) {
      var o = cljs.core.first(arglist__17796);
      arglist__17796 = cljs.core.next(arglist__17796);
      var k = cljs.core.first(arglist__17796);
      arglist__17796 = cljs.core.next(arglist__17796);
      var v = cljs.core.first(arglist__17796);
      var more = cljs.core.rest(arglist__17796);
      return G__17791__delegate(o, k, v, more);
    };
    G__17791.cljs$core$IFn$_invoke$arity$variadic = G__17791__delegate;
    return G__17791;
  }();
  js_assoc = function(o, k, v, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return js_assoc__3.call(this, o, k, v);
      default:
        return js_assoc__4.cljs$core$IFn$_invoke$arity$variadic(o, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_assoc.cljs$lang$maxFixedArity = 3;
  js_assoc.cljs$lang$applyTo = js_assoc__4.cljs$lang$applyTo;
  js_assoc.cljs$core$IFn$_invoke$arity$3 = js_assoc__3;
  js_assoc.cljs$core$IFn$_invoke$arity$variadic = js_assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return js_assoc;
}();
purnam.native$.js_dissoc = function() {
  var js_dissoc__delegate = function(o, k, more) {
    while (true) {
      delete o[purnam.native$.js_strkey.call(null, k)];
      if (cljs.core.truth_(more)) {
        var G__17797 = o;
        var G__17798 = cljs.core.first.call(null, more);
        var G__17799 = cljs.core.next.call(null, more);
        o = G__17797;
        k = G__17798;
        more = G__17799;
        continue;
      } else {
        return o;
      }
      break;
    }
  };
  var js_dissoc = function(o, k, var_args) {
    var more = null;
    if (arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return js_dissoc__delegate.call(this, o, k, more);
  };
  js_dissoc.cljs$lang$maxFixedArity = 2;
  js_dissoc.cljs$lang$applyTo = function(arglist__17800) {
    var o = cljs.core.first(arglist__17800);
    arglist__17800 = cljs.core.next(arglist__17800);
    var k = cljs.core.first(arglist__17800);
    var more = cljs.core.rest(arglist__17800);
    return js_dissoc__delegate(o, k, more);
  };
  js_dissoc.cljs$core$IFn$_invoke$arity$variadic = js_dissoc__delegate;
  return js_dissoc;
}();
purnam.native$.js_empty = function js_empty(o) {
  var G__17806_17811 = goog.typeOf(o);
  if (cljs.core._EQ_.call(null, "array", G__17806_17811)) {
    o["length"] = 0;
  } else {
    if (cljs.core._EQ_.call(null, "object", G__17806_17811)) {
      var seq__17807_17812 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o));
      var chunk__17808_17813 = null;
      var count__17809_17814 = 0;
      var i__17810_17815 = 0;
      while (true) {
        if (i__17810_17815 < count__17809_17814) {
          var k_17816 = cljs.core._nth.call(null, chunk__17808_17813, i__17810_17815);
          delete o[k_17816];
          var G__17817 = seq__17807_17812;
          var G__17818 = chunk__17808_17813;
          var G__17819 = count__17809_17814;
          var G__17820 = i__17810_17815 + 1;
          seq__17807_17812 = G__17817;
          chunk__17808_17813 = G__17818;
          count__17809_17814 = G__17819;
          i__17810_17815 = G__17820;
          continue;
        } else {
          var temp__4092__auto___17821 = cljs.core.seq.call(null, seq__17807_17812);
          if (temp__4092__auto___17821) {
            var seq__17807_17822__$1 = temp__4092__auto___17821;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__17807_17822__$1)) {
              var c__4142__auto___17823 = cljs.core.chunk_first.call(null, seq__17807_17822__$1);
              var G__17824 = cljs.core.chunk_rest.call(null, seq__17807_17822__$1);
              var G__17825 = c__4142__auto___17823;
              var G__17826 = cljs.core.count.call(null, c__4142__auto___17823);
              var G__17827 = 0;
              seq__17807_17812 = G__17824;
              chunk__17808_17813 = G__17825;
              count__17809_17814 = G__17826;
              i__17810_17815 = G__17827;
              continue;
            } else {
              var k_17828 = cljs.core.first.call(null, seq__17807_17822__$1);
              delete o[k_17828];
              var G__17829 = cljs.core.next.call(null, seq__17807_17822__$1);
              var G__17830 = null;
              var G__17831 = 0;
              var G__17832 = 0;
              seq__17807_17812 = G__17829;
              chunk__17808_17813 = G__17830;
              count__17809_17814 = G__17831;
              i__17810_17815 = G__17832;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(goog.typeOf(o))].join(""));
      } else {
      }
    }
  }
  return o;
};
purnam.native$.js_merge = function() {
  var js_merge = null;
  var js_merge__2 = function(o1, o2) {
    var seq__17837_17841 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__17838_17842 = null;
    var count__17839_17843 = 0;
    var i__17840_17844 = 0;
    while (true) {
      if (i__17840_17844 < count__17839_17843) {
        var k_17845 = cljs.core._nth.call(null, chunk__17838_17842, i__17840_17844);
        o1[k_17845] = o2[k_17845];
        var G__17846 = seq__17837_17841;
        var G__17847 = chunk__17838_17842;
        var G__17848 = count__17839_17843;
        var G__17849 = i__17840_17844 + 1;
        seq__17837_17841 = G__17846;
        chunk__17838_17842 = G__17847;
        count__17839_17843 = G__17848;
        i__17840_17844 = G__17849;
        continue;
      } else {
        var temp__4092__auto___17850 = cljs.core.seq.call(null, seq__17837_17841);
        if (temp__4092__auto___17850) {
          var seq__17837_17851__$1 = temp__4092__auto___17850;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17837_17851__$1)) {
            var c__4142__auto___17852 = cljs.core.chunk_first.call(null, seq__17837_17851__$1);
            var G__17853 = cljs.core.chunk_rest.call(null, seq__17837_17851__$1);
            var G__17854 = c__4142__auto___17852;
            var G__17855 = cljs.core.count.call(null, c__4142__auto___17852);
            var G__17856 = 0;
            seq__17837_17841 = G__17853;
            chunk__17838_17842 = G__17854;
            count__17839_17843 = G__17855;
            i__17840_17844 = G__17856;
            continue;
          } else {
            var k_17857 = cljs.core.first.call(null, seq__17837_17851__$1);
            o1[k_17857] = o2[k_17857];
            var G__17858 = cljs.core.next.call(null, seq__17837_17851__$1);
            var G__17859 = null;
            var G__17860 = 0;
            var G__17861 = 0;
            seq__17837_17841 = G__17858;
            chunk__17838_17842 = G__17859;
            count__17839_17843 = G__17860;
            i__17840_17844 = G__17861;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge__3 = function() {
    var G__17862__delegate = function(o1, o2, more) {
      return cljs.core.apply.call(null, js_merge, js_merge.call(null, o1, o2), more);
    };
    var G__17862 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17862__delegate.call(this, o1, o2, more);
    };
    G__17862.cljs$lang$maxFixedArity = 2;
    G__17862.cljs$lang$applyTo = function(arglist__17863) {
      var o1 = cljs.core.first(arglist__17863);
      arglist__17863 = cljs.core.next(arglist__17863);
      var o2 = cljs.core.first(arglist__17863);
      var more = cljs.core.rest(arglist__17863);
      return G__17862__delegate(o1, o2, more);
    };
    G__17862.cljs$core$IFn$_invoke$arity$variadic = G__17862__delegate;
    return G__17862;
  }();
  js_merge = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge__2.call(this, o1, o2);
      default:
        return js_merge__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge.cljs$lang$maxFixedArity = 2;
  js_merge.cljs$lang$applyTo = js_merge__3.cljs$lang$applyTo;
  js_merge.cljs$core$IFn$_invoke$arity$2 = js_merge__2;
  js_merge.cljs$core$IFn$_invoke$arity$variadic = js_merge__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge;
}();
purnam.native$.js_merge_nil = function() {
  var js_merge_nil = null;
  var js_merge_nil__2 = function(o1, o2) {
    var seq__17868_17872 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, o2));
    var chunk__17869_17873 = null;
    var count__17870_17874 = 0;
    var i__17871_17875 = 0;
    while (true) {
      if (i__17871_17875 < count__17870_17874) {
        var k_17876 = cljs.core._nth.call(null, chunk__17869_17873, i__17871_17875);
        if (cljs.core.not.call(null, o1[k_17876])) {
          o1[k_17876] = o2[k_17876];
        } else {
        }
        var G__17877 = seq__17868_17872;
        var G__17878 = chunk__17869_17873;
        var G__17879 = count__17870_17874;
        var G__17880 = i__17871_17875 + 1;
        seq__17868_17872 = G__17877;
        chunk__17869_17873 = G__17878;
        count__17870_17874 = G__17879;
        i__17871_17875 = G__17880;
        continue;
      } else {
        var temp__4092__auto___17881 = cljs.core.seq.call(null, seq__17868_17872);
        if (temp__4092__auto___17881) {
          var seq__17868_17882__$1 = temp__4092__auto___17881;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17868_17882__$1)) {
            var c__4142__auto___17883 = cljs.core.chunk_first.call(null, seq__17868_17882__$1);
            var G__17884 = cljs.core.chunk_rest.call(null, seq__17868_17882__$1);
            var G__17885 = c__4142__auto___17883;
            var G__17886 = cljs.core.count.call(null, c__4142__auto___17883);
            var G__17887 = 0;
            seq__17868_17872 = G__17884;
            chunk__17869_17873 = G__17885;
            count__17870_17874 = G__17886;
            i__17871_17875 = G__17887;
            continue;
          } else {
            var k_17888 = cljs.core.first.call(null, seq__17868_17882__$1);
            if (cljs.core.not.call(null, o1[k_17888])) {
              o1[k_17888] = o2[k_17888];
            } else {
            }
            var G__17889 = cljs.core.next.call(null, seq__17868_17882__$1);
            var G__17890 = null;
            var G__17891 = 0;
            var G__17892 = 0;
            seq__17868_17872 = G__17889;
            chunk__17869_17873 = G__17890;
            count__17870_17874 = G__17891;
            i__17871_17875 = G__17892;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o1;
  };
  var js_merge_nil__3 = function() {
    var G__17893__delegate = function(o1, o2, more) {
      while (true) {
        js_merge_nil.call(null, o1, o2);
        if (cljs.core.truth_(more)) {
          var G__17894 = js_merge_nil.call(null, o1, o2);
          var G__17895 = cljs.core.first.call(null, more);
          var G__17896 = cljs.core.next.call(null, more);
          o1 = G__17894;
          o2 = G__17895;
          more = G__17896;
          continue;
        } else {
          return o1;
        }
        break;
      }
    };
    var G__17893 = function(o1, o2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17893__delegate.call(this, o1, o2, more);
    };
    G__17893.cljs$lang$maxFixedArity = 2;
    G__17893.cljs$lang$applyTo = function(arglist__17897) {
      var o1 = cljs.core.first(arglist__17897);
      arglist__17897 = cljs.core.next(arglist__17897);
      var o2 = cljs.core.first(arglist__17897);
      var more = cljs.core.rest(arglist__17897);
      return G__17893__delegate(o1, o2, more);
    };
    G__17893.cljs$core$IFn$_invoke$arity$variadic = G__17893__delegate;
    return G__17893;
  }();
  js_merge_nil = function(o1, o2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return js_merge_nil__2.call(this, o1, o2);
      default:
        return js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic(o1, o2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_merge_nil.cljs$lang$maxFixedArity = 2;
  js_merge_nil.cljs$lang$applyTo = js_merge_nil__3.cljs$lang$applyTo;
  js_merge_nil.cljs$core$IFn$_invoke$arity$2 = js_merge_nil__2;
  js_merge_nil.cljs$core$IFn$_invoke$arity$variadic = js_merge_nil__3.cljs$core$IFn$_invoke$arity$variadic;
  return js_merge_nil;
}();
purnam.native$.js_replace = function js_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_merge.call(null, o1, o2);
};
purnam.native$.js_equals = function js_equals(v1, v2) {
  if (cljs.core._EQ_.call(null, v1, v2)) {
    return true;
  } else {
    var t1 = goog.typeOf(v1);
    var t2 = goog.typeOf(v2);
    if (cljs.core._EQ_.call(null, "array", t1, t2)) {
      return goog.array.equals(v1, v2, js_equals);
    } else {
      if (cljs.core._EQ_.call(null, "object", t1, t2)) {
        var ks1 = cljs.core.js_keys.call(null, v1).sort();
        var ks2 = cljs.core.js_keys.call(null, v2).sort();
        if (cljs.core.truth_(goog.array.equals(ks1, ks2))) {
          return goog.array.every(ks1, function(k) {
            return js_equals.call(null, v1[k], v2[k]);
          });
        } else {
          return false;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
  }
};
purnam.native$.js_copy = function js_copy(o) {
  return goog.object.clone(o);
};
purnam.native$.js_initial_value = function js_initial_value(v) {
  var t = goog.typeOf(v);
  if (cljs.core._EQ_.call(null, t, "object")) {
    var obj17901 = {};
    return obj17901;
  } else {
    if (cljs.core._EQ_.call(null, t, "array")) {
      return[];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return v;
      } else {
        return null;
      }
    }
  }
};
purnam.native$.js_deep_extend = function() {
  var js_deep_extend = null;
  var js_deep_extend__2 = function(to, from) {
    var visited = [from];
    var visitedlu = [to];
    js_deep_extend.call(null, to, from, visited, visitedlu);
    return to;
  };
  var js_deep_extend__4 = function(to, from, visited, visitedlu) {
    var seq__17906_17910 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, from));
    var chunk__17907_17911 = null;
    var count__17908_17912 = 0;
    var i__17909_17913 = 0;
    while (true) {
      if (i__17909_17913 < count__17908_17912) {
        var k_17914 = cljs.core._nth.call(null, chunk__17907_17911, i__17909_17913);
        var v_17915 = from[k_17914];
        var vn_17916 = purnam.native$.js_initial_value.call(null, v_17915);
        if (cljs.core.not_EQ_.call(null, v_17915, vn_17916)) {
          var i_17917 = visited.indexOf(v_17915);
          if (cljs.core._EQ_.call(null, -1, i_17917)) {
            visited.push(v_17915);
            visitedlu.push(vn_17916);
            js_deep_extend.call(null, vn_17916, v_17915, visited, visitedlu);
            to[k_17914] = vn_17916;
          } else {
            to[k_17914] = visitedlu[i_17917];
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            to[k_17914] = v_17915;
          } else {
          }
        }
        var G__17918 = seq__17906_17910;
        var G__17919 = chunk__17907_17911;
        var G__17920 = count__17908_17912;
        var G__17921 = i__17909_17913 + 1;
        seq__17906_17910 = G__17918;
        chunk__17907_17911 = G__17919;
        count__17908_17912 = G__17920;
        i__17909_17913 = G__17921;
        continue;
      } else {
        var temp__4092__auto___17922 = cljs.core.seq.call(null, seq__17906_17910);
        if (temp__4092__auto___17922) {
          var seq__17906_17923__$1 = temp__4092__auto___17922;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17906_17923__$1)) {
            var c__4142__auto___17924 = cljs.core.chunk_first.call(null, seq__17906_17923__$1);
            var G__17925 = cljs.core.chunk_rest.call(null, seq__17906_17923__$1);
            var G__17926 = c__4142__auto___17924;
            var G__17927 = cljs.core.count.call(null, c__4142__auto___17924);
            var G__17928 = 0;
            seq__17906_17910 = G__17925;
            chunk__17907_17911 = G__17926;
            count__17908_17912 = G__17927;
            i__17909_17913 = G__17928;
            continue;
          } else {
            var k_17929 = cljs.core.first.call(null, seq__17906_17923__$1);
            var v_17930 = from[k_17929];
            var vn_17931 = purnam.native$.js_initial_value.call(null, v_17930);
            if (cljs.core.not_EQ_.call(null, v_17930, vn_17931)) {
              var i_17932 = visited.indexOf(v_17930);
              if (cljs.core._EQ_.call(null, -1, i_17932)) {
                visited.push(v_17930);
                visitedlu.push(vn_17931);
                js_deep_extend.call(null, vn_17931, v_17930, visited, visitedlu);
                to[k_17929] = vn_17931;
              } else {
                to[k_17929] = visitedlu[i_17932];
              }
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                to[k_17929] = v_17930;
              } else {
              }
            }
            var G__17933 = cljs.core.next.call(null, seq__17906_17923__$1);
            var G__17934 = null;
            var G__17935 = 0;
            var G__17936 = 0;
            seq__17906_17910 = G__17933;
            chunk__17907_17911 = G__17934;
            count__17908_17912 = G__17935;
            i__17909_17913 = G__17936;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return to;
  };
  js_deep_extend = function(to, from, visited, visitedlu) {
    switch(arguments.length) {
      case 2:
        return js_deep_extend__2.call(this, to, from);
      case 4:
        return js_deep_extend__4.call(this, to, from, visited, visitedlu);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_deep_extend.cljs$core$IFn$_invoke$arity$2 = js_deep_extend__2;
  js_deep_extend.cljs$core$IFn$_invoke$arity$4 = js_deep_extend__4;
  return js_deep_extend;
}();
purnam.native$.js_deep_copy = function js_deep_copy(value) {
  var vn = purnam.native$.js_initial_value.call(null, value);
  if (cljs.core.not_EQ_.call(null, value, vn)) {
    return purnam.native$.js_deep_extend.call(null, vn, value);
  } else {
    return value;
  }
};
purnam.native$.js_deep_replace = function js_deep_replace(o1, o2) {
  purnam.native$.js_empty.call(null, o1);
  return purnam.native$.js_deep_extend.call(null, o1, o2);
};
purnam.native$.js_map_STAR_ = function() {
  var js_map_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var seq__17942_17946 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__17943_17947 = null;
    var count__17944_17948 = 0;
    var i__17945_17949 = 0;
    while (true) {
      if (i__17945_17949 < count__17944_17948) {
        var i_17950 = cljs.core._nth.call(null, chunk__17943_17947, i__17945_17949);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__17942_17946, chunk__17943_17947, count__17944_17948, i__17945_17949, i_17950) {
          return function(p1__17937_SHARP_) {
            return p1__17937_SHARP_[i_17950];
          };
        }(seq__17942_17946, chunk__17943_17947, count__17944_17948, i__17945_17949, i_17950), args)));
        var G__17951 = seq__17942_17946;
        var G__17952 = chunk__17943_17947;
        var G__17953 = count__17944_17948;
        var G__17954 = i__17945_17949 + 1;
        seq__17942_17946 = G__17951;
        chunk__17943_17947 = G__17952;
        count__17944_17948 = G__17953;
        i__17945_17949 = G__17954;
        continue;
      } else {
        var temp__4092__auto___17955 = cljs.core.seq.call(null, seq__17942_17946);
        if (temp__4092__auto___17955) {
          var seq__17942_17956__$1 = temp__4092__auto___17955;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17942_17956__$1)) {
            var c__4142__auto___17957 = cljs.core.chunk_first.call(null, seq__17942_17956__$1);
            var G__17958 = cljs.core.chunk_rest.call(null, seq__17942_17956__$1);
            var G__17959 = c__4142__auto___17957;
            var G__17960 = cljs.core.count.call(null, c__4142__auto___17957);
            var G__17961 = 0;
            seq__17942_17946 = G__17958;
            chunk__17943_17947 = G__17959;
            count__17944_17948 = G__17960;
            i__17945_17949 = G__17961;
            continue;
          } else {
            var i_17962 = cljs.core.first.call(null, seq__17942_17956__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__17942_17946, chunk__17943_17947, count__17944_17948, i__17945_17949, i_17962, seq__17942_17956__$1, temp__4092__auto___17955) {
              return function(p1__17937_SHARP_) {
                return p1__17937_SHARP_[i_17962];
              };
            }(seq__17942_17946, chunk__17943_17947, count__17944_17948, i__17945_17949, i_17962, seq__17942_17956__$1, temp__4092__auto___17955), args)));
            var G__17963 = cljs.core.next.call(null, seq__17942_17956__$1);
            var G__17964 = null;
            var G__17965 = 0;
            var G__17966 = 0;
            seq__17942_17946 = G__17963;
            chunk__17943_17947 = G__17964;
            count__17944_17948 = G__17965;
            i__17945_17949 = G__17966;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map_STAR___delegate.call(this, f, args);
  };
  js_map_STAR_.cljs$lang$maxFixedArity = 1;
  js_map_STAR_.cljs$lang$applyTo = function(arglist__17967) {
    var f = cljs.core.first(arglist__17967);
    var args = cljs.core.rest(arglist__17967);
    return js_map_STAR___delegate(f, args);
  };
  js_map_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_map_STAR___delegate;
  return js_map_STAR_;
}();
purnam.native$.js_mapcat_STAR_ = function() {
  var js_mapcat_STAR___delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return ar.length;
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__17968_SHARP_) {
            return p1__17968_SHARP_[i];
          };
        }(i, output__$1), args));
        var G__17969 = i + 1;
        var G__17970 = output__$1.concat(res);
        i = G__17969;
        output__$1 = G__17970;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat_STAR___delegate.call(this, f, args);
  };
  js_mapcat_STAR_.cljs$lang$maxFixedArity = 1;
  js_mapcat_STAR_.cljs$lang$applyTo = function(arglist__17971) {
    var f = cljs.core.first(arglist__17971);
    var args = cljs.core.rest(arglist__17971);
    return js_mapcat_STAR___delegate(f, args);
  };
  js_mapcat_STAR_.cljs$core$IFn$_invoke$arity$variadic = js_mapcat_STAR___delegate;
  return js_mapcat_STAR_;
}();
purnam.native$.js_map = function() {
  var js_map__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var seq__17977_17981 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
    var chunk__17978_17982 = null;
    var count__17979_17983 = 0;
    var i__17980_17984 = 0;
    while (true) {
      if (i__17980_17984 < count__17979_17983) {
        var i_17985 = cljs.core._nth.call(null, chunk__17978_17982, i__17980_17984);
        output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__17977_17981, chunk__17978_17982, count__17979_17983, i__17980_17984, i_17985) {
          return function(p1__17972_SHARP_) {
            return cljs.core.nth.call(null, p1__17972_SHARP_, i_17985);
          };
        }(seq__17977_17981, chunk__17978_17982, count__17979_17983, i__17980_17984, i_17985), args)));
        var G__17986 = seq__17977_17981;
        var G__17987 = chunk__17978_17982;
        var G__17988 = count__17979_17983;
        var G__17989 = i__17980_17984 + 1;
        seq__17977_17981 = G__17986;
        chunk__17978_17982 = G__17987;
        count__17979_17983 = G__17988;
        i__17980_17984 = G__17989;
        continue;
      } else {
        var temp__4092__auto___17990 = cljs.core.seq.call(null, seq__17977_17981);
        if (temp__4092__auto___17990) {
          var seq__17977_17991__$1 = temp__4092__auto___17990;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17977_17991__$1)) {
            var c__4142__auto___17992 = cljs.core.chunk_first.call(null, seq__17977_17991__$1);
            var G__17993 = cljs.core.chunk_rest.call(null, seq__17977_17991__$1);
            var G__17994 = c__4142__auto___17992;
            var G__17995 = cljs.core.count.call(null, c__4142__auto___17992);
            var G__17996 = 0;
            seq__17977_17981 = G__17993;
            chunk__17978_17982 = G__17994;
            count__17979_17983 = G__17995;
            i__17980_17984 = G__17996;
            continue;
          } else {
            var i_17997 = cljs.core.first.call(null, seq__17977_17991__$1);
            output.push(cljs.core.apply.call(null, f, cljs.core.map.call(null, function(seq__17977_17981, chunk__17978_17982, count__17979_17983, i__17980_17984, i_17997, seq__17977_17991__$1, temp__4092__auto___17990) {
              return function(p1__17972_SHARP_) {
                return cljs.core.nth.call(null, p1__17972_SHARP_, i_17997);
              };
            }(seq__17977_17981, chunk__17978_17982, count__17979_17983, i__17980_17984, i_17997, seq__17977_17991__$1, temp__4092__auto___17990), args)));
            var G__17998 = cljs.core.next.call(null, seq__17977_17991__$1);
            var G__17999 = null;
            var G__18000 = 0;
            var G__18001 = 0;
            seq__17977_17981 = G__17998;
            chunk__17978_17982 = G__17999;
            count__17979_17983 = G__18000;
            i__17980_17984 = G__18001;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_map = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_map__delegate.call(this, f, args);
  };
  js_map.cljs$lang$maxFixedArity = 1;
  js_map.cljs$lang$applyTo = function(arglist__18002) {
    var f = cljs.core.first(arglist__18002);
    var args = cljs.core.rest(arglist__18002);
    return js_map__delegate(f, args);
  };
  js_map.cljs$core$IFn$_invoke$arity$variadic = js_map__delegate;
  return js_map;
}();
purnam.native$.js_mapcat = function() {
  var js_mapcat__delegate = function(f, args) {
    var output = [];
    var len = cljs.core.apply.call(null, cljs.core.min, cljs.core.map.call(null, function(output) {
      return function(ar) {
        return cljs.core.count.call(null, ar);
      };
    }(output), args));
    var i = 0;
    var output__$1 = output;
    while (true) {
      if (i < len) {
        var res = cljs.core.apply.call(null, f, cljs.core.map.call(null, function(i, output__$1) {
          return function(p1__18003_SHARP_) {
            return cljs.core.nth.call(null, p1__18003_SHARP_, i);
          };
        }(i, output__$1), args));
        var G__18004 = i + 1;
        var G__18005 = output__$1.concat(res);
        i = G__18004;
        output__$1 = G__18005;
        continue;
      } else {
        return output__$1;
      }
      break;
    }
  };
  var js_mapcat = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return js_mapcat__delegate.call(this, f, args);
  };
  js_mapcat.cljs$lang$maxFixedArity = 1;
  js_mapcat.cljs$lang$applyTo = function(arglist__18006) {
    var f = cljs.core.first(arglist__18006);
    var args = cljs.core.rest(arglist__18006);
    return js_mapcat__delegate(f, args);
  };
  js_mapcat.cljs$core$IFn$_invoke$arity$variadic = js_mapcat__delegate;
  return js_mapcat;
}();
purnam.native$.js_concat = function() {
  var js_concat__delegate = function(args) {
    var output = [];
    var seq__18019_18031 = cljs.core.seq.call(null, args);
    var chunk__18024_18032 = null;
    var count__18025_18033 = 0;
    var i__18026_18034 = 0;
    while (true) {
      if (i__18026_18034 < count__18025_18033) {
        var ar_18035 = cljs.core._nth.call(null, chunk__18024_18032, i__18026_18034);
        var seq__18027_18036 = cljs.core.seq.call(null, ar_18035);
        var chunk__18028_18037 = null;
        var count__18029_18038 = 0;
        var i__18030_18039 = 0;
        while (true) {
          if (i__18030_18039 < count__18029_18038) {
            var v_18040 = cljs.core._nth.call(null, chunk__18028_18037, i__18030_18039);
            output.push(v_18040);
            var G__18041 = seq__18027_18036;
            var G__18042 = chunk__18028_18037;
            var G__18043 = count__18029_18038;
            var G__18044 = i__18030_18039 + 1;
            seq__18027_18036 = G__18041;
            chunk__18028_18037 = G__18042;
            count__18029_18038 = G__18043;
            i__18030_18039 = G__18044;
            continue;
          } else {
            var temp__4092__auto___18045 = cljs.core.seq.call(null, seq__18027_18036);
            if (temp__4092__auto___18045) {
              var seq__18027_18046__$1 = temp__4092__auto___18045;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__18027_18046__$1)) {
                var c__4142__auto___18047 = cljs.core.chunk_first.call(null, seq__18027_18046__$1);
                var G__18048 = cljs.core.chunk_rest.call(null, seq__18027_18046__$1);
                var G__18049 = c__4142__auto___18047;
                var G__18050 = cljs.core.count.call(null, c__4142__auto___18047);
                var G__18051 = 0;
                seq__18027_18036 = G__18048;
                chunk__18028_18037 = G__18049;
                count__18029_18038 = G__18050;
                i__18030_18039 = G__18051;
                continue;
              } else {
                var v_18052 = cljs.core.first.call(null, seq__18027_18046__$1);
                output.push(v_18052);
                var G__18053 = cljs.core.next.call(null, seq__18027_18046__$1);
                var G__18054 = null;
                var G__18055 = 0;
                var G__18056 = 0;
                seq__18027_18036 = G__18053;
                chunk__18028_18037 = G__18054;
                count__18029_18038 = G__18055;
                i__18030_18039 = G__18056;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__18057 = seq__18019_18031;
        var G__18058 = chunk__18024_18032;
        var G__18059 = count__18025_18033;
        var G__18060 = i__18026_18034 + 1;
        seq__18019_18031 = G__18057;
        chunk__18024_18032 = G__18058;
        count__18025_18033 = G__18059;
        i__18026_18034 = G__18060;
        continue;
      } else {
        var temp__4092__auto___18061 = cljs.core.seq.call(null, seq__18019_18031);
        if (temp__4092__auto___18061) {
          var seq__18019_18062__$1 = temp__4092__auto___18061;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18019_18062__$1)) {
            var c__4142__auto___18063 = cljs.core.chunk_first.call(null, seq__18019_18062__$1);
            var G__18064 = cljs.core.chunk_rest.call(null, seq__18019_18062__$1);
            var G__18065 = c__4142__auto___18063;
            var G__18066 = cljs.core.count.call(null, c__4142__auto___18063);
            var G__18067 = 0;
            seq__18019_18031 = G__18064;
            chunk__18024_18032 = G__18065;
            count__18025_18033 = G__18066;
            i__18026_18034 = G__18067;
            continue;
          } else {
            var ar_18068 = cljs.core.first.call(null, seq__18019_18062__$1);
            var seq__18020_18069 = cljs.core.seq.call(null, ar_18068);
            var chunk__18021_18070 = null;
            var count__18022_18071 = 0;
            var i__18023_18072 = 0;
            while (true) {
              if (i__18023_18072 < count__18022_18071) {
                var v_18073 = cljs.core._nth.call(null, chunk__18021_18070, i__18023_18072);
                output.push(v_18073);
                var G__18074 = seq__18020_18069;
                var G__18075 = chunk__18021_18070;
                var G__18076 = count__18022_18071;
                var G__18077 = i__18023_18072 + 1;
                seq__18020_18069 = G__18074;
                chunk__18021_18070 = G__18075;
                count__18022_18071 = G__18076;
                i__18023_18072 = G__18077;
                continue;
              } else {
                var temp__4092__auto___18078__$1 = cljs.core.seq.call(null, seq__18020_18069);
                if (temp__4092__auto___18078__$1) {
                  var seq__18020_18079__$1 = temp__4092__auto___18078__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__18020_18079__$1)) {
                    var c__4142__auto___18080 = cljs.core.chunk_first.call(null, seq__18020_18079__$1);
                    var G__18081 = cljs.core.chunk_rest.call(null, seq__18020_18079__$1);
                    var G__18082 = c__4142__auto___18080;
                    var G__18083 = cljs.core.count.call(null, c__4142__auto___18080);
                    var G__18084 = 0;
                    seq__18020_18069 = G__18081;
                    chunk__18021_18070 = G__18082;
                    count__18022_18071 = G__18083;
                    i__18023_18072 = G__18084;
                    continue;
                  } else {
                    var v_18085 = cljs.core.first.call(null, seq__18020_18079__$1);
                    output.push(v_18085);
                    var G__18086 = cljs.core.next.call(null, seq__18020_18079__$1);
                    var G__18087 = null;
                    var G__18088 = 0;
                    var G__18089 = 0;
                    seq__18020_18069 = G__18086;
                    chunk__18021_18070 = G__18087;
                    count__18022_18071 = G__18088;
                    i__18023_18072 = G__18089;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__18090 = cljs.core.next.call(null, seq__18019_18062__$1);
            var G__18091 = null;
            var G__18092 = 0;
            var G__18093 = 0;
            seq__18019_18031 = G__18090;
            chunk__18024_18032 = G__18091;
            count__18025_18033 = G__18092;
            i__18026_18034 = G__18093;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return output;
  };
  var js_concat = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return js_concat__delegate.call(this, args);
  };
  js_concat.cljs$lang$maxFixedArity = 0;
  js_concat.cljs$lang$applyTo = function(arglist__18094) {
    var args = cljs.core.seq(arglist__18094);
    return js_concat__delegate(args);
  };
  js_concat.cljs$core$IFn$_invoke$arity$variadic = js_concat__delegate;
  return js_concat;
}();
purnam.native$.js_LT__ = function js_LT__(obj) {
  return cljs.core.clj__GT_js.call(null, obj);
};
purnam.native$.log = function() {
  var log = null;
  var log__1 = function(x) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x)].join(""), x);
    } else {
      console.log([cljs.core.str(x)].join(""));
    }
    return x;
  };
  var log__2 = function(x, y) {
    if (cljs.core.coll_QMARK_.call(null, x)) {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""), y);
    } else {
      console.log([cljs.core.str(x), cljs.core.str(":")].join(""), [cljs.core.str(y)].join(""));
    }
    return y;
  };
  log = function(x, y) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, x);
      case 2:
        return log__2.call(this, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log;
}();
purnam.native$.augment_fn_string = function augment_fn_string(func) {
  if (typeof func === "string") {
    return function(x) {
      return purnam.native$.aget_in.call(null, x, clojure.string.split.call(null, func, /\./));
    };
  } else {
    return func;
  }
};
purnam.native$.check_fn = function() {
  var check_fn = null;
  var check_fn__1 = function(chk) {
    return function(x) {
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, x);
      } else {
        return cljs.core._EQ_.call(null, x, chk);
      }
    };
  };
  var check_fn__2 = function(func, chk) {
    return function(x) {
      var res = func.call(null, x);
      if (cljs.core.fn_QMARK_.call(null, chk)) {
        return chk.call(null, res);
      } else {
        return cljs.core._EQ_.call(null, res, chk);
      }
    };
  };
  check_fn = function(func, chk) {
    switch(arguments.length) {
      case 1:
        return check_fn__1.call(this, func);
      case 2:
        return check_fn__2.call(this, func, chk);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_fn.cljs$core$IFn$_invoke$arity$1 = check_fn__1;
  check_fn.cljs$core$IFn$_invoke$arity$2 = check_fn__2;
  return check_fn;
}();
goog.provide("chaperone.ng.core");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("purnam.native$");
goog.require("chaperone.core");
goog.require("chaperone.core");
chaperone.ng.core.chaperone_app = angular.module("chaperone.app", ["ngRoute"]);
chaperone.ng.core.chaperone_app_System = ["$location", function($location) {
  return chaperone.core.start_BANG_.call(null, chaperone.core.create_system.call(null, function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["host"];
    return fn_SHARP_.call(obj_SHARP_);
  }(), function() {
    var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
    var fn_SHARP_ = obj_SHARP_["port"];
    return fn_SHARP_.call(obj_SHARP_);
  }()));
}];
angular.module("chaperone.app").factory("System", chaperone.ng.core.chaperone_app_System);
angular.module("chaperone.app").config(["$routeProvider", function($routeProvider) {
  var G__14624 = $routeProvider;
  G__14624.when("/admin/users/add", function() {
    var G__14625 = function() {
      var obj14628 = {};
      return obj14628;
    }();
    G__14625["templateUrl"] = "/public/partials/admin/user/user-form.html";
    G__14625["controller"] = "AdminUserCtrl";
    return G__14625;
  }());
  G__14624.when("/admin/users/list", function() {
    var G__14629 = function() {
      var obj14632 = {};
      return obj14632;
    }();
    G__14629["templateUrl"] = "/public/partials/admin/user/list.html";
    G__14629["controller"] = "AdminUserCtrl";
    return G__14629;
  }());
  G__14624.otherwise(function() {
    var G__14633 = function() {
      var obj14636 = {};
      return obj14636;
    }();
    G__14633["templateUrl"] = "/public/partials/index.html";
    return G__14633;
  }());
  return G__14624;
}]);
goog.provide("chaperone.user");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("chaperone.crossover.user.User");
goog.require("cljs.core.async");
goog.require("chaperone.websocket");
goog.require("chaperone.websocket");
goog.require("chaperone.crossover.rpc");
goog.require("chaperone.crossover.rpc");
chaperone.user.save_user = function save_user(system, user) {
  var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "save", "save", 1017427183), user);
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  return chaperone.websocket.send_BANG_.call(null, web_socket, request);
};
chaperone.user.list_users = function list_users(system) {
  var request = chaperone.crossover.rpc.new_request.call(null, new cljs.core.Keyword(null, "user", "user", 1017503549), new cljs.core.Keyword(null, "list", "list", 1017226256), cljs.core.PersistentArrayMap.EMPTY);
  var web_socket = chaperone.websocket.sub_system.call(null, system);
  return chaperone.websocket.send_BANG_.call(null, web_socket, request);
};
goog.provide("chaperone.ng.admin.user");
goog.require("cljs.core");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("purnam.native$");
goog.require("cljs.core.async");
goog.require("chaperone.user");
goog.require("chaperone.user");
goog.require("chaperone.crossover.user");
goog.require("chaperone.crossover.user");
goog.require("chaperone.ng.core");
goog.require("chaperone.ng.core");
chaperone.ng.admin.user.load_user = function load_user(system, $scope) {
  var user = chaperone.crossover.user.new_user.call(null, "", "", "", "");
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null), cljs.core.clj__GT_js.call(null, user));
};
chaperone.ng.admin.user.chaperone_app_AdminUserCtrl = ["$scope", "$location", "System", function($scope, $location, System) {
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initUserForm"], null), function() {
    purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["title"], null), "Add");
    return chaperone.ng.admin.user.load_user.call(null, System, $scope);
  });
  purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["saveUser"], null), function() {
    var user = chaperone.crossover.user.map__GT_User.call(null, cljs.core.js__GT_clj.call(null, purnam.native$.aget_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["user"], null)), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true));
    var chan = chaperone.user.save_user.call(null, System, user);
    var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_14609) {
          var state_val_14610 = state_14609[1];
          if (state_val_14610 === 2) {
            var inst_14605 = state_14609[2];
            var inst_14606 = function() {
              var result = inst_14605;
              return function(result, inst_14605, state_val_14610) {
                return function() {
                  var obj_SHARP_ = purnam.native$.aget_in.call(null, $location, cljs.core.PersistentVector.EMPTY);
                  var fn_SHARP_ = obj_SHARP_["path"];
                  return fn_SHARP_.call(obj_SHARP_, "/admin/users/list");
                };
              }(result, inst_14605, state_val_14610);
            }();
            var inst_14607 = $scope.$apply(inst_14606);
            var state_14609__$1 = state_14609;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14609__$1, inst_14607);
          } else {
            if (state_val_14610 === 1) {
              var state_14609__$1 = state_14609;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14609__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_14612 = [null, null, null, null, null];
              statearr_14612[0] = state_machine__5396__auto__;
              statearr_14612[1] = 1;
              return statearr_14612;
            };
            var state_machine__5396__auto____1 = function(state_14609) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_14609);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_14609) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_14609);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_14613 = f__5409__auto__.call(null);
        statearr_14613[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
        return statearr_14613;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return c__5408__auto__;
  });
  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["initListUsers"], null), function() {
    var chan = chaperone.user.list_users.call(null, System);
    var c__5408__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__5409__auto__ = function() {
        var switch__5395__auto__ = function(state_14619) {
          var state_val_14620 = state_14619[1];
          if (state_val_14620 === 2) {
            var inst_14615 = state_14619[2];
            var inst_14616 = function() {
              var result = inst_14615;
              return function(result, inst_14615, state_val_14620) {
                return function() {
                  return purnam.native$.aset_in.call(null, $scope, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["userList"], null), cljs.core.clj__GT_js.call(null, (new cljs.core.Keyword(null, "data", "data", 1016980252)).cljs$core$IFn$_invoke$arity$1(result)));
                };
              }(result, inst_14615, state_val_14620);
            }();
            var inst_14617 = $scope.$apply(inst_14616);
            var state_14619__$1 = state_14619;
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14619__$1, inst_14617);
          } else {
            if (state_val_14620 === 1) {
              var state_14619__$1 = state_14619;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14619__$1, 2, chan);
            } else {
              return null;
            }
          }
        };
        return function(switch__5395__auto__) {
          return function() {
            var state_machine__5396__auto__ = null;
            var state_machine__5396__auto____0 = function() {
              var statearr_14622 = [null, null, null, null, null];
              statearr_14622[0] = state_machine__5396__auto__;
              statearr_14622[1] = 1;
              return statearr_14622;
            };
            var state_machine__5396__auto____1 = function(state_14619) {
              while (true) {
                var result__5397__auto__ = switch__5395__auto__.call(null, state_14619);
                if (cljs.core.keyword_identical_QMARK_.call(null, result__5397__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  continue;
                } else {
                  return result__5397__auto__;
                }
                break;
              }
            };
            state_machine__5396__auto__ = function(state_14619) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5396__auto____0.call(this);
                case 1:
                  return state_machine__5396__auto____1.call(this, state_14619);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5396__auto____0;
            state_machine__5396__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5396__auto____1;
            return state_machine__5396__auto__;
          }();
        }(switch__5395__auto__);
      }();
      var state__5410__auto__ = function() {
        var statearr_14623 = f__5409__auto__.call(null);
        statearr_14623[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5408__auto__;
        return statearr_14623;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5410__auto__);
    });
    return c__5408__auto__;
  });
}];
angular.module("chaperone.app").controller("AdminUserCtrl", chaperone.ng.admin.user.chaperone_app_AdminUserCtrl);

//# sourceMappingURL=main.js.map